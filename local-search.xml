<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>4-parsing</title>
    <link href="/2023/06/09/4-parsing/"/>
    <url>/2023/06/09/4-parsing/</url>
    
    <content type="html"><![CDATA[<p>    这个模块提供了通用的字符串解析（替换）接口，并封装了 <code>org.w3c.dom.Node</code> 和  <code>javax.xml.xpath.XPath</code>等</p><h4 id="TokenHandler"><a href="#TokenHandler" class="headerlink" title="TokenHandler"></a>TokenHandler</h4><p>    TokenHandler 是 提供了对匹配到的字符串进行处理的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TokenHandler</span> &#123;<br>  <span class="hljs-comment">// 处理content</span><br>  String <span class="hljs-title function_">handleToken</span><span class="hljs-params">(String content)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="GenericTokenParser"><a href="#GenericTokenParser" class="headerlink" title="GenericTokenParser"></a>GenericTokenParser</h4><p>    通用记号解析器，用于处理#{}和${}参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericTokenParser</span> &#123;<br>  <span class="hljs-comment">// 开始标记和结束标记</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String openToken;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String closeToken; <br><br>  <span class="hljs-comment">// 记号处理器</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> TokenHandler handler; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">GenericTokenParser</span><span class="hljs-params">(String openToken, String closeToken, TokenHandler handler)</span> &#123;<br>    <span class="hljs-built_in">this</span>.openToken = openToken;<br>    <span class="hljs-built_in">this</span>.closeToken = closeToken;<br>    <span class="hljs-built_in">this</span>.handler = handler;<br>  &#125; <br><br>  <span class="hljs-comment">// 这里是自己实现了一个简单的正则匹配</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">parse</span><span class="hljs-params">(String text)</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-keyword">if</span> (text != <span class="hljs-literal">null</span> &amp;&amp; text.length() &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-type">char</span>[] src = text.toCharArray();<br>      <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> text.indexOf(openToken, offset);<br>      <span class="hljs-comment">// #&#123;favouriteSection,jdbcType=VARCHAR&#125;</span><br>      <span class="hljs-comment">// 这里是循环解析参数，参考GenericTokenParserTest,</span><br>      <span class="hljs-comment">// 比如可以解析$&#123;first_name&#125; $&#123;initial&#125; $&#123;last_name&#125; reporting.</span><br>      <span class="hljs-comment">// 这样的字符串,里面有3个 $&#123;&#125;</span><br>      <span class="hljs-keyword">while</span> (start &gt; -<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-comment">// 判断一下 $&#123;(openToken) 前面是否是反斜杠，这个逻辑在老版的mybatis中（如3.1.0）</span><br>        <span class="hljs-comment">// 是没有的</span><br>        <span class="hljs-comment">// 这里相当于转义，openToken当成一般字符处理</span><br>        <span class="hljs-keyword">if</span> (start &gt; <span class="hljs-number">0</span> &amp;&amp; src[start - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;\\&#x27;</span>) &#123;<br>          <span class="hljs-comment">// the variable is escaped. remove the backslash.</span><br>        <span class="hljs-comment">// 新版已经没有调用substring了，改为调用如下的offset方式，提高了效率</span><br>          <span class="hljs-comment">// issue #760</span><br>          builder.append(src, offset, start - offset - <span class="hljs-number">1</span>).append(openToken);<br>          offset = start + openToken.length();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> text.indexOf(closeToken, start);<br>          <span class="hljs-comment">// openToken没有对应的closeToken，也当成普通字符处理</span><br>          <span class="hljs-keyword">if</span> (end == -<span class="hljs-number">1</span>) &#123;<br>            builder.append(src, offset, src.length - offset);<br>            offset = src.length;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            builder.append(src, offset, start - offset);<br>            offset = start + openToken.length();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(src, offset, end - offset);<br>            <span class="hljs-comment">// 得到一对大括号里的字符串后，调用handler.handleToken,比如替换变量这种功能</span><br>            builder.append(handler.handleToken(content));<br>            offset = end + closeToken.length();<br>          &#125;<br>        &#125;<br>        <span class="hljs-comment">// 获取下一个openToken的下标</span><br>        start = text.indexOf(openToken, offset);<br>      &#125;<br>      <span class="hljs-comment">// 处理剩下的字符</span><br>      <span class="hljs-keyword">if</span> (offset &lt; src.length) &#123;<br>        builder.append(src, offset, src.length - offset);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> builder.toString();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="PropertyParser"><a href="#PropertyParser" class="headerlink" title="PropertyParser"></a>PropertyParser</h4><p>     实现了一个根据Properties中的key和value替换 ${}$ ${}$包裹的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PropertyParser</span> &#123; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">PropertyParser</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// Prevent Instantiation</span><br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">parse</span><span class="hljs-params">(String string, Properties variables)</span> &#123;<br>    <span class="hljs-type">VariableTokenHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableTokenHandler</span>(variables);<br>    <span class="hljs-type">GenericTokenParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericTokenParser</span>(<span class="hljs-string">&quot;$&#123;&quot;</span>, <span class="hljs-string">&quot;&#125;&quot;</span>, handler);<br>    <span class="hljs-keyword">return</span> parser.parse(string);<br>  &#125; <br><br>  <span class="hljs-comment">// 用相应的value替换key</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableTokenHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TokenHandler</span> &#123;<br>    <span class="hljs-keyword">private</span> Properties variables;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">VariableTokenHandler</span><span class="hljs-params">(Properties variables)</span> &#123;<br>      <span class="hljs-built_in">this</span>.variables = variables;<br>    &#125; <br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handleToken</span><span class="hljs-params">(String content)</span> &#123;<br>      <span class="hljs-keyword">if</span> (variables != <span class="hljs-literal">null</span> &amp;&amp; variables.containsKey(content)) &#123;<br>        <span class="hljs-keyword">return</span> variables.getProperty(content);<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;$&#123;&quot;</span> + content + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="XPathParser"><a href="#XPathParser" class="headerlink" title="XPathParser"></a>XPathParser</h4><p>      XPath解析器，用的都是JDK的类包,封装了一下，使得使用起来更方便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XPathParser</span> &#123; <br>  <span class="hljs-keyword">private</span> Document document;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> validation;<br>  <span class="hljs-keyword">private</span> EntityResolver entityResolver;<br>  <span class="hljs-keyword">private</span> Properties variables;<br>  <span class="hljs-keyword">private</span> XPath xpath; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commonConstructor</span><span class="hljs-params">(<span class="hljs-type">boolean</span> validation, Properties variables, EntityResolver entityResolver)</span> &#123;<br>    <span class="hljs-built_in">this</span>.validation = validation;<br>    <span class="hljs-built_in">this</span>.entityResolver = entityResolver;<br>    <span class="hljs-built_in">this</span>.variables = variables;<br><span class="hljs-comment">// 共通构造函数，除了把参数都设置到实例变量里面去以外，还初始化了XPath</span><br>    <span class="hljs-type">XPathFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> XPathFactory.newInstance();<br>    <span class="hljs-built_in">this</span>.xpath = factory.newXPath();<br>  &#125; <br><br>  <span class="hljs-comment">// 一些构造函数,全部调用commonConstructor以及createDocument</span><br>  <span class="hljs-comment">// 1~4,默认不需要验证</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(String xml)</span> &#123;<br>    commonConstructor(<span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">this</span>.document = createDocument(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(xml)));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(Reader reader)</span> &#123;<br>    commonConstructor(<span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">this</span>.document = createDocument(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(reader));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(InputStream inputStream)</span> &#123;<br>    commonConstructor(<span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">this</span>.document = createDocument(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(inputStream));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(Document document)</span> &#123;<br>    commonConstructor(<span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">this</span>.document = document;<br>  &#125; <br><br>  <span class="hljs-comment">// 5~8,传入是否需要验证参数</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(String xml, <span class="hljs-type">boolean</span> validation)</span> &#123;<br>    commonConstructor(validation, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">this</span>.document = createDocument(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(xml)));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(Reader reader, <span class="hljs-type">boolean</span> validation)</span> &#123;<br>    commonConstructor(validation, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">this</span>.document = createDocument(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(reader));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(InputStream inputStream, <span class="hljs-type">boolean</span> validation)</span> &#123;<br>    commonConstructor(validation, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">this</span>.document = createDocument(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(inputStream));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(Document document, <span class="hljs-type">boolean</span> validation)</span> &#123;<br>    commonConstructor(validation, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">this</span>.document = document;<br>  &#125; <br><br>  <span class="hljs-comment">// 9~12,传入是否需要验证参数,Properties</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(String xml, <span class="hljs-type">boolean</span> validation, Properties variables)</span> &#123;<br>    commonConstructor(validation, variables, <span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">this</span>.document = createDocument(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(xml)));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(Reader reader, <span class="hljs-type">boolean</span> validation, Properties variables)</span> &#123;<br>    commonConstructor(validation, variables, <span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">this</span>.document = createDocument(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(reader));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(InputStream inputStream, <span class="hljs-type">boolean</span> validation, Properties variables)</span> &#123;<br>    commonConstructor(validation, variables, <span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">this</span>.document = createDocument(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(inputStream));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(Document document, <span class="hljs-type">boolean</span> validation, Properties variables)</span> &#123;<br>    commonConstructor(validation, variables, <span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">this</span>.document = document;<br>  &#125; <br><br>  <span class="hljs-comment">// 13~16,传入是否需要验证参数,Properties,EntityResolver</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(String xml, <span class="hljs-type">boolean</span> validation, Properties variables, EntityResolver entityResolver)</span> &#123;<br>    commonConstructor(validation, variables, entityResolver);<br>    <span class="hljs-built_in">this</span>.document = createDocument(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(xml)));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(Reader reader, <span class="hljs-type">boolean</span> validation, Properties variables, EntityResolver entityResolver)</span> &#123;<br>    commonConstructor(validation, variables, entityResolver);<br>    <span class="hljs-built_in">this</span>.document = createDocument(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(reader));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(InputStream inputStream, <span class="hljs-type">boolean</span> validation, Properties variables, EntityResolver entityResolver)</span> &#123;<br>    commonConstructor(validation, variables, entityResolver);<br>    <span class="hljs-built_in">this</span>.document = createDocument(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(inputStream));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(Document document, <span class="hljs-type">boolean</span> validation, Properties variables, EntityResolver entityResolver)</span> &#123;<br>    commonConstructor(validation, variables, entityResolver);<br>    <span class="hljs-built_in">this</span>.document = document;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setVariables</span><span class="hljs-params">(Properties variables)</span> &#123;<br>    <span class="hljs-built_in">this</span>.variables = variables;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">evalString</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> evalString(document, expression);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">evalString</span><span class="hljs-params">(Object root, String expression)</span> &#123;<br><span class="hljs-comment">// 1.先用xpath解析</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (String) evaluate(expression, root, XPathConstants.STRING);<br><span class="hljs-comment">// 2.再调用PropertyParser去解析,也就是替换 $&#123;&#125; 这种格式的字符串</span><br>    result = PropertyParser.parse(result, variables);<br>    <span class="hljs-keyword">return</span> result;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">evalBoolean</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> evalBoolean(document, expression);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">evalBoolean</span><span class="hljs-params">(Object root, String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> (Boolean) evaluate(expression, root, XPathConstants.BOOLEAN);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Short <span class="hljs-title function_">evalShort</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> evalShort(document, expression);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Short <span class="hljs-title function_">evalShort</span><span class="hljs-params">(Object root, String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> Short.valueOf(evalString(root, expression));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">evalInteger</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> evalInteger(document, expression);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">evalInteger</span><span class="hljs-params">(Object root, String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> Integer.valueOf(evalString(root, expression));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">evalLong</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> evalLong(document, expression);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">evalLong</span><span class="hljs-params">(Object root, String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> Long.valueOf(evalString(root, expression));<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Float <span class="hljs-title function_">evalFloat</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> evalFloat(document, expression);<br>  &#125;<br><br>  <span class="hljs-comment">// ??这里有点疑问，为何Float用evalString,Double用evaluate XPathConstants.NUMBER</span><br>  <span class="hljs-keyword">public</span> Float <span class="hljs-title function_">evalFloat</span><span class="hljs-params">(Object root, String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> Float.valueOf(evalString(root, expression));<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">evalDouble</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> evalDouble(document, expression);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">evalDouble</span><span class="hljs-params">(Object root, String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> (Double) evaluate(expression, root, XPathConstants.NUMBER);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> List&lt;XNode&gt; <span class="hljs-title function_">evalNodes</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> evalNodes(document, expression);<br>  &#125; <br><br>  <span class="hljs-comment">// 返回节点List</span><br>  <span class="hljs-keyword">public</span> List&lt;XNode&gt; <span class="hljs-title function_">evalNodes</span><span class="hljs-params">(Object root, String expression)</span> &#123;<br>    List&lt;XNode&gt; xnodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;XNode&gt;();<br>    <span class="hljs-type">NodeList</span> <span class="hljs-variable">nodes</span> <span class="hljs-operator">=</span> (NodeList) evaluate(expression, root, XPathConstants.NODESET);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nodes.getLength(); i++) &#123;<br>      xnodes.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">XNode</span>(<span class="hljs-built_in">this</span>, nodes.item(i), variables));<br>    &#125;<br>    <span class="hljs-keyword">return</span> xnodes;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> XNode <span class="hljs-title function_">evalNode</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> evalNode(document, expression);<br>  &#125; <br><br>  <span class="hljs-comment">// 返回节点</span><br>  <span class="hljs-keyword">public</span> XNode <span class="hljs-title function_">evalNode</span><span class="hljs-params">(Object root, String expression)</span> &#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> (Node) evaluate(expression, root, XPathConstants.NODE);<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XNode</span>(<span class="hljs-built_in">this</span>, node, variables);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">evaluate</span><span class="hljs-params">(String expression, Object root, QName returnType)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 最终合流到这儿，直接调用XPath.evaluate</span><br>      <span class="hljs-keyword">return</span> xpath.evaluate(expression, root, returnType);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Error evaluating XPath.  Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Document <span class="hljs-title function_">createDocument</span><span class="hljs-params">(InputSource inputSource)</span> &#123;<br>    <span class="hljs-comment">// important: this must only be called AFTER common constructor</span><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 这个是DOM解析方式</span><br>      <span class="hljs-type">DocumentBuilderFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> DocumentBuilderFactory.newInstance();<br>      factory.setValidating(validation);<br><br>      <span class="hljs-comment">// 名称空间</span><br>      factory.setNamespaceAware(<span class="hljs-literal">false</span>);<br>      <span class="hljs-comment">// 忽略注释</span><br>      factory.setIgnoringComments(<span class="hljs-literal">true</span>);<br>      <span class="hljs-comment">// 忽略空白</span><br>      factory.setIgnoringElementContentWhitespace(<span class="hljs-literal">false</span>);<br>      <span class="hljs-comment">// 把 CDATA 节点转换为 Text 节点</span><br>      factory.setCoalescing(<span class="hljs-literal">false</span>);<br>      <span class="hljs-comment">// 扩展实体引用</span><br>      factory.setExpandEntityReferences(<span class="hljs-literal">true</span>);<br><br>      <span class="hljs-type">DocumentBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> factory.newDocumentBuilder();<br>      <span class="hljs-comment">// 需要注意的就是定义了EntityResolver(XMLMapperEntityResolver)，这样不用联网去获取DTD，</span><br>      <span class="hljs-comment">// 将DTD放在org\apache\ibatis\builder\xml\mybatis-3-config.dtd,来达到验证xml合法性的目的</span><br>      builder.setEntityResolver(entityResolver);<br>      builder.setErrorHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorHandler</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">(SAXParseException exception)</span> <span class="hljs-keyword">throws</span> SAXException &#123;<br>          <span class="hljs-keyword">throw</span> exception;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fatalError</span><span class="hljs-params">(SAXParseException exception)</span> <span class="hljs-keyword">throws</span> SAXException &#123;<br>          <span class="hljs-keyword">throw</span> exception;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">warning</span><span class="hljs-params">(SAXParseException exception)</span> <span class="hljs-keyword">throws</span> SAXException &#123;<br>        &#125;<br>      &#125;);<br>      <span class="hljs-keyword">return</span> builder.parse(inputSource);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Error creating document instance.  Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="XNode"><a href="#XNode" class="headerlink" title="XNode"></a>XNode</h4><p>    对<code>org.w3c.dom.Node</code>的包装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XNode</span> &#123; <br>  <span class="hljs-comment">// org.w3c.dom.Node</span><br>  <span class="hljs-keyword">private</span> Node node; <br><br>  <span class="hljs-comment">// 以下都是预先把信息都解析好，放到map等数据结构中（内存中）</span><br>  <span class="hljs-keyword">private</span> String name;<br>  <span class="hljs-keyword">private</span> String body;<br>  <span class="hljs-keyword">private</span> Properties attributes;<br>  <span class="hljs-keyword">private</span> Properties variables;<br>  <span class="hljs-comment">// XPathParser方便xpath解析</span><br>  <span class="hljs-keyword">private</span> XPathParser xpathParser; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XNode</span><span class="hljs-params">(XPathParser xpathParser, Node node, Properties variables)</span> &#123;<br>    <span class="hljs-built_in">this</span>.xpathParser = xpathParser;<br>    <span class="hljs-built_in">this</span>.node = node;<br>    <span class="hljs-built_in">this</span>.name = node.getNodeName();<br>    <span class="hljs-built_in">this</span>.variables = variables;<br>    <span class="hljs-built_in">this</span>.attributes = parseAttributes(node);<br>    <span class="hljs-built_in">this</span>.body = parseBody(node);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> XNode <span class="hljs-title function_">newXNode</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XNode</span>(xpathParser, node, variables);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> XNode <span class="hljs-title function_">getParent</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 调用Node.getParentNode,如果取到，包装一下，返回XNode</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> node.getParentNode();<br>    <span class="hljs-keyword">if</span> (parent == <span class="hljs-literal">null</span> || !(parent <span class="hljs-keyword">instanceof</span> Element)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XNode</span>(xpathParser, parent, variables);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 取得完全的path (a/b/c)</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPath</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 循环依次取得节点的父节点，然后倒序打印,也可以用一个堆栈实现</span><br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> node;<br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">null</span> &amp;&amp; current <span class="hljs-keyword">instanceof</span> Element) &#123;<br>      <span class="hljs-keyword">if</span> (current != node) &#123;<br>        builder.insert(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;/&quot;</span>);<br>      &#125;<br>      builder.insert(<span class="hljs-number">0</span>, current.getNodeName());<br>      current = current.getParentNode();<br>    &#125;<br>    <span class="hljs-keyword">return</span> builder.toString();<br>  &#125; <br><br>  <span class="hljs-comment">// 取得标示符   (&quot;resultMap[authorResult]&quot;)</span><br>  <span class="hljs-comment">// XMLMapperBuilder.resultMapElement调用</span><br>  <span class="hljs-comment">//&lt;resultMap id=&quot;authorResult&quot; type=&quot;Author&quot;&gt;</span><br>  <span class="hljs-comment">//  &lt;id property=&quot;id&quot; column=&quot;author_id&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;result property=&quot;username&quot; column=&quot;author_username&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;result property=&quot;password&quot; column=&quot;author_password&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;result property=&quot;email&quot; column=&quot;author_email&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;result property=&quot;bio&quot; column=&quot;author_bio&quot;/&gt;</span><br>  <span class="hljs-comment">//&lt;/resultMap&gt;</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getValueBasedIdentifier</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-type">XNode</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>;<br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">if</span> (current != <span class="hljs-built_in">this</span>) &#123;<br>        builder.insert(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;_&quot;</span>);<br>      &#125;<br>      <span class="hljs-comment">// 先拿id，拿不到再拿value,再拿不到拿property</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> current.getStringAttribute(<span class="hljs-string">&quot;id&quot;</span>,<br>          current.getStringAttribute(<span class="hljs-string">&quot;value&quot;</span>,<br>              current.getStringAttribute(<span class="hljs-string">&quot;property&quot;</span>, <span class="hljs-literal">null</span>)));<br>      <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>) &#123;<br>        value = value.replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>);<br>        builder.insert(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;]&quot;</span>);<br>        builder.insert(<span class="hljs-number">0</span>,<br>            value);<br>        builder.insert(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;[&quot;</span>);<br>      &#125;<br>      builder.insert(<span class="hljs-number">0</span>, current.getName());<br>      current = current.getParent();<br>    &#125;<br>    <span class="hljs-keyword">return</span> builder.toString();<br>  &#125; <br><br>  <span class="hljs-comment">// 以下方法都是委托给XPathParser实现</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">evalString</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> xpathParser.evalString(node, expression);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">evalBoolean</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> xpathParser.evalBoolean(node, expression);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">evalDouble</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> xpathParser.evalDouble(node, expression);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> List&lt;XNode&gt; <span class="hljs-title function_">evalNodes</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> xpathParser.evalNodes(node, expression);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> XNode <span class="hljs-title function_">evalNode</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> xpathParser.evalNode(node, expression);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getNode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> node;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> name;<br>  &#125; <br><br>  <span class="hljs-comment">// 以下是一些getBody的方法</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStringBody</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> getStringBody(<span class="hljs-literal">null</span>);<br>  &#125; <br><br>  <span class="hljs-comment">// body为空返回def，下面类似</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStringBody</span><span class="hljs-params">(String def)</span> &#123;<br>    <span class="hljs-keyword">if</span> (body == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> body;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">getBooleanBody</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> getBooleanBody(<span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">getBooleanBody</span><span class="hljs-params">(Boolean def)</span> &#123;<br>    <span class="hljs-keyword">if</span> (body == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> Boolean.valueOf(body);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getIntBody</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> getIntBody(<span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getIntBody</span><span class="hljs-params">(Integer def)</span> &#123;<br>    <span class="hljs-keyword">if</span> (body == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> Integer.parseInt(body);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getLongBody</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> getLongBody(<span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getLongBody</span><span class="hljs-params">(Long def)</span> &#123;<br>    <span class="hljs-keyword">if</span> (body == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> Long.parseLong(body);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">getDoubleBody</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> getDoubleBody(<span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">getDoubleBody</span><span class="hljs-params">(Double def)</span> &#123;<br>    <span class="hljs-keyword">if</span> (body == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> Double.parseDouble(body);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Float <span class="hljs-title function_">getFloatBody</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> getFloatBody(<span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Float <span class="hljs-title function_">getFloatBody</span><span class="hljs-params">(Float def)</span> &#123;<br>    <span class="hljs-keyword">if</span> (body == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> Float.parseFloat(body);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 以下是一些getAttribute的方法</span><br>  <span class="hljs-keyword">public</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Enum</span>&lt;T&gt;&gt; T <span class="hljs-title function_">getEnumAttribute</span><span class="hljs-params">(Class&lt;T&gt; enumType, String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> getEnumAttribute(enumType, name, <span class="hljs-literal">null</span>);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Enum</span>&lt;T&gt;&gt; T <span class="hljs-title function_">getEnumAttribute</span><span class="hljs-params">(Class&lt;T&gt; enumType, String name, T def)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> getStringAttribute(name);<br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> Enum.valueOf(enumType, value);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStringAttribute</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> getStringAttribute(name, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStringAttribute</span><span class="hljs-params">(String name, String def)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> attributes.getProperty(name);<br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> value;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">getBooleanAttribute</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> getBooleanAttribute(name, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">getBooleanAttribute</span><span class="hljs-params">(String name, Boolean def)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> attributes.getProperty(name);<br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> Boolean.valueOf(value);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getIntAttribute</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> getIntAttribute(name, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getIntAttribute</span><span class="hljs-params">(String name, Integer def)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> attributes.getProperty(name);<br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> Integer.parseInt(value);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getLongAttribute</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> getLongAttribute(name, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getLongAttribute</span><span class="hljs-params">(String name, Long def)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> attributes.getProperty(name);<br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> Long.parseLong(value);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">getDoubleAttribute</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> getDoubleAttribute(name, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">getDoubleAttribute</span><span class="hljs-params">(String name, Double def)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> attributes.getProperty(name);<br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> Double.parseDouble(value);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Float <span class="hljs-title function_">getFloatAttribute</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> getFloatAttribute(name, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Float <span class="hljs-title function_">getFloatAttribute</span><span class="hljs-params">(String name, Float def)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> attributes.getProperty(name);<br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> Float.parseFloat(value);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 得到孩子，原理是调用Node.getChildNodes</span><br>  <span class="hljs-keyword">public</span> List&lt;XNode&gt; <span class="hljs-title function_">getChildren</span><span class="hljs-params">()</span> &#123;<br>    List&lt;XNode&gt; children = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;XNode&gt;();<br>    <span class="hljs-type">NodeList</span> <span class="hljs-variable">nodeList</span> <span class="hljs-operator">=</span> node.getChildNodes();<br>    <span class="hljs-keyword">if</span> (nodeList != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, n = nodeList.getLength(); i &lt; n; i++) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> nodeList.item(i);<br>        <span class="hljs-keyword">if</span> (node.getNodeType() == Node.ELEMENT_NODE) &#123;<br>          children.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">XNode</span>(xpathParser, node, variables));<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> children;<br>  &#125; <br><br>  <span class="hljs-comment">// 得到孩子，返回Properties，从子节点中提取name和value作为属性</span><br>  <span class="hljs-keyword">public</span> Properties <span class="hljs-title function_">getChildrenAsProperties</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    <span class="hljs-keyword">for</span> (XNode child : getChildren()) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> child.getStringAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> child.getStringAttribute(<span class="hljs-string">&quot;value&quot;</span>);<br>      <span class="hljs-keyword">if</span> (name != <span class="hljs-literal">null</span> &amp;&amp; value != <span class="hljs-literal">null</span>) &#123;<br>        properties.setProperty(name, value);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> properties;<br>  &#125; <br><br>  <span class="hljs-comment">// 打印信息，为了调试用</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    builder.append(<span class="hljs-string">&quot;&lt;&quot;</span>);<br>    builder.append(name);<br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;Object, Object&gt; entry : attributes.entrySet()) &#123;<br>      builder.append(<span class="hljs-string">&quot; &quot;</span>);<br>      builder.append(entry.getKey());<br>      builder.append(<span class="hljs-string">&quot;=\&quot;&quot;</span>);<br>      builder.append(entry.getValue());<br>      builder.append(<span class="hljs-string">&quot;\&quot;&quot;</span>);<br>    &#125;<br>    List&lt;XNode&gt; children = getChildren();<br>    <span class="hljs-keyword">if</span> (!children.isEmpty()) &#123;<br>      builder.append(<span class="hljs-string">&quot;&gt;\n&quot;</span>);<br>      <span class="hljs-keyword">for</span> (XNode node : children) &#123;<br>        <span class="hljs-comment">//递归取得孩子的toString</span><br>        builder.append(node.toString());<br>      &#125;<br>      builder.append(<span class="hljs-string">&quot;&lt;/&quot;</span>);<br>      builder.append(name);<br>      builder.append(<span class="hljs-string">&quot;&gt;&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (body != <span class="hljs-literal">null</span>) &#123;<br>      builder.append(<span class="hljs-string">&quot;&gt;&quot;</span>);<br>      builder.append(body);<br>      builder.append(<span class="hljs-string">&quot;&lt;/&quot;</span>);<br>      builder.append(name);<br>      builder.append(<span class="hljs-string">&quot;&gt;&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      builder.append(<span class="hljs-string">&quot;/&gt;&quot;</span>);<br>    &#125;<br>    builder.append(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> builder.toString();<br>  &#125; <br><br>  <span class="hljs-comment">// 以下2个方法在构造时就解析</span><br>  <span class="hljs-keyword">private</span> Properties <span class="hljs-title function_">parseAttributes</span><span class="hljs-params">(Node n)</span> &#123;<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">attributes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    <span class="hljs-type">NamedNodeMap</span> <span class="hljs-variable">attributeNodes</span> <span class="hljs-operator">=</span> n.getAttributes();<br>    <span class="hljs-keyword">if</span> (attributeNodes != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; attributeNodes.getLength(); i++) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">attribute</span> <span class="hljs-operator">=</span> attributeNodes.item(i);<br>        <span class="hljs-comment">// 解析属性节点value中的 $&#123;content&#125; 内容</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> PropertyParser.parse(attribute.getNodeValue(), variables);<br>        attributes.put(attribute.getNodeName(), value);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> attributes;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> String <span class="hljs-title function_">parseBody</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-comment">// 取不到body，循环取孩子的body，只要取到第一个，立即返回</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> getBodyData(node);<br>    <span class="hljs-keyword">if</span> (data == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">NodeList</span> <span class="hljs-variable">children</span> <span class="hljs-operator">=</span> node.getChildNodes();<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; children.getLength(); i++) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> children.item(i);<br>        data = getBodyData(child);<br>        <span class="hljs-keyword">if</span> (data != <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> data;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getBodyData</span><span class="hljs-params">(Node child)</span> &#123;<br>    <span class="hljs-keyword">if</span> (child.getNodeType() == Node.CDATA_SECTION_NODE<br>        || child.getNodeType() == Node.TEXT_NODE) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> ((CharacterData) child).getData();<br>      data = PropertyParser.parse(data, variables);<br>      <span class="hljs-keyword">return</span> data;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ReentrantReadWriteLock源码解析</title>
    <link href="/2023/06/03/ReentrantReadWriteLock%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/06/03/ReentrantReadWriteLock%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h4 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h4><p>    这篇博客我们来阅读 ReentrantReadWriteLock 的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReentrantReadWriteLock</span><br>        <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ReadWriteLock</span>, java.io.Serializable &#123; <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">6992448646407690164L</span>;<br>   <br>     <span class="hljs-comment">/** Inner class providing readlock */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReentrantReadWriteLock.ReadLock readerLock;<br>    <span class="hljs-comment">/** Inner class providing writelock */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReentrantReadWriteLock.WriteLock writerLock;<br><br>    <span class="hljs-comment">/** Performs all synchronization mechanics */</span><br>    <span class="hljs-keyword">final</span> Sync sync; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a new code ReentrantReadWriteLock with</span><br><span class="hljs-comment">     * default (nonfair) ordering properties.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantReadWriteLock</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 默认是非公平的</span><br>        <span class="hljs-built_in">this</span>(<span class="hljs-literal">false</span>);<br>    &#125; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a new ReentrantReadWriteLock with</span><br><span class="hljs-comment">     * the given fairness policy.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fair &#123;<span class="hljs-doctag">@code</span> true&#125; if this lock should use a fair ordering policy</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantReadWriteLock</span><span class="hljs-params">(<span class="hljs-type">boolean</span> fair)</span> &#123;<br>        sync = fair ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">FairSync</span>() : <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>();<br>        readerLock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReadLock</span>(<span class="hljs-built_in">this</span>);<br>        writerLock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WriteLock</span>(<span class="hljs-built_in">this</span>);<br>    &#125; <br><br>    <span class="hljs-comment">// 实现 ReadWriteLock 接口的方法 ，提供接口获取读锁的写锁</span><br>    <span class="hljs-keyword">public</span> ReentrantReadWriteLock.WriteLock <span class="hljs-title function_">writeLock</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> writerLock; &#125;<br>    <span class="hljs-keyword">public</span> ReentrantReadWriteLock.ReadLock  <span class="hljs-title function_">readLock</span><span class="hljs-params">()</span>  &#123; <span class="hljs-keyword">return</span> readerLock; &#125;<br><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123; <br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">6317671515068378041L</span>;<br>                <br>        <span class="hljs-comment">// 对读取和写入计数进行抽取的常量和函数</span><br>        <span class="hljs-comment">// 锁定state在逻辑上分为两个无符号short:</span><br>        <span class="hljs-comment">// state低16位表示独占（写）锁持有计数</span><br>        <span class="hljs-comment">// state高16位标识共享（读）锁持有计数</span><br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SHARED_SHIFT</span>   <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SHARED_UNIT</span>    <span class="hljs-operator">=</span> (<span class="hljs-number">1</span> &lt;&lt; SHARED_SHIFT);<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_COUNT</span>      <span class="hljs-operator">=</span> (<span class="hljs-number">1</span> &lt;&lt; SHARED_SHIFT) - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">EXCLUSIVE_MASK</span> <span class="hljs-operator">=</span> (<span class="hljs-number">1</span> &lt;&lt; SHARED_SHIFT) - <span class="hljs-number">1</span>; <br><br>        <span class="hljs-comment">/** Returns the number of shared holds represented in count. */</span><br>        <span class="hljs-comment">// c右移16位，获取高16位</span><br>        <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sharedCount</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span>    &#123; <span class="hljs-keyword">return</span> c &gt;&gt;&gt; SHARED_SHIFT; &#125;<br><br>        <span class="hljs-comment">/** Returns the number of exclusive holds represented in count. */</span><br>        <span class="hljs-comment">// 获取c的低16位</span><br>        <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">exclusiveCount</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span> &#123; <span class="hljs-keyword">return</span> c &amp; EXCLUSIVE_MASK; &#125; <br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * A counter for per-thread read hold counts.</span><br><span class="hljs-comment">         * Maintained as a ThreadLocal; cached in cachedHoldCounter.</span><br><span class="hljs-comment">         * 每个线程共享锁计数</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HoldCounter</span> &#123;<br>            <span class="hljs-type">int</span> count;          <span class="hljs-comment">// initially 0</span><br>            <span class="hljs-comment">// Use id, not reference, to avoid garbage retention </span><br>            <span class="hljs-comment">// 不持有线程引用，便于垃圾回收</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">tid</span> <span class="hljs-operator">=</span> LockSupport.getThreadId(Thread.currentThread());<br>        &#125; <br><br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadLocalHoldCounter</span><br>            <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ThreadLocal</span>&lt;HoldCounter&gt; &#123;<br>            <span class="hljs-keyword">public</span> HoldCounter <span class="hljs-title function_">initialValue</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HoldCounter</span>();<br>            &#125;<br>        &#125; <br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * The number of reentrant read locks held by current thread.</span><br><span class="hljs-comment">         * Initialized only in constructor and readObject.</span><br><span class="hljs-comment">         * Removed whenever a thread&#x27;s read hold count drops to 0. </span><br><span class="hljs-comment">         * 当前线程持有的可重入读锁的数量。</span><br><span class="hljs-comment">         * 仅在构造函数和readObject中初始化。每当线程的读保持计数下降到0时移除。</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> ThreadLocalHoldCounter readHolds; <br><br>        <span class="hljs-comment">// 成功获取readLock的最后一个线程的保持计数。</span><br>        <span class="hljs-comment">// 在下一个要释放的线程是最后一个获取的线程的常见情况下，</span><br>        <span class="hljs-comment">// 可以节省ThreadLocal查找</span><br>        <span class="hljs-comment">// 这是非volatile的，因为它只是用作一种启发式步骤，对于要缓存的线程很好</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> HoldCounter cachedHoldCounter;<br><br>        <span class="hljs-comment">// firstReader是第一个获得读锁的线程</span><br>        <span class="hljs-comment">// 更准确地说，firstReader是上一次将共享计数从0更改为1的惟一线程，</span><br>        <span class="hljs-comment">// 并且从那时起就没有释放过读锁；如果没有这样的线程，则为null。</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> Thread firstReader;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> firstReaderHoldCount;<br><br>        Sync() &#123;<br>            readHolds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocalHoldCounter</span>(); <br>            <span class="hljs-comment">// state 是 volatile 变量，保证readHolds的可见性</span><br>            setState(getState()); <span class="hljs-comment">// ensures visibility of readHolds</span><br>        &#125; <br><br>        <span class="hljs-comment">// 获取和释放对公平锁和非公平锁使用相同的代码，</span><br>        <span class="hljs-comment">// 但是在队列非空时，它们 是否/如何 允许入队方面有所不同。</span><br><br><br>        <span class="hljs-comment">// 如果当前线程在尝试获取读锁或者在其他有资格获取读锁的情况下</span><br>        <span class="hljs-comment">// 由于超越其他等待线程而应该被阻塞，则返回true</span><br>        <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">readerShouldBlock</span><span class="hljs-params">()</span>;<br><br>        <span class="hljs-comment">// 和上面方法相似</span><br>        <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">writerShouldBlock</span><span class="hljs-params">()</span>; <br><br>        <span class="hljs-comment">// 注意tryRelease和tryAcquire可以被条件调用。</span><br>        <span class="hljs-comment">// 因此，它们的参数可能包含读取和写入持有量，</span><br>        <span class="hljs-comment">// 这些持有量都是在条件等待期间释放的，并在tryAcquire中重新建立。</span><br>        <span class="hljs-meta">@ReservedStackAccess</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;<br>            <span class="hljs-keyword">if</span> (!isHeldExclusively())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> getState() - releases;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">free</span> <span class="hljs-operator">=</span> exclusiveCount(nextc) == <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (free)<br>                setExclusiveOwnerThread(<span class="hljs-literal">null</span>);<br>            setState(nextc);<br>            <span class="hljs-keyword">return</span> free;<br>        &#125; <br><br>        <span class="hljs-meta">@ReservedStackAccess</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123; <br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> exclusiveCount(c);<br>            <span class="hljs-keyword">if</span> (c != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// (Note: if c != 0 and w == 0 then shared count != 0) </span><br>                <span class="hljs-comment">// 读持有非0（正在读的时候其他线程不能获取锁来写？） </span><br>                <span class="hljs-comment">// 或者 锁被其他线程持有</span><br>                <span class="hljs-keyword">if</span> (w == <span class="hljs-number">0</span> || current != getExclusiveOwnerThread())<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-comment">// 当前线程持有锁，但是锁重入超过上限</span><br>                <span class="hljs-keyword">if</span> (w + exclusiveCount(acquires) &gt; MAX_COUNT)<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>                <span class="hljs-comment">// Reentrant acquire</span><br>                setState(c + acquires);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <br>            <span class="hljs-comment">// 非公平获取写锁应该被阻塞 或者 获取写锁失败</span><br>            <span class="hljs-keyword">if</span> (writerShouldBlock() ||<br>                !compareAndSetState(c, c + acquires))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            setExclusiveOwnerThread(current);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <br><br>        <span class="hljs-meta">@ReservedStackAccess</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> unused)</span> &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread(); <br>            <span class="hljs-comment">// 释放读锁的线程是第一个获取读锁的线程</span><br>            <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>                <span class="hljs-comment">// assert firstReaderHoldCount &gt; 0;</span><br>                <span class="hljs-keyword">if</span> (firstReaderHoldCount == <span class="hljs-number">1</span>)<br>                    firstReader = <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">else</span><br>                    firstReaderHoldCount--;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 其他线程来获取读锁</span><br>                <span class="hljs-type">HoldCounter</span> <span class="hljs-variable">rh</span> <span class="hljs-operator">=</span> cachedHoldCounter;<br>                <span class="hljs-comment">// 判断缓存的 HoldCounter 是否是当前线程的 HoldCounter </span><br>                <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span> ||<br>                    rh.tid != LockSupport.getThreadId(current))<br>                    rh = readHolds.get();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> rh.count;<br>                <span class="hljs-keyword">if</span> (count &lt;= <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-comment">// 线程取消持有读锁</span><br>                    readHolds.remove();<br>                    <span class="hljs-keyword">if</span> (count &lt;= <span class="hljs-number">0</span>)<br>                        <span class="hljs-keyword">throw</span> unmatchedUnlockException();<br>                &#125;<br>                --rh.count;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-comment">// 读锁持有量减1</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c - SHARED_UNIT;<br>                <span class="hljs-keyword">if</span> (compareAndSetState(c, nextc))<br>                    <span class="hljs-comment">// 释放读锁对读取者没有影响，</span><br>                    <span class="hljs-comment">// 但是如果读锁和写锁现在都是可获取的，</span><br>                    <span class="hljs-comment">// 它可能使得等待的写入者竞争写锁。</span><br>                    <span class="hljs-keyword">return</span> nextc == <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125; <br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> IllegalMonitorStateException <span class="hljs-title function_">unmatchedUnlockException</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>(<br>                <span class="hljs-string">&quot;attempt to unlock read lock, not locked by current thread&quot;</span>);<br>        &#125; <br><br>        <span class="hljs-meta">@ReservedStackAccess</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> unused)</span> &#123; <br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState(); <br>            <span class="hljs-comment">// 写锁被其他线程持有，获取读锁失败</span><br>            <span class="hljs-keyword">if</span> (exclusiveCount(c) != <span class="hljs-number">0</span> &amp;&amp;<br>                getExclusiveOwnerThread() != current)<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> sharedCount(c);<br>            <span class="hljs-keyword">if</span> (!readerShouldBlock() &amp;&amp;<br>                r &lt; MAX_COUNT &amp;&amp;<br>                compareAndSetState(c, c + SHARED_UNIT)) &#123; <br>                <span class="hljs-comment">// 读持有计数为0即还没有线程持有读锁</span><br>                <span class="hljs-keyword">if</span> (r == <span class="hljs-number">0</span>) &#123;<br>                    firstReader = current;<br>                    firstReaderHoldCount = <span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>                    firstReaderHoldCount++;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-type">HoldCounter</span> <span class="hljs-variable">rh</span> <span class="hljs-operator">=</span> cachedHoldCounter;<br>                    <span class="hljs-comment">// 如果缓存的 HoldCounter 不是当前线程持有的 HoldCounter </span><br>                    <span class="hljs-comment">// 从 readHolds 取 并设置 缓存的HoldCounter（cachedHoldCounter）</span><br>                    <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span> ||<br>                        rh.tid != LockSupport.getThreadId(current))<br>                        cachedHoldCounter = rh = readHolds.get();<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>) <span class="hljs-comment">// cachedHoldCounter是当前线程持有的HoldCounter</span><br>                        readHolds.set(rh);<br>                    rh.count++;<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> fullTryAcquireShared(current);<br>        &#125; <br><br>        <span class="hljs-comment">// 获取读锁的完整版本，处理CAS未命中和再次读取的情况，</span><br>        <span class="hljs-comment">// 而tryAcquireShared中没有处理。</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fullTryAcquireShared</span><span class="hljs-params">(Thread current)</span> &#123;<br>            <span class="hljs-type">HoldCounter</span> <span class="hljs-variable">rh</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-comment">// 这里的检查是考虑到并发情况下其他线程持有了写锁</span><br>                <span class="hljs-keyword">if</span> (exclusiveCount(c) != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (getExclusiveOwnerThread() != current)<br>                        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                    <span class="hljs-comment">// else we hold the exclusive lock; blocking here</span><br>                    <span class="hljs-comment">// would cause deadlock.</span><br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (readerShouldBlock()) &#123;<br>                    <span class="hljs-comment">// Make sure we&#x27;re not acquiring read lock reentrantly </span><br>                    <span class="hljs-comment">// 确保我们不是在再次获取读锁 </span><br>                    <span class="hljs-comment">// 即让其他线程先获取读锁</span><br>                    <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>                        <span class="hljs-comment">// assert firstReaderHoldCount &gt; 0;</span><br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span>) &#123;<br>                            rh = cachedHoldCounter;<br>                            <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span> ||<br>                                rh.tid != LockSupport.getThreadId(current)) &#123;<br>                                rh = readHolds.get();<br>                                <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)<br>                                    readHolds.remove();<br>                            &#125;<br>                        &#125; <br>                        <span class="hljs-comment">// 如果线程是第一次获取读锁，直接返回</span><br>                        <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)<br>                            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (sharedCount(c) == MAX_COUNT)<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>                <span class="hljs-keyword">if</span> (compareAndSetState(c, c + SHARED_UNIT)) &#123;<br>                    <span class="hljs-keyword">if</span> (sharedCount(c) == <span class="hljs-number">0</span>) &#123;<br>                        firstReader = current;<br>                        firstReaderHoldCount = <span class="hljs-number">1</span>;<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>                        firstReaderHoldCount++;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span>)<br>                            rh = cachedHoldCounter;<br>                        <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span> ||<br>                            rh.tid != LockSupport.getThreadId(current))<br>                            rh = readHolds.get();<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)<br>                            readHolds.set(rh);<br>                        rh.count++;<br>                        cachedHoldCounter = rh; <span class="hljs-comment">// cache for release</span><br>                    &#125;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125; <br><br>        <span class="hljs-comment">// 对写操作执行tryLock，在两种模式下都允许。</span><br>        <span class="hljs-comment">// 这实际上与tryAcquire相同，只是缺少对writerShouldBlock的调用。</span><br>        <span class="hljs-meta">@ReservedStackAccess</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryWriteLock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>            <span class="hljs-keyword">if</span> (c != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> exclusiveCount(c);<br>                <span class="hljs-keyword">if</span> (w == <span class="hljs-number">0</span> || current != getExclusiveOwnerThread())<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">if</span> (w == MAX_COUNT)<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!compareAndSetState(c, c + <span class="hljs-number">1</span>))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            setExclusiveOwnerThread(current);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <br><br>        <span class="hljs-comment">// 和tryWriteLock类似</span><br>        <span class="hljs-meta">@ReservedStackAccess</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReadLock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-keyword">if</span> (exclusiveCount(c) != <span class="hljs-number">0</span> &amp;&amp;<br>                    getExclusiveOwnerThread() != current)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> sharedCount(c);<br>                <span class="hljs-keyword">if</span> (r == MAX_COUNT)<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>                <span class="hljs-keyword">if</span> (compareAndSetState(c, c + SHARED_UNIT)) &#123;<br>                    <span class="hljs-keyword">if</span> (r == <span class="hljs-number">0</span>) &#123;<br>                        firstReader = current;<br>                        firstReaderHoldCount = <span class="hljs-number">1</span>;<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>                        firstReaderHoldCount++;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-type">HoldCounter</span> <span class="hljs-variable">rh</span> <span class="hljs-operator">=</span> cachedHoldCounter;<br>                        <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span> ||<br>                            rh.tid != LockSupport.getThreadId(current))<br>                            cachedHoldCounter = rh = readHolds.get();<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)<br>                            readHolds.set(rh);<br>                        rh.count++;<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125; <br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHeldExclusively</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">// While we must in general read state before owner,</span><br>            <span class="hljs-comment">// we don&#x27;t need to do so to check if current thread is owner</span><br>            <span class="hljs-keyword">return</span> getExclusiveOwnerThread() == Thread.currentThread();<br>        &#125; <br><br>        <span class="hljs-comment">// 下面是与外部类相关的方法</span><br><br>        <span class="hljs-keyword">final</span> ConditionObject <span class="hljs-title function_">newCondition</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionObject</span>();<br>        &#125; <br><br>        <span class="hljs-keyword">final</span> Thread <span class="hljs-title function_">getOwner</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">// Must read state before owner to ensure memory consistency</span><br>            <span class="hljs-keyword">return</span> ((exclusiveCount(getState()) == <span class="hljs-number">0</span>) ?<br>                    <span class="hljs-literal">null</span> :<br>                    getExclusiveOwnerThread());<br>        &#125; <br><br>        <span class="hljs-comment">// 获取读锁数量</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getReadLockCount</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> sharedCount(getState());<br>        &#125; <br><br>        <span class="hljs-comment">// 是否有线程持有写锁</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isWriteLocked</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> exclusiveCount(getState()) != <span class="hljs-number">0</span>;<br>        &#125; <br><br>        <span class="hljs-comment">// 获取当前线程的写锁持有量</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getWriteHoldCount</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> isHeldExclusively() ? exclusiveCount(getState()) : <span class="hljs-number">0</span>;<br>        &#125; <br><br>        <span class="hljs-comment">// 获取当前线程的读锁持有量</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getReadHoldCount</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (getReadLockCount() == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-keyword">if</span> (firstReader == current)<br>                <span class="hljs-keyword">return</span> firstReaderHoldCount;<br><br>            <span class="hljs-type">HoldCounter</span> <span class="hljs-variable">rh</span> <span class="hljs-operator">=</span> cachedHoldCounter;<br>            <span class="hljs-keyword">if</span> (rh != <span class="hljs-literal">null</span> &amp;&amp; rh.tid == LockSupport.getThreadId(current))<br>                <span class="hljs-keyword">return</span> rh.count;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> readHolds.get().count;<br>            <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>) readHolds.remove();<br>            <span class="hljs-keyword">return</span> count;<br>        &#125; <br><br>        <span class="hljs-comment">// 从流中重新构造实例(即反序列化)。</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>            <span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;<br>            s.defaultReadObject();<br>            readHolds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocalHoldCounter</span>();<br>            setState(<span class="hljs-number">0</span>); <span class="hljs-comment">// reset to unlocked state</span><br>        &#125;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> getState(); &#125;<br>    &#125; <br><br>    <span class="hljs-comment">// 同步器的非公平版本</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NonfairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">8159625535654395037L</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">writerShouldBlock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">// 竞争写锁总是能插队</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// writers can always barge</span><br>        &#125;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">readerShouldBlock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">/* As a heuristic to avoid indefinite writer starvation,</span><br><span class="hljs-comment">             * block if the thread that momentarily appears to be head</span><br><span class="hljs-comment">             * of queue, if one exists, is a waiting writer.  This is</span><br><span class="hljs-comment">             * only a probabilistic effect since a new reader will not</span><br><span class="hljs-comment">             * block if there is a waiting writer behind other enabled</span><br><span class="hljs-comment">             * readers that have not yet drained from the queue.</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-comment">// 如果CLH等待队列中的第一个节点是ExclusiveNode（即一个写入者）</span><br>            <span class="hljs-comment">// 则阻塞，避免写线程匮乏（效果不大）</span><br>            <span class="hljs-keyword">return</span> apparentlyFirstQueuedIsExclusive();<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-comment">// 同步器的公平版本</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">2274990926593161451L</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">writerShouldBlock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> hasQueuedPredecessors();<br>        &#125;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">readerShouldBlock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> hasQueuedPredecessors();<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Lock</span>, java.io.Serializable &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">5992448646407690164L</span>;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Sync sync; <br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-title function_">ReadLock</span><span class="hljs-params">(ReentrantReadWriteLock lock)</span> &#123;<br>            sync = lock.sync;<br>        &#125; <br><br>        <span class="hljs-comment">// 获取读锁</span><br>        <span class="hljs-comment">// 如果写锁没有被另一个线程持有，则获取读锁并立即返回。</span><br>        <span class="hljs-comment">// 如果写锁被另一个线程持有，则当前线程出于线程调度的目的被禁用，</span><br>        <span class="hljs-comment">// 并处于休眠状态，直到获得读锁。</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>            sync.acquireShared(<span class="hljs-number">1</span>);<br>        &#125; <br><br>        <span class="hljs-comment">// 在这个实现中，因为这个方法是一个显式的中断点，</span><br>        <span class="hljs-comment">// 所以优先响应中断，而不是正常的或可重入的锁获取。</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lockInterruptibly</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            sync.acquireSharedInterruptibly(<span class="hljs-number">1</span>);<br>        &#125; <br><br>        <span class="hljs-comment">// 仅当调用时另一个线程没有持有写锁时，才获取读锁</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> sync.tryReadLock();<br>        &#125; <br><br>        <span class="hljs-comment">// 带超时的lock</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, TimeUnit unit)</span><br>                <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            <span class="hljs-keyword">return</span> sync.tryAcquireSharedNanos(<span class="hljs-number">1</span>, unit.toNanos(timeout));<br>        &#125; <br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>            sync.releaseShared(<span class="hljs-number">1</span>);<br>        &#125; <br><br>        <span class="hljs-comment">// 抛出UnsupportedOperationException，因为读锁不支持条件。</span><br>        <span class="hljs-keyword">public</span> Condition <span class="hljs-title function_">newCondition</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>        &#125; <br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> sync.getReadLockCount();<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.toString() +<br>                <span class="hljs-string">&quot;[Read locks = &quot;</span> + r + <span class="hljs-string">&quot;]&quot;</span>;<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WriteLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Lock</span>, java.io.Serializable &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">4992448646407690164L</span>;<br>       <br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Sync sync;<br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-title function_">WriteLock</span><span class="hljs-params">(ReentrantReadWriteLock lock)</span> &#123;<br>            sync = lock.sync;<br>        &#125; <br><br>        <span class="hljs-comment">// 获取写锁</span><br>        <span class="hljs-comment">// 如果另一个线程既没有持有读锁也没有持有写锁，则获取写锁，并立即返回，</span><br>        <span class="hljs-comment">// 将写锁持有计数设置为1。</span><br>        <span class="hljs-comment">// 如果当前线程已经持有写锁，则持有计数递增1，并且该方法立即返回。</span><br>        <span class="hljs-comment">// 如果该锁被另一个线程持有，则当前线程出于线程调度的目的而被禁用，</span><br>        <span class="hljs-comment">// 并处于休眠状态，直到获得写锁，此时写锁持有计数被设置为1。</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>            sync.acquire(<span class="hljs-number">1</span>);<br>        &#125; <br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lockInterruptibly</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            sync.acquireInterruptibly(<span class="hljs-number">1</span>);<br>        &#125; <br><br>        <span class="hljs-comment">// 只有读锁和写锁在调用时没有被其他线程持有时，才获取写锁。</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> sync.tryWriteLock();<br>        &#125; <br><br>        <span class="hljs-comment">// 带超时的 lock </span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, TimeUnit unit)</span><br>                <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            <span class="hljs-keyword">return</span> sync.tryAcquireNanos(<span class="hljs-number">1</span>, unit.toNanos(timeout));<br>        &#125; <br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>            sync.release(<span class="hljs-number">1</span>);<br>        &#125; <br><br>        <span class="hljs-keyword">public</span> Condition <span class="hljs-title function_">newCondition</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> sync.newCondition();<br>        &#125; <br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> sync.getOwner();<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.toString() + ((o == <span class="hljs-literal">null</span>) ?<br>                                       <span class="hljs-string">&quot;[Unlocked]&quot;</span> :<br>                                       <span class="hljs-string">&quot;[Locked by thread &quot;</span> + o.getName() + <span class="hljs-string">&quot;]&quot;</span>);<br>        &#125; <br><br>        <span class="hljs-comment">// 判断写锁是否由当前线程持有</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHeldByCurrentThread</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> sync.isHeldExclusively();<br>        &#125; <br>    <br>        <span class="hljs-comment">// 获取当前线程的写锁持有量</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHoldCount</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> sync.getWriteHoldCount();<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-comment">// 是否公平</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFair</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync <span class="hljs-keyword">instanceof</span> FairSync;<br>    &#125; <br><br>    <span class="hljs-comment">// 获取当前持有写锁的线程（没有则返回null）</span><br>    <span class="hljs-keyword">protected</span> Thread <span class="hljs-title function_">getOwner</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.getOwner();<br>    &#125; <br><br>    <span class="hljs-comment">// 获取读锁数量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getReadLockCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.getReadLockCount();<br>    &#125; <br><br>    <span class="hljs-comment">// 返回是否有线程持有写锁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isWriteLocked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.isWriteLocked();<br>    &#125; <br><br>    <span class="hljs-comment">// 当前线程是否持有写锁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isWriteLockedByCurrentThread</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.isHeldExclusively();<br>    &#125;<br><br>    <span class="hljs-comment">// 获取当前线程的写锁持有量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getWriteHoldCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.getWriteHoldCount();<br>    &#125; <br><br>    <span class="hljs-comment">// 获取当前线程的读锁持有量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getReadHoldCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.getReadHoldCount();<br>    &#125;<br><br>    <span class="hljs-comment">// 其他方法是一些提供可观测性的方法，略过</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>    ReentrantReadWriteLock 通过提供读锁和写锁，规定读操作和写操作分别是共享和独占的，降低了锁的粒度，增加了并发度</p>]]></content>
    
    
    <categories>
      
      <category>源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CountDownLatch源码解析</title>
    <link href="/2023/06/03/CountDownLatch%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/06/03/CountDownLatch%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h4 id="CountDownLatch源码解析"><a href="#CountDownLatch源码解析" class="headerlink" title="CountDownLatch源码解析"></a>CountDownLatch源码解析</h4><p>    这篇博客我们来阅读  CountDownLatch 的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CountDownLatch</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Synchronization control For CountDownLatch.</span><br><span class="hljs-comment">     * Uses AQS state to represent count.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123; <br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">4982264981922014374L</span>;<br>        <br>        <span class="hljs-comment">// 初始化</span><br>        Sync(<span class="hljs-type">int</span> count) &#123;<br>            setState(count);<br>        &#125;<br><br>        <span class="hljs-comment">// count 和 state的值对应</span><br>        <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> getState();<br>        &#125; <br><br>        <span class="hljs-comment">// 只有当state为0（即count为0时），acquire才成功</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>            <span class="hljs-keyword">return</span> (getState() == <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br>        &#125; <br><br>        <span class="hljs-comment">// 将count 减去 releases</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;<br>            <span class="hljs-comment">// Decrement count; signal when transition to zero</span><br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (compareAndSetState(c, nextc))<br>                    <span class="hljs-keyword">return</span> nextc == <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Sync sync; <br><br>    <span class="hljs-comment">// 初始化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CountDownLatch</span><span class="hljs-params">(<span class="hljs-type">int</span> count)</span> &#123;<br>        <span class="hljs-keyword">if</span> (count &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;count &lt; 0&quot;</span>);<br>        <span class="hljs-built_in">this</span>.sync = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sync</span>(count);<br>    &#125; <br><br>    <span class="hljs-comment">// 除非线程被中断，否则使当前线程一直等待，直到闩锁倒计时到零。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">await</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        sync.acquireSharedInterruptibly(<span class="hljs-number">1</span>);<br>    &#125; <br><br>    <span class="hljs-comment">// 带超时时间的await</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">await</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, TimeUnit unit)</span><br>        <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">return</span> sync.tryAcquireSharedNanos(<span class="hljs-number">1</span>, unit.toNanos(timeout));<br>    &#125;<br><br>    <span class="hljs-comment">// count 减1</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">countDown</span><span class="hljs-params">()</span> &#123;<br>        sync.releaseShared(<span class="hljs-number">1</span>);<br>    &#125; <br><br>    <span class="hljs-comment">// 获取当前count值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.getCount();<br>    &#125; <br><br>    <span class="hljs-comment">// toString</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.toString() + <span class="hljs-string">&quot;[Count = &quot;</span> + sync.getCount() + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>    CountDownLatch 在初始化后 所有调用其await的线程都会被阻塞，直到count为0，之后所有阻塞的线程会按顺序全部被唤醒（一种同步辅助手段，允许一个或多个线程等待其他线程中正在执行的一组操作完成。）</p><p>    更多信息和例子可参照代码前的注释</p>]]></content>
    
    
    <categories>
      
      <category>源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Semaphore源码解析</title>
    <link href="/2023/06/03/Semaphore%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/06/03/Semaphore%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h4 id="Semaphore源码解析"><a href="#Semaphore源码解析" class="headerlink" title="Semaphore源码解析"></a>Semaphore源码解析</h4><p>    这篇博客我们来阅读  Semaphore的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Semaphore</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable &#123; <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3222578661600680210L</span>;<br>   <br>    <span class="hljs-comment">/** All mechanics via AbstractQueuedSynchronizer subclass */</span><br>    <span class="hljs-comment">// 通过AQS的子类实现所有机制</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Sync sync;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Synchronization implementation for semaphore.  Uses AQS state</span><br><span class="hljs-comment">     * to represent permits. Subclassed into fair and nonfair</span><br><span class="hljs-comment">     * versions.</span><br><span class="hljs-comment">     * semaphore 的同步器实现，使用AQS state来表示 permits（许可）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1192457210091910933L</span>;<br>   <br>        <span class="hljs-comment">// 初始化许可数量</span><br>        Sync(<span class="hljs-type">int</span> permits) &#123;<br>            setState(permits);<br>        &#125;  <br><br>        <span class="hljs-comment">// 许可数量和state值对应</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getPermits</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> getState();<br>        &#125; <br><br>        <span class="hljs-comment">// tryAcquireShared 非公平实现</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nonfairTryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">available</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">remaining</span> <span class="hljs-operator">=</span> available - acquires;<br>                <span class="hljs-comment">// 没有许可（发完了） 或 一直重试直到获取许可</span><br>                <span class="hljs-keyword">if</span> (remaining &lt; <span class="hljs-number">0</span> ||<br>                    compareAndSetState(available, remaining))<br>                    <span class="hljs-keyword">return</span> remaining;<br>            &#125;<br>        &#125;  <br><br>        <span class="hljs-comment">// 释放（归还）许可</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> current + releases;<br>                <span class="hljs-keyword">if</span> (next &lt; current) <span class="hljs-comment">// overflow</span><br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum permit count exceeded&quot;</span>);<br>                <span class="hljs-keyword">if</span> (compareAndSetState(current, next))<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125; <br><br>        <span class="hljs-comment">// 减少总的许可数量</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reducePermits</span><span class="hljs-params">(<span class="hljs-type">int</span> reductions)</span> &#123;<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> current - reductions;<br>                <span class="hljs-keyword">if</span> (next &gt; current) <span class="hljs-comment">// underflow</span><br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Permit count underflow&quot;</span>);<br>                <span class="hljs-keyword">if</span> (compareAndSetState(current, next))<br>                    <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125; <br><br>        <span class="hljs-comment">// 将许可数量置为0</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">drainPermits</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-keyword">if</span> (current == <span class="hljs-number">0</span> || compareAndSetState(current, <span class="hljs-number">0</span>))<br>                    <span class="hljs-keyword">return</span> current;<br>            &#125;<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * NonFair version</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NonfairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123; <br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">2694183684443567898L</span>;<br><br>        NonfairSync(<span class="hljs-type">int</span> permits) &#123;<br>            <span class="hljs-built_in">super</span>(permits);<br>        &#125;  <br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>            <span class="hljs-keyword">return</span> nonfairTryAcquireShared(acquires);<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Fair version</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br>    <br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">2014338818796000944L</span>;<br>       <br>        FairSync(<span class="hljs-type">int</span> permits) &#123;<br>            <span class="hljs-built_in">super</span>(permits);<br>        &#125;<br><br>        <span class="hljs-comment">// 公平版 tryAcquireShared 也是先判断当前线程是否插队</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-keyword">if</span> (hasQueuedPredecessors())<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">available</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">remaining</span> <span class="hljs-operator">=</span> available - acquires;<br>                <span class="hljs-keyword">if</span> (remaining &lt; <span class="hljs-number">0</span> ||<br>                    compareAndSetState(available, remaining))<br>                    <span class="hljs-keyword">return</span> remaining;<br>            &#125;<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-comment">// 用给定的许可数创建一个信号量。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Semaphore</span><span class="hljs-params">(<span class="hljs-type">int</span> permits)</span> &#123;<br>        <span class="hljs-comment">// 默认非公平</span><br>        sync = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>(permits);<br>    &#125; <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Semaphore</span><span class="hljs-params">(<span class="hljs-type">int</span> permits, <span class="hljs-type">boolean</span> fair)</span> &#123;<br>        sync = fair ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">FairSync</span>(permits) : <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>(permits);<br>    &#125; <br><br>    <span class="hljs-comment">// 获取许可（可打断）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquire</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        sync.acquireSharedInterruptibly(<span class="hljs-number">1</span>);<br>    &#125; <br><br>    <span class="hljs-comment">// 获取许可（不可打断）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquireUninterruptibly</span><span class="hljs-params">()</span> &#123;<br>        sync.acquireShared(<span class="hljs-number">1</span>);<br>    &#125; <br><br>    <span class="hljs-comment">// 尝试获取许可（G，有挂，怎么玩），直到拿到许可或者没有许可</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.nonfairTryAcquireShared(<span class="hljs-number">1</span>) &gt;= <span class="hljs-number">0</span>;<br>    &#125; <br><br>    <span class="hljs-comment">// 尝试获取许可，带超时时间</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, TimeUnit unit)</span><br>        <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">return</span> sync.tryAcquireSharedNanos(<span class="hljs-number">1</span>, unit.toNanos(timeout));<br>    &#125; <br><br>    <span class="hljs-comment">// 当前线程释放持有的许可</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">release</span><span class="hljs-params">()</span> &#123;<br>        sync.releaseShared(<span class="hljs-number">1</span>);<br>    &#125; <br><br>    <span class="hljs-comment">// 获取指定数量的许可（可恶，一个人占多个名额）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquire</span><span class="hljs-params">(<span class="hljs-type">int</span> permits)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">if</span> (permits &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>        sync.acquireSharedInterruptibly(permits);<br>    &#125; <br><br>    <span class="hljs-comment">// 获取指定数量的许可（不可打断）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquireUninterruptibly</span><span class="hljs-params">(<span class="hljs-type">int</span> permits)</span> &#123;<br>        <span class="hljs-keyword">if</span> (permits &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>        sync.acquireShared(permits);<br>    &#125; <br><br>    <span class="hljs-comment">// 尝试获取指定数量的许可（G，有挂，还特么一个人占多个名额）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> permits)</span> &#123;<br>        <span class="hljs-keyword">if</span> (permits &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>        <span class="hljs-keyword">return</span> sync.nonfairTryAcquireShared(permits) &gt;= <span class="hljs-number">0</span>;<br>    &#125; <br><br>    <span class="hljs-comment">// 尝试获取指定数量的许可，带超时时间</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> permits, <span class="hljs-type">long</span> timeout, TimeUnit unit)</span><br>        <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">if</span> (permits &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>        <span class="hljs-keyword">return</span> sync.tryAcquireSharedNanos(permits, unit.toNanos(timeout));<br>    &#125; <br><br>    <span class="hljs-comment">// 释放指定数量的许可</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">release</span><span class="hljs-params">(<span class="hljs-type">int</span> permits)</span> &#123;<br>        <span class="hljs-keyword">if</span> (permits &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>        sync.releaseShared(permits);<br>    &#125; <br><br>    <span class="hljs-comment">// 返回是否还要许可可以发放</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">availablePermits</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.getPermits();<br>    &#125; <br><br>    <span class="hljs-comment">// 将许可置为0</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">drainPermits</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.drainPermits();<br>    &#125; <br><br>    <span class="hljs-comment">// 减少指定数量的许可</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reducePermits</span><span class="hljs-params">(<span class="hljs-type">int</span> reduction)</span> &#123;<br>        <span class="hljs-keyword">if</span> (reduction &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>        sync.reducePermits(reduction);<br>    &#125; <br><br>    <span class="hljs-comment">// 判断是否公平</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFair</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync <span class="hljs-keyword">instanceof</span> FairSync;<br>    &#125; <br><br>    <span class="hljs-comment">// 还剩下的方法是一些重复的方法，这里略过</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>    Semaphore 维护了指定数量的许可，可以允许多个线程同时持有锁，其他线程则会被阻塞；还实现了公平和非公平两个版本（实现原理和 <code>ReentrantLock </code>一样）</p>]]></content>
    
    
    <categories>
      
      <category>源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ReentrantLock源码解析</title>
    <link href="/2023/06/03/ReentrantLock%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/06/03/ReentrantLock%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h4 id="ReentrantLock源码解析"><a href="#ReentrantLock源码解析" class="headerlink" title="ReentrantLock源码解析"></a>ReentrantLock源码解析</h4><p>    前面我们分析了AQS的源码，下面我们开始逐个分析AQS的派生类的源码，了解其机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReentrantLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Lock</span>, java.io.Serializable &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">7373984872572414699L</span>;<br><br>    <span class="hljs-comment">/** Synchronizer providing all implementation mechanics */</span><br>    <span class="hljs-comment">// 将所有方法委托给同步器实现</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Sync sync;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Base of synchronization control for this lock. Subclassed</span><br><span class="hljs-comment">     * into fair and nonfair versions below. Uses AQS state to</span><br><span class="hljs-comment">     * represent the number of holds on the lock.</span><br><span class="hljs-comment">     * 此锁的同步控制的基类。子类分为公平和非公平版本。使用AQS状态来表示持有锁的次数。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">5179523762034025860L</span>;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Performs non-fair tryLock.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-meta">@ReservedStackAccess</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 状态为0表示锁未被任何线程持有</span><br>                <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)) &#123;<br>                    setExclusiveOwnerThread(current);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (getExclusiveOwnerThread() == current) &#123;<br>                <span class="hljs-comment">// 锁重入</span><br>                <span class="hljs-comment">// 可重入的最大次数为 Integer.MAX_VALUE</span><br>                <span class="hljs-keyword">if</span> (++c &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>                setState(c);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Checks for reentrancy and acquires if lock immediately</span><br><span class="hljs-comment">         * available under fair vs nonfair rules. Locking methods</span><br><span class="hljs-comment">         * perform initialTryLock check before relaying to</span><br><span class="hljs-comment">         * corresponding AQS acquire methods. </span><br><span class="hljs-comment">         * 检查可重入性。并且根据公平与非公平规则判断锁立即可用的话，acquire</span><br><span class="hljs-comment">         * 锁方法在中继到相应的AQS acquire方法之前执行 initialTryLock 检查</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">initialTryLock</span><span class="hljs-params">()</span>; <br><br>        <span class="hljs-meta">@ReservedStackAccess</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (!initialTryLock())<br>                acquire(<span class="hljs-number">1</span>);<br>        &#125; <br><br>        <span class="hljs-meta">@ReservedStackAccess</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lockInterruptibly</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            <span class="hljs-keyword">if</span> (Thread.interrupted())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>            <span class="hljs-keyword">if</span> (!initialTryLock())<br>                acquireInterruptibly(<span class="hljs-number">1</span>);<br>        &#125; <br><br>        <span class="hljs-meta">@ReservedStackAccess</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLockNanos</span><span class="hljs-params">(<span class="hljs-type">long</span> nanos)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            <span class="hljs-keyword">if</span> (Thread.interrupted())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>            <span class="hljs-keyword">return</span> initialTryLock() || tryAcquireNanos(<span class="hljs-number">1</span>, nanos);<br>        &#125; <br><br>        <span class="hljs-meta">@ReservedStackAccess</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123; <br>            <span class="hljs-comment">// 当前状态减去releases</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState() - releases;<br>            <span class="hljs-keyword">if</span> (getExclusiveOwnerThread() != Thread.currentThread())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">free</span> <span class="hljs-operator">=</span> (c == <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (free)<br>                setExclusiveOwnerThread(<span class="hljs-literal">null</span>);<br>            setState(c);<br>            <span class="hljs-keyword">return</span> free;<br>        &#125; <br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHeldExclusively</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">// While we must in general read state before owner,</span><br>            <span class="hljs-comment">// we don&#x27;t need to do so to check if current thread is owner</span><br>            <span class="hljs-keyword">return</span> getExclusiveOwnerThread() == Thread.currentThread();<br>        &#125; <br><br>        <span class="hljs-keyword">final</span> ConditionObject <span class="hljs-title function_">newCondition</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionObject</span>();<br>        &#125; <br><br>        <span class="hljs-comment">// 获取锁的持有者</span><br>        <span class="hljs-keyword">final</span> Thread <span class="hljs-title function_">getOwner</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> getState() == <span class="hljs-number">0</span> ? <span class="hljs-literal">null</span> : getExclusiveOwnerThread();<br>        &#125; <br><br>        <span class="hljs-comment">// 获取锁的持有次数（即状态state）</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHoldCount</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> isHeldExclusively() ? getState() : <span class="hljs-number">0</span>;<br>        &#125; <br><br>        <span class="hljs-comment">// 锁是否可用</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLocked</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> getState() != <span class="hljs-number">0</span>;<br>        &#125; <br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Reconstitutes the instance from a stream (that is, deserializes it).</span><br><span class="hljs-comment">         * 从流中重新构造实例（反序列化）</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>            <span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;<br>            s.defaultReadObject();<br>            setState(<span class="hljs-number">0</span>); <span class="hljs-comment">// reset to unlocked state</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Sync object for non-fair locks</span><br><span class="hljs-comment">     * 非公平锁的同步器对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NonfairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123; <br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">7316153563782823691L</span>;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">initialTryLock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)) &#123; <span class="hljs-comment">// first attempt is unguarded</span><br>                <span class="hljs-comment">// 第一次尝试没有仔细考虑（没有先检查state，随缘）</span><br>                setExclusiveOwnerThread(current);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (getExclusiveOwnerThread() == current) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState() + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (c &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>                setState(c);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Acquire for non-reentrant cases after initialTryLock prescreen </span><br><span class="hljs-comment">         * initialTryLock 预筛选后 acquire（针对不可重入的情况）</span><br><span class="hljs-comment">         * 专门加一个方法 initialTryLock 就是为了将处理可重入的代码拎出来</span><br><span class="hljs-comment">         * emmm</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>            <span class="hljs-keyword">if</span> (getState() == <span class="hljs-number">0</span> &amp;&amp; compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;<br>                setExclusiveOwnerThread(Thread.currentThread());<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Sync object for fair locks</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3000897897090466540L</span>;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Acquires only if reentrant or queue is empty.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">initialTryLock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 公平锁主要依赖 hasQueuedThreads()方法</span><br>                <span class="hljs-comment">// 即当前是否有线程在CLH队列中等待持有锁</span><br>                <span class="hljs-comment">// 没有等待线程才能去竞争锁</span><br>                <span class="hljs-keyword">if</span> (!hasQueuedThreads() &amp;&amp; compareAndSetState(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)) &#123;<br>                    setExclusiveOwnerThread(current);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (getExclusiveOwnerThread() == current) &#123;<br>                <span class="hljs-comment">// 当前线程已经持有锁了（可重入），第二次来就可以插队了</span><br>                <span class="hljs-keyword">if</span> (++c &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>                setState(c);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Acquires only if thread is first waiter or empty</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123; <br>            <span class="hljs-comment">// 不可重入的情况下，只有当前线程是CLH队列中的第一个线程或者</span><br>            <span class="hljs-comment">// 队列为空，才能去竞争锁</span><br>            <span class="hljs-keyword">if</span> (getState() == <span class="hljs-number">0</span> &amp;&amp; !hasQueuedPredecessors() &amp;&amp;<br>                compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;<br>                setExclusiveOwnerThread(Thread.currentThread());<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates an instance of &#123;<span class="hljs-doctag">@code</span> ReentrantLock&#125;.</span><br><span class="hljs-comment">     * This is equivalent to using &#123;<span class="hljs-doctag">@code</span> ReentrantLock(false)&#125;.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantLock</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 默认是非公平版本</span><br>        sync = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>();<br>    &#125; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates an instance of &#123;<span class="hljs-doctag">@code</span> ReentrantLock&#125; with the</span><br><span class="hljs-comment">     * given fairness policy.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fair &#123;<span class="hljs-doctag">@code</span> true&#125; if this lock should use a fair ordering policy</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantLock</span><span class="hljs-params">(<span class="hljs-type">boolean</span> fair)</span> &#123;<br>        sync = fair ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">FairSync</span>() : <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>();<br>    &#125; <br><br>    <span class="hljs-comment">// 获取锁（不可打断）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>        sync.lock();<br>    &#125; <br><br>    <span class="hljs-comment">// 获取锁（可打断）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lockInterruptibly</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        sync.lockInterruptibly();<br>    &#125; <br><br>    <span class="hljs-comment">// 尝试获取锁（只尝试一次）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.tryLock();<br>    &#125; <br><br>    <span class="hljs-comment">// 尝试获取锁（带超时时间）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, TimeUnit unit)</span><br>            <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">return</span> sync.tryLockNanos(unit.toNanos(timeout));<br>    &#125; <br><br>    <span class="hljs-comment">// 解锁（将state状态量减1）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>        sync.release(<span class="hljs-number">1</span>);<br>    &#125; <br><br>    <span class="hljs-keyword">public</span> Condition <span class="hljs-title function_">newCondition</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.newCondition();<br>    &#125; <br><br>    <span class="hljs-comment">// 获取当前线程持有锁的次数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHoldCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.getHoldCount();<br>    &#125; <br><br>    <span class="hljs-comment">// 判断当前线程是否持有锁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHeldByCurrentThread</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.isHeldExclusively();<br>    &#125; <br><br>    <span class="hljs-comment">// 判断是否有线程已经持有锁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLocked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.isLocked();<br>    &#125; <br><br>    <span class="hljs-comment">// 判断是否是公平锁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFair</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync <span class="hljs-keyword">instanceof</span> FairSync;<br>    &#125; <br><br>    <span class="hljs-comment">// 获取锁的持有者</span><br>    <span class="hljs-keyword">protected</span> Thread <span class="hljs-title function_">getOwner</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.getOwner();<br>    &#125; <br><br>    <span class="hljs-comment">// 判断是否有线程正在等待持有锁（只能作为参考，原因参照AQS中代码注释）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasQueuedThreads</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.hasQueuedThreads();<br>    &#125; <br><br>    <span class="hljs-comment">// 判断某个线程是否正在等待持有这个锁（只能作为参考）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasQueuedThread</span><span class="hljs-params">(Thread thread)</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.isQueued(thread);<br>    &#125;<br><br>    <span class="hljs-comment">// 返回等待锁的线程数量（只能作为参考）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getQueueLength</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.getQueueLength();<br>    &#125; <br><br>    <span class="hljs-comment">// 返回所有正在等待获取此锁的线程（只能作为参考）</span><br>    <span class="hljs-keyword">protected</span> Collection&lt;Thread&gt; <span class="hljs-title function_">getQueuedThreads</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.getQueuedThreads();<br>    &#125; <br><br>    <span class="hljs-comment">// 判断是否有线程正在等待 condition</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasWaiters</span><span class="hljs-params">(Condition condition)</span> &#123;<br>        <span class="hljs-keyword">if</span> (condition == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>        <span class="hljs-keyword">if</span> (!(condition <span class="hljs-keyword">instanceof</span> AbstractQueuedSynchronizer.ConditionObject))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;not owner&quot;</span>);<br>        <span class="hljs-keyword">return</span> sync.hasWaiters((AbstractQueuedSynchronizer.ConditionObject)condition);<br>    &#125; <br><br>    <span class="hljs-comment">// 返回condition 等待队列的长度</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getWaitQueueLength</span><span class="hljs-params">(Condition condition)</span> &#123;<br>        <span class="hljs-keyword">if</span> (condition == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>        <span class="hljs-keyword">if</span> (!(condition <span class="hljs-keyword">instanceof</span> AbstractQueuedSynchronizer.ConditionObject))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;not owner&quot;</span>);<br>        <span class="hljs-keyword">return</span> sync.getWaitQueueLength((AbstractQueuedSynchronizer.ConditionObject)condition);<br>    &#125; <br><br>    <span class="hljs-comment">// 返回condition 中正在等待的所有线程</span><br>    <span class="hljs-keyword">protected</span> Collection&lt;Thread&gt; <span class="hljs-title function_">getWaitingThreads</span><span class="hljs-params">(Condition condition)</span> &#123;<br>        <span class="hljs-keyword">if</span> (condition == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>        <span class="hljs-keyword">if</span> (!(condition <span class="hljs-keyword">instanceof</span> AbstractQueuedSynchronizer.ConditionObject))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;not owner&quot;</span>);<br>        <span class="hljs-keyword">return</span> sync.getWaitingThreads((AbstractQueuedSynchronizer.ConditionObject)condition);<br>    &#125; <br><br>    <span class="hljs-comment">// 重写toString方法，打印此锁是否被线程持有，若此锁已经被某线程持有</span><br>    <span class="hljs-comment">// 打印持有锁的线程名称</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> sync.getOwner();<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.toString() + ((o == <span class="hljs-literal">null</span>) ?<br>                                   <span class="hljs-string">&quot;[Unlocked]&quot;</span> :<br>                                   <span class="hljs-string">&quot;[Locked by thread &quot;</span> + o.getName() + <span class="hljs-string">&quot;]&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>    ReentrantLock 在 AQS 的基础上实现了可重入机制，并提供了公平与非公平两个版本</p><p>    其中可重入是通过重入的线程，对state加1实现的，相应的，线程重入多少次，就要多unlock多少次</p><p>    而公平与非公平锁的实现并没有修改AQS的acquire逻辑，而是在获取锁前判断当前线程是否已经在CLH等待队列中并且是队列中的第一个节点</p>]]></content>
    
    
    <categories>
      
      <category>源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AQS源码解析.md</title>
    <link href="/2023/05/30/AQS%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/05/30/AQS%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h3 id="AQS源码解析"><a href="#AQS源码解析" class="headerlink" title="AQS源码解析"></a>AQS源码解析</h3><p>    本文基于JDK19的源码</p><p>    下面是源码里面注释的翻译，可以作为参考（代码头的注释实在翻译不过来了）</p><blockquote><p>等待队列是“CLH”(Craig、Landin和Hagersten)锁队列的变体。<br>CLH锁通常用于旋转锁。相反，我们通过包含显式(“prev”和“next”)链接和一个“status”字段来使用它们阻塞同步器，该字段允许节点在释放锁时通知后继者，并处理由于中断和超时而导致的取消。<br>状态字段包括跟踪线程是否需要唤醒(使用LockSupport.unpark)的位。<br>尽管增加了这些，我们仍然保留了大部分CLH自己的属性。</p><p>要排队进入CLH锁的话，您需要使用原子操作将新节点拼接成新的队尾（tail），</p><p>要出队的话，您需要设置队头（head）字段，这样下一个符合条件的等待着就会变成第一个</p><p>+——–+  prev +———+         +——–+  </p><p>| head | &lt;—-  | first | &lt;—-   | tail |  </p><p>+——–+           +———+         +——–+</p><p>插入到CLH队列只需要在“tail”上执行一个原子操作，所以从非排队到排队有一个简单的分界点。前置节点的“nexi”链接由成功CAS后的排队线程设置。尽管是非原子的，这也足以保证任何阻塞的线程会在符合条件时由前驱节点唤醒。唤醒部分基于类似Dekker的方案，在该方案中要等待的线程指明等待状态（WAITIING status），然后重试获取，然后在阻塞之前重新检查状态。signaller在unpark时会自动清除WAITING状态</p><p>acquire时出队包含分离（清空）一个节点的“prev”节点然后更新“head”。其他线程通过检查“prev”而不是“head”来判断节点正在或者已经出队。如果有必要的话，我们通过旋转等待来强制取消然后设置顺序。因此，锁算法本身并不是严格意义上的“无锁”,因为获取线程可能需要等待前一次获取才能取得进展。当使用排他锁时，无论如何都需要这样的progess。然而，共享模式可能（罕见地）需要在设置head字段之前进行旋转等待，以确保正确传播。（与历史有关地注释：与该类之前的版本相比，这给到了简化和效率的提升）</p><p>节点的前驱能在等待时因为取消等待而改变，直到该节点称为队列中的第一个节点，这时节点就不能改变了。acquire method通过在等待前重新检查“prev”来处理这个问题。prev和next字段只能由方法 cleanQueue 中已取消的节点通过CAS进行修改。unsplice策略让人想起Michael-Scott队列，其在成功对prev字段成功进行CAS操作后，其他线程帮组修复next字段。因为取消经常成批发生，这使得关于必要唤醒的决策更加复杂，每次调用cleanQueue方法都会遍历队列直到彻底清除队列。首先被重新链接的节点会被无条件unpark（有时不是必要的，但是那些情况不值得避免）</p><p>如果线程是队列中的第一个(最前面的),有时是在前面，那么它可能会尝试acquire。成为第一个并不保证成功，它只是赋予了争取成功的权力。我们通过允许传入线程在入队过程中“闯入”并获取同步器来平衡吞吐量、开销和公平性，在这种情况下，被唤醒的第一个线程可能需要重新等待。为了抵消可能重复的不幸的重新等待，我们指数级地增加重试次数(高达256次),以在每次线程被解除锁定时获取。除了在这种情况下，AQS锁才&#x3D;不会旋转；相反，他们尝试去acquire与登记步骤交错进行（需要自旋锁的用户可以使用tryAcquire）</p><p>为了提高垃圾可回收性，还不在列表上的节点的字段为null（创建一个节点，不适用就扔掉它，这种情况并不罕见）。脱离list的节点字段会尽快清空。这突出了从外部确定第一个等待线程的挑战（就像在方法 getFirstQueuedThread 中一样）。当字段显示为null时，有时需要从原子更新的“tail”向后遍历的回退（这在唤醒过程（signalling）中是不需要的）</p><p>CLH队列需要一个伪头节点来开始。但是我们不会在构建的时候创建它们，因为如果没有contention，这将是白费力气。相反，在第一次contention的时候，我们才构建节点并设置头指针和尾指针。</p><p>共享模式操作不同于独占模式操作，因为如果它也是共享的，则获取操作会向下一个等待者发出尝试获取的信号。tryAcquireShared API允许用户指出传播的程度，但在大多数应用程序中，忽略这一点更有效，允许后继者在任何情况下尝试获取。</p><p>在Conditions中等待的线程使用带有附加链接的节点来维护condition的(FIFO)列表。Conditions只需要链接简单(非并发)链式队列中的节点，因为它们只在独占时被访问。在await时，一个节点被插入到条件队列中。一旦收到信号，该节点就在主队列中排队。一个特殊的状态字段值被用来跟踪和自动触发这种情况。</p><p>对字段head、tail和state的访问使用完全volatile模式以及CAS。节点字段status、prev和next也这样做，而线程可能是可发信号的，但除此之外有时使用较弱的模式。对字段“waiter”(要被唤醒的线程)的访问总是夹在其他原子访问之间，因此在普通模式下使用。我们使用jdk.internal不安全版本的原子访问方法而不是VarHandles来避免潜在的虚拟机引导问题。</p><p>以上大部分是由主要的内部方法acquire执行的，所有暴露的acquire方法都会以某种方式调用它（当大量使用时，编译器通常很容易专门为调用点优化。）在阻塞前和&#x2F;或阻塞后的获取和等待中，有几个关于何时以及如何检查中断的随意的决定。在实现的更新中，决策更加不随意因为一些用户似乎以一种racy的方式依赖于原始行为，一般来说，这很少是错误的，但是很难证明改变是合理的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span><br>    <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractOwnableSynchronizer</span><br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">7373984972572414691L</span>;<br><br>    <span class="hljs-comment">// Creates a new AbstractQueuedSynchronizer instance with initial synchronization state of zero.</span><br>    <span class="hljs-comment">// 创建一个初始同步状态为0的 AbstractQueuedSynchronizer 实例</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">AbstractQueuedSynchronizer</span><span class="hljs-params">()</span> &#123; &#125;<br><br>    <span class="hljs-comment">// Node status bits, also used as argument and return values</span><br>    <span class="hljs-comment">// 节点状态位，也用来作为argument和返回值</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">WAITING</span>   <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;          <span class="hljs-comment">// must be 1</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CANCELLED</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x80000000</span>; <span class="hljs-comment">// must be negative</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">COND</span>      <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;          <span class="hljs-comment">// in a condition wait</span><br><br>    <span class="hljs-comment">// Unsafe</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Unsafe</span> <span class="hljs-variable">U</span> <span class="hljs-operator">=</span> Unsafe.getUnsafe();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">STATE</span><br>        <span class="hljs-operator">=</span> U.objectFieldOffset(AbstractQueuedSynchronizer.class, <span class="hljs-string">&quot;state&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">HEAD</span><br>        <span class="hljs-operator">=</span> U.objectFieldOffset(AbstractQueuedSynchronizer.class, <span class="hljs-string">&quot;head&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">TAIL</span><br>        <span class="hljs-operator">=</span> U.objectFieldOffset(AbstractQueuedSynchronizer.class, <span class="hljs-string">&quot;tail&quot;</span>);<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        Class&lt;?&gt; ensureLoaded = LockSupport.class;<br>    &#125; <br><br>    <span class="hljs-comment">// CLH 节点</span><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        <span class="hljs-comment">// initially attached via casTail</span><br>        <span class="hljs-keyword">volatile</span> Node prev;  <br>        <span class="hljs-comment">// visibly（明显地） nonnull when signallable</span><br>        <span class="hljs-keyword">volatile</span> Node next;  <br>        <span class="hljs-comment">// visibly nonnull when enqueued     </span><br>        Thread waiter;   <br>        <span class="hljs-comment">// written by owner, atomic bit ops by others         </span><br>        <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> status;   <br><br>        <span class="hljs-comment">// 获取类中属性的偏移量，用于后续cas操作</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">STATUS</span><br>            <span class="hljs-operator">=</span> U.objectFieldOffset(Node.class, <span class="hljs-string">&quot;status&quot;</span>);<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">NEXT</span><br>            <span class="hljs-operator">=</span> U.objectFieldOffset(Node.class, <span class="hljs-string">&quot;next&quot;</span>);<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">PREV</span><br>            <span class="hljs-operator">=</span> U.objectFieldOffset(Node.class, <span class="hljs-string">&quot;prev&quot;</span>);   <br><br>        <span class="hljs-comment">// methods for atomic operations</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">casPrev</span><span class="hljs-params">(Node c, Node v)</span> &#123;  <span class="hljs-comment">// for cleanQueue</span><br>            <span class="hljs-keyword">return</span> U.weakCompareAndSetReference(<span class="hljs-built_in">this</span>, PREV, c, v);<br>        &#125;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">casNext</span><span class="hljs-params">(Node c, Node v)</span> &#123;  <span class="hljs-comment">// for cleanQueue</span><br>            <span class="hljs-keyword">return</span> U.weakCompareAndSetReference(<span class="hljs-built_in">this</span>, NEXT, c, v);<br>        &#125;<br>        <span class="hljs-comment">// 将状态置为0，并返回操作之前的值</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAndUnsetStatus</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span> &#123;     <span class="hljs-comment">// for signalling</span><br>            <span class="hljs-comment">// 用当前值和掩码之间按位AND的结果自动替换</span><br>            <span class="hljs-comment">// 给定对象中字段或数组元素的当前值，返回之前的值</span><br>            <span class="hljs-keyword">return</span> U.getAndBitwiseAndInt(<span class="hljs-built_in">this</span>, STATUS, ~v);<br>        &#125;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrevRelaxed</span><span class="hljs-params">(Node p)</span> &#123;      <span class="hljs-comment">// for off-queue assignment</span><br>            <span class="hljs-comment">// 将引用值存储到对应的java变量中</span><br>            U.putReference(<span class="hljs-built_in">this</span>, PREV, p);<br>        &#125;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStatusRelaxed</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span> &#123;     <span class="hljs-comment">// for off-queue assignment</span><br>            U.putInt(<span class="hljs-built_in">this</span>, STATUS, s);<br>        &#125;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearStatus</span><span class="hljs-params">()</span> &#123;               <span class="hljs-comment">// for reducing unneeded signals</span><br>            <span class="hljs-comment">// putIntVolatile(Object, long, int)的不透明版本</span><br>            U.putIntOpaque(<span class="hljs-built_in">this</span>, STATUS, <span class="hljs-number">0</span>);<br>        &#125;<br><br>    &#125; <br><br>    <span class="hljs-comment">// Concrete classes tagged by type</span><br>    <span class="hljs-comment">// 按类型标记的具体类</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExclusiveNode</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Node</span> &#123; &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SharedNode</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Node</span> &#123; &#125; <br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConditionNode</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Node</span><br>        <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ForkJoinPool</span>.ManagedBlocker &#123; <br>        <span class="hljs-comment">// link to next waiting node</span><br>        ConditionNode nextWaiter;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Allows Conditions to be used in ForkJoinPools without</span><br><span class="hljs-comment">         * risking fixed pool exhaustion. This is usable only for</span><br><span class="hljs-comment">         * untimed Condition waits, not timed versions.</span><br><span class="hljs-comment">         * 允许在ForkJoinPools中使用条件，而不会有固定池耗尽的风险。</span><br><span class="hljs-comment">         * 这仅适用于无计时条件等待，不适用于计时版本。</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isReleasable</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> status &lt;= <span class="hljs-number">1</span> || Thread.currentThread().isInterrupted();<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">block</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">while</span> (!isReleasable()) LockSupport.park();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Head of the wait queue, lazily initialized. 懒惰初始化</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node head;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Tail of the wait queue. After initialization, modified only via casTail. </span><br><span class="hljs-comment">     * 初始化过后，仅通过casTail修改</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node tail;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The synchronization state. 同步状态</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> state; <br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(<span class="hljs-type">int</span> newState)</span> &#123;<br>        state = newState;<br>    &#125;<br><br>    <span class="hljs-comment">// 设置状态cas操作</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compareAndSetState</span><span class="hljs-params">(<span class="hljs-type">int</span> expect, <span class="hljs-type">int</span> update)</span> &#123;<br>        <span class="hljs-keyword">return</span> U.compareAndSetInt(<span class="hljs-built_in">this</span>, STATE, expect, update);<br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">casTail</span><span class="hljs-params">(Node c, Node v)</span> &#123;<br>        <span class="hljs-keyword">return</span> U.compareAndSetReference(<span class="hljs-built_in">this</span>, TAIL, c, v);<br>    &#125;<br><br>    <span class="hljs-comment">/** tries once to CAS a new dummy node for head </span><br><span class="hljs-comment">     *  将head设置为一个新的dummy节点，使用cas操作，只尝试一次</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tryInitializeHead</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExclusiveNode</span>();<br>        <span class="hljs-keyword">if</span> (U.compareAndSetReference(<span class="hljs-built_in">this</span>, HEAD, <span class="hljs-literal">null</span>, h))<br>            tail = h;<br>    &#125; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Enqueues the node unless null. (Currently used only for</span><br><span class="hljs-comment">     * ConditionNodes; other cases are interleaved with acquires.) </span><br><span class="hljs-comment">     * 当前仅用于ConditionNodes；其他情况与acquire交错进行。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">enqueue</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail;<br>                <span class="hljs-comment">// avoid unnecessary fence（避免不必要的围栏？）</span><br>                <span class="hljs-comment">// 这里没有使用volatile变量对应的方法</span><br>                node.setPrevRelaxed(t);        <br>                <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>)                 <span class="hljs-comment">// initialize</span><br>                    tryInitializeHead();<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (casTail(t, node)) &#123;<br>                    t.next = node;<br>                    <span class="hljs-keyword">if</span> (t.status &lt; <span class="hljs-number">0</span>)          <span class="hljs-comment">// wake up to clean link</span><br>                        LockSupport.unpark(node.waiter);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-comment">/** Returns true if node is found in traversal from tail </span><br><span class="hljs-comment">     *  节点已在队列中（从后向前找）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnqueued</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail; t != <span class="hljs-literal">null</span>; t = t.prev)<br>            <span class="hljs-keyword">if</span> (t == node)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <br><br>    <span class="hljs-comment">// 唤醒给定节点的后继节点(如果存在),并取消其等待状态以避免park竞争。</span><br>    <span class="hljs-comment">// 当一个或多个线程被取消时，这可能无法唤醒符合条件的线程，</span><br>    <span class="hljs-comment">// 但cancelAcquire确保了（线程？）存活。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">signalNext</span><span class="hljs-params">(Node h)</span> &#123;<br>        Node s;<br>        <span class="hljs-keyword">if</span> (h != <span class="hljs-literal">null</span> &amp;&amp; (s = h.next) != <span class="hljs-literal">null</span> &amp;&amp; s.status != <span class="hljs-number">0</span>) &#123;<br>            s.getAndUnsetStatus(WAITING);<br>            LockSupport.unpark(s.waiter);<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-comment">/** Wakes up the given node if in shared mode （共享模式）*/</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">signalNextIfShared</span><span class="hljs-params">(Node h)</span> &#123;<br>        Node s;<br>        <span class="hljs-keyword">if</span> (h != <span class="hljs-literal">null</span> &amp;&amp; (s = h.next) != <span class="hljs-literal">null</span> &amp;&amp;<br>            (s <span class="hljs-keyword">instanceof</span> SharedNode) &amp;&amp; s.status != <span class="hljs-number">0</span>) &#123;<br>            s.getAndUnsetStatus(WAITING);<br>            LockSupport.unpark(s.waiter);<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-comment">// Main acquire method, invoked by all exported acquire methods.</span><br>    <span class="hljs-comment">// 主要的acquire方法，被所有暴露的acquire方法调用</span><br>    <span class="hljs-comment">// 返回值：positive if acquired, 0 if timed out, negative if interrupted</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">acquire</span><span class="hljs-params">(Node node, <span class="hljs-type">int</span> arg, <span class="hljs-type">boolean</span> shared,</span><br><span class="hljs-params">                      <span class="hljs-type">boolean</span> interruptible, <span class="hljs-type">boolean</span> timed, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        <span class="hljs-comment">// unpark 第一个线程后第一个线程的重试次数</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">spins</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, postSpins = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">interrupted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>, first = <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">// node入队时的前驱节点</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">pred</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-comment">// 检查节点node现在是否是第一个节点，如果是的话，确保head稳定，否则保证有效的前驱</span><br>        <span class="hljs-comment">// 如果节点是第一个或尚未入队，尝试acquire</span><br>        <span class="hljs-comment">// 否则如果节点还没有创建，创建它</span><br>        <span class="hljs-comment">// 否则如果节点还没有入队，尝试入队一次</span><br>        <span class="hljs-comment">// 否则如果节点被park唤醒，重试（一直到 postSpins 次）</span><br>        <span class="hljs-comment">// 否则如果WAITING状态还没有被设置，设置并重试</span><br>        <span class="hljs-comment">// 否则，park并且清除WAITING状态，并且检查取消</span><br>        <span class="hljs-comment">// 翻译的注释，可以参考</span><br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-comment">// first表示node的前驱节点是否为head，即node是否是第一个节点</span><br>            <span class="hljs-keyword">if</span> (!first &amp;&amp; (pred = (node == <span class="hljs-literal">null</span>) ? <span class="hljs-literal">null</span> : node.prev) != <span class="hljs-literal">null</span> &amp;&amp;<br>                !(first = (head == pred))) &#123;<br>                <span class="hljs-keyword">if</span> (pred.status &lt; <span class="hljs-number">0</span>) &#123;<br>                    cleanQueue();           <span class="hljs-comment">// predecessor cancelled</span><br>                    <span class="hljs-keyword">continue</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pred.prev == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// 队列断了（pred不是head，但是其前驱为null），确保队列连续</span><br>                    <span class="hljs-comment">// 为什么会出现这种情况？</span><br>                    Thread.onSpinWait();    <span class="hljs-comment">// ensure serialization</span><br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>            &#125; <br>            <span class="hljs-comment">// node是第一个节点或者node还没有入队（非公平竞争）</span><br>            <span class="hljs-comment">// 有竞争的资格</span><br>            <span class="hljs-keyword">if</span> (first || pred == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">boolean</span> acquired;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">if</span> (shared)<br>                        acquired = (tryAcquireShared(arg) &gt;= <span class="hljs-number">0</span>);<br>                    <span class="hljs-keyword">else</span><br>                        acquired = tryAcquire(arg);<br>                &#125; <span class="hljs-keyword">catch</span> (Throwable ex) &#123; <br>                    <span class="hljs-comment">// 出现异常、取消正在进行的acquire尝试</span><br>                    cancelAcquire(node, interrupted, <span class="hljs-literal">false</span>);<br>                    <span class="hljs-keyword">throw</span> ex;<br>                &#125;   <br>                <span class="hljs-keyword">if</span> (acquired) &#123;<br>                    <span class="hljs-keyword">if</span> (first) &#123;<br>                        <span class="hljs-comment">// 竞争成功后将node（第一个节点）设为head</span><br>                        node.prev = <span class="hljs-literal">null</span>;<br>                        head = node;<br>                        <span class="hljs-comment">// 将之前的head属性置空，方便GC</span><br>                        pred.next = <span class="hljs-literal">null</span>;<br>                        node.waiter = <span class="hljs-literal">null</span>;<br>                        <span class="hljs-keyword">if</span> (shared) &#123;<br>                            <span class="hljs-comment">// 如果下个节点（第一个节点）是SharedNode，将其唤醒</span><br>                            <span class="hljs-comment">// 配合能重复成功的 tryAcquireShared 能实现一次</span><br>                            <span class="hljs-comment">// 出队多个节点的效果</span><br>                            signalNextIfShared(node);<br>                        &#125;  <br>                        <span class="hljs-keyword">if</span> (interrupted)<br>                            current.interrupt(); <span class="hljs-comment">// 清空线程的打断状态</span><br>                    &#125;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>                &#125;             <br>            &#125; <br>            <span class="hljs-comment">// allocate; retry before enqueue</span><br>            <span class="hljs-comment">// 新建node，在入队时再次尝试，这里对应上段代码pred == null条件</span><br>            <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;                 <br>                <span class="hljs-keyword">if</span> (shared)<br>                    node = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SharedNode</span>();<br>                <span class="hljs-keyword">else</span><br>                    node = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExclusiveNode</span>();<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pred == <span class="hljs-literal">null</span>) &#123;  <br>                <span class="hljs-comment">// try to enqueue</span><br>                <span class="hljs-comment">// 新建的node竞争失败，入队</span><br>                node.waiter = current;<br>                <span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail;<br>                node.setPrevRelaxed(t);         <span class="hljs-comment">// avoid unnecessary fence</span><br>                <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>)<br>                    tryInitializeHead();<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!casTail(t, node))<br>                    node.setPrevRelaxed(<span class="hljs-literal">null</span>);  <span class="hljs-comment">// back out</span><br>                <span class="hljs-keyword">else</span><br>                    t.next = node;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (first &amp;&amp; spins != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// reduce unfairness on rewaits</span><br>                <span class="hljs-comment">// 队列中第一个节点第二次开始竞争的时候有自旋次数</span><br>                --spins;              <br>                Thread.onSpinWait();<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (node.status == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// enable signal and recheck</span><br>                <span class="hljs-comment">// 自旋竞争失败后重新等待</span><br>                node.status = WAITING;          <br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">long</span> nanos;<br>                <span class="hljs-comment">// 自旋次数</span><br>                spins = postSpins = (<span class="hljs-type">byte</span>)((postSpins &lt;&lt; <span class="hljs-number">1</span>) | <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span> (!timed)<br>                    LockSupport.park(<span class="hljs-built_in">this</span>);<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((nanos = time - System.nanoTime()) &gt; <span class="hljs-number">0L</span>)<br>                    LockSupport.parkNanos(<span class="hljs-built_in">this</span>, nanos);<br>                <span class="hljs-keyword">else</span><br>                    <span class="hljs-keyword">break</span>;<br>                node.clearStatus();<br>                <span class="hljs-comment">/// 可打断并已经打断，放弃acquire</span><br>                <span class="hljs-keyword">if</span> ((interrupted |= Thread.interrupted()) &amp;&amp; interruptible)<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cancelAcquire(node, interrupted, interruptible);<br>    &#125; <br><br>    <span class="hljs-comment">// 可能从尾部开始重复遍历</span><br>    <span class="hljs-comment">// 将已取消的节点从队列中剔除，直到找不到已取消节点</span><br>    <span class="hljs-comment">// unpark可能已被重新链接为下一个合格的acquirer的节点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanQueue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (;;) &#123;                               <span class="hljs-comment">// restart point </span><br>            <span class="hljs-comment">// q为要检查的node，p为q的前驱节点，s为q的后继节点</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> tail, s = <span class="hljs-literal">null</span>, p, n;;) &#123; <span class="hljs-comment">// (p, q, s) triples</span><br>                <span class="hljs-keyword">if</span> (q == <span class="hljs-literal">null</span> || (p = q.prev) == <span class="hljs-literal">null</span>)<br>                    <span class="hljs-keyword">return</span>;                      <span class="hljs-comment">// end of list</span><br>                <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span> ? tail != q : (s.prev != q || s.status &lt; <span class="hljs-number">0</span>))<br>                    <span class="hljs-keyword">break</span>;                       <span class="hljs-comment">// inconsistent</span><br>                <span class="hljs-keyword">if</span> (q.status &lt; <span class="hljs-number">0</span>) &#123;              <span class="hljs-comment">// cancelled</span><br>                    <span class="hljs-keyword">if</span> ((s == <span class="hljs-literal">null</span> ? casTail(q, p) : s.casPrev(q, p)) &amp;&amp;<br>                        q.prev == p) &#123;<br>                        p.casNext(q, s);         <span class="hljs-comment">// OK if fails</span><br>                        <span class="hljs-keyword">if</span> (p.prev == <span class="hljs-literal">null</span>)<br>                            signalNext(p);<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-comment">// 下面的代码应该是考虑到了并发，对应上面的</span><br>                <span class="hljs-comment">// p.casNext(q, s); 还未开始</span><br>                <span class="hljs-keyword">if</span> ((n = p.next) != q) &#123;         <span class="hljs-comment">// help finish</span><br>                    <span class="hljs-keyword">if</span> (n != <span class="hljs-literal">null</span> &amp;&amp; q.prev == p) &#123;<br>                        p.casNext(n, q);<br>                        <span class="hljs-keyword">if</span> (p.prev == <span class="hljs-literal">null</span>)<br>                            signalNext(p);<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                s = q;<br>                q = q.prev;<br>            &#125;<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-comment">// interrupted：如果线程中断，则为true</span><br>    <span class="hljs-comment">// interruptible：是否应该报告中断和复位</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">cancelAcquire</span><span class="hljs-params">(Node node, <span class="hljs-type">boolean</span> interrupted,</span><br><span class="hljs-params">                              <span class="hljs-type">boolean</span> interruptible)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node != <span class="hljs-literal">null</span>) &#123;<br>            node.waiter = <span class="hljs-literal">null</span>;<br>            node.status = CANCELLED;<br>            <span class="hljs-keyword">if</span> (node.prev != <span class="hljs-literal">null</span>)<br>                cleanQueue();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (interrupted) &#123;<br>            <span class="hljs-keyword">if</span> (interruptible)<br>                <span class="hljs-keyword">return</span> CANCELLED;<br>            <span class="hljs-keyword">else</span><br>                Thread.currentThread().interrupt();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125; <br><br>    <span class="hljs-comment">// 试图以独占模式获取。此方法应该查询对象的状态是否允许以独占模式获取它，如果允许，就获取它。</span><br>    <span class="hljs-comment">// 该方法总是由执行acquire的线程调用。</span><br>    <span class="hljs-comment">// 如果这个方法报错，如果线程还没有排队，那么acquire方法可以将线程排队</span><br>    <span class="hljs-comment">// 直到它被某个其他线程的释放唤醒</span><br>    <span class="hljs-comment">// 这可用于实现方法Lock.tryLock()。</span><br>    <span class="hljs-comment">// arg：获取参数。该值始终是传递给acquire方法的值，</span><br>    <span class="hljs-comment">// 或者是在进入条件等待时保存的值。该值不需要解释，可以表示您喜欢的任何内容。</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>    &#125; <br><br>    <span class="hljs-comment">// 尝试设置状态以反映独占模式下的释放。</span><br>    <span class="hljs-comment">// 该方法总是由执行释放的线程调用</span><br>    <span class="hljs-comment">// 返回值：如果此对象现在处于完全释放状态，则为true，以便任何等待的线程都可以尝试获取；否则为false。</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>    &#125; <br><br>    <span class="hljs-comment">// 尝试在共享模式下获取。此方法应该查询对象的状态是否允许在共享模式下获取它，如果允许，就获取它。</span><br>    <span class="hljs-comment">// 该方法总是由执行acquire的线程调用。</span><br>    <span class="hljs-comment">// 如果这个方法报告失败，如果线程还没有排队，那么acquire方法可以将线程排队，</span><br>    <span class="hljs-comment">// 直到它被某个其他线程的释放唤醒。</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>    &#125; <br><br>    <span class="hljs-comment">// 返回值：如果共享模式的这一释放可以允许等待的获取(共享或独占)成功，则为true否则为false</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>    &#125; <br><br>    <span class="hljs-comment">// 如果同步是相对于当前(调用)线程独占保持的，则返回true。</span><br>    <span class="hljs-comment">// 每次调用AbstractQueuedSynchronizer时都会调用此方法。条件对象方法。</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHeldExclusively</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>    &#125; <br><br>    <span class="hljs-comment">// 在独占模式下acquire，忽略中断。</span><br>    <span class="hljs-comment">// 通过至少调用一次tryAcquire来实现，成功时返回。</span><br>    <span class="hljs-comment">// 否则线程被排队，可能重复阻塞和解除阻塞，调用tryAcquire直到成功。</span><br>    <span class="hljs-comment">// 此方法可用于实现方法Lock.lock。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquire</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!tryAcquire(arg))<br>            acquire(<span class="hljs-literal">null</span>, arg, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">0L</span>);<br>    &#125; <br><br>    <span class="hljs-comment">// 在独占模式下acquire，如果被中断则中止。</span><br>    <span class="hljs-comment">// 首先检查中断状态，然后至少调用一次tryAcquire，成功后返回。</span><br>    <span class="hljs-comment">// 否则线程被排队，可能重复阻塞和解除阻塞，调用tryAcquire直到成功或线程被中断。</span><br>    <span class="hljs-comment">// 此方法可用于实现方法 Lock.lockInterruptibly。 </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquireInterruptibly</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span><br>        <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">if</span> (Thread.interrupted() ||<br>            (!tryAcquire(arg) &amp;&amp; acquire(<span class="hljs-literal">null</span>, arg, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">0L</span>) &lt; <span class="hljs-number">0</span>))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>    &#125; <br><br>    <span class="hljs-comment">// 尝试以独占模式acquire，如果被中断则中止，如果超时则失败。</span><br>    <span class="hljs-comment">// 首先检查中断状态，然后至少调用一次tryAcquire，成功后返回。</span><br>    <span class="hljs-comment">// 否则，线程被排队，可能重复阻塞和解除阻塞，调用tryAcquire，直到成功或线程被中断或超时。</span><br>    <span class="hljs-comment">// 此方法可用于实现方法Lock.tryLock(long，TimeUnit)。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquireNanos</span><span class="hljs-params">(<span class="hljs-type">int</span> arg, <span class="hljs-type">long</span> nanosTimeout)</span><br>        <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">if</span> (!Thread.interrupted()) &#123;<br>            <span class="hljs-keyword">if</span> (tryAcquire(arg))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (nanosTimeout &lt;= <span class="hljs-number">0L</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">stat</span> <span class="hljs-operator">=</span> acquire(<span class="hljs-literal">null</span>, arg, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>,<br>                               System.nanoTime() + nanosTimeout);<br>            <span class="hljs-keyword">if</span> (stat &gt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (stat == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>    &#125; <br><br>    <span class="hljs-comment">// 以独占模式释放。</span><br>    <span class="hljs-comment">// 如果tryRelease返回true，则通过解除一个或多个线程的阻塞来实现。</span><br>    <span class="hljs-comment">// 此方法可用于实现方法Lock.unlock。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">release</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>        <span class="hljs-keyword">if</span> (tryRelease(arg)) &#123;<br>            signalNext(head);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <br><br>    <span class="hljs-comment">// 在share mode时acquire</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>        <span class="hljs-keyword">if</span> (tryAcquireShared(arg) &lt; <span class="hljs-number">0</span>)<br>            acquire(<span class="hljs-literal">null</span>, arg, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">0L</span>);<br>    &#125; <br><br>    <span class="hljs-comment">// 在share mode时 acquireInterruptibly</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquireSharedInterruptibly</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span><br>        <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">if</span> (Thread.interrupted() ||<br>            (tryAcquireShared(arg) &lt; <span class="hljs-number">0</span> &amp;&amp;<br>             acquire(<span class="hljs-literal">null</span>, arg, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">0L</span>) &lt; <span class="hljs-number">0</span>))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>    &#125; <br><br>    <span class="hljs-comment">// 在share mode时 tryAcquireNanos</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquireSharedNanos</span><span class="hljs-params">(<span class="hljs-type">int</span> arg, <span class="hljs-type">long</span> nanosTimeout)</span><br>            <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">if</span> (!Thread.interrupted()) &#123;<br>            <span class="hljs-keyword">if</span> (tryAcquireShared(arg) &gt;= <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (nanosTimeout &lt;= <span class="hljs-number">0L</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">stat</span> <span class="hljs-operator">=</span> acquire(<span class="hljs-literal">null</span>, arg, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>,<br>                               System.nanoTime() + nanosTimeout);<br>            <span class="hljs-keyword">if</span> (stat &gt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (stat == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>    &#125; <br><br>    <span class="hljs-comment">// 在share mode时 release</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">releaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>        <span class="hljs-keyword">if</span> (tryReleaseShared(arg)) &#123;<br>            signalNext(head);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <br><br>    <span class="hljs-comment">// 队列检查方法</span><br><br>    <span class="hljs-comment">// 查询是否有任何线程正在等待获取。</span><br>    <span class="hljs-comment">// 请注意，由于中断和超时导致的取消可能随时发生，所以返回true并不保证任何其他线程acquire成功。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasQueuedThreads</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> tail, h = head; p != h &amp;&amp; p != <span class="hljs-literal">null</span>; p = p.prev)<br>            <span class="hljs-keyword">if</span> (p.status &gt;= <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 查询是否有任何线程曾经竞争获取此同步器；</span><br>    <span class="hljs-comment">// 也就是说，是否有一个acquire方法曾经被阻塞。</span><br>    <span class="hljs-comment">// 在这个实现中，这个操作在常数时间内返回。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasContended</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> head != <span class="hljs-literal">null</span>;<br>    &#125; <br><br>    <span class="hljs-comment">// 返回队列中第一个(等待时间最长的)线程，如果当前没有线程排队，则返回null。</span><br>    <span class="hljs-comment">// 在该实现中，该操作通常在恒定时间内返回，但是如果其他线程同时修改队列，则可能在竞争时重复。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Thread <span class="hljs-title function_">getFirstQueuedThread</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>, w; Node h, s;<br>        <span class="hljs-keyword">if</span> ((h = head) != <span class="hljs-literal">null</span> &amp;&amp; ((s = h.next) == <span class="hljs-literal">null</span> ||<br>                                   (first = s.waiter) == <span class="hljs-literal">null</span> ||<br>                                   s.prev == <span class="hljs-literal">null</span>)) &#123;<br>            <span class="hljs-comment">// traverse from tail on stale reads </span><br>            <span class="hljs-comment">// q存储p的前驱节点</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> tail, q; p != <span class="hljs-literal">null</span> &amp;&amp; (q = p.prev) != <span class="hljs-literal">null</span>; p = q)<br>                <span class="hljs-keyword">if</span> ((w = p.waiter) != <span class="hljs-literal">null</span>)<br>                    first = w;<br>        &#125;<br>        <span class="hljs-keyword">return</span> first;<br>    &#125; <br><br>    <span class="hljs-comment">// 如果给定线程当前正在排队，则返回true。</span><br>    <span class="hljs-comment">// 该实现遍历队列以确定给定线程的存在。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isQueued</span><span class="hljs-params">(Thread thread)</span> &#123;<br>        <span class="hljs-keyword">if</span> (thread == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> tail; p != <span class="hljs-literal">null</span>; p = p.prev)<br>            <span class="hljs-keyword">if</span> (p.waiter == thread)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <br><br>    <span class="hljs-comment">// 如果明面上的第一个排队线程(如果存在)正在以独占模式等待，则返回true。</span><br>    <span class="hljs-comment">// 如果此方法返回true，并且当前线程正在尝试以共享模式获取(即，此方法是从tryAcquireShared调用的)，</span><br>    <span class="hljs-comment">// 则可以保证当前线程不是第一个排队的线程。在ReentrantReadWriteLock中仅用作启发式方法。</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">apparentlyFirstQueuedIsExclusive</span><span class="hljs-params">()</span> &#123;<br>        Node h, s;<br>        <span class="hljs-keyword">return</span> (h = head) != <span class="hljs-literal">null</span> &amp;&amp; (s = h.next)  != <span class="hljs-literal">null</span> &amp;&amp;<br>            !(s <span class="hljs-keyword">instanceof</span> SharedNode) &amp;&amp; s.waiter != <span class="hljs-literal">null</span>;<br>    &#125; <br><br>    <span class="hljs-comment">// 查询是否有任何线程等待获取的时间比当前线程长。</span><br>    <span class="hljs-comment">// 此方法的调用等效于(但可能更有效):</span><br>    <span class="hljs-comment">// getFirstQueuedThread() != Thread.currentThread() &amp;&amp; hasQueuedThreads()</span><br>    <span class="hljs-comment">// 请注意，由于中断和超时导致的取消可能会在任何时候发生，</span><br>    <span class="hljs-comment">// 所以真正的返回并不保证其他线程会在当前线程之前获取。</span><br>    <span class="hljs-comment">// 同样，由于队列为空，在此方法返回false后，另一个赢得竞争的线程也可能排队。</span><br>    <span class="hljs-comment">// 该方法被设计为由公平同步器使用以避免冲突。</span><br>    <span class="hljs-comment">// 这样一个同步器的tryAcquire方法应该返回false，</span><br>    <span class="hljs-comment">// 它的tryAcquireShared方法应该返回负值，如果这个方法返回true的话(除非这是一个可重入的Acquire)。</span><br>    <span class="hljs-comment">// 例如，公平、可重入、独占模式同步器的tryAcquire方法可能如下所示</span><br>    <span class="hljs-comment">// protected boolean tryAcquire(int arg) &#123;</span><br>    <span class="hljs-comment">//   if (isHeldExclusively()) &#123;</span><br>    <span class="hljs-comment">//     // A reentrant acquire; increment hold count</span><br>    <span class="hljs-comment">//     return true;</span><br>    <span class="hljs-comment">//   &#125; else if (hasQueuedPredecessors()) &#123;</span><br>    <span class="hljs-comment">//     return false;</span><br>    <span class="hljs-comment">//   &#125; else &#123;</span><br>    <span class="hljs-comment">//     // try to acquire normally</span><br>    <span class="hljs-comment">//   &#125;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasQueuedPredecessors</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; Node h, s;<br>        <span class="hljs-keyword">if</span> ((h = head) != <span class="hljs-literal">null</span> &amp;&amp; ((s = h.next) == <span class="hljs-literal">null</span> ||<br>                                   (first = s.waiter) == <span class="hljs-literal">null</span> ||<br>                                   s.prev == <span class="hljs-literal">null</span>)) <br>            <span class="hljs-comment">// 这里的判断在 getFirstQueuedThread 已经有了，我觉得可以去掉</span><br>            first = getFirstQueuedThread(); <span class="hljs-comment">// retry via getFirstQueuedThread</span><br>        <span class="hljs-keyword">return</span> first != <span class="hljs-literal">null</span> &amp;&amp; first != Thread.currentThread();<br>    &#125; <br><br>    <span class="hljs-comment">// 检测和监控方法</span><br><br>    <span class="hljs-comment">// 返回等待获取的线程数的估计值。</span><br>    <span class="hljs-comment">// 该值只是一个估计值，因为在此方法遍历内部数据结构时，线程的数量可能会动态变化。</span><br>    <span class="hljs-comment">// 此方法设计用于监视系统状态，而不是用于同步控制。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getQueueLength</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> tail; p != <span class="hljs-literal">null</span>; p = p.prev) &#123;<br>            <span class="hljs-keyword">if</span> (p.waiter != <span class="hljs-literal">null</span>)<br>                ++n;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125; <br><br>    <span class="hljs-comment">// 返回包含可能正在等待获取的线程的集合。</span><br>    <span class="hljs-comment">// 因为实际的线程集在构造这个结果时可能会动态变化，</span><br>    <span class="hljs-comment">// 所以返回的集合只是一个最佳估计。</span><br>    <span class="hljs-comment">// 返回集合的元素没有特定的顺序。</span><br>    <span class="hljs-comment">// 该方法旨在促进子类的构建，从而提供更广泛的监控功能。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Collection&lt;Thread&gt; <span class="hljs-title function_">getQueuedThreads</span><span class="hljs-params">()</span> &#123;<br>        ArrayList&lt;Thread&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> tail; p != <span class="hljs-literal">null</span>; p = p.prev) &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> p.waiter;<br>            <span class="hljs-keyword">if</span> (t != <span class="hljs-literal">null</span>)<br>                list.add(t);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125; <br><br>    <span class="hljs-comment">// 返回包含可能正在等待以独占模式acquire的线程的集合。</span><br>    <span class="hljs-comment">// 这与getQueuedThreads具有相同的属性，</span><br>    <span class="hljs-comment">// 只是它只返回那些由于独占获取而等待的线程。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Collection&lt;Thread&gt; <span class="hljs-title function_">getExclusiveQueuedThreads</span><span class="hljs-params">()</span> &#123;<br>        ArrayList&lt;Thread&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> tail; p != <span class="hljs-literal">null</span>; p = p.prev) &#123;<br>            <span class="hljs-keyword">if</span> (!(p <span class="hljs-keyword">instanceof</span> SharedNode)) &#123;<br>                <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> p.waiter;<br>                <span class="hljs-keyword">if</span> (t != <span class="hljs-literal">null</span>)<br>                    list.add(t);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125; <br><br>    <span class="hljs-comment">// 返回包含可能正在等待以共享模式acquire的线程的集合。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Collection&lt;Thread&gt; <span class="hljs-title function_">getSharedQueuedThreads</span><span class="hljs-params">()</span> &#123;<br>        ArrayList&lt;Thread&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> tail; p != <span class="hljs-literal">null</span>; p = p.prev) &#123;<br>            <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> SharedNode) &#123;<br>                <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> p.waiter;<br>                <span class="hljs-keyword">if</span> (t != <span class="hljs-literal">null</span>)<br>                    list.add(t);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125; <br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.toString()<br>            + <span class="hljs-string">&quot;[State = &quot;</span> + getState() + <span class="hljs-string">&quot;, &quot;</span><br>            + (hasQueuedThreads() ? <span class="hljs-string">&quot;non&quot;</span> : <span class="hljs-string">&quot;&quot;</span>) + <span class="hljs-string">&quot;empty queue]&quot;</span>;<br>    &#125; <br><br>    <span class="hljs-comment">// conditions的检测方法</span><br><br>    <span class="hljs-comment">// 查询给定的ConditionObject是否使用此同步器作为其锁。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">owns</span><span class="hljs-params">(ConditionObject condition)</span> &#123;<br>        <span class="hljs-keyword">return</span> condition.isOwnedBy(<span class="hljs-built_in">this</span>);<br>    &#125; <br><br>    <span class="hljs-comment">// 查询是否有任何线程正在等待与此同步器关联的给定条件。</span><br>    <span class="hljs-comment">// 请注意，因为超时和中断可能随时发生，所以真正的返回并不保证将来的信号会唤醒任何线程。</span><br>    <span class="hljs-comment">// 这方法主要用于监控系统状态。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasWaiters</span><span class="hljs-params">(ConditionObject condition)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!owns(condition))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Not owner&quot;</span>);<br>        <span class="hljs-keyword">return</span> condition.hasWaiters();<br>    &#125;  <br><br>    <span class="hljs-comment">// 返回在与此同步器相关的给定条件下等待的线程数的估计值。</span><br>    <span class="hljs-comment">// 请注意，因为超时和中断可能随时发生，所以估计值只是实际等待者数量的上限。</span><br>    <span class="hljs-comment">// 此方法被设计用于监视系统状态，而不是用于同步控制。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getWaitQueueLength</span><span class="hljs-params">(ConditionObject condition)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!owns(condition))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Not owner&quot;</span>);<br>        <span class="hljs-keyword">return</span> condition.getWaitQueueLength();<br>    &#125;<br><br>    <span class="hljs-comment">// 返回一个集合，该集合包含可能正在等待与此同步器关联的给定条件的那些线程。</span><br>    <span class="hljs-comment">// 因为实际的线程集在构造这个结果时可能会动态变化，</span><br>    <span class="hljs-comment">// 所以返回的集合只是一个最佳估计。返回集合的元素没有特定的顺序。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Collection&lt;Thread&gt; <span class="hljs-title function_">getWaitingThreads</span><span class="hljs-params">(ConditionObject condition)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!owns(condition))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Not owner&quot;</span>);<br>        <span class="hljs-keyword">return</span> condition.getWaitingThreads();<br>    &#125; <br><br>    <span class="hljs-comment">// AbstractQueuedSynchronizer的条件实现，作为锁实现的基础。</span><br>    <span class="hljs-comment">// 这个类的方法文档描述的是机制，而不是从锁和条件用户的角度来看的行为规范。</span><br>    <span class="hljs-comment">// 该类的导出版本通常需要附带描述依赖于相关AbstractQueuedSynchronizer的条件语义的文档。</span><br>    <span class="hljs-comment">// 该类是可序列化的，但所有字段都是transient 的，因此反序列化的condition没有等待者。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConditionObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Condition</span>, java.io.Serializable &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1173984872572414699L</span>;<br>         <span class="hljs-comment">/** First node of condition queue. */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> ConditionNode firstWaiter;<br>        <span class="hljs-comment">/** Last node of condition queue. */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> ConditionNode lastWaiter; <br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Creates a new &#123;<span class="hljs-doctag">@code</span> ConditionObject&#125; instance.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConditionObject</span><span class="hljs-params">()</span> &#123; &#125; <br><br>        <span class="hljs-comment">// Signalling methods </span><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Removes and transfers one or all waiters to sync queue. </span><br><span class="hljs-comment">         * 移除一个或所有等待者并将其转移到同步队列</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSignal</span><span class="hljs-params">(ConditionNode first, <span class="hljs-type">boolean</span> all)</span> &#123;<br>            <span class="hljs-keyword">while</span> (first != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">ConditionNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> first.nextWaiter;<br>                <span class="hljs-keyword">if</span> ((firstWaiter = next) == <span class="hljs-literal">null</span>)<br>                    lastWaiter = <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">if</span> ((first.getAndUnsetStatus(COND) &amp; COND) != <span class="hljs-number">0</span>) &#123;<br>                    enqueue(first);<br>                    <span class="hljs-keyword">if</span> (!all)<br>                        <span class="hljs-keyword">break</span>;<br>                &#125;<br>                first = next;<br>            &#125;<br>        &#125; <br><br>        <span class="hljs-comment">// 将等待时间最长的线程(如果存在)从该条件的等待队列移至拥有锁的等待队列</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">signal</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">ConditionNode</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> firstWaiter;<br>            <span class="hljs-keyword">if</span> (!isHeldExclusively())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>            <span class="hljs-keyword">if</span> (first != <span class="hljs-literal">null</span>)<br>                doSignal(first, <span class="hljs-literal">false</span>);<br>        &#125; <br><br>        <span class="hljs-comment">// 将所有线程从该条件的等待队列移至所属锁的等待队列。</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">signalAll</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">ConditionNode</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> firstWaiter;<br>            <span class="hljs-keyword">if</span> (!isHeldExclusively())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>            <span class="hljs-keyword">if</span> (first != <span class="hljs-literal">null</span>)<br>                doSignal(first, <span class="hljs-literal">true</span>);<br>        &#125; <br><br>        <span class="hljs-comment">// 等待 方法</span><br><br>        <span class="hljs-comment">// 添加一个节点到条件列表并释放锁</span><br>        <span class="hljs-comment">// 持有锁才能await（在等待之后重新acquire savedState）</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">enableWait</span><span class="hljs-params">(ConditionNode node)</span> &#123;<br>            <span class="hljs-keyword">if</span> (isHeldExclusively()) &#123;<br>                node.waiter = Thread.currentThread();<br>                node.setStatusRelaxed(COND | WAITING);<br>                <span class="hljs-type">ConditionNode</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> lastWaiter;<br>                <span class="hljs-keyword">if</span> (last == <span class="hljs-literal">null</span>)<br>                    firstWaiter = node;<br>                <span class="hljs-keyword">else</span><br>                    last.nextWaiter = node;<br>                lastWaiter = node;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">savedState</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-keyword">if</span> (release(savedState))<br>                    <span class="hljs-keyword">return</span> savedState;<br>            &#125;<br>            node.status = CANCELLED; <span class="hljs-comment">// lock not held or inconsistent</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>        &#125; <br><br>        <span class="hljs-comment">// 如果最初放在条件队列中的节点现在准备好重新获取同步队列，则返回true。</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canReacquire</span><span class="hljs-params">(ConditionNode node)</span> &#123;<br>            <span class="hljs-comment">// check links, not status to avoid enqueue race</span><br>            Node p; <span class="hljs-comment">// traverse unless known to be bidirectionally linked</span><br>            <span class="hljs-keyword">return</span> node != <span class="hljs-literal">null</span> &amp;&amp; (p = node.prev) != <span class="hljs-literal">null</span> &amp;&amp;<br>                (p.next == node || isEnqueued(node));<br>        &#125; <br><br>        <span class="hljs-comment">// 从条件队列中取消给定节点和其他非等待节点的链接，除非已经取消链接。</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlinkCancelledWaiters</span><span class="hljs-params">(ConditionNode node)</span> &#123;<br>            <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span> || node.nextWaiter != <span class="hljs-literal">null</span> || node == lastWaiter) &#123;<br>                <span class="hljs-comment">// trail 保存w的前驱</span><br>                <span class="hljs-type">ConditionNode</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> firstWaiter, trail = <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">while</span> (w != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-type">ConditionNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> w.nextWaiter;<br>                    <span class="hljs-keyword">if</span> ((w.status &amp; COND) == <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-comment">// 将w从队列中清除</span><br>                        w.nextWaiter = <span class="hljs-literal">null</span>;<br>                        <span class="hljs-keyword">if</span> (trail == <span class="hljs-literal">null</span>)<br>                            firstWaiter = next;<br>                        <span class="hljs-keyword">else</span><br>                            trail.nextWaiter = next;<br>                        <span class="hljs-comment">// w未队列中最后一个节点</span><br>                        <span class="hljs-keyword">if</span> (next == <span class="hljs-literal">null</span>)<br>                            lastWaiter = trail;<br>                    &#125; <span class="hljs-keyword">else</span><br>                        trail = w;<br>                    w = next;<br>                &#125;<br>            &#125;<br>        &#125; <br><br>        <span class="hljs-comment">// 实现非打断条件等待</span><br>        <span class="hljs-comment">// 1.保存getState返回的锁定状态。</span><br>        <span class="hljs-comment">// 2.以保存的状态作为参数调用release，如果失败则抛出 IllegalMonitorStateException</span><br>        <span class="hljs-comment">// 3.阻塞，直到被唤醒</span><br>        <span class="hljs-comment">// 4.通过调用acquire的专用版本重新获取，并将保存的状态作为参数。</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">awaitUninterruptibly</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">ConditionNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionNode</span>();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">savedState</span> <span class="hljs-operator">=</span> enableWait(node);<br>            LockSupport.setCurrentBlocker(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// for back-compatibility</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">interrupted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>, rejected = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">while</span> (!canReacquire(node)) &#123;<br>                <span class="hljs-keyword">if</span> (Thread.interrupted())<br>                    interrupted = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((node.status &amp; COND) != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">if</span> (rejected)<br>                            node.block();<br>                        <span class="hljs-keyword">else</span><br>                            ForkJoinPool.managedBlock(node);<br>                    &#125; <span class="hljs-keyword">catch</span> (RejectedExecutionException ex) &#123;<br>                        rejected = <span class="hljs-literal">true</span>;<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException ie) &#123;<br>                        interrupted = <span class="hljs-literal">true</span>;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span><br>                    Thread.onSpinWait();    <span class="hljs-comment">// awoke while enqueuing</span><br>            &#125;<br>            LockSupport.setCurrentBlocker(<span class="hljs-literal">null</span>);<br>            node.clearStatus();<br>            acquire(node, savedState, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">0L</span>);<br>            <span class="hljs-keyword">if</span> (interrupted)<br>                Thread.currentThread().interrupt();<br>        &#125; <br><br>        <span class="hljs-comment">// 实现可中断条件等待。</span><br>        <span class="hljs-comment">// 1.如果当前线程被中断，抛出InterruptedException。</span><br>        <span class="hljs-comment">// 2.保存getState返回的锁定状态。</span><br>        <span class="hljs-comment">// 3.以保存的状态作为参数调用release，如果失败则抛出IllegalMonitorStateException。</span><br>        <span class="hljs-comment">// 4.阻塞，直到被唤醒或被中断。</span><br>        <span class="hljs-comment">// 5.通过调用acquire的专用版本重新获取，并将保存的状态作为参数。</span><br>        <span class="hljs-comment">// 6.如果在步骤4中被阻塞而中断，抛出InterruptedException</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">await</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            <span class="hljs-keyword">if</span> (Thread.interrupted())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>            <span class="hljs-type">ConditionNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionNode</span>();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">savedState</span> <span class="hljs-operator">=</span> enableWait(node);<br>            LockSupport.setCurrentBlocker(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// for back-compatibility</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">interrupted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>, cancelled = <span class="hljs-literal">false</span>, rejected = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">while</span> (!canReacquire(node)) &#123;<br>                <span class="hljs-keyword">if</span> (interrupted |= Thread.interrupted()) &#123;<br>                    <span class="hljs-keyword">if</span> (cancelled = (node.getAndUnsetStatus(COND) &amp; COND) != <span class="hljs-number">0</span>)<br>                        <span class="hljs-keyword">break</span>;              <span class="hljs-comment">// else interrupted after signal</span><br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((node.status &amp; COND) != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">if</span> (rejected)<br>                            node.block();<br>                        <span class="hljs-keyword">else</span><br>                            ForkJoinPool.managedBlock(node);<br>                    &#125; <span class="hljs-keyword">catch</span> (RejectedExecutionException ex) &#123;<br>                        rejected = <span class="hljs-literal">true</span>;<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException ie) &#123;<br>                        interrupted = <span class="hljs-literal">true</span>;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span><br>                    Thread.onSpinWait();    <span class="hljs-comment">// awoke while enqueuing</span><br>            &#125;<br>            LockSupport.setCurrentBlocker(<span class="hljs-literal">null</span>);<br>            node.clearStatus();<br>            acquire(node, savedState, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">0L</span>);<br>            <span class="hljs-keyword">if</span> (interrupted) &#123;<br>                <span class="hljs-keyword">if</span> (cancelled) &#123;<br>                    unlinkCancelledWaiters(node);<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>                &#125;<br>                Thread.currentThread().interrupt();<br>            &#125;<br>        &#125; <br><br>        <span class="hljs-comment">// 带超时的await</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-title function_">awaitNanos</span><span class="hljs-params">(<span class="hljs-type">long</span> nanosTimeout)</span><br>                <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            <span class="hljs-keyword">if</span> (Thread.interrupted())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>            <span class="hljs-type">ConditionNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionNode</span>();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">savedState</span> <span class="hljs-operator">=</span> enableWait(node);<br>            <span class="hljs-type">long</span> <span class="hljs-variable">nanos</span> <span class="hljs-operator">=</span> (nanosTimeout &lt; <span class="hljs-number">0L</span>) ? <span class="hljs-number">0L</span> : nanosTimeout;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">deadline</span> <span class="hljs-operator">=</span> System.nanoTime() + nanos;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">cancelled</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>, interrupted = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">while</span> (!canReacquire(node)) &#123;<br>                <span class="hljs-keyword">if</span> ((interrupted |= Thread.interrupted()) ||<br>                    (nanos = deadline - System.nanoTime()) &lt;= <span class="hljs-number">0L</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (cancelled = (node.getAndUnsetStatus(COND) &amp; COND) != <span class="hljs-number">0</span>)<br>                        <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span><br>                    LockSupport.parkNanos(<span class="hljs-built_in">this</span>, nanos);<br>            &#125;<br>            node.clearStatus();<br>            acquire(node, savedState, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">0L</span>);<br>            <span class="hljs-keyword">if</span> (cancelled) &#123;<br>                unlinkCancelledWaiters(node);<br>                <span class="hljs-keyword">if</span> (interrupted)<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (interrupted)<br>                Thread.currentThread().interrupt();<br>            <span class="hljs-type">long</span> <span class="hljs-variable">remaining</span> <span class="hljs-operator">=</span> deadline - System.nanoTime(); <span class="hljs-comment">// avoid overflow</span><br>            <span class="hljs-keyword">return</span> (remaining &lt;= nanosTimeout) ? remaining : Long.MIN_VALUE;<br>        &#125; <br><br>        <span class="hljs-comment">// 绝对定时的条件等待</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">awaitUntil</span><span class="hljs-params">(Date deadline)</span><br>                <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">abstime</span> <span class="hljs-operator">=</span> deadline.getTime();<br>            <span class="hljs-keyword">if</span> (Thread.interrupted())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>            <span class="hljs-type">ConditionNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionNode</span>();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">savedState</span> <span class="hljs-operator">=</span> enableWait(node);<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">cancelled</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>, interrupted = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">while</span> (!canReacquire(node)) &#123;<br>                <span class="hljs-keyword">if</span> ((interrupted |= Thread.interrupted()) ||<br>                    System.currentTimeMillis() &gt;= abstime) &#123;<br>                    <span class="hljs-keyword">if</span> (cancelled = (node.getAndUnsetStatus(COND) &amp; COND) != <span class="hljs-number">0</span>)<br>                        <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span><br>                    LockSupport.parkUntil(<span class="hljs-built_in">this</span>, abstime);<br>            &#125;<br>            node.clearStatus();<br>            acquire(node, savedState, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">0L</span>);<br>            <span class="hljs-keyword">if</span> (cancelled) &#123;<br>                unlinkCancelledWaiters(node);<br>                <span class="hljs-keyword">if</span> (interrupted)<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (interrupted)<br>                Thread.currentThread().interrupt();<br>            <span class="hljs-keyword">return</span> !cancelled;<br>        &#125; <br><br>        <span class="hljs-comment">// 自定义时间格式的await</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">await</span><span class="hljs-params">(<span class="hljs-type">long</span> time, TimeUnit unit)</span><br>                <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">nanosTimeout</span> <span class="hljs-operator">=</span> unit.toNanos(time);<br>            <span class="hljs-keyword">if</span> (Thread.interrupted())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>            <span class="hljs-type">ConditionNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionNode</span>();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">savedState</span> <span class="hljs-operator">=</span> enableWait(node);<br>            <span class="hljs-type">long</span> <span class="hljs-variable">nanos</span> <span class="hljs-operator">=</span> (nanosTimeout &lt; <span class="hljs-number">0L</span>) ? <span class="hljs-number">0L</span> : nanosTimeout;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">deadline</span> <span class="hljs-operator">=</span> System.nanoTime() + nanos;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">cancelled</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>, interrupted = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">while</span> (!canReacquire(node)) &#123;<br>                <span class="hljs-keyword">if</span> ((interrupted |= Thread.interrupted()) ||<br>                    (nanos = deadline - System.nanoTime()) &lt;= <span class="hljs-number">0L</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (cancelled = (node.getAndUnsetStatus(COND) &amp; COND) != <span class="hljs-number">0</span>)<br>                        <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span><br>                    LockSupport.parkNanos(<span class="hljs-built_in">this</span>, nanos);<br>            &#125;<br>            node.clearStatus();<br>            acquire(node, savedState, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">0L</span>);<br>            <span class="hljs-keyword">if</span> (cancelled) &#123;<br>                unlinkCancelledWaiters(node);<br>                <span class="hljs-keyword">if</span> (interrupted)<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (interrupted)<br>                Thread.currentThread().interrupt();<br>            <span class="hljs-keyword">return</span> !cancelled;<br>        &#125; <br><br>        <span class="hljs-comment">// 可观察性支持</span><br><br>        <span class="hljs-comment">// 如果此条件是由给定的同步对象创建的，则返回true。</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isOwnedBy</span><span class="hljs-params">(AbstractQueuedSynchronizer sync)</span> &#123;<br>            <span class="hljs-keyword">return</span> sync == AbstractQueuedSynchronizer.<span class="hljs-built_in">this</span>;<br>        &#125; <br><br>        <span class="hljs-comment">// 查询是否有任何线程正在等待该条件</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasWaiters</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (!isHeldExclusively())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">ConditionNode</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> firstWaiter; w != <span class="hljs-literal">null</span>; w = w.nextWaiter) &#123;<br>                <span class="hljs-keyword">if</span> ((w.status &amp; COND) != <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <br><br>        <span class="hljs-comment">// 返回在这个condition下等待的线程数的估计值</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getWaitQueueLength</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (!isHeldExclusively())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">ConditionNode</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> firstWaiter; w != <span class="hljs-literal">null</span>; w = w.nextWaiter) &#123;<br>                <span class="hljs-keyword">if</span> ((w.status &amp; COND) != <span class="hljs-number">0</span>)<br>                    ++n;<br>            &#125;<br>            <span class="hljs-keyword">return</span> n;<br>        &#125; <br><br>        <span class="hljs-comment">// 返回一个集合，其中包含可能正在等待此条件的那些线程。</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Collection&lt;Thread&gt; <span class="hljs-title function_">getWaitingThreads</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (!isHeldExclusively())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>            ArrayList&lt;Thread&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">ConditionNode</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> firstWaiter; w != <span class="hljs-literal">null</span>; w = w.nextWaiter) &#123;<br>                <span class="hljs-keyword">if</span> ((w.status &amp; COND) != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> w.waiter;<br>                    <span class="hljs-keyword">if</span> (t != <span class="hljs-literal">null</span>)<br>                        list.add(t);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> list;<br>        &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><code>acquire(Node node, int arg, boolean shared, boolean interruptible, boolean timed, long time)</code>：node对应的线程获取锁，即排他地修改AbstractQueuedSynchronizer 的状态（state）。只有CLH队列中的第一个节点或者还未入队的节点有竞争锁的资格，否则在队列中阻塞</p><p><code>tryAcquire(int arg) 和 tryRelease(int arg)</code> 本质上都是修改AbstractQueuedSynchronizer 的状态</p><p><code>acquire(int arg)</code>：在上面的acquire之前先 tryAcquire 一次</p><p><code>release(int arg)</code>：tryRelease 成功后唤醒队列中阻塞的节点</p><p><code>await()</code>：一直阻塞，直到其他线程调用signal或signalAll后对应的节点进入CLH队列，最后执行acquire逻辑获取锁（还要和其他节点竞争，哭）。</p><blockquote><p>注意：</p><ol><li><p>await时会先判断当前线程是否持有锁，emmm，这很符合逻辑</p></li><li><p>其他await方法逻辑类似</p></li></ol></blockquote><p><code>signal() 和 signalAll()</code>：将第一个（所有）符合条件的ConditionNode插入到CLH队列尾部</p><p>根据上面的分析知继承了AbstractQueuedSynchronizer的类通过不同的修改state的策略来达到不同的效果</p>]]></content>
    
    
    <categories>
      
      <category>源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3-cache.md</title>
    <link href="/2023/05/20/3-cache/"/>
    <url>/2023/05/20/3-cache/</url>
    
    <content type="html"><![CDATA[<p>    这个模块主要自定义了缓存接口和提供了框架自带的缓存实现</p><h4 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h4><p>首先是缓存接口</p><p>将官方注释翻译一下：</p><p>    这个接口是缓存提供者的SPI（了解java SPI机制可以参考这篇文章–<a href="https://cloud.tencent.com/developer/article/1785056">Java SPI (Service Provider Interface) 机制详解-腾讯云开发者社区-腾讯云 (tencent.com)</a>）。</p><p>    每个命名空间都会创建一个缓存实例。</p><p>    缓存的实现必须有一个接收一个String型缓存id的构造函数，Mybatis将把名称空间作为id传给构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> The identifier of this cache</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 取得ID</span><br>  String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> key Can be any object but usually it is a &#123;<span class="hljs-doctag">@link</span> CacheKey&#125;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value The result of a select.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 存入值</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object value)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> key The key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> The object stored in the cache.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 获取值</span><br>  Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Optional. It is not called by the core.</span><br><span class="hljs-comment">   * </span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> key The key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> The object that was removed</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 删除值</span><br>  Object <span class="hljs-title function_">removeObject</span><span class="hljs-params">(Object key)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Clears this cache instance</span><br><span class="hljs-comment">   */</span>  <br>  <span class="hljs-comment">// 清空</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Optional. This method is not called by the core.</span><br><span class="hljs-comment">   * </span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> The number of elements stored in the cache (not its capacity).</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 取得大小</span><br>  <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">/** </span><br><span class="hljs-comment">   * Optional. As of 3.2.6 this method is no longer called by the core.</span><br><span class="hljs-comment">   *  </span><br><span class="hljs-comment">   * Any locking needed by the cache must be provided internally by the cache provider.</span><br><span class="hljs-comment">   * </span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> A ReadWriteLock </span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 取得读写锁, 从3.2.6开始没用了，要SPI自己实现锁</span><br>  ReadWriteLock <span class="hljs-title function_">getReadWriteLock</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="CacheKey"><a href="#CacheKey" class="headerlink" title="CacheKey"></a>CacheKey</h4><p>    缓存key。一般缓存框架基本上都是以key-value的结构进行存储，Mybatis 对于其Key的生成采取的规则为：[mappedStementId + offset + limit + SQL + queryParams + environment]生成一个哈希码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheKey</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>, Serializable &#123;<br>  <span class="hljs-comment">// update 和 updateAll方法无效的 CacheKey（这个属性没有用到）</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">CacheKey</span> <span class="hljs-variable">NULL_CACHE_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullCacheKey</span>();<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_MULTIPLYER</span> <span class="hljs-operator">=</span> <span class="hljs-number">37</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_HASHCODE</span> <span class="hljs-operator">=</span> <span class="hljs-number">17</span>;<br><br>  <span class="hljs-comment">// 固定的乘数</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> multiplier;<br>  <span class="hljs-comment">// hash码</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> hashcode;<br>  <span class="hljs-comment">// 校验和 -- 计算方式为所有缓存对象的hash码相加</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> checksum;<br>  <span class="hljs-comment">// 缓存对象计数</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count;<br>  <span class="hljs-comment">// 存储所有缓存对象用于equals判断</span><br>  <span class="hljs-keyword">private</span> List&lt;Object&gt; updateList;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">CacheKey</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.hashcode = DEFAULT_HASHCODE;<br>    <span class="hljs-built_in">this</span>.multiplier = DEFAULT_MULTIPLYER;<br>    <span class="hljs-built_in">this</span>.count = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">this</span>.updateList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;();<br>  &#125;<br><br>  <span class="hljs-comment">// 传入一个Object数组，更新hashcode和效验码</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">CacheKey</span><span class="hljs-params">(Object[] objects)</span> &#123;<br>    <span class="hljs-built_in">this</span>();<br>    updateAll(objects);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getUpdateCount</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> updateList.size();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Object object)</span> &#123;<br>    <span class="hljs-keyword">if</span> (object != <span class="hljs-literal">null</span> &amp;&amp; object.getClass().isArray()) &#123;<br>      <span class="hljs-comment">// 如果是数组，则循环调用doUpdate</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> Array.getLength(object);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> Array.get(object, i);<br>        doUpdate(element);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 否则，doUpdate</span><br>      doUpdate(object);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doUpdate</span><span class="hljs-params">(Object object)</span> &#123;<br>    <span class="hljs-comment">// 计算hash值，校验码</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">baseHashCode</span> <span class="hljs-operator">=</span> object == <span class="hljs-literal">null</span> ? <span class="hljs-number">1</span> : object.hashCode();<br><br>    count++;<br>    checksum += baseHashCode;<br>    baseHashCode *= count;<br><br>    hashcode = multiplier * hashcode + baseHashCode;<br><br>    <span class="hljs-comment">// 同时将对象加入列表，这样万一两个CacheKey的hash码碰巧一样，再根据对象严格equals来区分</span><br>    updateList.add(object);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateAll</span><span class="hljs-params">(Object[] objects)</span> &#123;<br>    <span class="hljs-keyword">for</span> (Object o : objects) &#123;<br>      update(o);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object object)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == object) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!(object <span class="hljs-keyword">instanceof</span> CacheKey)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">CacheKey</span> <span class="hljs-variable">cacheKey</span> <span class="hljs-operator">=</span> (CacheKey) object;<br><br>    <span class="hljs-comment">// 先比hashcode，checksum，count，理论上可以快速比出来</span><br>    <span class="hljs-keyword">if</span> (hashcode != cacheKey.hashcode) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (checksum != cacheKey.checksum) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (count != cacheKey.count) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 万一两个CacheKey的hash码碰巧一样，再根据对象严格equals来区分</span><br>    <span class="hljs-comment">// 这里两个list的size没比是否相等，其实前面count相等就已经保证了</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; updateList.size(); i++) &#123;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">thisObject</span> <span class="hljs-operator">=</span> updateList.get(i);<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">thatObject</span> <span class="hljs-operator">=</span> cacheKey.updateList.get(i);<br>      <span class="hljs-keyword">if</span> (thisObject == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (thatObject != <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (!thisObject.equals(thatObject)) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125; <br><br>  <span class="hljs-comment">// 格式为：hashcode:checkSum:[object.toString]</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>().append(hashcode).append(<span class="hljs-string">&#x27;:&#x27;</span>).append(checksum);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; updateList.size(); i++) &#123;<br>      returnValue.append(<span class="hljs-string">&#x27;:&#x27;</span>).append(updateList.get(i));<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> returnValue.toString();<br>  &#125; <br><br>  <span class="hljs-comment">// 深拷贝CacheKey</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> CacheKey <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>    <span class="hljs-type">CacheKey</span> <span class="hljs-variable">clonedCacheKey</span> <span class="hljs-operator">=</span> (CacheKey) <span class="hljs-built_in">super</span>.clone();<br>    clonedCacheKey.updateList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;(updateList);<br>    <span class="hljs-keyword">return</span> clonedCacheKey;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="NullCacheKey"><a href="#NullCacheKey" class="headerlink" title="NullCacheKey"></a>NullCacheKey</h4><p>不能添加缓存，因此叫NullCacheKey</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NullCacheKey</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CacheKey</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">3704229911977019465L</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">NullCacheKey</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 只有hash值和校验码为key?</span><br>    <span class="hljs-built_in">super</span>();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Object object)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Not allowed to update a NullCacheKey instance.&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateAll</span><span class="hljs-params">(Object[] objects)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Not allowed to update a NullCacheKey instance.&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="PerpetualCache"><a href="#PerpetualCache" class="headerlink" title="PerpetualCache"></a>PerpetualCache</h4><p>    永久缓存，没有缓存过期和清除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PerpetualCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br>  <span class="hljs-comment">// 每个永久缓存有一个ID来识别</span><br>  <span class="hljs-keyword">private</span> String id; <br><br>  <span class="hljs-comment">// 内部就是一个HashMap,所有方法基本就是直接调用HashMap的方法,不支持多线程？</span><br>  <span class="hljs-keyword">private</span> Map&lt;Object, Object&gt; cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Object, Object&gt;();<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">PerpetualCache</span><span class="hljs-params">(String id)</span> &#123;<br>    <span class="hljs-built_in">this</span>.id = id;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-comment">// 只有id相等才认为两个cache相同</span><br>    <span class="hljs-keyword">if</span> (getId() == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Cache instances require an ID.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> Cache)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-type">Cache</span> <span class="hljs-variable">otherCache</span> <span class="hljs-operator">=</span> (Cache) o;<br>    <span class="hljs-keyword">return</span> getId().equals(otherCache.getId());<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (getId() == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Cache instances require an ID.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> getId().hashCode();<br>  &#125; <br><br>  <span class="hljs-comment">// 其他要实现的都依赖于hashmap</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BlockingCache"><a href="#BlockingCache" class="headerlink" title="BlockingCache"></a>BlockingCache</h4><p>    简单的阻塞装饰器</p><p>    EhCache’s BlockingCache decorator的简单低效版本</p><p>    当在缓存中找不到这个元素时，给cache key上个锁。这样，其他获取该cache key的线程将会一直等待直到这个元素被填充而不是命中数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlockingCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-comment">// 获取锁的超时时间</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> timeout;<br>  <span class="hljs-comment">// 委托的Cache对象</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Cache delegate;<br>  <span class="hljs-comment">// 可重入锁map（并发可用）</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ConcurrentHashMap&lt;Object, ReentrantLock&gt; locks;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">BlockingCache</span><span class="hljs-params">(Cache delegate)</span> &#123;<br>    <span class="hljs-built_in">this</span>.delegate = delegate;<br>    <span class="hljs-built_in">this</span>.locks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;Object, ReentrantLock&gt;();<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object value)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      delegate.putObject(key, value);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-comment">// 释放锁（只有当前线程持有锁时才能释放）</span><br>      releaseLock(key);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">releaseLock</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> locks.get(key);<br>    <span class="hljs-comment">// 防止破坏 getObject时加的锁 ？</span><br>    <span class="hljs-keyword">if</span> (lock.isHeldByCurrentThread()) &#123;<br>      lock.unlock();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    acquireLock(key);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> delegate.getObject(key);<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这里value 为 null 的话锁会一直不释放</span><br><span class="hljs-comment">     * 那么当前线程 putObject 或者 销毁时释放锁？</span><br><span class="hljs-comment">     * 开发者关于这个问题的疑问见 issue #1410</span><br><span class="hljs-comment">     * 有人发现这样实现可能会导致死锁，详见 issue #1261,#1357</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 我去看了下最新的代码，官方已经将 ReentrantLock 换为了 </span><br><span class="hljs-comment">     * CountDownLatch,issue上说的是为了避免oom（https://stackoverflow.com/questions/41898355/lock-handler-for-arbitrary-keys/41912651#41912651）</span><br><span class="hljs-comment">     * 还有官方加了一行新的注释 </span><br><span class="hljs-comment">     * By its nature, this implementation can cause deadlock when used incorrectly.</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>) &#123;<br>      releaseLock(key);<br>    &#125;        <br>    <span class="hljs-keyword">return</span> value;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquireLock</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> getLockForKey(key);<br>    <span class="hljs-keyword">if</span> (timeout &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">acquired</span> <span class="hljs-operator">=</span> lock.tryLock(timeout, TimeUnit.MILLISECONDS);<br>        <span class="hljs-keyword">if</span> (!acquired) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Couldn&#x27;t get a lock in &quot;</span> + timeout + <span class="hljs-string">&quot; for the key &quot;</span> +  key + <span class="hljs-string">&quot; at the cache &quot;</span> + delegate.getId());  <br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Got interrupted while trying to acquire lock for key &quot;</span> + key, e);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      lock.lock();<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> ReentrantLock <span class="hljs-title function_">getLockForKey</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">previous</span> <span class="hljs-operator">=</span> locks.putIfAbsent(key, lock);<br>    <span class="hljs-keyword">return</span> previous == <span class="hljs-literal">null</span> ? lock : previous;<br>  &#125; <br><br>  <span class="hljs-comment">// 其他方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><p>下面附上会导致死锁的测试代码（Mybatis版本为本博文涉及的版本）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BolckingCacheTest</span> &#123;<br><br>    <span class="hljs-meta">@Test(timeout = 3000L)</span><br>    <span class="hljs-comment">// 使用 CountDownLatch 的最新代码也会发生死锁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">BlockingCache</span> <span class="hljs-variable">cache</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockingCache</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PerpetualCache</span>(<span class="hljs-string">&quot;default&quot;</span>));<br><br>        <span class="hljs-comment">// lock twice</span><br>        cache.getObject(<span class="hljs-number">1</span>);<br>        cache.getObject(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; Assert.assertEquals(cache.getObject(<span class="hljs-number">1</span>), <span class="hljs-number">1</span>));<br>        thread.setDaemon(<span class="hljs-literal">false</span>);<br>        thread.start();<br><br>        <span class="hljs-comment">// but release once</span><br>        cache.putObject(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><br>        thread.join();<br>    &#125;<br><br>    <span class="hljs-meta">@Test(timeout = 3000L)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getObject2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">BlockingCache</span> <span class="hljs-variable">cache</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockingCache</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PerpetualCache</span>(<span class="hljs-string">&quot;default&quot;</span>));<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; Assert.assertEquals(cache.getObject(<span class="hljs-number">1</span>), <span class="hljs-number">1</span>));<br>        thread.setDaemon(<span class="hljs-literal">false</span>);<br>        thread.start();<br><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br><br>        <span class="hljs-comment">// but release once</span><br>        cache.putObject(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// lock twice</span><br>        cache.getObject(<span class="hljs-number">1</span>);<br>        cache.getObject(<span class="hljs-number">1</span>);<br><br>        thread.join();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="FifoCache"><a href="#FifoCache" class="headerlink" title="FifoCache"></a>FifoCache</h4><p>FIFO缓存，这个类就是维护了一个FIFI链表，其他接口都委托给包装的cache去做。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FifoCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Cache delegate;<br>  <span class="hljs-comment">// FIFI 链表</span><br>  <span class="hljs-keyword">private</span> Deque&lt;Object&gt; keyList;<br>  <span class="hljs-comment">// 链表长度(默认为1024)</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">FifoCache</span><span class="hljs-params">(Cache delegate)</span> &#123;<br>    <span class="hljs-built_in">this</span>.delegate = delegate;<br>    <span class="hljs-built_in">this</span>.keyList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Object&gt;();<br>    <span class="hljs-built_in">this</span>.size = <span class="hljs-number">1024</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object value)</span> &#123;<br>    cycleKeyList(key);<br>    delegate.putObject(key, value);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cycleKeyList</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// 增加记录时判断如果记录已超过1024条，会移除链表的第一个元素，从而达到FIFO缓存效果</span><br>    keyList.addLast(key);<br>    <span class="hljs-keyword">if</span> (keyList.size() &gt; size) &#123;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">oldestKey</span> <span class="hljs-operator">=</span> keyList.removeFirst();<br>      delegate.removeObject(oldestKey);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 其他方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="LoggingCache"><a href="#LoggingCache" class="headerlink" title="LoggingCache"></a>LoggingCache</h4><p>    加了日志的缓存，日志主要是取缓存是打印命中率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoggingCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-comment">// 用的mybatis自己的抽象Log</span><br>  <span class="hljs-keyword">private</span> Log log;  <br>  <span class="hljs-keyword">private</span> Cache delegate;<br>  <span class="hljs-comment">// 请求次数</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-variable">requests</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">// 命中缓存次数</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-variable">hits</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoggingCache</span><span class="hljs-params">(Cache delegate)</span> &#123;<br>    <span class="hljs-built_in">this</span>.delegate = delegate;<br>    <span class="hljs-built_in">this</span>.log = LogFactory.getLog(getId());<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// 访问一次requests加一</span><br>    requests++;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> delegate.getObject(key);<br>    <span class="hljs-comment">//命中了则hits加一</span><br>    <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>) &#123;<br>      hits++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>      <span class="hljs-comment">// 就是打印命中率 hits/requests</span><br>      log.debug(<span class="hljs-string">&quot;Cache Hit Ratio [&quot;</span> + getId() + <span class="hljs-string">&quot;]: &quot;</span> + getHitRatio());<br>    &#125;<br>    <span class="hljs-keyword">return</span> value;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getHitRatio</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">double</span>) hits / (<span class="hljs-type">double</span>) requests;<br>  &#125; <br><br>  <span class="hljs-comment">// 其他方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="LruCache"><a href="#LruCache" class="headerlink" title="LruCache"></a>LruCache</h4><p>    最近最少使用缓存。基于 LinkedHashMap，覆盖其removeEldestEntry方法实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LruCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Cache delegate;<br>  <span class="hljs-comment">// 额外用了一个map才做lru，但是委托的Cache里面其实也是一个map，这样等于用2倍的内存实现lru功能</span><br>  <span class="hljs-keyword">private</span> Map&lt;Object, Object&gt; keyMap;<br>  <span class="hljs-keyword">private</span> Object eldestKey; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">LruCache</span><span class="hljs-params">(Cache delegate)</span> &#123;<br>    <span class="hljs-built_in">this</span>.delegate = delegate;<br>    setSize(<span class="hljs-number">1024</span>);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSize</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> size)</span> &#123;<br>    keyMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;Object, Object&gt;(size, <span class="hljs-number">.75F</span>, <span class="hljs-literal">true</span>) &#123;<br>      <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">4267176411845948333L</span>;<br><br>      <span class="hljs-comment">// 核心就是覆盖 LinkedHashMap.removeEldestEntry方法,</span><br>      <span class="hljs-comment">// 返回true或false告诉 LinkedHashMap要不要删除此最老键值</span><br>      <span class="hljs-comment">// LinkedHashMap内部其实就是每次访问或者插入一个元素都会把元素放到链表末尾，</span><br>      <span class="hljs-comment">// 这样不经常访问的键值肯定就在链表开头啦</span><br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">removeEldestEntry</span><span class="hljs-params">(Map.Entry&lt;Object, Object&gt; eldest)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">tooBig</span> <span class="hljs-operator">=</span> size() &gt; size;<br>        <span class="hljs-keyword">if</span> (tooBig) &#123;<br>          <span class="hljs-comment">// 这里没辙了，把eldestKey存入实例变量</span><br>          eldestKey = eldest.getKey();<br>        &#125;<br>        <span class="hljs-keyword">return</span> tooBig;<br>      &#125;<br>    &#125;;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object value)</span> &#123;<br>    delegate.putObject(key, value);<br>    <span class="hljs-comment">// 增加新纪录后，判断是否要将最老元素移除</span><br>    cycleKeyList(key);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// get的时候调用一下LinkedHashMap.get，让最近访问的值移动到链表末尾</span><br>    keyMap.get(key); <span class="hljs-comment">//touch</span><br>    <span class="hljs-keyword">return</span> delegate.getObject(key);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">removeObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// 为啥不 remove</span><br>    <span class="hljs-comment">// keyMap.remove(key);</span><br>    <span class="hljs-comment">// key 不会再被访问，下次清除缓存之前如果key未被放入缓存就会被删除</span><br>    <span class="hljs-keyword">return</span> delegate.removeObject(key);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">cycleKeyList</span><span class="hljs-params">(Object key)</span> &#123;<br>    keyMap.put(key, key);<br>    <span class="hljs-comment">// keyMap是linkedhashmap，最老的记录已经被移除了，然后这里我们还需要移除被委托的那个cache的记录</span><br>    <span class="hljs-keyword">if</span> (eldestKey != <span class="hljs-literal">null</span>) &#123;<br>      delegate.removeObject(eldestKey);<br>      eldestKey = <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 其他方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ScheduledCache"><a href="#ScheduledCache" class="headerlink" title="ScheduledCache"></a>ScheduledCache</h4><p>    定时调度缓存。目的是定时清空一下缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduledCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-keyword">private</span> Cache delegate;<br>  <span class="hljs-comment">// 清理间隔</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> clearInterval;<br>  <span class="hljs-comment">// 上次清理时间</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> lastClear;    <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">ScheduledCache</span><span class="hljs-params">(Cache delegate)</span> &#123;<br>    <span class="hljs-built_in">this</span>.delegate = delegate;<br>    <span class="hljs-comment">// 默认 1小时清空一次缓存</span><br>    <span class="hljs-built_in">this</span>.clearInterval = <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>; <span class="hljs-comment">// 1 hour</span><br>    <span class="hljs-built_in">this</span>.lastClear = System.currentTimeMillis();<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>    clearWhenStale();<br>    <span class="hljs-keyword">return</span> delegate.getSize();<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object object)</span> &#123;<br>    clearWhenStale();<br>    delegate.putObject(key, object);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-keyword">return</span> clearWhenStale() ? <span class="hljs-literal">null</span> : delegate.getObject(key);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">clearWhenStale</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 如果到时间了，清空一下缓存</span><br>    <span class="hljs-keyword">if</span> (System.currentTimeMillis() - lastClear &gt; clearInterval) &#123;<br>      clear();<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>    lastClear = System.currentTimeMillis();<br>    delegate.clear();<br>  &#125; <br><br>  <span class="hljs-comment">// 其他方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SerializedCache"><a href="#SerializedCache" class="headerlink" title="SerializedCache"></a>SerializedCache</h4><p>    序列化缓存。原理是先将对象序列化成2进制，再缓存。好处是将对象压缩了，省内存、坏处是速度慢了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializedCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br>  <span class="hljs-keyword">private</span> Cache delegate; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object object)</span> &#123;<br>    <span class="hljs-keyword">if</span> (object == <span class="hljs-literal">null</span> || object <span class="hljs-keyword">instanceof</span> Serializable) &#123;<br>      <span class="hljs-comment">// 先序列化，再委托被包装者putObject</span><br>      delegate.putObject(key, serialize((Serializable) object));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;SharedCache failed to make a copy of a non-serializable object: &quot;</span> + object);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// 先委托被包装者getObject,再反序列化</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> delegate.getObject(key);<br>    <span class="hljs-keyword">return</span> object == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : deserialize((<span class="hljs-type">byte</span>[]) object);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] serialize(Serializable value) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 序列化核心就是ByteArrayOutputStream</span><br>      <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>      <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bos);<br>      oos.writeObject(value);<br>      oos.flush();<br>      oos.close();<br>      <span class="hljs-keyword">return</span> bos.toByteArray();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Error serializing object.  Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Serializable <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] value)</span> &#123;<br>    Serializable result;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 反序列化核心就是ByteArrayInputStream</span><br>      <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(value);<br>      <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomObjectInputStream</span>(bis);<br>      result = (Serializable) ois.readObject();<br>      ois.close();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Error deserializing object.  Cause: &quot;</span> + e, e);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomObjectInputStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ObjectInputStream</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomObjectInputStream</span><span class="hljs-params">(InputStream in)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>      <span class="hljs-built_in">super</span>(in);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">// 使用自定义的资源加载方法 ？</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc) <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>      <span class="hljs-keyword">return</span> Resources.classForName(desc.getName());<br>    &#125;<br>    <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SoftCache"><a href="#SoftCache" class="headerlink" title="SoftCache"></a>SoftCache</h4><p>    软引用缓存,核心是SoftReference</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SoftCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-comment">// 链表用来引用元素，防垃圾回收</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Deque&lt;Object&gt; hardLinksToAvoidGarbageCollection;<br><br>  <span class="hljs-comment">// 被垃圾回收的引用队列</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReferenceQueue&lt;Object&gt; queueOfGarbageCollectedEntries;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Cache delegate;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> numberOfHardLinks; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">SoftCache</span><span class="hljs-params">(Cache delegate)</span> &#123;<br>    <span class="hljs-built_in">this</span>.delegate = delegate;<br>    <span class="hljs-comment">// 默认链表可以存256元素</span><br>    <span class="hljs-built_in">this</span>.numberOfHardLinks = <span class="hljs-number">256</span>;<br>    <span class="hljs-built_in">this</span>.hardLinksToAvoidGarbageCollection = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Object&gt;();<br>    <span class="hljs-built_in">this</span>.queueOfGarbageCollectedEntries = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceQueue</span>&lt;Object&gt;();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>    removeGarbageCollectedItems();<br>    <span class="hljs-keyword">return</span> delegate.getSize();<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeGarbageCollectedItems</span><span class="hljs-params">()</span> &#123;<br>    SoftEntry sv;<br>    <span class="hljs-comment">// 查看被垃圾回收的元素组成的引用队列,然后调用removeObject移除他们</span><br>    <span class="hljs-keyword">while</span> ((sv = (SoftEntry) queueOfGarbageCollectedEntries.poll()) != <span class="hljs-literal">null</span>) &#123;<br>      delegate.removeObject(sv.key);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object value)</span> &#123;<br>    removeGarbageCollectedItems();<br>    <span class="hljs-comment">// putObject存了一个SoftReference，这样value没用时会自动垃圾回收</span><br>    delegate.putObject(key, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoftEntry</span>(key, value, queueOfGarbageCollectedEntries));<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span>  <br>    <span class="hljs-comment">// assumed delegate cache is totally managed by this cache</span><br>    SoftReference&lt;Object&gt; softReference = (SoftReference&lt;Object&gt;) delegate.getObject(key);<br>    <span class="hljs-keyword">if</span> (softReference != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 核心调用SoftReference.get取得元素</span><br>      result = softReference.get();<br>      <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br>        delegate.removeObject(key);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// See #586 (and #335) modifications need more than a read lock </span><br>        <span class="hljs-keyword">synchronized</span> (hardLinksToAvoidGarbageCollection) &#123;<br>          <span class="hljs-comment">// 将value存入经常访问的键值到链表(最多256元素),防止垃圾回收</span><br>          hardLinksToAvoidGarbageCollection.addFirst(result);<br>          <span class="hljs-keyword">if</span> (hardLinksToAvoidGarbageCollection.size() &gt; numberOfHardLinks) &#123;<br>            hardLinksToAvoidGarbageCollection.removeLast();<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">removeObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    removeGarbageCollectedItems();<br>    <span class="hljs-keyword">return</span> delegate.removeObject(key);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (hardLinksToAvoidGarbageCollection) &#123;<br>      hardLinksToAvoidGarbageCollection.clear();<br>    &#125;<br>    removeGarbageCollectedItems();<br>    delegate.clear();<br>  &#125; <br><br>  <span class="hljs-comment">// 这里设为static，前面又有new，不太懂</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SoftEntry</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SoftReference</span>&lt;Object&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object key;<br><br>    SoftEntry(Object key, Object value, ReferenceQueue&lt;Object&gt; garbageCollectionQueue) &#123;<br>      <span class="hljs-built_in">super</span>(value, garbageCollectionQueue);<br>      <span class="hljs-built_in">this</span>.key = key;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 其他方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SynchronizedCache"><a href="#SynchronizedCache" class="headerlink" title="SynchronizedCache"></a>SynchronizedCache</h4><p>    同步缓存。防止多线程问题</p><p>    核心: 加锁。</p><p>    ReadWriteLock.readLock().lock()&#x2F;unlock()</p><p>    ReadWriteLock.writeLock().lock()&#x2F;unlock()</p><p>    3.2.6以后这个类已经没用了，考虑到Hazelcast, EhCache已经有锁机制了，所以这个锁就画蛇添足了。</p><p>    bug见<a href="https://github.com/mybatis/mybatis-3/issues/159">https://github.com/mybatis/mybatis-3/issues/159</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SynchronizedCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-comment">// 就是在一些可能会出现并发异常的接口上加了个 synchronized</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> delegate.getSize();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object object)</span> &#123;<br>    delegate.putObject(key, object);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-keyword">return</span> delegate.getObject(key);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Object <span class="hljs-title function_">removeObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-keyword">return</span> delegate.removeObject(key);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>    delegate.clear();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="TransactionalCache"><a href="#TransactionalCache" class="headerlink" title="TransactionalCache"></a>TransactionalCache</h4><p>    二级缓存事务缓冲区</p><p>    此类保存会话期间要添加到二级缓存的所有缓存条目</p><p>    当调用commit时，条目被发送到缓存，如果会话回滚，则条目被丢弃</p><p>    添加了阻塞缓存支持。因此，任何返回缓存未命中的get()后面都会跟一个put()，这样就可以释放任何与该键相关联的锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransactionalCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-keyword">private</span> Cache delegate;<br>  <span class="hljs-comment">// commit前是否执行过 clear</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> clearOnCommit;<br>  <span class="hljs-comment">// commit时要添加的元素</span><br>  <span class="hljs-keyword">private</span> Map&lt;Object, Object&gt; entriesToAddOnCommit;<br>  <span class="hljs-keyword">private</span> Set&lt;Object&gt; entriesMissedInCache; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">TransactionalCache</span><span class="hljs-params">(Cache delegate)</span> &#123;<br>    <span class="hljs-built_in">this</span>.delegate = delegate;<br>    <span class="hljs-built_in">this</span>.clearOnCommit = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">this</span>.entriesToAddOnCommit = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Object, Object&gt;();<br>    <span class="hljs-built_in">this</span>.entriesMissedInCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Object&gt;();<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// issue #116</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> delegate.getObject(key);<br>    <span class="hljs-keyword">if</span> (object == <span class="hljs-literal">null</span>) &#123;<br>      entriesMissedInCache.add(key);<br>    &#125;<br>    <span class="hljs-comment">// issue #146</span><br>    <span class="hljs-keyword">if</span> (clearOnCommit) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> object;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object object)</span> &#123;<br>    entriesToAddOnCommit.put(key, object);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">removeObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>    clearOnCommit = <span class="hljs-literal">true</span>;<br>    entriesToAddOnCommit.clear();<br>  &#125; <br><br>  <span class="hljs-comment">// 多了commit方法，提供事务功能</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (clearOnCommit) &#123;<br>      delegate.clear();<br>    &#125;<br>    flushPendingEntries();<br>    reset();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">()</span> &#123;<br>    unlockMissedEntries();<br>    reset();<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reset</span><span class="hljs-params">()</span> &#123;<br>    clearOnCommit = <span class="hljs-literal">false</span>;<br>    entriesToAddOnCommit.clear();<br>    entriesMissedInCache.clear();<br>  &#125; <br><br>  <span class="hljs-comment">// 将 entriesToAddOnCommit 和 entriesMissedInCache中的元素全部放进cache</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flushPendingEntries</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;Object, Object&gt; entry : entriesToAddOnCommit.entrySet()) &#123;<br>      delegate.putObject(entry.getKey(), entry.getValue());<br>    &#125;<br>    <span class="hljs-keyword">for</span> (Object entry : entriesMissedInCache) &#123;<br>      <span class="hljs-keyword">if</span> (!entriesToAddOnCommit.containsKey(entry)) &#123;<br>        delegate.putObject(entry, <span class="hljs-literal">null</span>);<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 解锁给空值缓存上的锁</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlockMissedEntries</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (Object entry : entriesMissedInCache) &#123;<br>      delegate.putObject(entry, <span class="hljs-literal">null</span>);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 其他方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="WeakCache"><a href="#WeakCache" class="headerlink" title="WeakCache"></a>WeakCache</h4><p>    和软引用缓存类似 。区别是操作要保存的元素集合 <code>hardLinksToAvoidGarbageCollection</code> 没有上锁（尝试找issue失败）</p><p>淦 (<a href="http://code.google.com/p/mybatis/issues/detail?id=335%7C586">http://code.google.com/p/mybatis/issues/detail?id=335|586</a>) issue似乎没了</p><h4 id="TransactionalCacheManager"><a href="#TransactionalCacheManager" class="headerlink" title="TransactionalCacheManager"></a>TransactionalCacheManager</h4><p>    事务缓存管理器，被CachingExecutor使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransactionalCacheManager</span> &#123;<br><br>  <span class="hljs-comment">// 管理了许多TransactionalCache</span><br>  <span class="hljs-keyword">private</span> Map&lt;Cache, TransactionalCache&gt; transactionalCaches = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Cache, TransactionalCache&gt;();<br> <br>  <span class="hljs-comment">// 清理缓存</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">(Cache cache)</span> &#123;<br>    getTransactionalCache(cache).clear();<br>  &#125;<br><br>  <span class="hljs-comment">// 得到某个TransactionalCache的缓存值</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Cache cache, CacheKey key)</span> &#123;<br>    <span class="hljs-keyword">return</span> getTransactionalCache(cache).getObject(key);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Cache cache, CacheKey key, Object value)</span> &#123;<br>    getTransactionalCache(cache).putObject(key, value);<br>  &#125; <br><br>  <span class="hljs-comment">// 提交时全部提交</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (TransactionalCache txCache : transactionalCaches.values()) &#123;<br>      txCache.commit();<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 回滚时全部回滚</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (TransactionalCache txCache : transactionalCaches.values()) &#123;<br>      txCache.rollback();<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> TransactionalCache <span class="hljs-title function_">getTransactionalCache</span><span class="hljs-params">(Cache cache)</span> &#123;<br>    <span class="hljs-type">TransactionalCache</span> <span class="hljs-variable">txCache</span> <span class="hljs-operator">=</span> transactionalCaches.get(cache);<br>    <span class="hljs-keyword">if</span> (txCache == <span class="hljs-literal">null</span>) &#123;<br>      txCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransactionalCache</span>(cache);<br>      transactionalCaches.put(cache, txCache);<br>    &#125;<br>    <span class="hljs-keyword">return</span> txCache;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>缓存模块的内容就这些</p>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-exceptions.md</title>
    <link href="/2023/05/20/2-exceptions/"/>
    <url>/2023/05/20/2-exceptions/</url>
    
    <content type="html"><![CDATA[<p>这个模块只有一个地方需要注意</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 异常工厂</span><br><span class="hljs-comment"> */</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionFactory</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">ExceptionFactory</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// Prevent Instantiation</span><br>  &#125;<br><br>  <span class="hljs-comment">// 把普通异常包装成mybatis自己的PersistenceException</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RuntimeException <span class="hljs-title function_">wrapException</span><span class="hljs-params">(String message, Exception e)</span> &#123;<br>    <span class="hljs-comment">// 查找错误上下文，得到错误原因，传给PersistenceException</span><br>    <span class="hljs-comment">// 每个线程都会有一个ErrorContext，所以可以得到，  .message(message).cause是典型的构建器模式</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PersistenceException</span>(ErrorContext.instance().message(message).cause(e).toString(), e);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-logging</title>
    <link href="/2023/05/14/1-logging/"/>
    <url>/2023/05/14/1-logging/</url>
    
    <content type="html"><![CDATA[<h3 id="logging（日志模块）"><a href="#logging（日志模块）" class="headerlink" title="logging（日志模块）"></a>logging（日志模块）</h3><h4 id="LogException"><a href="#LogException" class="headerlink" title="LogException"></a>LogException</h4><p>首先看 LogException 类（其中 PersistenceException 为自定义异常，封装方法完全一致）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PersistenceException</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1022924004852350942L</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">LogException</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">LogException</span><span class="hljs-params">(String message)</span> &#123;<br>    <span class="hljs-built_in">super</span>(message);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">LogException</span><span class="hljs-params">(String message, Throwable cause)</span> &#123;<br>    <span class="hljs-built_in">super</span>(message, cause);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">LogException</span><span class="hljs-params">(Throwable cause)</span> &#123;<br>    <span class="hljs-built_in">super</span>(cause);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h4><p>然后是自定义日志接口 Log</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Log</span> &#123;<br><br>  <span class="hljs-comment">// 和一般的log4j很像，提供日志接口的一些方法,error, debug, warn。</span><br>  <span class="hljs-comment">// 用自己的日志类恐怕是为了通用，不绑死在某个特定的日志框架中</span><br>  <span class="hljs-comment">// 但不是也有类似的slf4j吗？为何还要自己写？</span><br>  <span class="hljs-comment">// 可能是不想引入额外的jar包（我觉得是为了适配各种日志框架）</span><br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">isDebugEnabled</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">isTraceEnabled</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">(String s, Throwable e)</span>;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">(String s)</span>;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">debug</span><span class="hljs-params">(String s)</span>;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">trace</span><span class="hljs-params">(String s)</span>;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">warn</span><span class="hljs-params">(String s)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="LogFactory-日志工厂"><a href="#LogFactory-日志工厂" class="headerlink" title="LogFactory 日志工厂"></a>LogFactory 日志工厂</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Marker to be used by logging implementations that support markers</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// 给支持marker功能的logger使用(目前有slf4j, log4j2)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MARKER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MYBATIS&quot;</span>;<br><br><span class="hljs-comment">// 具体究竟用哪个日志框架，那个框架所对应logger的构造函数</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Constructor&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Log</span>&gt; logConstructor;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-comment">// 这里单纯用的lambda表达式，没有多线程</span><br>    <span class="hljs-comment">// 这段代码是一直找可用的日志实现直到找到一个可用的</span><br>    <span class="hljs-comment">// 日志实现，找到后跳过后面的查找</span><br>    <span class="hljs-comment">// slf4j</span><br>    tryImplementation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        useSlf4jLogging();<br>      &#125;<br>    &#125;);<br>    <span class="hljs-comment">// common logging</span><br>    tryImplementation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        useCommonsLogging();<br>      &#125;<br>    &#125;);<br>    <span class="hljs-comment">// log4j2</span><br>    tryImplementation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        useLog4J2Logging();<br>      &#125;<br>    &#125;);<br>    <span class="hljs-comment">// log4j</span><br>    tryImplementation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        useLog4JLogging();<br>      &#125;<br>    &#125;);<br>    <span class="hljs-comment">// jdk logging</span><br>    tryImplementation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        useJdkLogging();<br>      &#125;<br>    &#125;);<br>    <span class="hljs-comment">// 没有日志</span><br>    tryImplementation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        useNoLogging();<br>      &#125;<br>    &#125;);<br>  &#125;<br></code></pre></td></tr></table></figure><p>看一下 <code>tryImplementation </code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tryImplementation</span><span class="hljs-params">(Runnable runnable)</span> &#123;<br>    <span class="hljs-comment">// 先判断是否找到可用的日志实现</span><br>    <span class="hljs-keyword">if</span> (logConstructor == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        runnable.run();<br>      &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>        <span class="hljs-comment">// ignore</span><br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>下面以 <code>useSlf4jLogging()</code> 为例讲解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useSlf4jLogging</span><span class="hljs-params">()</span> &#123;<br>    setImplementation(org.apache.ibatis.logging.slf4j.Slf4jImpl.class);<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setImplementation</span><span class="hljs-params">(Class&lt;? extends Log&gt; implClass)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      Constructor&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Log</span>&gt; candidate = implClass.getConstructor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; String.class &#125;);<br>      <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> candidate.newInstance(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; LogFactory.class.getName() &#125;);<br>      log.debug(<span class="hljs-string">&quot;Logging initialized using &#x27;&quot;</span> + implClass + <span class="hljs-string">&quot;&#x27; adapter.&quot;</span>);<br>      <span class="hljs-comment">// 设置logConstructor,一旦设上，表明找到相应的log的jar包了，那后面别的log就不找了。</span><br>      logConstructor = candidate;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LogException</span>(<span class="hljs-string">&quot;Error setting Log implementation.  Cause: &quot;</span> + t, t);<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>后面 <code>useCommonsLogging()、useLog4J2Logging()、useLog4JLogging()、useJdkLogging()、useNoLogging()</code> 类似</p><p>最后是剩下的一些方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 单例模式，不得自己new实例</span><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">LogFactory</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">// disable construction</span><br>&#125;<br><br><span class="hljs-comment">// 根据传入的类来构建Log</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Log <span class="hljs-title function_">getLog</span><span class="hljs-params">(Class&lt;?&gt; aClass)</span> &#123;<br>  <span class="hljs-keyword">return</span> getLog(aClass.getName());<br>&#125;<br><br><span class="hljs-comment">// 根据传入的类名来构建Log</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Log <span class="hljs-title function_">getLog</span><span class="hljs-params">(String logger)</span> &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//构造函数，参数必须是一个，为String型，指明logger的名称</span><br>    <span class="hljs-keyword">return</span> logConstructor.newInstance(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; logger &#125;);<br>  &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LogException</span>(<span class="hljs-string">&quot;Error creating logger for logger &quot;</span> + logger + <span class="hljs-string">&quot;.  Cause: &quot;</span> + t, t);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 提供一个扩展功能，如果以上log都不满意，可以使用自定义的log</span><br><span class="hljs-comment">// 这个方法在 Configuration 类的 setLogImpl(Class&lt;?&gt; logImpl) 方法使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useCustomLogging</span><span class="hljs-params">(Class&lt;? extends Log&gt; clazz)</span> &#123;<br>  setImplementation(clazz);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="JakartaCommonsLoggingImpl"><a href="#JakartaCommonsLoggingImpl" class="headerlink" title="JakartaCommonsLoggingImpl"></a>JakartaCommonsLoggingImpl</h4><p>适配 <code>commons logging</code> 里的 Log 和 LogFactory</p><p>可以看到全是委托给特定的 log 和 LogFactory来实现</p><p>这里使用了适配器模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JakartaCommonsLoggingImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">org</span>.apache.ibatis.logging.Log &#123;<br><br>  <span class="hljs-keyword">private</span> Log log;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">JakartaCommonsLoggingImpl</span><span class="hljs-params">(String clazz)</span> &#123;<br>    log = LogFactory.getLog(clazz);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isDebugEnabled</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> log.isDebugEnabled();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isTraceEnabled</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> log.isTraceEnabled();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">(String s, Throwable e)</span> &#123;<br>    log.error(s, e);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">(String s)</span> &#123;<br>    log.error(s);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">debug</span><span class="hljs-params">(String s)</span> &#123;<br>    log.debug(s);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">trace</span><span class="hljs-params">(String s)</span> &#123;<br>    log.trace(s);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">warn</span><span class="hljs-params">(String s)</span> &#123;<br>    log.warn(s);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p> <code>Jdk14LoggingImpl、Log4jImpl、NoLoggingImpl、StdOutImpl</code> 大同小异</p><h4 id="Log4j2Impl"><a href="#Log4j2Impl" class="headerlink" title="Log4j2Impl"></a>Log4j2Impl</h4><p>Log4j2Impl 根据从 LogManager获取的Logger的类型，分别委托给 Log4j2AbstractLoggerImpl 和 Log4j2LoggerImpl 实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Log4j2Impl</span><span class="hljs-params">(String clazz)</span> &#123;<br>  <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogManager.getLogger(clazz);<br><br>  <span class="hljs-keyword">if</span> (logger <span class="hljs-keyword">instanceof</span> AbstractLogger) &#123;<br>    log = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Log4j2AbstractLoggerImpl</span>((AbstractLogger) logger);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    log = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Log4j2LoggerImpl</span>(logger);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Slf4jImpl"><a href="#Slf4jImpl" class="headerlink" title="Slf4jImpl"></a>Slf4jImpl</h4><p>Slf4jImpl 类似</p><p>Slf4jImpl 和 上面的 Log4j2Impl都使用了代理模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Slf4jImpl</span><span class="hljs-params">(String clazz)</span> &#123;<br>  <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(clazz);<br><br>  <span class="hljs-keyword">if</span> (logger <span class="hljs-keyword">instanceof</span> LocationAwareLogger) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// check for slf4j &gt;= 1.6 method signature</span><br>      logger.getClass().getMethod(<span class="hljs-string">&quot;log&quot;</span>, Marker.class, String.class, <span class="hljs-type">int</span>.class, String.class, Object[].class, Throwable.class);<br>      log = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Slf4jLocationAwareLoggerImpl</span>((LocationAwareLogger) logger);<br>      <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (SecurityException e) &#123;<br>      <span class="hljs-comment">// fail-back to Slf4jLoggerImpl</span><br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>      <span class="hljs-comment">// fail-back to Slf4jLoggerImpl</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// Logger is not LocationAwareLogger or slf4j version &lt; 1.6</span><br>  log = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Slf4jLoggerImpl</span>(logger);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BaseJdbcLogger"><a href="#BaseJdbcLogger" class="headerlink" title="BaseJdbcLogger"></a>BaseJdbcLogger</h4><p>用于代理（做日志）的基类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// SET_METHODS 包含java类型转jdbc类型的方法</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Set&lt;String&gt; SET_METHODS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;String&gt;();<br><span class="hljs-comment">// EXECUTE_METHODS 包含 execute、executeUpdate、</span><br><span class="hljs-comment">// executeQuery、addBatch方法</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Set&lt;String&gt; EXECUTE_METHODS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;String&gt;();<br><br><span class="hljs-comment">// 自用的列的相关属性</span><br><span class="hljs-keyword">private</span> Map&lt;Object, Object&gt; columnMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Object, Object&gt;();<br><br><span class="hljs-keyword">private</span> List&lt;Object&gt; columnNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;();<br><span class="hljs-keyword">private</span> List&lt;Object&gt; columnValues = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;();<br><br><span class="hljs-comment">// 打日志</span><br><span class="hljs-keyword">protected</span> Log statementLog;<br><span class="hljs-comment">// 查询栈（输出时用）</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> queryStack;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Default constructor</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseJdbcLogger</span><span class="hljs-params">(Log log, <span class="hljs-type">int</span> queryStack)</span> &#123;<br>  <span class="hljs-built_in">this</span>.statementLog = log;<br>  <span class="hljs-keyword">if</span> (queryStack == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">this</span>.queryStack = <span class="hljs-number">1</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">this</span>.queryStack = queryStack;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 类初始化时为SET_METHODS和EXECUTE_METHODS赋值</span><br><span class="hljs-keyword">static</span> &#123;<br>  SET_METHODS.add(<span class="hljs-string">&quot;seString&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setInt&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setByte&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setShort&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setLong&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setDouble&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setFloat&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setTimestamp&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setDate&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setTime&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setArray&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setBigDecimal&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setAsciiStream&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setBinaryStream&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setBlob&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setBoolean&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setBytes&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setCharacterStream&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setClob&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setObject&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setNull&quot;</span>);<br><br>  EXECUTE_METHODS.add(<span class="hljs-string">&quot;execute&quot;</span>);<br>  EXECUTE_METHODS.add(<span class="hljs-string">&quot;executeUpdate&quot;</span>);<br>  EXECUTE_METHODS.add(<span class="hljs-string">&quot;executeQuery&quot;</span>);<br>  EXECUTE_METHODS.add(<span class="hljs-string">&quot;addBatch&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 获取参数值 这里好像是调用的Object的toString方法?</span><br><span class="hljs-keyword">protected</span> String <span class="hljs-title function_">getParameterValueString</span><span class="hljs-params">()</span> &#123;<br>  List&lt;Object&gt; typeList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;(columnValues.size());<br>  <span class="hljs-keyword">for</span> (Object value : columnValues) &#123;<br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>      typeList.add(<span class="hljs-string">&quot;null&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      typeList.add(value + <span class="hljs-string">&quot;(&quot;</span> + value.getClass().getSimpleName() + <span class="hljs-string">&quot;)&quot;</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">parameters</span> <span class="hljs-operator">=</span> typeList.toString();<br>  <span class="hljs-keyword">return</span> parameters.substring(<span class="hljs-number">1</span>, parameters.length() - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 移除 original 里的&quot; \t\n\r\f&quot;字符，统一用&quot; &quot;替代</span><br><span class="hljs-keyword">protected</span> String <span class="hljs-title function_">removeBreakingWhitespace</span><span class="hljs-params">(String original)</span> &#123;<br>  <span class="hljs-type">StringTokenizer</span> <span class="hljs-variable">whitespaceStripper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTokenizer</span>(original);<br>  <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>  <span class="hljs-keyword">while</span> (whitespaceStripper.hasMoreTokens()) &#123;<br>    builder.append(whitespaceStripper.nextToken());<br>    builder.append(<span class="hljs-string">&quot; &quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> builder.toString();<br>&#125;<br><br><span class="hljs-comment">// 根据queryStack 返回 ===&gt; 或 &lt;===</span><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">prefix</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isInput)</span> &#123;<br>  <span class="hljs-type">char</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[queryStack * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>];<br>  Arrays.fill(buffer, <span class="hljs-string">&#x27;=&#x27;</span>);<br>  buffer[queryStack * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>  <span class="hljs-keyword">if</span> (isInput) &#123;<br>    buffer[queryStack * <span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;&gt;&#x27;</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    buffer[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;&lt;&#x27;</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ResultSetLogger"><a href="#ResultSetLogger" class="headerlink" title="ResultSetLogger"></a>ResultSetLogger</h4><p>添加了日志的ResultSet代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultSetLogger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseJdbcLogger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>  <span class="hljs-comment">// BLOB type 类型为BLOB的值打印时做特殊处理</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Set&lt;Integer&gt; BLOB_TYPES = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Integer&gt;();<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">private</span> ResultSet rs;<br>  <span class="hljs-keyword">private</span> Set&lt;Integer&gt; blobColumns = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Integer&gt;();<br><br>  <span class="hljs-keyword">static</span> &#123;<br>    BLOB_TYPES.add(Types.BINARY);<br>    BLOB_TYPES.add(Types.BLOB);<br>    BLOB_TYPES.add(Types.CLOB);<br>    BLOB_TYPES.add(Types.LONGNVARCHAR);<br>    BLOB_TYPES.add(Types.LONGVARBINARY);<br>    BLOB_TYPES.add(Types.LONGVARCHAR);<br>    BLOB_TYPES.add(Types.NCLOB);<br>    BLOB_TYPES.add(Types.VARBINARY);<br>  &#125;<br><br>  <span class="hljs-comment">// 不向外提供构造函数</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">ResultSetLogger</span><span class="hljs-params">(ResultSet rs, Log statementLog, <span class="hljs-type">int</span> queryStack)</span> &#123;<br>    <span class="hljs-built_in">super</span>(statementLog, queryStack);<br>    <span class="hljs-built_in">this</span>.rs = rs;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] params)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 不代理Object类的方法</span><br>      <span class="hljs-keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;<br>        <span class="hljs-keyword">return</span> method.invoke(<span class="hljs-built_in">this</span>, params);<br>      &#125;<br>      <span class="hljs-comment">// 先执行代理方法</span><br>      <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> method.invoke(rs, params);<br>      <span class="hljs-comment">// 如果要代理的方法是 next</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;next&quot;</span>.equals(method.getName())) &#123;<br>        <span class="hljs-keyword">if</span> (((Boolean) o)) &#123;<br>          rows++;<br>          <span class="hljs-comment">// 打印获取到的结果数据</span><br>          <span class="hljs-keyword">if</span> (isTraceEnabled()) &#123;<br>            <span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">rsmd</span> <span class="hljs-operator">=</span> rs.getMetaData();<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">columnCount</span> <span class="hljs-operator">=</span> rsmd.getColumnCount();<br>            <span class="hljs-keyword">if</span> (first) &#123;<br>              first = <span class="hljs-literal">false</span>;<br>              printColumnHeaders(rsmd, columnCount);<br>            &#125;<br>            printColumnValues(columnCount);<br>          &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// 没有下一行了</span><br>          debug(<span class="hljs-string">&quot;     Total: &quot;</span> + rows, <span class="hljs-literal">false</span>);<br>        &#125;<br>      &#125;<br>      clearColumnInfo();<br>      <span class="hljs-keyword">return</span> o;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>      <span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(t);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 打印列名</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printColumnHeaders</span><span class="hljs-params">(ResultSetMetaData rsmd, <span class="hljs-type">int</span> columnCount)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    row.append(<span class="hljs-string">&quot;   Columns: &quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= columnCount; i++) &#123;<br>      <span class="hljs-keyword">if</span> (BLOB_TYPES.contains(rsmd.getColumnType(i))) &#123;<br>        blobColumns.add(i);<br>      &#125;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">colname</span> <span class="hljs-operator">=</span> rsmd.getColumnLabel(i);<br>      row.append(colname);<br>      <span class="hljs-keyword">if</span> (i != columnCount) &#123;<br>        row.append(<span class="hljs-string">&quot;, &quot;</span>);<br>      &#125;<br>    &#125;<br>    trace(row.toString(), <span class="hljs-literal">false</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// 打印每一行对应列的值</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printColumnValues</span><span class="hljs-params">(<span class="hljs-type">int</span> columnCount)</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    row.append(<span class="hljs-string">&quot;       Row: &quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= columnCount; i++) &#123;<br>      String colname;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 类型为BLOB的值统一返回 &lt;&lt;BLOB&gt;&gt;</span><br>        <span class="hljs-keyword">if</span> (blobColumns.contains(i)) &#123;<br>          colname = <span class="hljs-string">&quot;&lt;&lt;BLOB&gt;&gt;&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          colname = rs.getString(i);<br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        <span class="hljs-comment">// generally can&#x27;t call getString() on a BLOB column</span><br>        colname = <span class="hljs-string">&quot;&lt;&lt;Cannot Display&gt;&gt;&quot;</span>;<br>      &#125;<br>      row.append(colname);<br>      <span class="hljs-keyword">if</span> (i != columnCount) &#123;<br>        row.append(<span class="hljs-string">&quot;, &quot;</span>);<br>      &#125;<br>    &#125;<br>    trace(row.toString(), <span class="hljs-literal">false</span>);<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * Creates a logging version of a ResultSet</span><br><span class="hljs-comment">   * 提供静态方法用于创建代理类</span><br><span class="hljs-comment">   * @param rs - the ResultSet to proxy</span><br><span class="hljs-comment">   * @return - the ResultSet with logging</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResultSet <span class="hljs-title function_">newInstance</span><span class="hljs-params">(ResultSet rs, Log statementLog, <span class="hljs-type">int</span> queryStack)</span> &#123;<br>    <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultSetLogger</span>(rs, statementLog, queryStack);<br>    <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> ResultSet.class.getClassLoader();<br>    <span class="hljs-keyword">return</span> (ResultSet) Proxy.newProxyInstance(cl, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;ResultSet.class&#125;, handler);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="StatementLogger"><a href="#StatementLogger" class="headerlink" title="StatementLogger"></a>StatementLogger</h4><p>添加了日志的 Statement代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StatementLogger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseJdbcLogger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>  <br>  <span class="hljs-keyword">private</span> Statement statement;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">StatementLogger</span><span class="hljs-params">(Statement stmt, Log statementLog, <span class="hljs-type">int</span> queryStack)</span> &#123;<br>    <span class="hljs-built_in">super</span>(statementLog, queryStack);<br>    <span class="hljs-built_in">this</span>.statement = stmt;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] params)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-keyword">try</span> &#123; <br>      <span class="hljs-comment">// 同上</span><br>      <span class="hljs-keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;<br>        <span class="hljs-keyword">return</span> method.invoke(<span class="hljs-built_in">this</span>, params);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (EXECUTE_METHODS.contains(method.getName())) &#123;<br>        <span class="hljs-comment">// 如果是 execute、executeUpdate、executeQuery、addBatch等方法</span><br>        <span class="hljs-keyword">if</span> (isDebugEnabled()) &#123;<br>          debug(<span class="hljs-string">&quot; Executing: &quot;</span> + removeBreakingWhitespace((String) params[<span class="hljs-number">0</span>]), <span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;executeQuery&quot;</span>.equals(method.getName())) &#123;<br>          <span class="hljs-comment">// 如果是查询方法返回 ResultSet 代理</span><br>          <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> (ResultSet) method.invoke(statement, params);<br>          <span class="hljs-keyword">return</span> rs == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : ResultSetLogger.newInstance(rs, statementLog, queryStack);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// 其他方法直接执行</span><br>          <span class="hljs-keyword">return</span> method.invoke(statement, params);<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;getResultSet&quot;</span>.equals(method.getName())) &#123;<br>        <span class="hljs-comment">// getResultSet 也是返回 ResultSet 代理</span><br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> (ResultSet) method.invoke(statement, params);<br>        <span class="hljs-keyword">return</span> rs == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : ResultSetLogger.newInstance(rs, statementLog, queryStack);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;equals&quot;</span>.equals(method.getName())) &#123;<br>        <span class="hljs-comment">// equals 要判断代理类是否相同</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> params[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">return</span> ps <span class="hljs-keyword">instanceof</span> Proxy &amp;&amp; proxy == ps;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;hashCode&quot;</span>.equals(method.getName())) &#123;<br>        <span class="hljs-comment">// 返回代理类的hashCode</span><br>        <span class="hljs-keyword">return</span> proxy.hashCode();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 执行原方法</span><br>        <span class="hljs-keyword">return</span> method.invoke(statement, params);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>      <span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(t);<br>    &#125;<br>  &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="PreparedStatementLogger"><a href="#PreparedStatementLogger" class="headerlink" title="PreparedStatementLogger"></a>PreparedStatementLogger</h4><p>添加了日志的 PreparedStatement 代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PreparedStatementLogger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseJdbcLogger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>  <span class="hljs-keyword">private</span> PreparedStatement statement;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">PreparedStatementLogger</span><span class="hljs-params">(PreparedStatement stmt, Log statementLog, <span class="hljs-type">int</span> queryStack)</span> &#123;<br>    <span class="hljs-built_in">super</span>(statementLog, queryStack);<br>    <span class="hljs-built_in">this</span>.statement = stmt;<br>  &#125;<br> <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] params)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;<br>        <span class="hljs-keyword">return</span> method.invoke(<span class="hljs-built_in">this</span>, params);<br>      &#125;          <br>      <span class="hljs-keyword">if</span> (EXECUTE_METHODS.contains(method.getName())) &#123;<br>        <span class="hljs-keyword">if</span> (isDebugEnabled()) &#123;<br>          <span class="hljs-comment">// 这里的信息似乎可读性不高</span><br>          debug(<span class="hljs-string">&quot;Parameters: &quot;</span> + getParameterValueString(), <span class="hljs-literal">true</span>);<br>        &#125; <br>        <span class="hljs-comment">// 清除之前存储的列信息</span><br>        clearColumnInfo();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;executeQuery&quot;</span>.equals(method.getName())) &#123;<br>          <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> (ResultSet) method.invoke(statement, params);<br>          <span class="hljs-keyword">return</span> rs == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : ResultSetLogger.newInstance(rs, statementLog, queryStack);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> method.invoke(statement, params);<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (SET_METHODS.contains(method.getName())) &#123;<br>        <span class="hljs-comment">// 调用SET_METHODS 包含的方法时先将保存列信息再调用原方法</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;setNull&quot;</span>.equals(method.getName())) &#123;<br>          setColumn(params[<span class="hljs-number">0</span>], <span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          setColumn(params[<span class="hljs-number">0</span>], params[<span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> method.invoke(statement, params);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;getResultSet&quot;</span>.equals(method.getName())) &#123;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> (ResultSet) method.invoke(statement, params);<br>        <span class="hljs-keyword">return</span> rs == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : ResultSetLogger.newInstance(rs, statementLog, queryStack);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;getUpdateCount&quot;</span>.equals(method.getName())) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">updateCount</span> <span class="hljs-operator">=</span> (Integer) method.invoke(statement, params);<br>        <span class="hljs-keyword">if</span> (updateCount != -<span class="hljs-number">1</span>) &#123;<br>          <span class="hljs-comment">// 调用 getUpdateCount 方法时打印 更新数量 信息</span><br>          debug(<span class="hljs-string">&quot;   Updates: &quot;</span> + updateCount, <span class="hljs-literal">false</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> updateCount;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> method.invoke(statement, params);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>      <span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(t);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ConnectionLogger"><a href="#ConnectionLogger" class="headerlink" title="ConnectionLogger"></a>ConnectionLogger</h4><p>添加了日志的 Connection 代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConnectionLogger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseJdbcLogger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>  <span class="hljs-keyword">private</span> Connection connection;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">ConnectionLogger</span><span class="hljs-params">(Connection conn, Log statementLog, <span class="hljs-type">int</span> queryStack)</span> &#123;<br>    <span class="hljs-built_in">super</span>(statementLog, queryStack);<br>    <span class="hljs-built_in">this</span>.connection = conn;<br>  &#125;<br> <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] params)</span><br>      <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;<br>        <span class="hljs-keyword">return</span> method.invoke(<span class="hljs-built_in">this</span>, params);<br>      &#125;    <br>      <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;prepareStatement&quot;</span>.equals(method.getName())) &#123; <br>        <span class="hljs-comment">// 调用 prepareStatement 或者 prepareCall 方法时</span><br>        <span class="hljs-comment">// 返回 PreparedStatement的代理</span><br>        <span class="hljs-keyword">if</span> (isDebugEnabled()) &#123;<br>          debug(<span class="hljs-string">&quot; Preparing: &quot;</span> + removeBreakingWhitespace((String) params[<span class="hljs-number">0</span>]), <span class="hljs-literal">true</span>);<br>        &#125;        <br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> (PreparedStatement) method.invoke(connection, params);<br>        stmt = PreparedStatementLogger.newInstance(stmt, statementLog, queryStack);<br>        <span class="hljs-keyword">return</span> stmt;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;prepareCall&quot;</span>.equals(method.getName())) &#123;<br>        <span class="hljs-keyword">if</span> (isDebugEnabled()) &#123;<br>          debug(<span class="hljs-string">&quot; Preparing: &quot;</span> + removeBreakingWhitespace((String) params[<span class="hljs-number">0</span>]), <span class="hljs-literal">true</span>);<br>        &#125;        <br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> (PreparedStatement) method.invoke(connection, params);<br>        stmt = PreparedStatementLogger.newInstance(stmt, statementLog, queryStack);<br>        <span class="hljs-keyword">return</span> stmt;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;createStatement&quot;</span>.equals(method.getName())) &#123;<br>        <span class="hljs-comment">// 调用 createStatement 时返回 Statement的代理</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> (Statement) method.invoke(connection, params);<br>        stmt = StatementLogger.newInstance(stmt, statementLog, queryStack);<br>        <span class="hljs-keyword">return</span> stmt;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> method.invoke(connection, params);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>      <span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(t);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>日志模块的代码就讲解完了</p>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0-前言</title>
    <link href="/2023/05/02/0-%E5%89%8D%E8%A8%80/"/>
    <url>/2023/05/02/0-%E5%89%8D%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h3 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h3><p>    前段时间粗略地过了一遍mybatis源码。有些地方懂了、有些地方没懂。想着复习一下，加深一下理解、加上自己也想多写写博客，所以有了这个Mybatis源码解析系列</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ol><li><p>我是跟着github上一个仓库（<a href="https://github.com/tuguangquan/mybatis">tuguangquan&#x2F;mybatis: mybatis源码中文注释 (github.com)</a>）进行得源码阅读，因此mybatis源码版本不是最新的（3.3.0-SNAPSHOT）</p></li><li><p>上面仓库里说的导入mybatis-parent模块只需要在pom文件中配置一下<parent>标签即可</parent></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- groupId、artifactId、version均可在</span><br><span class="hljs-comment">parentPom.xml中找到--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>38-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- parentPom文件的相对路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>parentPom.xml<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>要是对某个模块有不太懂的地方，可以结合官方提供的测试用例加深理解</p></li><li><p>要仔细了解代码中提到的相关issue，建议查看文件的git提交历史</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>寻找重复数</title>
    <link href="/2022/10/15/%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0/"/>
    <url>/2022/10/15/%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="方法一：二分查找"><a href="#方法一：二分查找" class="headerlink" title="方法一：二分查找"></a>方法一：二分查找</h4><blockquote><p>定义 cnt[i] 表示nums数组中小于等于i的数有多少个</p></blockquote><p>cnt数组随数字i逐渐增大具有单调性。假设重复的数是target，如果cnt数组满足在target前有cnt[i]&lt;&#x3D;i,target后有cnt[i]&gt;i，那么我们可以就利用二分查找来找到target</p><p>下面证明上述假设：考虑<strong>nums</strong>数组一共有n+1个位置，我们填入的数字都在[1,n]间，有且只有一个数重复放了两次以上。对于所有测试用例，考虑一下两种情况：</p><ul><li>如果测试用例的数组中target出现了两次，其余的数各出现了一次。这个时候小于target的数i满足cnt[i]&#x3D;i&lt;&#x3D;i，大于等于target的数j满足cnt[j]&#x3D;j+1&gt;j</li><li>如果测试用例的数组中target出现了三次及以上，那么必然有一些数不在数组中了，这个时候我们可以用target去替换这些数，考虑替换的时候对target只出现两次的cnt数组的影响。如果替换的数i小于target，那么[i,target-1]的cnt值均减一，其他不变，满足条件。如果替换的数j大于target，那么[target,j-1]的cnt值均加一，其他不变，亦满足条件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findDuplicate</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, r = n - <span class="hljs-number">1</span>, ans = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>                <span class="hljs-keyword">if</span> (nums[i] &lt;= mid) &#123;<br>                    cnt++;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (cnt &lt;= mid) &#123;<br>                l = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                r = mid - <span class="hljs-number">1</span>;<br>                ans = mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(nlogn)，其中n为nums数组的长度。二分查找最多需要二分O(nlogn)次，每次判断的时候需要O(n)遍历nums数组求解小于等于mid的数的个数，因此总时间复杂度为O(nlogn)</li><li>空间复杂度：O(1)。我们只需要常数空间存放若干变量。</li></ul><h4 id="方法二：二进制"><a href="#方法二：二进制" class="headerlink" title="方法二：二进制"></a>方法二：二进制</h4><blockquote><p>将所有数按二进制位展开考虑如何找出重复的数，如果我们能确定重复数的每一位是1还是0就可以按位还原出重复的数是什么。</p></blockquote><p>考虑到第i位，我们记nums数组中二进制展开后第i位为1的数有x个，数字[1,n]这n个数二进制展开后第i位为1的数有y个。我们可以假设重复数的第i位为1当且仅当 x &gt; y</p><p>证明如下：</p><ul><li><p>如果测试用例的数组中target出现了两次，其余的数各出现了一次。</p><ul><li>如果target的第i位为1，那么nums数组中第i位为1的个数x恰好比y大1，即x&gt;y</li><li>如果target的第i位为0，那么nums数组中第i位为1的个数x和y相同，即x&lt;&#x3D;y</li></ul></li><li><p>如果测试用例的数组中target出现了三次及以上，那么必然有一些数不在nums数组中了，这个时候可以考虑用target去替换这些数，考虑替换的时候对target出现两次情况下的x的影响:</p><ul><li>如果被替换的数的第i位为1，并且target的第i位为1，那么x不变。满足x&gt;y</li><li>如果被替换的数的第i位为0，并且target的第i位为1，那么x+1。满足x&gt;y</li><li>如果被替换的数的第i位为1，并且target的第i位为0，那么x-1，满足x&lt;&#x3D;y</li><li>如果被替换的数的第i位为0，并且target的第i位为0，那么x不变，满足x&lt;&#x3D;y</li></ul><p>也就是说如果target的第i位为1，那么每次替换后只会使x不变或增大;如果为0，替换后只会使x不变或减小。始终满足x&gt;y时target第i位为1，否则为0，因此我们可以据此按位还原这个重复的数。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findDuplicate</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length, ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 确定二进制下最高位是多少</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">bit_max</span> <span class="hljs-operator">=</span> <span class="hljs-number">31</span>;<br>        <span class="hljs-keyword">while</span> (((n - <span class="hljs-number">1</span>) &gt;&gt; bit_max) == <span class="hljs-number">0</span>) &#123;<br>            bit_max -= <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">bit</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; bit &lt;= bit_max; ++bit) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>                <span class="hljs-keyword">if</span> ((nums[i] &amp; (<span class="hljs-number">1</span> &lt;&lt; bit)) != <span class="hljs-number">0</span>) &#123;<br>                    x += <span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">1</span> &amp;&amp; ((i &amp; (<span class="hljs-number">1</span> &lt;&lt; bit)) != <span class="hljs-number">0</span>)) &#123;<br>                    y += <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (x &gt; y) &#123;<br>                ans |= <span class="hljs-number">1</span> &lt;&lt; bit;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(nlogn)，其中n为nums数组的长度。O(logn)代表了我们枚举二进制数的位数个数，枚举第i位的时候需要遍历数组统计x和y的答案，因此总时间复杂度为O(nlogn)。</li><li>空间复杂度：O(1)。我们只需要常数空间存放若干变量。</li></ul><h4 id="方法三：快慢指针"><a href="#方法三：快慢指针" class="headerlink" title="方法三：快慢指针"></a>方法三：快慢指针</h4><p>对 nums 数组建图，每个位置 i 连一条 i→nums[i] 的边，就可以将问题转换成<a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/solution/huan-xing-lian-biao-ii-by-leetcode/">142. 环形链表 II</a></p><p>根据 Floyd判圈算法 （又称龟兔赛跑算法）来检测链表是否有环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findDuplicate</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, fast = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            slow = nums[slow];<br>            fast = nums[nums[fast]];<br>        &#125; <span class="hljs-keyword">while</span> (slow != fast);<br>        slow = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (slow != fast) &#123;<br>            slow = nums[slow];<br>            fast = nums[fast];<br>        &#125;<br>        <span class="hljs-keyword">return</span> slow;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>会议室II</title>
    <link href="/2022/09/25/%E4%BC%9A%E8%AE%AE%E5%AE%A4II/"/>
    <url>/2022/09/25/%E4%BC%9A%E8%AE%AE%E5%AE%A4II/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>丑数II</title>
    <link href="/2022/09/25/%E4%B8%91%E6%95%B0II/"/>
    <url>/2022/09/25/%E4%B8%91%E6%95%B0II/</url>
    
    <content type="html"><![CDATA[<p>给你一个正整数n，请你找出并返回第n个丑数</p><p>丑数就是只包含质因数2、3和5的正整数</p><h4 id="方法一：最小堆"><a href="#方法一：最小堆" class="headerlink" title="方法一：最小堆"></a>方法一：最小堆</h4><p>初始时堆为空。首先将最小的丑数1加入堆中。</p><p>每次取出堆顶元素x，则x是堆中最小的丑数，由于2x、3x、5x也是丑数，因此将2x、3x、5x加入堆。</p><p>在这个过程中可能会有重复的元素，需要用一个set进行去重，避免某个丑数多次加入堆</p><p>第n次从堆顶取出来的元素就是第n个丑数</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nthUglyNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        Set&lt;Long&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        PriorityQueue&lt;Long&gt; minHeap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;();<br>        set.add(<span class="hljs-number">1L</span>);<br>        minHeap.add(<span class="hljs-number">1L</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> minHeap.poll();<br>            <span class="hljs-keyword">if</span> (!set.contains(<span class="hljs-number">2</span>*t)) &#123;<br>                set.add(<span class="hljs-number">2</span>*t);<br>                minHeap.add(<span class="hljs-number">2</span>*t);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!set.contains(<span class="hljs-number">3</span>*t)) &#123;<br>                set.add(<span class="hljs-number">3</span>*t);<br>                minHeap.add(<span class="hljs-number">3</span>*t);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!set.contains(<span class="hljs-number">5</span>*t)) &#123;<br>                set.add(<span class="hljs-number">5</span>*t);<br>                minHeap.add(<span class="hljs-number">5</span>*t);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> minHeap.peek().intValue();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方法二：动态规划"><a href="#方法二：动态规划" class="headerlink" title="方法二：动态规划"></a>方法二：动态规划</h4><p>定义数组dp，其中dp[i]表示第i个丑数，第n个丑数即为dp[n]。</p><p>由于最小的丑数是1，因此dp[1]&#x3D;1。</p><p>定义三个指针p2、p3、p5，表示下一个丑数是当前指针指向的丑数乘以对应的质因数。初始时，三个指针的值都是1。</p><p>当2&lt;&#x3D;i&lt;&#x3D;n时，令dp[i]&#x3D;min(dp[p2]x2,dp[p3]x3,dp[p5]x5)，然后分别比较dp[i]和dp[p2]x2,dp[p3]x3,dp[p5]x5是否相等，如果相等则将相应的指针加1。</p><p>正确性证明：</p><blockquote><p>对于i&gt;1，在计算dp[i]时，指针px(x∈{2,3,5})的含义是使得dp[j] × x &gt; dp[i-1]的最小的下标j.即当j&gt;&#x3D;px时dp[j] × x &gt; dp[i-1],当j&lt;px时dp[j] × x &lt;&#x3D; dp[i-1]。</p><p>因此，对于i&gt;1，在计算dp[i]时，dp[p2]×2,dp[p3]×3,dp[p5]×5都大于dp[i-1],dp[p2-1]×2,dp[p3-1]×3,dp[p5-1]×5都小于或等于dp[i-1]。令dp[i] &#x3D; min(dp[p2]×2,dp[p3]×3,dp[p5]×5),则dp[i]是大于dp[i-1]的最小的丑数，即dp[i]是第i个丑数</p><p>在计算dp[i]之后，会更新三个指针p2、p3、p5，更新之后的指针将用于计算dp[i+1]，同样满足dp[i+1]是大于dp[i]的最小的丑数，即dp[i+1]是第i+1个丑数</p></blockquote><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nthUglyNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">long</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[n];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,p3 = <span class="hljs-number">0</span>,p5 = <span class="hljs-number">0</span>;<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++) &#123;<br>            dp[i] = Math.min(dp[p2]*<span class="hljs-number">2</span>,Math.min(dp[p3]*<span class="hljs-number">3</span>,dp[p5]*<span class="hljs-number">5</span>));<br>            <span class="hljs-keyword">if</span> (dp[i] == dp[p2]*<span class="hljs-number">2</span>) &#123;<br>                p2++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (dp[i] == dp[p3]*<span class="hljs-number">3</span>) &#123;<br>                p3++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (dp[i] == dp[p5]*<span class="hljs-number">5</span>) &#123;<br>                p5++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)dp[n-<span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>优雅的解题思路(持续更新)</title>
    <link href="/2022/09/17/%E4%BC%98%E9%9B%85%E7%9A%84%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/"/>
    <url>/2022/09/17/%E4%BC%98%E9%9B%85%E7%9A%84%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<hr><h5 id="215-数组中的第K个最大元素-力扣（LeetCode）"><a href="#215-数组中的第K个最大元素-力扣（LeetCode）" class="headerlink" title="215. 数组中的第K个最大元素 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/">215. 数组中的第K个最大元素 - 力扣（LeetCode）</a></h5><p>假设数组的左边界为left、右边界为right</p><p>改造快速排序求解。当通过partition确定选择的元素的位置i之后，判断i和right-k+1的大小</p><ul><li>如果 i &lt; right-k+1，在数组左边进行同样的操作（操作之前先更新left、right、k的值）</li><li>i &gt; right-k+1，在数组右边进行同样的操作（操作之前先更新left、right、k的值）</li><li>直到i &#x3D; right-k+1。</li></ul><hr><h5 id="220-存在重复元素-III-力扣（LeetCode）"><a href="#220-存在重复元素-III-力扣（LeetCode）" class="headerlink" title="220. 存在重复元素 III - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/contains-duplicate-iii/">220. 存在重复元素 III - 力扣（LeetCode）</a></h5><p>给你一个整数数组 nums 和两个整数 k 和 t 。请你判断是否存在 两个不同下标 i 和 j，使得 abs(nums[i] - nums[j]) &lt;&#x3D; t ，同时又满足 abs(i - j) &lt;&#x3D; k 。</p><p>思路：</p><ul><li>滑动窗口+有序集合<br>维护一个TreeSet（称为set）,set中最多有k个元素，当超过k个元素时，移除set中存在时间最长的元素。<br>对nums中的每个元素nums[i]，判断set中是否有元素在[nums[i]-t,nums[i]+t]范围内。<ul><li>如果存在这样一个元素，直接返回</li><li>如果不存在这样一个元素，将nums[i]加入set后继续检测nums[i+1]</li></ul></li><li>桶<br>对于元素x，其影响的区间为[x-t,x+t]。于是我们可以设定一个大小为t+1的桶。<ul><li>如果两个元素同属一个桶，那么这两个元素必然满足条件</li><li>如果两个元素属于相邻桶，那么我们需要校验这两个元素差值的绝对值是否不超过t</li><li>如果两个元素既不属于同一个桶，也不属于相邻桶，那么这两个元素必然不满足条件</li></ul></li></ul><hr><h5 id="222-完全二叉树的节点个数-力扣（LeetCode）"><a href="#222-完全二叉树的节点个数-力扣（LeetCode）" class="headerlink" title="222. 完全二叉树的节点个数 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/count-complete-tree-nodes/">222. 完全二叉树的节点个数 - 力扣（LeetCode）</a></h5><p>二分查找 + 位运算</p><p>假设完全二叉树的层数为h，则完全二叉树的节点数量在[2^h,2^(h+1)-1]之间</p><ul><li>在区间内使用二分查找算法，得到需要判断的数k</li><li>判断第k个节点是否存在：<ul><li>第k个节点位于第h层，则k有h+1位。</li><li>除掉最高位的1之后，从根节点开始，按照从高到低遍历k的二进制位。</li><li>如果二进制位为0，表示移动到左子节点；如果二进制位为1，表示移动到右子节点。</li><li>当移动到倒数第二位时，其下一个要移动到的子节点就是第k个节点。由此可以知道第k个节点是否存在</li></ul></li><li>如果第k个节点存在，则节点个数一定大于或等于k。如果第k个节点不存在，则节点个数一定小于k</li><li>得到新的节点个数区间后回到第一步继续进行二分查找直到得到节点个数</li></ul><hr><h5 id="235-二叉搜索树的最近公共祖先-力扣（LeetCode）"><a href="#235-二叉搜索树的最近公共祖先-力扣（LeetCode）" class="headerlink" title="235. 二叉搜索树的最近公共祖先 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/">235. 二叉搜索树的最近公共祖先 - 力扣（LeetCode）</a></h5><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><p>思路：</p><ul><li>找二叉树的最近公共祖先<ul><li>定义fx表示x节点的子树中是否包含p节点或q节点，如果包含则为true，否则为false。 那么p和q的最近公共祖先一定满足条件<br><img src="/2022/09/17/%E4%BC%98%E9%9B%85%E7%9A%84%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/1663503015805.png" class><br>当x的左子树和右子树分别包含p和q、x就是p或q并且x的左子树或右子树包含另一个节点时，x为二叉树的最近公共祖先。这两个条件分别对应上面的两个表达式。<br>找到最近公共祖先后，由fx的定义可以保证不会误找出新的最近公共祖先</li><li>记录每个节点的父节点，可以得到p和q到达根节点的路径，两条路径从下往上第一个交点就是p和q的最近公共祖先</li></ul></li><li>找二叉搜索树的最近公共祖先<ul><li>根据二叉搜索树的性质可以直接得到p和q到达根节点的路径，然后算出最近公共祖先</li><li>如果p和q分别在x的两边（包括x就是p或q），那么x就是p和q的最近公共祖先。根据二叉搜索树的性质可以通过p、q和节点root的值进行比较快速找到x</li></ul></li></ul><h5 id="240-搜索二维矩阵-II-力扣（LeetCode）"><a href="#240-搜索二维矩阵-II-力扣（LeetCode）" class="headerlink" title="240. 搜索二维矩阵 II - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/search-a-2d-matrix-ii/">240. 搜索二维矩阵 II - 力扣（LeetCode）</a></h5><p>编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target 。该矩阵具有以下特性：</p><ul><li>每行的元素从左到右升序排列。</li><li>每列的元素从上到下升序排列。</li></ul><p>思路:</p><p>从矩阵的右上方(0,n-1)开始搜索。在每一步的搜索过程中，如果我们位于位置 (x,y)，那么我们希望在以<em>matrix</em>的左下角为左下角、以(x,y)为右上角的矩阵中进行搜索，即行的范围为 [x,m-1]，列的范围为[0,y]：</p><p>对于位于位置（x,y）的数matrix[x,y],我们将其和target比较</p><ul><li>matrix[x,y] &lt; target 可以推断出target一定不在第x行（第x行的元素都严格小于target），将x+1，然后重新进行比较</li><li>matrix[x,y] &gt; target 同理将y-1后重新进行比较</li><li>matrix[x,y] &#x3D; target 找到target，返回结果</li></ul><p>最后如果x&gt;&#x3D;m 或 y&lt;0，表示矩阵matrix中没有值为target的数</p><hr><h5 id="254-因子的组合-力扣（LeetCode）"><a href="#254-因子的组合-力扣（LeetCode）" class="headerlink" title="254. 因子的组合 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/factor-combinations/">254. 因子的组合 - 力扣（LeetCode）</a></h5><p>请实现一个函数，该函数接收一个整数 <em>n</em> 并返回该整数所有的因子组合。</p><p>思路:</p><ul><li><p>dfs递归：遍历范围为i&#x3D;2~√n的因子</p></li><li><p>单层递归：如果i是n的因子，该层结果中添加一个[i，n&#x2F;&#x2F;i]组合</p></li><li><p>递归处理：</p><ul><li>查看n&#x2F;&#x2F;i能否从因子i开始被拆分成多因子组合sub序列</li><li>如果sub存在，则在该层结果中继续添加sub+[i]为一个新的组合</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>只出现一次的数字III</title>
    <link href="/2022/09/17/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97III/"/>
    <url>/2022/09/17/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97III/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/single-number-iii/">LeetCode链接</a></p><p>题目描述如下：</p><blockquote><p>给你一个整数数组 <code>nums</code>，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按 <strong>任意顺序</strong> 返回答案。</p></blockquote><p><strong>思路一</strong>：</p><blockquote><p>Map统计整数数组中元素出现的次数</p></blockquote><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] singleNumber(<span class="hljs-type">int</span>[] nums) &#123;<br>        Map&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++) &#123;<br>            map.computeIfPresent(nums[i],(key,value) -&gt; value+<span class="hljs-number">1</span>);<br>            map.putIfAbsent(nums[i],<span class="hljs-number">1</span>);<br>        &#125;<br>        List&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Integer,Integer&gt; entry:map.entrySet()) &#123;<br>            <span class="hljs-keyword">if</span> (entry.getValue() == <span class="hljs-number">1</span>) &#123;<br>                ans.add(entry.getKey());<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;ans.get(<span class="hljs-number">0</span>),ans.get(<span class="hljs-number">1</span>)&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>复杂度：</strong></p><ul><li>时间复杂度：O(n),其中n为数组长度</li><li>空间复杂度：O(n),n为哈希表使用的空间</li></ul><hr><p><strong>思路二</strong>：</p><blockquote><p>根据异或运算等位运算知识</p></blockquote><p>假设整数数组nums中只出现一次的数字分别为x1和x2、将nums中所有元素异或得到x，那么根据异或运算的性质</p><p>a ^ a &#x3D; 0 可知x1 ^ x2 &#x3D; x并且x1和x2不等(x1和x2都只出现了一次)。</p><p>根据x &amp; (-x)算出x的二进制表示中最低位的1，记为第i位。易知x1和x2的二进制表示的第i位一定不同，即一个数的第i位是0，另一个数的第i位是1</p><p>同时我们可以将nums中的数分为两类，一类数的二进制表示的第i位是0、一类数的二进制表示的第i位是0。</p><p>分别将这两类数的所有元素异或得到y1和y2，由于除了x1和x2其他的数都出现了两次，可以知道y1&#x3D;x1、y2&#x3D;x2</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] singleNumber(<span class="hljs-type">int</span>[] nums) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++) &#123;<br>            x = x ^ nums[i];<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> x &amp; (-x);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,x2 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++) &#123;<br>            <span class="hljs-comment">// 第i位为1</span><br>            <span class="hljs-keyword">if</span> ((nums[i] &amp; t) == t) &#123;<br>                x1 = x1 ^ nums[i];<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                x2 = x2 ^ nums[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;x1,x2&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>复杂度：</strong></p><ul><li>时间复杂度：O(n),其中n位数组长度</li><li>空间复杂度：O(1),算法用到了常数级别的空间</li></ul>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>N皇后问题</title>
    <link href="/2022/08/29/N%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/"/>
    <url>/2022/08/29/N%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="基于集合的回溯"><a href="#基于集合的回溯" class="headerlink" title="基于集合的回溯"></a>基于集合的回溯</h3><p>思路：按行遍历。维护三个集合<em>columns</em>、<em>diagonals1</em>和<em>diagonals2</em>分别表示每一列以及两个方向的每条斜线是否有皇后</p><p>代码如下:0-</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;List&lt;String&gt;&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">solveNQueens</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">int</span>[] column = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-type">int</span>[] slashL = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span>[] slashR = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>];<br>        <span class="hljs-type">boolean</span>[][] board = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n][n];<br>        dfs(board,column,slashL,slashR,n,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">boolean</span>[][] board,<span class="hljs-type">int</span>[] column,<span class="hljs-type">int</span>[] slashL,<span class="hljs-type">int</span>[] slashR,<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> rowIndex)</span> &#123;<br>        <span class="hljs-keyword">if</span> (rowIndex == n) &#123;<br>            List&lt;String&gt; t = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) &#123;<br>                <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++) &#123;<br>                    <span class="hljs-keyword">if</span> (board[i][j]) &#123;<br>                        sb.append(<span class="hljs-string">&#x27;Q&#x27;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        sb.append(<span class="hljs-string">&#x27;.&#x27;</span>);<br>                    &#125;<br>                &#125;<br>                t.add(sb.toString());<br>            &#125;<br>            ans.add(t);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) &#123;<br>            <span class="hljs-keyword">if</span> (column[i] == <span class="hljs-number">0</span> &amp;&amp; slashL[i+rowIndex] == <span class="hljs-number">0</span> &amp;&amp; slashR[rowIndex-i+n-<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>) &#123;<br>                column[i] = <span class="hljs-number">1</span>;<br>                slashL[i+rowIndex] = <span class="hljs-number">1</span>;<br>                slashR[rowIndex-i+n-<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>                board[rowIndex][i] = <span class="hljs-literal">true</span>;<br>                dfs(board,column,slashL,slashR,n,rowIndex+<span class="hljs-number">1</span>);<br>                column[i] = <span class="hljs-number">0</span>;<br>                slashL[i+rowIndex] = <span class="hljs-number">0</span>;<br>                slashR[rowIndex-i+n-<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>                board[rowIndex][i] = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基于位运算的回溯"><a href="#基于位运算的回溯" class="headerlink" title="基于位运算的回溯"></a>基于位运算的回溯</h3><p>思路：使用三个整数<em>columns</em>、<em>diagonals1</em>和<em>diagonals2</em>分别记录每一列和两个方向的每条斜线上是否有皇后</p><blockquote><p>此方法的空间复杂度可由基于集合回溯的O(N)降为O(1)</p></blockquote><p><em>columns</em>、<em>diagonals1</em>和<em>diagonals2</em>三个整数的低N位分别对应于棋盘中的N列，其中棋盘的最左列对应整数的最低二进制位、最右列对应整数的第N-1个二进制位</p><p>约定用0表示可以放置皇后的位置、用1表示不能放置皇后的位置。如n&#x3D;4 columns&#x3D;0101(2)表示第0、2列不能放置皇后；第1、3列可以放置皇后</p><p>下面说明每次放置皇后后如何更新三个整数的值</p><img src="/2022/08/29/N%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/1661847071002.png" class><br><br><p>如上图所示，在第1行第4列放置皇后后，考虑第2行能在哪些列放置皇后</p><blockquote><p>首先显然可以得到第2、4列不能放置皇后</p><p>然后根据从左上到右下的斜线可知第4、5列不能放置皇后。第4列为其前2行的第2列向右下方移动两步的位置、第5列为其前1行的第4列向右下方移动一步的位置</p><p>根据从右上到左下的斜线可知第0、3列不能放置皇后。第0列为其前2行的第2列向右下方移动两步的位置、第3列为其前1行的第4列向右下方移动一步的位置</p></blockquote><p>简单归纳可以得到三个整数的更新计算方法：</p><ul><li>初始时三个整数都置为0，表示没有放置任何皇后</li><li>在放置当前皇后时，如果皇后放置在第i列，则将三个整数的第i（从低到高）位置为1</li><li>进入下一行时，columns值保持不变，diagonals1左移1位（当前行不能放置皇后位置的右下方距离一步的位置也不能放置皇后），diagonals2右移1位（当前行不能放置皇后位置的左下方距离一步的位置也不能放置皇后）</li></ul><p>每次放置皇后时，通过三个整数的按位或运算的结果可以得到可以和不可以放置皇后的位置</p><p>可以通过（2^n-1）&amp; (~(columns | diagonals1 | diagonals2))得到所有可以放置皇后的位置（第i位为1表示第i位可以放置皇后），然后遍历这些位置，得到所有可能的解</p><p>遍历可以放置皇后的位置时，可以利用以下两个按位与运算的性质：</p><ul><li>x <strong>&amp;</strong> (−x) 可以获得 x 的二进制表示中的最低位的 1 的位置</li><li>x <strong>&amp;</strong> (x−1) 可以将 x 的二进制表示中的最低位的 1 置成 0</li></ul><p>具体做法是，每次获得可以放置皇后的位置中的最低位，并将该位的值置成 0，尝试在该位置放置皇后。这样即可遍历每个可以放置皇后的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">solveNQueens</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">int</span>[] queens = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        Arrays.fill(queens, -<span class="hljs-number">1</span>);<br>        List&lt;List&lt;String&gt;&gt; solutions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;List&lt;String&gt;&gt;();<br>        solve(solutions, queens, n, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> solutions;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(List&lt;List&lt;String&gt;&gt; solutions, <span class="hljs-type">int</span>[] queens, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> columns, <span class="hljs-type">int</span> diagonals1, <span class="hljs-type">int</span> diagonals2)</span> &#123;<br>        <span class="hljs-keyword">if</span> (row == n) &#123;<br>            List&lt;String&gt; board = generateBoard(queens, n);<br>            solutions.add(board);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">availablePositions</span> <span class="hljs-operator">=</span> ((<span class="hljs-number">1</span> &lt;&lt; n) - <span class="hljs-number">1</span>) &amp; (~(columns | diagonals1 | diagonals2));<br>            <span class="hljs-keyword">while</span> (availablePositions != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">position</span> <span class="hljs-operator">=</span> availablePositions &amp; (-availablePositions);<br>                availablePositions = availablePositions &amp; (availablePositions - <span class="hljs-number">1</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">column</span> <span class="hljs-operator">=</span> Integer.bitCount(position - <span class="hljs-number">1</span>);<br>                queens[row] = column;<br>                solve(solutions, queens, n, row + <span class="hljs-number">1</span>, columns | position, (diagonals1 | position) &lt;&lt; <span class="hljs-number">1</span>, (diagonals2 | position) &gt;&gt; <span class="hljs-number">1</span>);<br>                queens[row] = -<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">generateBoard</span><span class="hljs-params">(<span class="hljs-type">int</span>[] queens, <span class="hljs-type">int</span> n)</span> &#123;<br>        List&lt;String&gt; board = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">char</span>[] row = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[n];<br>            Arrays.fill(row, <span class="hljs-string">&#x27;.&#x27;</span>);<br>            row[queens[i]] = <span class="hljs-string">&#x27;Q&#x27;</span>;<br>            board.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(row));<br>        &#125;<br>        <span class="hljs-keyword">return</span> board;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>据Leetcode评论区：当数据量达到15时，基于集合的回溯会超时，基于位运算的回溯刚好能过</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
