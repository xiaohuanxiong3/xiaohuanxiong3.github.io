<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>优雅的解题思路(持续更新)</title>
    <link href="/2022/09/17/%E4%BC%98%E9%9B%85%E7%9A%84%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/"/>
    <url>/2022/09/17/%E4%BC%98%E9%9B%85%E7%9A%84%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/bitwise-and-of-numbers-range/">201. 数字范围按位与 - 力扣（LeetCode）</a></p><p>todo</p><hr><p><a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/">215. 数组中的第K个最大元素 - 力扣（LeetCode）</a></p><p>todo</p><hr><p><a href="https://leetcode.cn/problems/contains-duplicate-iii/">220. 存在重复元素 III - 力扣（LeetCode）</a></p><p>todo</p><hr><p><a href="https://leetcode.cn/problems/count-complete-tree-nodes/">222. 完全二叉树的节点个数 - 力扣（LeetCode）</a></p><p>todo</p><hr><p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/">235. 二叉搜索树的最近公共祖先 - 力扣（LeetCode）</a></p><p>todo</p><hr><p><a href="https://leetcode.cn/problems/search-a-2d-matrix-ii/">240. 搜索二维矩阵 II - 力扣（LeetCode）</a></p><p>编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target 。该矩阵具有以下特性：</p><ul><li>每行的元素从左到右升序排列。</li><li>每列的元素从上到下升序排列。</li></ul><p>思路:</p><p>从矩阵的右上方(0,n-1)开始搜索。在每一步的搜索过程中，如果我们位于位置 (x,y)，那么我们希望在以<em>matrix</em>的左下角为左下角、以(x,y)为右上角的矩阵中进行搜索，即行的范围为 [x,m-1]，列的范围为[0,y]：</p><p>对于位于位置（x,y）的数matrix[x,y],我们将其和target比较</p><ul><li>matrix[x,y] &lt; target 可以推断出target一定不在第x行（第x行的元素都严格小于target），将x+1，然后重新进行比较</li><li>matrix[x,y] &gt; target 同理将y-1后重新进行比较</li><li>matrix[x,y] &#x3D; target 找到target，返回结果</li></ul><p>最后如果x&gt;&#x3D;m 或 y&lt;0，表示矩阵matrix中没有值为target的数</p><hr><p><a href="https://leetcode.cn/problems/factor-combinations/">254. 因子的组合 - 力扣（LeetCode）</a></p><p>请实现一个函数，该函数接收一个整数 <em>n</em> 并返回该整数所有的因子组合。</p><p>思路:</p><ul><li><p>dfs递归：遍历范围为i&#x3D;2~√n的因子</p></li><li><p>单层递归：如果i是n的因子，该层结果中添加一个[i，n&#x2F;&#x2F;i]组合</p></li><li><p>递归处理：</p><ul><li>查看n&#x2F;&#x2F;i能否从因子i开始被拆分成多因子组合sub序列</li><li>如果sub存在，则在该层结果中继续添加sub+[i]为一个新的组合</li></ul></li></ul><hr>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>只出现一次的数字III</title>
    <link href="/2022/09/17/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97III/"/>
    <url>/2022/09/17/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97III/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/single-number-iii/">LeetCode链接</a></p><p>题目描述如下：</p><blockquote><p>给你一个整数数组 <code>nums</code>，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按 <strong>任意顺序</strong> 返回答案。</p></blockquote><p><strong>思路一</strong>：</p><blockquote><p>Map统计整数数组中元素出现的次数</p></blockquote><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] singleNumber(<span class="hljs-type">int</span>[] nums) &#123;<br>        Map&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++) &#123;<br>            map.computeIfPresent(nums[i],(key,value) -&gt; value+<span class="hljs-number">1</span>);<br>            map.putIfAbsent(nums[i],<span class="hljs-number">1</span>);<br>        &#125;<br>        List&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Integer,Integer&gt; entry:map.entrySet()) &#123;<br>            <span class="hljs-keyword">if</span> (entry.getValue() == <span class="hljs-number">1</span>) &#123;<br>                ans.add(entry.getKey());<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;ans.get(<span class="hljs-number">0</span>),ans.get(<span class="hljs-number">1</span>)&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>复杂度：</strong></p><ul><li>时间复杂度：O(n),其中n为数组长度</li><li>空间复杂度：O(n),n为哈希表使用的空间</li></ul><hr><p><strong>思路二</strong>：</p><blockquote><p>根据异或运算等位运算知识</p></blockquote><p>假设整数数组nums中只出现一次的数字分别为x1和x2、将nums中所有元素异或得到x，那么根据异或运算的性质</p><p>a ^ a &#x3D; 0 可知x1 ^ x2 &#x3D; x并且x1和x2不等(x1和x2都只出现了一次)。</p><p>根据x &amp; (-x)算出x的二进制表示中最低位的1，记为第i位。易知x1和x2的二进制表示的第i位一定不同，即一个数的第i位是0，另一个数的第i位是1</p><p>同时我们可以将nums中的数分为两类，一类数的二进制表示的第i位是0、一类数的二进制表示的第i位是0。</p><p>分别将这两类数的所有元素异或得到y1和y2，由于除了x1和x2其他的数都出现了两次，可以知道y1&#x3D;x1、y2&#x3D;x2</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] singleNumber(<span class="hljs-type">int</span>[] nums) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++) &#123;<br>            x = x ^ nums[i];<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> x &amp; (-x);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,x2 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++) &#123;<br>            <span class="hljs-comment">// 第i位为1</span><br>            <span class="hljs-keyword">if</span> ((nums[i] &amp; t) == t) &#123;<br>                x1 = x1 ^ nums[i];<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                x2 = x2 ^ nums[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;x1,x2&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>复杂度：</strong></p><ul><li>时间复杂度：O(n),其中n位数组长度</li><li>空间复杂度：O(1),算法用到了常数级别的空间</li></ul>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>N皇后问题</title>
    <link href="/2022/08/29/N%E7%9A%87%E5%90%8E/"/>
    <url>/2022/08/29/N%E7%9A%87%E5%90%8E/</url>
    
    <content type="html"><![CDATA[<h3 id="基于集合的回溯"><a href="#基于集合的回溯" class="headerlink" title="基于集合的回溯"></a>基于集合的回溯</h3><p>思路：按行遍历。维护三个集合<em>columns</em>、<em>diagonals1</em>和<em>diagonals2</em>分别表示每一列以及两个方向的每条斜线是否有皇后</p><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;List&lt;String&gt;&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">solveNQueens</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">int</span>[] column = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-type">int</span>[] slashL = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span>[] slashR = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>];<br>        <span class="hljs-type">boolean</span>[][] board = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n][n];<br>        dfs(board,column,slashL,slashR,n,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">boolean</span>[][] board,<span class="hljs-type">int</span>[] column,<span class="hljs-type">int</span>[] slashL,<span class="hljs-type">int</span>[] slashR,<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> rowIndex)</span> &#123;<br>        <span class="hljs-keyword">if</span> (rowIndex == n) &#123;<br>            List&lt;String&gt; t = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) &#123;<br>                <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++) &#123;<br>                    <span class="hljs-keyword">if</span> (board[i][j]) &#123;<br>                        sb.append(<span class="hljs-string">&#x27;Q&#x27;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        sb.append(<span class="hljs-string">&#x27;.&#x27;</span>);<br>                    &#125;<br>                &#125;<br>                t.add(sb.toString());<br>            &#125;<br>            ans.add(t);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) &#123;<br>            <span class="hljs-keyword">if</span> (column[i] == <span class="hljs-number">0</span> &amp;&amp; slashL[i+rowIndex] == <span class="hljs-number">0</span> &amp;&amp; slashR[rowIndex-i+n-<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>) &#123;<br>                column[i] = <span class="hljs-number">1</span>;<br>                slashL[i+rowIndex] = <span class="hljs-number">1</span>;<br>                slashR[rowIndex-i+n-<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>                board[rowIndex][i] = <span class="hljs-literal">true</span>;<br>                dfs(board,column,slashL,slashR,n,rowIndex+<span class="hljs-number">1</span>);<br>                column[i] = <span class="hljs-number">0</span>;<br>                slashL[i+rowIndex] = <span class="hljs-number">0</span>;<br>                slashR[rowIndex-i+n-<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>                board[rowIndex][i] = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基于位运算的回溯"><a href="#基于位运算的回溯" class="headerlink" title="基于位运算的回溯"></a>基于位运算的回溯</h3><p>思路：使用三个整数<em>columns</em>、<em>diagonals1</em>和<em>diagonals2</em>分别记录每一列和两个方向的每条斜线上是否有皇后</p><blockquote><p>此方法的空间复杂度可由基于集合回溯的O(N)降为O(1)</p></blockquote><p><em>columns</em>、<em>diagonals1</em>和<em>diagonals2</em>三个整数的低N位分别对应于棋盘中的N列，其中棋盘的最左列对应整数的最低二进制位、最右列对应整数的第N-1个二进制位</p><p>约定用0表示可以放置皇后的位置、用1表示不能放置皇后的位置。如n&#x3D;4 columns&#x3D;0101(2)表示第0、2列不能放置皇后；第1、3列可以放置皇后</p><p>下面说明每次放置皇后后如何更新三个整数的值</p><img src="/2022/08/29/N%E7%9A%87%E5%90%8E/1661847071002.png" class=""><p>如上图所示，在第1行第4列放置皇后后，考虑第2行能在哪些列放置皇后</p><blockquote><p>首先显然可以得到第2、4列不能放置皇后</p><p>然后根据从左上到右下的斜线可知第4、5列不能放置皇后。第4列为其前2行的第2列向右下方移动两步的位置、第5列为其前1行的第4列向右下方移动一步的位置</p><p>根据从右上到左下的斜线可知第0、3列不能放置皇后。第0列为其前2行的第2列向右下方移动两步的位置、第3列为其前1行的第4列向右下方移动一步的位置</p></blockquote><p>简单归纳可以得到三个整数的更新计算方法：</p><ul><li>初始时三个整数都置为0，表示没有放置任何皇后</li><li>在放置当前皇后时，如果皇后放置在第i列，则将三个整数的第i（从低到高）位置为1</li><li>进入下一行时，columns值保持不变，diagonals1左移1位（当前行不能放置皇后位置的右下方距离一步的位置也不能放置皇后），diagonals2右移1位（当前行不能放置皇后位置的左下方距离一步的位置也不能放置皇后）</li></ul><p>每次放置皇后时，通过三个整数的按位或运算的结果可以得到可以和不可以放置皇后的位置</p><p>可以通过（2^n-1）&amp; (~(columns | diagonals1 | diagonals2))得到所有可以放置皇后的位置（第i位为1表示第i位可以放置皇后），然后遍历这些位置，得到所有可能的解</p><p>遍历可以放置皇后的位置时，可以利用以下两个按位与运算的性质：</p><ul><li>x <strong>&amp;</strong> (−x) 可以获得 x 的二进制表示中的最低位的 1 的位置</li><li>x <strong>&amp;</strong> (x−1) 可以将 x 的二进制表示中的最低位的 1 置成 0</li></ul><p>具体做法是，每次获得可以放置皇后的位置中的最低位，并将该位的值置成 0，尝试在该位置放置皇后。这样即可遍历每个可以放置皇后的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">solveNQueens</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">int</span>[] queens = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        Arrays.fill(queens, -<span class="hljs-number">1</span>);<br>        List&lt;List&lt;String&gt;&gt; solutions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;List&lt;String&gt;&gt;();<br>        solve(solutions, queens, n, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> solutions;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(List&lt;List&lt;String&gt;&gt; solutions, <span class="hljs-type">int</span>[] queens, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> columns, <span class="hljs-type">int</span> diagonals1, <span class="hljs-type">int</span> diagonals2)</span> &#123;<br>        <span class="hljs-keyword">if</span> (row == n) &#123;<br>            List&lt;String&gt; board = generateBoard(queens, n);<br>            solutions.add(board);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">availablePositions</span> <span class="hljs-operator">=</span> ((<span class="hljs-number">1</span> &lt;&lt; n) - <span class="hljs-number">1</span>) &amp; (~(columns | diagonals1 | diagonals2));<br>            <span class="hljs-keyword">while</span> (availablePositions != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">position</span> <span class="hljs-operator">=</span> availablePositions &amp; (-availablePositions);<br>                availablePositions = availablePositions &amp; (availablePositions - <span class="hljs-number">1</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">column</span> <span class="hljs-operator">=</span> Integer.bitCount(position - <span class="hljs-number">1</span>);<br>                queens[row] = column;<br>                solve(solutions, queens, n, row + <span class="hljs-number">1</span>, columns | position, (diagonals1 | position) &lt;&lt; <span class="hljs-number">1</span>, (diagonals2 | position) &gt;&gt; <span class="hljs-number">1</span>);<br>                queens[row] = -<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">generateBoard</span><span class="hljs-params">(<span class="hljs-type">int</span>[] queens, <span class="hljs-type">int</span> n)</span> &#123;<br>        List&lt;String&gt; board = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">char</span>[] row = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[n];<br>            Arrays.fill(row, <span class="hljs-string">&#x27;.&#x27;</span>);<br>            row[queens[i]] = <span class="hljs-string">&#x27;Q&#x27;</span>;<br>            board.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(row));<br>        &#125;<br>        <span class="hljs-keyword">return</span> board;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>据Leetcode评论区：当数据量达到15时，基于集合的回溯会超时，基于位运算的回溯刚好能过</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
