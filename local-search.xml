<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>3-cache.md</title>
    <link href="/2023/05/20/3-cache-md/"/>
    <url>/2023/05/20/3-cache-md/</url>
    
    <content type="html"><![CDATA[<p>    这个模块主要自定义了缓存接口和提供了框架自带的缓存实现</p><h4 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h4><p>首先是缓存接口</p><p>将官方注释翻译一下：</p><p>    这个接口是缓存提供者的SPI（了解java SPI机制可以参考这篇文章–<a href="https://cloud.tencent.com/developer/article/1785056">Java SPI (Service Provider Interface) 机制详解-腾讯云开发者社区-腾讯云 (tencent.com)</a>）。</p><p>    每个命名空间都会创建一个缓存实例。</p><p>    缓存的实现必须有一个接收一个String型缓存id的构造函数，Mybatis将把名称空间作为id传给构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> The identifier of this cache</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 取得ID</span><br>  String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> key Can be any object but usually it is a &#123;<span class="hljs-doctag">@link</span> CacheKey&#125;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value The result of a select.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 存入值</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object value)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> key The key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> The object stored in the cache.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 获取值</span><br>  Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Optional. It is not called by the core.</span><br><span class="hljs-comment">   * </span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> key The key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> The object that was removed</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 删除值</span><br>  Object <span class="hljs-title function_">removeObject</span><span class="hljs-params">(Object key)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Clears this cache instance</span><br><span class="hljs-comment">   */</span>  <br>  <span class="hljs-comment">// 清空</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Optional. This method is not called by the core.</span><br><span class="hljs-comment">   * </span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> The number of elements stored in the cache (not its capacity).</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 取得大小</span><br>  <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">/** </span><br><span class="hljs-comment">   * Optional. As of 3.2.6 this method is no longer called by the core.</span><br><span class="hljs-comment">   *  </span><br><span class="hljs-comment">   * Any locking needed by the cache must be provided internally by the cache provider.</span><br><span class="hljs-comment">   * </span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> A ReadWriteLock </span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 取得读写锁, 从3.2.6开始没用了，要SPI自己实现锁</span><br>  ReadWriteLock <span class="hljs-title function_">getReadWriteLock</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="CacheKey"><a href="#CacheKey" class="headerlink" title="CacheKey"></a>CacheKey</h4><p>    缓存key。一般缓存框架基本上都是以key-value的结构进行存储，Mybatis 对于其Key的生成采取的规则为：[mappedStementId + offset + limit + SQL + queryParams + environment]生成一个哈希码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheKey</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>, Serializable &#123;<br>  <span class="hljs-comment">// update 和 updateAll方法无效的 CacheKey（这个属性没有用到）</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">CacheKey</span> <span class="hljs-variable">NULL_CACHE_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullCacheKey</span>();<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_MULTIPLYER</span> <span class="hljs-operator">=</span> <span class="hljs-number">37</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_HASHCODE</span> <span class="hljs-operator">=</span> <span class="hljs-number">17</span>;<br><br>  <span class="hljs-comment">// 固定的乘数</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> multiplier;<br>  <span class="hljs-comment">// hash码</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> hashcode;<br>  <span class="hljs-comment">// 校验和 -- 计算方式为所有缓存对象的hash码相加</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> checksum;<br>  <span class="hljs-comment">// 缓存对象计数</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count;<br>  <span class="hljs-comment">// 存储所有缓存对象用于equals判断</span><br>  <span class="hljs-keyword">private</span> List&lt;Object&gt; updateList;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">CacheKey</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.hashcode = DEFAULT_HASHCODE;<br>    <span class="hljs-built_in">this</span>.multiplier = DEFAULT_MULTIPLYER;<br>    <span class="hljs-built_in">this</span>.count = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">this</span>.updateList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;();<br>  &#125;<br><br>  <span class="hljs-comment">// 传入一个Object数组，更新hashcode和效验码</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">CacheKey</span><span class="hljs-params">(Object[] objects)</span> &#123;<br>    <span class="hljs-built_in">this</span>();<br>    updateAll(objects);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getUpdateCount</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> updateList.size();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Object object)</span> &#123;<br>    <span class="hljs-keyword">if</span> (object != <span class="hljs-literal">null</span> &amp;&amp; object.getClass().isArray()) &#123;<br>      <span class="hljs-comment">// 如果是数组，则循环调用doUpdate</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> Array.getLength(object);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> Array.get(object, i);<br>        doUpdate(element);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 否则，doUpdate</span><br>      doUpdate(object);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doUpdate</span><span class="hljs-params">(Object object)</span> &#123;<br>    <span class="hljs-comment">// 计算hash值，校验码</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">baseHashCode</span> <span class="hljs-operator">=</span> object == <span class="hljs-literal">null</span> ? <span class="hljs-number">1</span> : object.hashCode();<br><br>    count++;<br>    checksum += baseHashCode;<br>    baseHashCode *= count;<br><br>    hashcode = multiplier * hashcode + baseHashCode;<br><br>    <span class="hljs-comment">// 同时将对象加入列表，这样万一两个CacheKey的hash码碰巧一样，再根据对象严格equals来区分</span><br>    updateList.add(object);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateAll</span><span class="hljs-params">(Object[] objects)</span> &#123;<br>    <span class="hljs-keyword">for</span> (Object o : objects) &#123;<br>      update(o);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object object)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == object) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!(object <span class="hljs-keyword">instanceof</span> CacheKey)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">CacheKey</span> <span class="hljs-variable">cacheKey</span> <span class="hljs-operator">=</span> (CacheKey) object;<br><br>    <span class="hljs-comment">// 先比hashcode，checksum，count，理论上可以快速比出来</span><br>    <span class="hljs-keyword">if</span> (hashcode != cacheKey.hashcode) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (checksum != cacheKey.checksum) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (count != cacheKey.count) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 万一两个CacheKey的hash码碰巧一样，再根据对象严格equals来区分</span><br>    <span class="hljs-comment">// 这里两个list的size没比是否相等，其实前面count相等就已经保证了</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; updateList.size(); i++) &#123;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">thisObject</span> <span class="hljs-operator">=</span> updateList.get(i);<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">thatObject</span> <span class="hljs-operator">=</span> cacheKey.updateList.get(i);<br>      <span class="hljs-keyword">if</span> (thisObject == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (thatObject != <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (!thisObject.equals(thatObject)) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125; <br><br>  <span class="hljs-comment">// 格式为：hashcode:checkSum:[object.toString]</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>().append(hashcode).append(<span class="hljs-string">&#x27;:&#x27;</span>).append(checksum);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; updateList.size(); i++) &#123;<br>      returnValue.append(<span class="hljs-string">&#x27;:&#x27;</span>).append(updateList.get(i));<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> returnValue.toString();<br>  &#125; <br><br>  <span class="hljs-comment">// 深拷贝CacheKey</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> CacheKey <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>    <span class="hljs-type">CacheKey</span> <span class="hljs-variable">clonedCacheKey</span> <span class="hljs-operator">=</span> (CacheKey) <span class="hljs-built_in">super</span>.clone();<br>    clonedCacheKey.updateList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;(updateList);<br>    <span class="hljs-keyword">return</span> clonedCacheKey;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="NullCacheKey"><a href="#NullCacheKey" class="headerlink" title="NullCacheKey"></a>NullCacheKey</h4><p>不能添加缓存，因此叫NullCacheKey</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NullCacheKey</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CacheKey</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">3704229911977019465L</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">NullCacheKey</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 只有hash值和校验码为key?</span><br>    <span class="hljs-built_in">super</span>();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Object object)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Not allowed to update a NullCacheKey instance.&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateAll</span><span class="hljs-params">(Object[] objects)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Not allowed to update a NullCacheKey instance.&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="PerpetualCache"><a href="#PerpetualCache" class="headerlink" title="PerpetualCache"></a>PerpetualCache</h4><p>    永久缓存，没有缓存过期和清除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PerpetualCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br>  <span class="hljs-comment">// 每个永久缓存有一个ID来识别</span><br>  <span class="hljs-keyword">private</span> String id; <br><br>  <span class="hljs-comment">// 内部就是一个HashMap,所有方法基本就是直接调用HashMap的方法,不支持多线程？</span><br>  <span class="hljs-keyword">private</span> Map&lt;Object, Object&gt; cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Object, Object&gt;();<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">PerpetualCache</span><span class="hljs-params">(String id)</span> &#123;<br>    <span class="hljs-built_in">this</span>.id = id;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-comment">// 只有id相等才认为两个cache相同</span><br>    <span class="hljs-keyword">if</span> (getId() == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Cache instances require an ID.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> Cache)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-type">Cache</span> <span class="hljs-variable">otherCache</span> <span class="hljs-operator">=</span> (Cache) o;<br>    <span class="hljs-keyword">return</span> getId().equals(otherCache.getId());<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (getId() == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Cache instances require an ID.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> getId().hashCode();<br>  &#125; <br><br>  <span class="hljs-comment">// 其他要实现的都依赖于hashmap</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BlockingCache"><a href="#BlockingCache" class="headerlink" title="BlockingCache"></a>BlockingCache</h4><p>    简单的阻塞装饰器</p><p>    EhCache’s BlockingCache decorator的简单低效版本</p><p>    当在缓存中找不到这个元素时，给cache key上个锁。这样，其他获取该cache key的线程将会一直等待直到这个元素被填充而不是命中数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlockingCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-comment">// 获取锁的超时时间</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> timeout;<br>  <span class="hljs-comment">// 委托的Cache对象</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Cache delegate;<br>  <span class="hljs-comment">// 可重入锁map（并发可用）</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ConcurrentHashMap&lt;Object, ReentrantLock&gt; locks;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">BlockingCache</span><span class="hljs-params">(Cache delegate)</span> &#123;<br>    <span class="hljs-built_in">this</span>.delegate = delegate;<br>    <span class="hljs-built_in">this</span>.locks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;Object, ReentrantLock&gt;();<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object value)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      delegate.putObject(key, value);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-comment">// 释放锁（只有当前线程持有锁时才能释放）</span><br>      releaseLock(key);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">releaseLock</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> locks.get(key);<br>    <span class="hljs-comment">// 防止破坏 getObject时加的锁 ？</span><br>    <span class="hljs-keyword">if</span> (lock.isHeldByCurrentThread()) &#123;<br>      lock.unlock();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    acquireLock(key);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> delegate.getObject(key);<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这里value 为 null 的话锁会一直不释放</span><br><span class="hljs-comment">     * 那么当前线程 putObject 或者 销毁时释放锁？</span><br><span class="hljs-comment">     * 开发者关于这个问题的疑问见 issue #1410</span><br><span class="hljs-comment">     * 有人发现这样实现可能会导致死锁，详见 issue #1261,#1357</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 我去看了下最新的代码，官方已经将 ReentrantLock 换为了 </span><br><span class="hljs-comment">     * CountDownLatch,issue上说的是为了避免oom（https://stackoverflow.com/questions/41898355/lock-handler-for-arbitrary-keys/41912651#41912651）</span><br><span class="hljs-comment">     * 还有官方加了一行新的注释 </span><br><span class="hljs-comment">     * By its nature, this implementation can cause deadlock when used incorrectly.</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>) &#123;<br>      releaseLock(key);<br>    &#125;        <br>    <span class="hljs-keyword">return</span> value;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquireLock</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> getLockForKey(key);<br>    <span class="hljs-keyword">if</span> (timeout &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">acquired</span> <span class="hljs-operator">=</span> lock.tryLock(timeout, TimeUnit.MILLISECONDS);<br>        <span class="hljs-keyword">if</span> (!acquired) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Couldn&#x27;t get a lock in &quot;</span> + timeout + <span class="hljs-string">&quot; for the key &quot;</span> +  key + <span class="hljs-string">&quot; at the cache &quot;</span> + delegate.getId());  <br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Got interrupted while trying to acquire lock for key &quot;</span> + key, e);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      lock.lock();<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> ReentrantLock <span class="hljs-title function_">getLockForKey</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">previous</span> <span class="hljs-operator">=</span> locks.putIfAbsent(key, lock);<br>    <span class="hljs-keyword">return</span> previous == <span class="hljs-literal">null</span> ? lock : previous;<br>  &#125; <br><br>  <span class="hljs-comment">// 其他方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><p>下面附上会导致死锁的测试代码（Mybatis版本为本博文涉及的版本）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BolckingCacheTest</span> &#123;<br><br>    <span class="hljs-meta">@Test(timeout = 3000L)</span><br>    <span class="hljs-comment">// 使用 CountDownLatch 的最新代码也会发生死锁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">BlockingCache</span> <span class="hljs-variable">cache</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockingCache</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PerpetualCache</span>(<span class="hljs-string">&quot;default&quot;</span>));<br><br>        <span class="hljs-comment">// lock twice</span><br>        cache.getObject(<span class="hljs-number">1</span>);<br>        cache.getObject(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; Assert.assertEquals(cache.getObject(<span class="hljs-number">1</span>), <span class="hljs-number">1</span>));<br>        thread.setDaemon(<span class="hljs-literal">false</span>);<br>        thread.start();<br><br>        <span class="hljs-comment">// but release once</span><br>        cache.putObject(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><br>        thread.join();<br>    &#125;<br><br>    <span class="hljs-meta">@Test(timeout = 3000L)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getObject2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">BlockingCache</span> <span class="hljs-variable">cache</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockingCache</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PerpetualCache</span>(<span class="hljs-string">&quot;default&quot;</span>));<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; Assert.assertEquals(cache.getObject(<span class="hljs-number">1</span>), <span class="hljs-number">1</span>));<br>        thread.setDaemon(<span class="hljs-literal">false</span>);<br>        thread.start();<br><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br><br>        <span class="hljs-comment">// but release once</span><br>        cache.putObject(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// lock twice</span><br>        cache.getObject(<span class="hljs-number">1</span>);<br>        cache.getObject(<span class="hljs-number">1</span>);<br><br>        thread.join();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="FifoCache"><a href="#FifoCache" class="headerlink" title="FifoCache"></a>FifoCache</h4><p>FIFO缓存，这个类就是维护了一个FIFI链表，其他接口都委托给包装的cache去做。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FifoCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Cache delegate;<br>  <span class="hljs-comment">// FIFI 链表</span><br>  <span class="hljs-keyword">private</span> Deque&lt;Object&gt; keyList;<br>  <span class="hljs-comment">// 链表长度(默认为1024)</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">FifoCache</span><span class="hljs-params">(Cache delegate)</span> &#123;<br>    <span class="hljs-built_in">this</span>.delegate = delegate;<br>    <span class="hljs-built_in">this</span>.keyList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Object&gt;();<br>    <span class="hljs-built_in">this</span>.size = <span class="hljs-number">1024</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object value)</span> &#123;<br>    cycleKeyList(key);<br>    delegate.putObject(key, value);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cycleKeyList</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// 增加记录时判断如果记录已超过1024条，会移除链表的第一个元素，从而达到FIFO缓存效果</span><br>    keyList.addLast(key);<br>    <span class="hljs-keyword">if</span> (keyList.size() &gt; size) &#123;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">oldestKey</span> <span class="hljs-operator">=</span> keyList.removeFirst();<br>      delegate.removeObject(oldestKey);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 其他方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="LoggingCache"><a href="#LoggingCache" class="headerlink" title="LoggingCache"></a>LoggingCache</h4><p>    加了日志的缓存，日志主要是取缓存是打印命中率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoggingCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-comment">// 用的mybatis自己的抽象Log</span><br>  <span class="hljs-keyword">private</span> Log log;  <br>  <span class="hljs-keyword">private</span> Cache delegate;<br>  <span class="hljs-comment">// 请求次数</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-variable">requests</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">// 命中缓存次数</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-variable">hits</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoggingCache</span><span class="hljs-params">(Cache delegate)</span> &#123;<br>    <span class="hljs-built_in">this</span>.delegate = delegate;<br>    <span class="hljs-built_in">this</span>.log = LogFactory.getLog(getId());<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// 访问一次requests加一</span><br>    requests++;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> delegate.getObject(key);<br>    <span class="hljs-comment">//命中了则hits加一</span><br>    <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>) &#123;<br>      hits++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>      <span class="hljs-comment">// 就是打印命中率 hits/requests</span><br>      log.debug(<span class="hljs-string">&quot;Cache Hit Ratio [&quot;</span> + getId() + <span class="hljs-string">&quot;]: &quot;</span> + getHitRatio());<br>    &#125;<br>    <span class="hljs-keyword">return</span> value;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getHitRatio</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">double</span>) hits / (<span class="hljs-type">double</span>) requests;<br>  &#125; <br><br>  <span class="hljs-comment">// 其他方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="LruCache"><a href="#LruCache" class="headerlink" title="LruCache"></a>LruCache</h4><p>    最近最少使用缓存。基于 LinkedHashMap，覆盖其removeEldestEntry方法实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LruCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Cache delegate;<br>  <span class="hljs-comment">// 额外用了一个map才做lru，但是委托的Cache里面其实也是一个map，这样等于用2倍的内存实现lru功能</span><br>  <span class="hljs-keyword">private</span> Map&lt;Object, Object&gt; keyMap;<br>  <span class="hljs-keyword">private</span> Object eldestKey; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">LruCache</span><span class="hljs-params">(Cache delegate)</span> &#123;<br>    <span class="hljs-built_in">this</span>.delegate = delegate;<br>    setSize(<span class="hljs-number">1024</span>);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSize</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> size)</span> &#123;<br>    keyMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;Object, Object&gt;(size, <span class="hljs-number">.75F</span>, <span class="hljs-literal">true</span>) &#123;<br>      <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">4267176411845948333L</span>;<br><br>      <span class="hljs-comment">// 核心就是覆盖 LinkedHashMap.removeEldestEntry方法,</span><br>      <span class="hljs-comment">// 返回true或false告诉 LinkedHashMap要不要删除此最老键值</span><br>      <span class="hljs-comment">// LinkedHashMap内部其实就是每次访问或者插入一个元素都会把元素放到链表末尾，</span><br>      <span class="hljs-comment">// 这样不经常访问的键值肯定就在链表开头啦</span><br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">removeEldestEntry</span><span class="hljs-params">(Map.Entry&lt;Object, Object&gt; eldest)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">tooBig</span> <span class="hljs-operator">=</span> size() &gt; size;<br>        <span class="hljs-keyword">if</span> (tooBig) &#123;<br>          <span class="hljs-comment">// 这里没辙了，把eldestKey存入实例变量</span><br>          eldestKey = eldest.getKey();<br>        &#125;<br>        <span class="hljs-keyword">return</span> tooBig;<br>      &#125;<br>    &#125;;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object value)</span> &#123;<br>    delegate.putObject(key, value);<br>    <span class="hljs-comment">// 增加新纪录后，判断是否要将最老元素移除</span><br>    cycleKeyList(key);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// get的时候调用一下LinkedHashMap.get，让最近访问的值移动到链表末尾</span><br>    keyMap.get(key); <span class="hljs-comment">//touch</span><br>    <span class="hljs-keyword">return</span> delegate.getObject(key);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">removeObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// 为啥不 remove</span><br>    <span class="hljs-comment">// keyMap.remove(key);</span><br>    <span class="hljs-comment">// key 不会再被访问，下次清除缓存之前如果key未被放入缓存就会被删除</span><br>    <span class="hljs-keyword">return</span> delegate.removeObject(key);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">cycleKeyList</span><span class="hljs-params">(Object key)</span> &#123;<br>    keyMap.put(key, key);<br>    <span class="hljs-comment">// keyMap是linkedhashmap，最老的记录已经被移除了，然后这里我们还需要移除被委托的那个cache的记录</span><br>    <span class="hljs-keyword">if</span> (eldestKey != <span class="hljs-literal">null</span>) &#123;<br>      delegate.removeObject(eldestKey);<br>      eldestKey = <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 其他方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ScheduledCache"><a href="#ScheduledCache" class="headerlink" title="ScheduledCache"></a>ScheduledCache</h4><p>    定时调度缓存。目的是定时清空一下缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduledCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-keyword">private</span> Cache delegate;<br>  <span class="hljs-comment">// 清理间隔</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> clearInterval;<br>  <span class="hljs-comment">// 上次清理时间</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> lastClear;    <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">ScheduledCache</span><span class="hljs-params">(Cache delegate)</span> &#123;<br>    <span class="hljs-built_in">this</span>.delegate = delegate;<br>    <span class="hljs-comment">// 默认 1小时清空一次缓存</span><br>    <span class="hljs-built_in">this</span>.clearInterval = <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>; <span class="hljs-comment">// 1 hour</span><br>    <span class="hljs-built_in">this</span>.lastClear = System.currentTimeMillis();<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>    clearWhenStale();<br>    <span class="hljs-keyword">return</span> delegate.getSize();<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object object)</span> &#123;<br>    clearWhenStale();<br>    delegate.putObject(key, object);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-keyword">return</span> clearWhenStale() ? <span class="hljs-literal">null</span> : delegate.getObject(key);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">clearWhenStale</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 如果到时间了，清空一下缓存</span><br>    <span class="hljs-keyword">if</span> (System.currentTimeMillis() - lastClear &gt; clearInterval) &#123;<br>      clear();<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>    lastClear = System.currentTimeMillis();<br>    delegate.clear();<br>  &#125; <br><br>  <span class="hljs-comment">// 其他方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SerializedCache"><a href="#SerializedCache" class="headerlink" title="SerializedCache"></a>SerializedCache</h4><p>    序列化缓存。原理是先将对象序列化成2进制，再缓存。好处是将对象压缩了，省内存、坏处是速度慢了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializedCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br>  <span class="hljs-keyword">private</span> Cache delegate; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object object)</span> &#123;<br>    <span class="hljs-keyword">if</span> (object == <span class="hljs-literal">null</span> || object <span class="hljs-keyword">instanceof</span> Serializable) &#123;<br>      <span class="hljs-comment">// 先序列化，再委托被包装者putObject</span><br>      delegate.putObject(key, serialize((Serializable) object));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;SharedCache failed to make a copy of a non-serializable object: &quot;</span> + object);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// 先委托被包装者getObject,再反序列化</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> delegate.getObject(key);<br>    <span class="hljs-keyword">return</span> object == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : deserialize((<span class="hljs-type">byte</span>[]) object);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] serialize(Serializable value) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 序列化核心就是ByteArrayOutputStream</span><br>      <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>      <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bos);<br>      oos.writeObject(value);<br>      oos.flush();<br>      oos.close();<br>      <span class="hljs-keyword">return</span> bos.toByteArray();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Error serializing object.  Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Serializable <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] value)</span> &#123;<br>    Serializable result;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 反序列化核心就是ByteArrayInputStream</span><br>      <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(value);<br>      <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomObjectInputStream</span>(bis);<br>      result = (Serializable) ois.readObject();<br>      ois.close();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Error deserializing object.  Cause: &quot;</span> + e, e);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomObjectInputStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ObjectInputStream</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomObjectInputStream</span><span class="hljs-params">(InputStream in)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>      <span class="hljs-built_in">super</span>(in);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">// 使用自定义的资源加载方法 ？</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc) <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>      <span class="hljs-keyword">return</span> Resources.classForName(desc.getName());<br>    &#125;<br>    <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SoftCache"><a href="#SoftCache" class="headerlink" title="SoftCache"></a>SoftCache</h4><p>    软引用缓存,核心是SoftReference</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SoftCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-comment">// 链表用来引用元素，防垃圾回收</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Deque&lt;Object&gt; hardLinksToAvoidGarbageCollection;<br><br>  <span class="hljs-comment">// 被垃圾回收的引用队列</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReferenceQueue&lt;Object&gt; queueOfGarbageCollectedEntries;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Cache delegate;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> numberOfHardLinks; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">SoftCache</span><span class="hljs-params">(Cache delegate)</span> &#123;<br>    <span class="hljs-built_in">this</span>.delegate = delegate;<br>    <span class="hljs-comment">// 默认链表可以存256元素</span><br>    <span class="hljs-built_in">this</span>.numberOfHardLinks = <span class="hljs-number">256</span>;<br>    <span class="hljs-built_in">this</span>.hardLinksToAvoidGarbageCollection = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Object&gt;();<br>    <span class="hljs-built_in">this</span>.queueOfGarbageCollectedEntries = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceQueue</span>&lt;Object&gt;();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>    removeGarbageCollectedItems();<br>    <span class="hljs-keyword">return</span> delegate.getSize();<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeGarbageCollectedItems</span><span class="hljs-params">()</span> &#123;<br>    SoftEntry sv;<br>    <span class="hljs-comment">// 查看被垃圾回收的元素组成的引用队列,然后调用removeObject移除他们</span><br>    <span class="hljs-keyword">while</span> ((sv = (SoftEntry) queueOfGarbageCollectedEntries.poll()) != <span class="hljs-literal">null</span>) &#123;<br>      delegate.removeObject(sv.key);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object value)</span> &#123;<br>    removeGarbageCollectedItems();<br>    <span class="hljs-comment">// putObject存了一个SoftReference，这样value没用时会自动垃圾回收</span><br>    delegate.putObject(key, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoftEntry</span>(key, value, queueOfGarbageCollectedEntries));<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span>  <br>    <span class="hljs-comment">// assumed delegate cache is totally managed by this cache</span><br>    SoftReference&lt;Object&gt; softReference = (SoftReference&lt;Object&gt;) delegate.getObject(key);<br>    <span class="hljs-keyword">if</span> (softReference != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 核心调用SoftReference.get取得元素</span><br>      result = softReference.get();<br>      <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br>        delegate.removeObject(key);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// See #586 (and #335) modifications need more than a read lock </span><br>        <span class="hljs-keyword">synchronized</span> (hardLinksToAvoidGarbageCollection) &#123;<br>          <span class="hljs-comment">// 将value存入经常访问的键值到链表(最多256元素),防止垃圾回收</span><br>          hardLinksToAvoidGarbageCollection.addFirst(result);<br>          <span class="hljs-keyword">if</span> (hardLinksToAvoidGarbageCollection.size() &gt; numberOfHardLinks) &#123;<br>            hardLinksToAvoidGarbageCollection.removeLast();<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">removeObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    removeGarbageCollectedItems();<br>    <span class="hljs-keyword">return</span> delegate.removeObject(key);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (hardLinksToAvoidGarbageCollection) &#123;<br>      hardLinksToAvoidGarbageCollection.clear();<br>    &#125;<br>    removeGarbageCollectedItems();<br>    delegate.clear();<br>  &#125; <br><br>  <span class="hljs-comment">// 这里设为static，前面又有new，不太懂</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SoftEntry</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SoftReference</span>&lt;Object&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object key;<br><br>    SoftEntry(Object key, Object value, ReferenceQueue&lt;Object&gt; garbageCollectionQueue) &#123;<br>      <span class="hljs-built_in">super</span>(value, garbageCollectionQueue);<br>      <span class="hljs-built_in">this</span>.key = key;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 其他方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SynchronizedCache"><a href="#SynchronizedCache" class="headerlink" title="SynchronizedCache"></a>SynchronizedCache</h4><p>    同步缓存。防止多线程问题</p><p>    核心: 加锁。</p><p>    ReadWriteLock.readLock().lock()&#x2F;unlock()</p><p>    ReadWriteLock.writeLock().lock()&#x2F;unlock()</p><p>    3.2.6以后这个类已经没用了，考虑到Hazelcast, EhCache已经有锁机制了，所以这个锁就画蛇添足了。</p><p>    bug见<a href="https://github.com/mybatis/mybatis-3/issues/159">https://github.com/mybatis/mybatis-3/issues/159</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SynchronizedCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-comment">// 就是在一些可能会出现并发异常的接口上加了个 synchronized</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> delegate.getSize();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object object)</span> &#123;<br>    delegate.putObject(key, object);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-keyword">return</span> delegate.getObject(key);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Object <span class="hljs-title function_">removeObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-keyword">return</span> delegate.removeObject(key);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>    delegate.clear();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="TransactionalCache"><a href="#TransactionalCache" class="headerlink" title="TransactionalCache"></a>TransactionalCache</h4><p>    二级缓存事务缓冲区</p><p>    此类保存会话期间要添加到二级缓存的所有缓存条目</p><p>    当调用commit时，条目被发送到缓存，如果会话回滚，则条目被丢弃</p><p>    添加了阻塞缓存支持。因此，任何返回缓存未命中的get()后面都会跟一个put()，这样就可以释放任何与该键相关联的锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransactionalCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-keyword">private</span> Cache delegate;<br>  <span class="hljs-comment">// commit前是否执行过 clear</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> clearOnCommit;<br>  <span class="hljs-comment">// commit时要添加的元素</span><br>  <span class="hljs-keyword">private</span> Map&lt;Object, Object&gt; entriesToAddOnCommit;<br>  <span class="hljs-keyword">private</span> Set&lt;Object&gt; entriesMissedInCache; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">TransactionalCache</span><span class="hljs-params">(Cache delegate)</span> &#123;<br>    <span class="hljs-built_in">this</span>.delegate = delegate;<br>    <span class="hljs-built_in">this</span>.clearOnCommit = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">this</span>.entriesToAddOnCommit = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Object, Object&gt;();<br>    <span class="hljs-built_in">this</span>.entriesMissedInCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Object&gt;();<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// issue #116</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> delegate.getObject(key);<br>    <span class="hljs-keyword">if</span> (object == <span class="hljs-literal">null</span>) &#123;<br>      entriesMissedInCache.add(key);<br>    &#125;<br>    <span class="hljs-comment">// issue #146</span><br>    <span class="hljs-keyword">if</span> (clearOnCommit) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> object;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object object)</span> &#123;<br>    entriesToAddOnCommit.put(key, object);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">removeObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>    clearOnCommit = <span class="hljs-literal">true</span>;<br>    entriesToAddOnCommit.clear();<br>  &#125; <br><br>  <span class="hljs-comment">// 多了commit方法，提供事务功能</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (clearOnCommit) &#123;<br>      delegate.clear();<br>    &#125;<br>    flushPendingEntries();<br>    reset();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">()</span> &#123;<br>    unlockMissedEntries();<br>    reset();<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reset</span><span class="hljs-params">()</span> &#123;<br>    clearOnCommit = <span class="hljs-literal">false</span>;<br>    entriesToAddOnCommit.clear();<br>    entriesMissedInCache.clear();<br>  &#125; <br><br>  <span class="hljs-comment">// 将 entriesToAddOnCommit 和 entriesMissedInCache中的元素全部放进cache</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flushPendingEntries</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;Object, Object&gt; entry : entriesToAddOnCommit.entrySet()) &#123;<br>      delegate.putObject(entry.getKey(), entry.getValue());<br>    &#125;<br>    <span class="hljs-keyword">for</span> (Object entry : entriesMissedInCache) &#123;<br>      <span class="hljs-keyword">if</span> (!entriesToAddOnCommit.containsKey(entry)) &#123;<br>        delegate.putObject(entry, <span class="hljs-literal">null</span>);<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 解锁给空值缓存上的锁</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlockMissedEntries</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (Object entry : entriesMissedInCache) &#123;<br>      delegate.putObject(entry, <span class="hljs-literal">null</span>);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 其他方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="WeakCache"><a href="#WeakCache" class="headerlink" title="WeakCache"></a>WeakCache</h4><p>    和软引用缓存类似 。区别是操作要保存的元素集合 <code>hardLinksToAvoidGarbageCollection</code> 没有上锁（尝试找issue失败）</p><p>淦 (<a href="http://code.google.com/p/mybatis/issues/detail?id=335%7C586">http://code.google.com/p/mybatis/issues/detail?id=335|586</a>) issue似乎没了</p><h4 id="TransactionalCacheManager"><a href="#TransactionalCacheManager" class="headerlink" title="TransactionalCacheManager"></a>TransactionalCacheManager</h4><p>    事务缓存管理器，被CachingExecutor使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransactionalCacheManager</span> &#123;<br><br>  <span class="hljs-comment">// 管理了许多TransactionalCache</span><br>  <span class="hljs-keyword">private</span> Map&lt;Cache, TransactionalCache&gt; transactionalCaches = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Cache, TransactionalCache&gt;();<br> <br>  <span class="hljs-comment">// 清理缓存</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">(Cache cache)</span> &#123;<br>    getTransactionalCache(cache).clear();<br>  &#125;<br><br>  <span class="hljs-comment">// 得到某个TransactionalCache的缓存值</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Cache cache, CacheKey key)</span> &#123;<br>    <span class="hljs-keyword">return</span> getTransactionalCache(cache).getObject(key);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Cache cache, CacheKey key, Object value)</span> &#123;<br>    getTransactionalCache(cache).putObject(key, value);<br>  &#125; <br><br>  <span class="hljs-comment">// 提交时全部提交</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (TransactionalCache txCache : transactionalCaches.values()) &#123;<br>      txCache.commit();<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 回滚时全部回滚</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (TransactionalCache txCache : transactionalCaches.values()) &#123;<br>      txCache.rollback();<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> TransactionalCache <span class="hljs-title function_">getTransactionalCache</span><span class="hljs-params">(Cache cache)</span> &#123;<br>    <span class="hljs-type">TransactionalCache</span> <span class="hljs-variable">txCache</span> <span class="hljs-operator">=</span> transactionalCaches.get(cache);<br>    <span class="hljs-keyword">if</span> (txCache == <span class="hljs-literal">null</span>) &#123;<br>      txCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransactionalCache</span>(cache);<br>      transactionalCaches.put(cache, txCache);<br>    &#125;<br>    <span class="hljs-keyword">return</span> txCache;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>缓存模块的内容就这些</p>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-exceptions.md</title>
    <link href="/2023/05/20/2-exceptions-md/"/>
    <url>/2023/05/20/2-exceptions-md/</url>
    
    <content type="html"><![CDATA[<p>这个模块只有一个地方需要注意</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 异常工厂</span><br><span class="hljs-comment"> */</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionFactory</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">ExceptionFactory</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// Prevent Instantiation</span><br>  &#125;<br><br>  <span class="hljs-comment">// 把普通异常包装成mybatis自己的PersistenceException</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RuntimeException <span class="hljs-title function_">wrapException</span><span class="hljs-params">(String message, Exception e)</span> &#123;<br>    <span class="hljs-comment">// 查找错误上下文，得到错误原因，传给PersistenceException</span><br>    <span class="hljs-comment">// 每个线程都会有一个ErrorContext，所以可以得到，  .message(message).cause是典型的构建器模式</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PersistenceException</span>(ErrorContext.instance().message(message).cause(e).toString(), e);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-logging</title>
    <link href="/2023/05/14/1-logging/"/>
    <url>/2023/05/14/1-logging/</url>
    
    <content type="html"><![CDATA[<h3 id="logging（日志模块）"><a href="#logging（日志模块）" class="headerlink" title="logging（日志模块）"></a>logging（日志模块）</h3><h4 id="LogException"><a href="#LogException" class="headerlink" title="LogException"></a>LogException</h4><p>首先看 LogException 类（其中 PersistenceException 为自定义异常，封装方法完全一致）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PersistenceException</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1022924004852350942L</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">LogException</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">LogException</span><span class="hljs-params">(String message)</span> &#123;<br>    <span class="hljs-built_in">super</span>(message);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">LogException</span><span class="hljs-params">(String message, Throwable cause)</span> &#123;<br>    <span class="hljs-built_in">super</span>(message, cause);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">LogException</span><span class="hljs-params">(Throwable cause)</span> &#123;<br>    <span class="hljs-built_in">super</span>(cause);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h4><p>然后是自定义日志接口 Log</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Log</span> &#123;<br><br>  <span class="hljs-comment">// 和一般的log4j很像，提供日志接口的一些方法,error, debug, warn。</span><br>  <span class="hljs-comment">// 用自己的日志类恐怕是为了通用，不绑死在某个特定的日志框架中</span><br>  <span class="hljs-comment">// 但不是也有类似的slf4j吗？为何还要自己写？</span><br>  <span class="hljs-comment">// 可能是不想引入额外的jar包（我觉得是为了适配各种日志框架）</span><br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">isDebugEnabled</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">isTraceEnabled</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">(String s, Throwable e)</span>;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">(String s)</span>;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">debug</span><span class="hljs-params">(String s)</span>;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">trace</span><span class="hljs-params">(String s)</span>;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">warn</span><span class="hljs-params">(String s)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="LogFactory-日志工厂"><a href="#LogFactory-日志工厂" class="headerlink" title="LogFactory 日志工厂"></a>LogFactory 日志工厂</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Marker to be used by logging implementations that support markers</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// 给支持marker功能的logger使用(目前有slf4j, log4j2)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MARKER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MYBATIS&quot;</span>;<br><br><span class="hljs-comment">// 具体究竟用哪个日志框架，那个框架所对应logger的构造函数</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Constructor&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Log</span>&gt; logConstructor;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-comment">// 这里单纯用的lambda表达式，没有多线程</span><br>    <span class="hljs-comment">// 这段代码是一直找可用的日志实现直到找到一个可用的</span><br>    <span class="hljs-comment">// 日志实现，找到后跳过后面的查找</span><br>    <span class="hljs-comment">// slf4j</span><br>    tryImplementation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        useSlf4jLogging();<br>      &#125;<br>    &#125;);<br>    <span class="hljs-comment">// common logging</span><br>    tryImplementation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        useCommonsLogging();<br>      &#125;<br>    &#125;);<br>    <span class="hljs-comment">// log4j2</span><br>    tryImplementation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        useLog4J2Logging();<br>      &#125;<br>    &#125;);<br>    <span class="hljs-comment">// log4j</span><br>    tryImplementation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        useLog4JLogging();<br>      &#125;<br>    &#125;);<br>    <span class="hljs-comment">// jdk logging</span><br>    tryImplementation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        useJdkLogging();<br>      &#125;<br>    &#125;);<br>    <span class="hljs-comment">// 没有日志</span><br>    tryImplementation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        useNoLogging();<br>      &#125;<br>    &#125;);<br>  &#125;<br></code></pre></td></tr></table></figure><p>看一下 <code>tryImplementation </code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tryImplementation</span><span class="hljs-params">(Runnable runnable)</span> &#123;<br>    <span class="hljs-comment">// 先判断是否找到可用的日志实现</span><br>    <span class="hljs-keyword">if</span> (logConstructor == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        runnable.run();<br>      &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>        <span class="hljs-comment">// ignore</span><br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>下面以 <code>useSlf4jLogging()</code> 为例讲解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useSlf4jLogging</span><span class="hljs-params">()</span> &#123;<br>    setImplementation(org.apache.ibatis.logging.slf4j.Slf4jImpl.class);<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setImplementation</span><span class="hljs-params">(Class&lt;? extends Log&gt; implClass)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      Constructor&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Log</span>&gt; candidate = implClass.getConstructor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; String.class &#125;);<br>      <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> candidate.newInstance(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; LogFactory.class.getName() &#125;);<br>      log.debug(<span class="hljs-string">&quot;Logging initialized using &#x27;&quot;</span> + implClass + <span class="hljs-string">&quot;&#x27; adapter.&quot;</span>);<br>      <span class="hljs-comment">// 设置logConstructor,一旦设上，表明找到相应的log的jar包了，那后面别的log就不找了。</span><br>      logConstructor = candidate;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LogException</span>(<span class="hljs-string">&quot;Error setting Log implementation.  Cause: &quot;</span> + t, t);<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>后面 <code>useCommonsLogging()、useLog4J2Logging()、useLog4JLogging()、useJdkLogging()、useNoLogging()</code> 类似</p><p>最后是剩下的一些方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 单例模式，不得自己new实例</span><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">LogFactory</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">// disable construction</span><br>&#125;<br><br><span class="hljs-comment">// 根据传入的类来构建Log</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Log <span class="hljs-title function_">getLog</span><span class="hljs-params">(Class&lt;?&gt; aClass)</span> &#123;<br>  <span class="hljs-keyword">return</span> getLog(aClass.getName());<br>&#125;<br><br><span class="hljs-comment">// 根据传入的类名来构建Log</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Log <span class="hljs-title function_">getLog</span><span class="hljs-params">(String logger)</span> &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//构造函数，参数必须是一个，为String型，指明logger的名称</span><br>    <span class="hljs-keyword">return</span> logConstructor.newInstance(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; logger &#125;);<br>  &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LogException</span>(<span class="hljs-string">&quot;Error creating logger for logger &quot;</span> + logger + <span class="hljs-string">&quot;.  Cause: &quot;</span> + t, t);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 提供一个扩展功能，如果以上log都不满意，可以使用自定义的log</span><br><span class="hljs-comment">// 这个方法在 Configuration 类的 setLogImpl(Class&lt;?&gt; logImpl) 方法使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useCustomLogging</span><span class="hljs-params">(Class&lt;? extends Log&gt; clazz)</span> &#123;<br>  setImplementation(clazz);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="JakartaCommonsLoggingImpl"><a href="#JakartaCommonsLoggingImpl" class="headerlink" title="JakartaCommonsLoggingImpl"></a>JakartaCommonsLoggingImpl</h4><p>适配 <code>commons logging</code> 里的 Log 和 LogFactory</p><p>可以看到全是委托给特定的 log 和 LogFactory来实现</p><p>这里使用了适配器模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JakartaCommonsLoggingImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">org</span>.apache.ibatis.logging.Log &#123;<br><br>  <span class="hljs-keyword">private</span> Log log;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">JakartaCommonsLoggingImpl</span><span class="hljs-params">(String clazz)</span> &#123;<br>    log = LogFactory.getLog(clazz);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isDebugEnabled</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> log.isDebugEnabled();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isTraceEnabled</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> log.isTraceEnabled();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">(String s, Throwable e)</span> &#123;<br>    log.error(s, e);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">(String s)</span> &#123;<br>    log.error(s);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">debug</span><span class="hljs-params">(String s)</span> &#123;<br>    log.debug(s);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">trace</span><span class="hljs-params">(String s)</span> &#123;<br>    log.trace(s);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">warn</span><span class="hljs-params">(String s)</span> &#123;<br>    log.warn(s);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p> <code>Jdk14LoggingImpl、Log4jImpl、NoLoggingImpl、StdOutImpl</code> 大同小异</p><h4 id="Log4j2Impl"><a href="#Log4j2Impl" class="headerlink" title="Log4j2Impl"></a>Log4j2Impl</h4><p>Log4j2Impl 根据从 LogManager获取的Logger的类型，分别委托给 Log4j2AbstractLoggerImpl 和 Log4j2LoggerImpl 实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Log4j2Impl</span><span class="hljs-params">(String clazz)</span> &#123;<br>  <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogManager.getLogger(clazz);<br><br>  <span class="hljs-keyword">if</span> (logger <span class="hljs-keyword">instanceof</span> AbstractLogger) &#123;<br>    log = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Log4j2AbstractLoggerImpl</span>((AbstractLogger) logger);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    log = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Log4j2LoggerImpl</span>(logger);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Slf4jImpl"><a href="#Slf4jImpl" class="headerlink" title="Slf4jImpl"></a>Slf4jImpl</h4><p>Slf4jImpl 类似</p><p>Slf4jImpl 和 上面的 Log4j2Impl都使用了代理模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Slf4jImpl</span><span class="hljs-params">(String clazz)</span> &#123;<br>  <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(clazz);<br><br>  <span class="hljs-keyword">if</span> (logger <span class="hljs-keyword">instanceof</span> LocationAwareLogger) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// check for slf4j &gt;= 1.6 method signature</span><br>      logger.getClass().getMethod(<span class="hljs-string">&quot;log&quot;</span>, Marker.class, String.class, <span class="hljs-type">int</span>.class, String.class, Object[].class, Throwable.class);<br>      log = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Slf4jLocationAwareLoggerImpl</span>((LocationAwareLogger) logger);<br>      <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (SecurityException e) &#123;<br>      <span class="hljs-comment">// fail-back to Slf4jLoggerImpl</span><br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>      <span class="hljs-comment">// fail-back to Slf4jLoggerImpl</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// Logger is not LocationAwareLogger or slf4j version &lt; 1.6</span><br>  log = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Slf4jLoggerImpl</span>(logger);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BaseJdbcLogger"><a href="#BaseJdbcLogger" class="headerlink" title="BaseJdbcLogger"></a>BaseJdbcLogger</h4><p>用于代理（做日志）的基类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// SET_METHODS 包含java类型转jdbc类型的方法</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Set&lt;String&gt; SET_METHODS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;String&gt;();<br><span class="hljs-comment">// EXECUTE_METHODS 包含 execute、executeUpdate、</span><br><span class="hljs-comment">// executeQuery、addBatch方法</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Set&lt;String&gt; EXECUTE_METHODS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;String&gt;();<br><br><span class="hljs-comment">// 自用的列的相关属性</span><br><span class="hljs-keyword">private</span> Map&lt;Object, Object&gt; columnMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Object, Object&gt;();<br><br><span class="hljs-keyword">private</span> List&lt;Object&gt; columnNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;();<br><span class="hljs-keyword">private</span> List&lt;Object&gt; columnValues = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;();<br><br><span class="hljs-comment">// 打日志</span><br><span class="hljs-keyword">protected</span> Log statementLog;<br><span class="hljs-comment">// 查询栈（输出时用）</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> queryStack;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Default constructor</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseJdbcLogger</span><span class="hljs-params">(Log log, <span class="hljs-type">int</span> queryStack)</span> &#123;<br>  <span class="hljs-built_in">this</span>.statementLog = log;<br>  <span class="hljs-keyword">if</span> (queryStack == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">this</span>.queryStack = <span class="hljs-number">1</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">this</span>.queryStack = queryStack;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 类初始化时为SET_METHODS和EXECUTE_METHODS赋值</span><br><span class="hljs-keyword">static</span> &#123;<br>  SET_METHODS.add(<span class="hljs-string">&quot;seString&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setInt&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setByte&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setShort&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setLong&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setDouble&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setFloat&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setTimestamp&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setDate&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setTime&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setArray&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setBigDecimal&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setAsciiStream&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setBinaryStream&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setBlob&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setBoolean&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setBytes&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setCharacterStream&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setClob&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setObject&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setNull&quot;</span>);<br><br>  EXECUTE_METHODS.add(<span class="hljs-string">&quot;execute&quot;</span>);<br>  EXECUTE_METHODS.add(<span class="hljs-string">&quot;executeUpdate&quot;</span>);<br>  EXECUTE_METHODS.add(<span class="hljs-string">&quot;executeQuery&quot;</span>);<br>  EXECUTE_METHODS.add(<span class="hljs-string">&quot;addBatch&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 获取参数值 这里好像是调用的Object的toString方法?</span><br><span class="hljs-keyword">protected</span> String <span class="hljs-title function_">getParameterValueString</span><span class="hljs-params">()</span> &#123;<br>  List&lt;Object&gt; typeList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;(columnValues.size());<br>  <span class="hljs-keyword">for</span> (Object value : columnValues) &#123;<br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>      typeList.add(<span class="hljs-string">&quot;null&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      typeList.add(value + <span class="hljs-string">&quot;(&quot;</span> + value.getClass().getSimpleName() + <span class="hljs-string">&quot;)&quot;</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">parameters</span> <span class="hljs-operator">=</span> typeList.toString();<br>  <span class="hljs-keyword">return</span> parameters.substring(<span class="hljs-number">1</span>, parameters.length() - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 移除 original 里的&quot; \t\n\r\f&quot;字符，统一用&quot; &quot;替代</span><br><span class="hljs-keyword">protected</span> String <span class="hljs-title function_">removeBreakingWhitespace</span><span class="hljs-params">(String original)</span> &#123;<br>  <span class="hljs-type">StringTokenizer</span> <span class="hljs-variable">whitespaceStripper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTokenizer</span>(original);<br>  <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>  <span class="hljs-keyword">while</span> (whitespaceStripper.hasMoreTokens()) &#123;<br>    builder.append(whitespaceStripper.nextToken());<br>    builder.append(<span class="hljs-string">&quot; &quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> builder.toString();<br>&#125;<br><br><span class="hljs-comment">// 根据queryStack 返回 ===&gt; 或 &lt;===</span><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">prefix</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isInput)</span> &#123;<br>  <span class="hljs-type">char</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[queryStack * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>];<br>  Arrays.fill(buffer, <span class="hljs-string">&#x27;=&#x27;</span>);<br>  buffer[queryStack * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>  <span class="hljs-keyword">if</span> (isInput) &#123;<br>    buffer[queryStack * <span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;&gt;&#x27;</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    buffer[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;&lt;&#x27;</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ResultSetLogger"><a href="#ResultSetLogger" class="headerlink" title="ResultSetLogger"></a>ResultSetLogger</h4><p>添加了日志的ResultSet代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultSetLogger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseJdbcLogger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>  <span class="hljs-comment">// BLOB type 类型为BLOB的值打印时做特殊处理</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Set&lt;Integer&gt; BLOB_TYPES = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Integer&gt;();<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">private</span> ResultSet rs;<br>  <span class="hljs-keyword">private</span> Set&lt;Integer&gt; blobColumns = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Integer&gt;();<br><br>  <span class="hljs-keyword">static</span> &#123;<br>    BLOB_TYPES.add(Types.BINARY);<br>    BLOB_TYPES.add(Types.BLOB);<br>    BLOB_TYPES.add(Types.CLOB);<br>    BLOB_TYPES.add(Types.LONGNVARCHAR);<br>    BLOB_TYPES.add(Types.LONGVARBINARY);<br>    BLOB_TYPES.add(Types.LONGVARCHAR);<br>    BLOB_TYPES.add(Types.NCLOB);<br>    BLOB_TYPES.add(Types.VARBINARY);<br>  &#125;<br><br>  <span class="hljs-comment">// 不向外提供构造函数</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">ResultSetLogger</span><span class="hljs-params">(ResultSet rs, Log statementLog, <span class="hljs-type">int</span> queryStack)</span> &#123;<br>    <span class="hljs-built_in">super</span>(statementLog, queryStack);<br>    <span class="hljs-built_in">this</span>.rs = rs;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] params)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 不代理Object类的方法</span><br>      <span class="hljs-keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;<br>        <span class="hljs-keyword">return</span> method.invoke(<span class="hljs-built_in">this</span>, params);<br>      &#125;<br>      <span class="hljs-comment">// 先执行代理方法</span><br>      <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> method.invoke(rs, params);<br>      <span class="hljs-comment">// 如果要代理的方法是 next</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;next&quot;</span>.equals(method.getName())) &#123;<br>        <span class="hljs-keyword">if</span> (((Boolean) o)) &#123;<br>          rows++;<br>          <span class="hljs-comment">// 打印获取到的结果数据</span><br>          <span class="hljs-keyword">if</span> (isTraceEnabled()) &#123;<br>            <span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">rsmd</span> <span class="hljs-operator">=</span> rs.getMetaData();<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">columnCount</span> <span class="hljs-operator">=</span> rsmd.getColumnCount();<br>            <span class="hljs-keyword">if</span> (first) &#123;<br>              first = <span class="hljs-literal">false</span>;<br>              printColumnHeaders(rsmd, columnCount);<br>            &#125;<br>            printColumnValues(columnCount);<br>          &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// 没有下一行了</span><br>          debug(<span class="hljs-string">&quot;     Total: &quot;</span> + rows, <span class="hljs-literal">false</span>);<br>        &#125;<br>      &#125;<br>      clearColumnInfo();<br>      <span class="hljs-keyword">return</span> o;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>      <span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(t);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 打印列名</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printColumnHeaders</span><span class="hljs-params">(ResultSetMetaData rsmd, <span class="hljs-type">int</span> columnCount)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    row.append(<span class="hljs-string">&quot;   Columns: &quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= columnCount; i++) &#123;<br>      <span class="hljs-keyword">if</span> (BLOB_TYPES.contains(rsmd.getColumnType(i))) &#123;<br>        blobColumns.add(i);<br>      &#125;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">colname</span> <span class="hljs-operator">=</span> rsmd.getColumnLabel(i);<br>      row.append(colname);<br>      <span class="hljs-keyword">if</span> (i != columnCount) &#123;<br>        row.append(<span class="hljs-string">&quot;, &quot;</span>);<br>      &#125;<br>    &#125;<br>    trace(row.toString(), <span class="hljs-literal">false</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// 打印每一行对应列的值</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printColumnValues</span><span class="hljs-params">(<span class="hljs-type">int</span> columnCount)</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    row.append(<span class="hljs-string">&quot;       Row: &quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= columnCount; i++) &#123;<br>      String colname;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 类型为BLOB的值统一返回 &lt;&lt;BLOB&gt;&gt;</span><br>        <span class="hljs-keyword">if</span> (blobColumns.contains(i)) &#123;<br>          colname = <span class="hljs-string">&quot;&lt;&lt;BLOB&gt;&gt;&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          colname = rs.getString(i);<br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        <span class="hljs-comment">// generally can&#x27;t call getString() on a BLOB column</span><br>        colname = <span class="hljs-string">&quot;&lt;&lt;Cannot Display&gt;&gt;&quot;</span>;<br>      &#125;<br>      row.append(colname);<br>      <span class="hljs-keyword">if</span> (i != columnCount) &#123;<br>        row.append(<span class="hljs-string">&quot;, &quot;</span>);<br>      &#125;<br>    &#125;<br>    trace(row.toString(), <span class="hljs-literal">false</span>);<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * Creates a logging version of a ResultSet</span><br><span class="hljs-comment">   * 提供静态方法用于创建代理类</span><br><span class="hljs-comment">   * @param rs - the ResultSet to proxy</span><br><span class="hljs-comment">   * @return - the ResultSet with logging</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResultSet <span class="hljs-title function_">newInstance</span><span class="hljs-params">(ResultSet rs, Log statementLog, <span class="hljs-type">int</span> queryStack)</span> &#123;<br>    <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultSetLogger</span>(rs, statementLog, queryStack);<br>    <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> ResultSet.class.getClassLoader();<br>    <span class="hljs-keyword">return</span> (ResultSet) Proxy.newProxyInstance(cl, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;ResultSet.class&#125;, handler);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="StatementLogger"><a href="#StatementLogger" class="headerlink" title="StatementLogger"></a>StatementLogger</h4><p>添加了日志的 Statement代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StatementLogger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseJdbcLogger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>  <br>  <span class="hljs-keyword">private</span> Statement statement;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">StatementLogger</span><span class="hljs-params">(Statement stmt, Log statementLog, <span class="hljs-type">int</span> queryStack)</span> &#123;<br>    <span class="hljs-built_in">super</span>(statementLog, queryStack);<br>    <span class="hljs-built_in">this</span>.statement = stmt;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] params)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-keyword">try</span> &#123; <br>      <span class="hljs-comment">// 同上</span><br>      <span class="hljs-keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;<br>        <span class="hljs-keyword">return</span> method.invoke(<span class="hljs-built_in">this</span>, params);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (EXECUTE_METHODS.contains(method.getName())) &#123;<br>        <span class="hljs-comment">// 如果是 execute、executeUpdate、executeQuery、addBatch等方法</span><br>        <span class="hljs-keyword">if</span> (isDebugEnabled()) &#123;<br>          debug(<span class="hljs-string">&quot; Executing: &quot;</span> + removeBreakingWhitespace((String) params[<span class="hljs-number">0</span>]), <span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;executeQuery&quot;</span>.equals(method.getName())) &#123;<br>          <span class="hljs-comment">// 如果是查询方法返回 ResultSet 代理</span><br>          <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> (ResultSet) method.invoke(statement, params);<br>          <span class="hljs-keyword">return</span> rs == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : ResultSetLogger.newInstance(rs, statementLog, queryStack);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// 其他方法直接执行</span><br>          <span class="hljs-keyword">return</span> method.invoke(statement, params);<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;getResultSet&quot;</span>.equals(method.getName())) &#123;<br>        <span class="hljs-comment">// getResultSet 也是返回 ResultSet 代理</span><br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> (ResultSet) method.invoke(statement, params);<br>        <span class="hljs-keyword">return</span> rs == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : ResultSetLogger.newInstance(rs, statementLog, queryStack);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;equals&quot;</span>.equals(method.getName())) &#123;<br>        <span class="hljs-comment">// equals 要判断代理类是否相同</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> params[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">return</span> ps <span class="hljs-keyword">instanceof</span> Proxy &amp;&amp; proxy == ps;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;hashCode&quot;</span>.equals(method.getName())) &#123;<br>        <span class="hljs-comment">// 返回代理类的hashCode</span><br>        <span class="hljs-keyword">return</span> proxy.hashCode();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 执行原方法</span><br>        <span class="hljs-keyword">return</span> method.invoke(statement, params);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>      <span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(t);<br>    &#125;<br>  &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="PreparedStatementLogger"><a href="#PreparedStatementLogger" class="headerlink" title="PreparedStatementLogger"></a>PreparedStatementLogger</h4><p>添加了日志的 PreparedStatement 代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PreparedStatementLogger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseJdbcLogger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>  <span class="hljs-keyword">private</span> PreparedStatement statement;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">PreparedStatementLogger</span><span class="hljs-params">(PreparedStatement stmt, Log statementLog, <span class="hljs-type">int</span> queryStack)</span> &#123;<br>    <span class="hljs-built_in">super</span>(statementLog, queryStack);<br>    <span class="hljs-built_in">this</span>.statement = stmt;<br>  &#125;<br> <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] params)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;<br>        <span class="hljs-keyword">return</span> method.invoke(<span class="hljs-built_in">this</span>, params);<br>      &#125;          <br>      <span class="hljs-keyword">if</span> (EXECUTE_METHODS.contains(method.getName())) &#123;<br>        <span class="hljs-keyword">if</span> (isDebugEnabled()) &#123;<br>          <span class="hljs-comment">// 这里的信息似乎可读性不高</span><br>          debug(<span class="hljs-string">&quot;Parameters: &quot;</span> + getParameterValueString(), <span class="hljs-literal">true</span>);<br>        &#125; <br>        <span class="hljs-comment">// 清除之前存储的列信息</span><br>        clearColumnInfo();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;executeQuery&quot;</span>.equals(method.getName())) &#123;<br>          <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> (ResultSet) method.invoke(statement, params);<br>          <span class="hljs-keyword">return</span> rs == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : ResultSetLogger.newInstance(rs, statementLog, queryStack);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> method.invoke(statement, params);<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (SET_METHODS.contains(method.getName())) &#123;<br>        <span class="hljs-comment">// 调用SET_METHODS 包含的方法时先将保存列信息再调用原方法</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;setNull&quot;</span>.equals(method.getName())) &#123;<br>          setColumn(params[<span class="hljs-number">0</span>], <span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          setColumn(params[<span class="hljs-number">0</span>], params[<span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> method.invoke(statement, params);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;getResultSet&quot;</span>.equals(method.getName())) &#123;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> (ResultSet) method.invoke(statement, params);<br>        <span class="hljs-keyword">return</span> rs == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : ResultSetLogger.newInstance(rs, statementLog, queryStack);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;getUpdateCount&quot;</span>.equals(method.getName())) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">updateCount</span> <span class="hljs-operator">=</span> (Integer) method.invoke(statement, params);<br>        <span class="hljs-keyword">if</span> (updateCount != -<span class="hljs-number">1</span>) &#123;<br>          <span class="hljs-comment">// 调用 getUpdateCount 方法时打印 更新数量 信息</span><br>          debug(<span class="hljs-string">&quot;   Updates: &quot;</span> + updateCount, <span class="hljs-literal">false</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> updateCount;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> method.invoke(statement, params);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>      <span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(t);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ConnectionLogger"><a href="#ConnectionLogger" class="headerlink" title="ConnectionLogger"></a>ConnectionLogger</h4><p>添加了日志的 Connection 代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConnectionLogger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseJdbcLogger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>  <span class="hljs-keyword">private</span> Connection connection;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">ConnectionLogger</span><span class="hljs-params">(Connection conn, Log statementLog, <span class="hljs-type">int</span> queryStack)</span> &#123;<br>    <span class="hljs-built_in">super</span>(statementLog, queryStack);<br>    <span class="hljs-built_in">this</span>.connection = conn;<br>  &#125;<br> <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] params)</span><br>      <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;<br>        <span class="hljs-keyword">return</span> method.invoke(<span class="hljs-built_in">this</span>, params);<br>      &#125;    <br>      <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;prepareStatement&quot;</span>.equals(method.getName())) &#123; <br>        <span class="hljs-comment">// 调用 prepareStatement 或者 prepareCall 方法时</span><br>        <span class="hljs-comment">// 返回 PreparedStatement的代理</span><br>        <span class="hljs-keyword">if</span> (isDebugEnabled()) &#123;<br>          debug(<span class="hljs-string">&quot; Preparing: &quot;</span> + removeBreakingWhitespace((String) params[<span class="hljs-number">0</span>]), <span class="hljs-literal">true</span>);<br>        &#125;        <br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> (PreparedStatement) method.invoke(connection, params);<br>        stmt = PreparedStatementLogger.newInstance(stmt, statementLog, queryStack);<br>        <span class="hljs-keyword">return</span> stmt;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;prepareCall&quot;</span>.equals(method.getName())) &#123;<br>        <span class="hljs-keyword">if</span> (isDebugEnabled()) &#123;<br>          debug(<span class="hljs-string">&quot; Preparing: &quot;</span> + removeBreakingWhitespace((String) params[<span class="hljs-number">0</span>]), <span class="hljs-literal">true</span>);<br>        &#125;        <br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> (PreparedStatement) method.invoke(connection, params);<br>        stmt = PreparedStatementLogger.newInstance(stmt, statementLog, queryStack);<br>        <span class="hljs-keyword">return</span> stmt;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;createStatement&quot;</span>.equals(method.getName())) &#123;<br>        <span class="hljs-comment">// 调用 createStatement 时返回 Statement的代理</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> (Statement) method.invoke(connection, params);<br>        stmt = StatementLogger.newInstance(stmt, statementLog, queryStack);<br>        <span class="hljs-keyword">return</span> stmt;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> method.invoke(connection, params);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>      <span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(t);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>日志模块的代码就讲解完了</p>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0-前言</title>
    <link href="/2023/05/02/0-%E5%89%8D%E8%A8%80/"/>
    <url>/2023/05/02/0-%E5%89%8D%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h3 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h3><p>    前段时间粗略地过了一遍mybatis源码。有些地方懂了、有些地方没懂。想着复习一下，加深一下理解、加上自己也想多写写博客，所以有了这个Mybatis源码解析系列</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ol><li><p>我是跟着github上一个仓库（<a href="https://github.com/tuguangquan/mybatis">tuguangquan&#x2F;mybatis: mybatis源码中文注释 (github.com)</a>）进行得源码阅读，因此mybatis源码版本不是最新的（3.3.0-SNAPSHOT）</p></li><li><p>上面仓库里说的导入mybatis-parent模块只需要在pom文件中配置一下<parent>标签即可</parent></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- groupId、artifactId、version均可在</span><br><span class="hljs-comment">parentPom.xml中找到--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>38-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- parentPom文件的相对路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>parentPom.xml<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>要是对某个模块有不太懂的地方，可以结合官方提供的测试用例加深理解</p></li><li><p>要仔细了解代码中提到的相关issue，建议查看文件的git提交历史</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>寻找重复数</title>
    <link href="/2022/10/15/%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0/"/>
    <url>/2022/10/15/%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="方法一：二分查找"><a href="#方法一：二分查找" class="headerlink" title="方法一：二分查找"></a>方法一：二分查找</h4><blockquote><p>定义 cnt[i] 表示nums数组中小于等于i的数有多少个</p></blockquote><p>cnt数组随数字i逐渐增大具有单调性。假设重复的数是target，如果cnt数组满足在target前有cnt[i]&lt;&#x3D;i,target后有cnt[i]&gt;i，那么我们可以就利用二分查找来找到target</p><p>下面证明上述假设：考虑<strong>nums</strong>数组一共有n+1个位置，我们填入的数字都在[1,n]间，有且只有一个数重复放了两次以上。对于所有测试用例，考虑一下两种情况：</p><ul><li>如果测试用例的数组中target出现了两次，其余的数各出现了一次。这个时候小于target的数i满足cnt[i]&#x3D;i&lt;&#x3D;i，大于等于target的数j满足cnt[j]&#x3D;j+1&gt;j</li><li>如果测试用例的数组中target出现了三次及以上，那么必然有一些数不在数组中了，这个时候我们可以用target去替换这些数，考虑替换的时候对target只出现两次的cnt数组的影响。如果替换的数i小于target，那么[i,target-1]的cnt值均减一，其他不变，满足条件。如果替换的数j大于target，那么[target,j-1]的cnt值均加一，其他不变，亦满足条件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findDuplicate</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, r = n - <span class="hljs-number">1</span>, ans = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>                <span class="hljs-keyword">if</span> (nums[i] &lt;= mid) &#123;<br>                    cnt++;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (cnt &lt;= mid) &#123;<br>                l = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                r = mid - <span class="hljs-number">1</span>;<br>                ans = mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(nlogn)，其中n为nums数组的长度。二分查找最多需要二分O(nlogn)次，每次判断的时候需要O(n)遍历nums数组求解小于等于mid的数的个数，因此总时间复杂度为O(nlogn)</li><li>空间复杂度：O(1)。我们只需要常数空间存放若干变量。</li></ul><h4 id="方法二：二进制"><a href="#方法二：二进制" class="headerlink" title="方法二：二进制"></a>方法二：二进制</h4><blockquote><p>将所有数按二进制位展开考虑如何找出重复的数，如果我们能确定重复数的每一位是1还是0就可以按位还原出重复的数是什么。</p></blockquote><p>考虑到第i位，我们记nums数组中二进制展开后第i位为1的数有x个，数字[1,n]这n个数二进制展开后第i位为1的数有y个。我们可以假设重复数的第i位为1当且仅当 x &gt; y</p><p>证明如下：</p><ul><li><p>如果测试用例的数组中target出现了两次，其余的数各出现了一次。</p><ul><li>如果target的第i位为1，那么nums数组中第i位为1的个数x恰好比y大1，即x&gt;y</li><li>如果target的第i位为0，那么nums数组中第i位为1的个数x和y相同，即x&lt;&#x3D;y</li></ul></li><li><p>如果测试用例的数组中target出现了三次及以上，那么必然有一些数不在nums数组中了，这个时候可以考虑用target去替换这些数，考虑替换的时候对target出现两次情况下的x的影响:</p><ul><li>如果被替换的数的第i位为1，并且target的第i位为1，那么x不变。满足x&gt;y</li><li>如果被替换的数的第i位为0，并且target的第i位为1，那么x+1。满足x&gt;y</li><li>如果被替换的数的第i位为1，并且target的第i位为0，那么x-1，满足x&lt;&#x3D;y</li><li>如果被替换的数的第i位为0，并且target的第i位为0，那么x不变，满足x&lt;&#x3D;y</li></ul><p>也就是说如果target的第i位为1，那么每次替换后只会使x不变或增大;如果为0，替换后只会使x不变或减小。始终满足x&gt;y时target第i位为1，否则为0，因此我们可以据此按位还原这个重复的数。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findDuplicate</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length, ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 确定二进制下最高位是多少</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">bit_max</span> <span class="hljs-operator">=</span> <span class="hljs-number">31</span>;<br>        <span class="hljs-keyword">while</span> (((n - <span class="hljs-number">1</span>) &gt;&gt; bit_max) == <span class="hljs-number">0</span>) &#123;<br>            bit_max -= <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">bit</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; bit &lt;= bit_max; ++bit) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>                <span class="hljs-keyword">if</span> ((nums[i] &amp; (<span class="hljs-number">1</span> &lt;&lt; bit)) != <span class="hljs-number">0</span>) &#123;<br>                    x += <span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">1</span> &amp;&amp; ((i &amp; (<span class="hljs-number">1</span> &lt;&lt; bit)) != <span class="hljs-number">0</span>)) &#123;<br>                    y += <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (x &gt; y) &#123;<br>                ans |= <span class="hljs-number">1</span> &lt;&lt; bit;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(nlogn)，其中n为nums数组的长度。O(logn)代表了我们枚举二进制数的位数个数，枚举第i位的时候需要遍历数组统计x和y的答案，因此总时间复杂度为O(nlogn)。</li><li>空间复杂度：O(1)。我们只需要常数空间存放若干变量。</li></ul><h4 id="方法三：快慢指针"><a href="#方法三：快慢指针" class="headerlink" title="方法三：快慢指针"></a>方法三：快慢指针</h4><p>对 nums 数组建图，每个位置 i 连一条 i→nums[i] 的边，就可以将问题转换成<a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/solution/huan-xing-lian-biao-ii-by-leetcode/">142. 环形链表 II</a></p><p>根据 Floyd判圈算法 （又称龟兔赛跑算法）来检测链表是否有环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findDuplicate</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, fast = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            slow = nums[slow];<br>            fast = nums[nums[fast]];<br>        &#125; <span class="hljs-keyword">while</span> (slow != fast);<br>        slow = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (slow != fast) &#123;<br>            slow = nums[slow];<br>            fast = nums[fast];<br>        &#125;<br>        <span class="hljs-keyword">return</span> slow;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>会议室II</title>
    <link href="/2022/09/25/%E4%BC%9A%E8%AE%AE%E5%AE%A4II/"/>
    <url>/2022/09/25/%E4%BC%9A%E8%AE%AE%E5%AE%A4II/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>丑数II</title>
    <link href="/2022/09/25/%E4%B8%91%E6%95%B0II/"/>
    <url>/2022/09/25/%E4%B8%91%E6%95%B0II/</url>
    
    <content type="html"><![CDATA[<p>给你一个正整数n，请你找出并返回第n个丑数</p><p>丑数就是只包含质因数2、3和5的正整数</p><h4 id="方法一：最小堆"><a href="#方法一：最小堆" class="headerlink" title="方法一：最小堆"></a>方法一：最小堆</h4><p>初始时堆为空。首先将最小的丑数1加入堆中。</p><p>每次取出堆顶元素x，则x是堆中最小的丑数，由于2x、3x、5x也是丑数，因此将2x、3x、5x加入堆。</p><p>在这个过程中可能会有重复的元素，需要用一个set进行去重，避免某个丑数多次加入堆</p><p>第n次从堆顶取出来的元素就是第n个丑数</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nthUglyNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        Set&lt;Long&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        PriorityQueue&lt;Long&gt; minHeap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;();<br>        set.add(<span class="hljs-number">1L</span>);<br>        minHeap.add(<span class="hljs-number">1L</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> minHeap.poll();<br>            <span class="hljs-keyword">if</span> (!set.contains(<span class="hljs-number">2</span>*t)) &#123;<br>                set.add(<span class="hljs-number">2</span>*t);<br>                minHeap.add(<span class="hljs-number">2</span>*t);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!set.contains(<span class="hljs-number">3</span>*t)) &#123;<br>                set.add(<span class="hljs-number">3</span>*t);<br>                minHeap.add(<span class="hljs-number">3</span>*t);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!set.contains(<span class="hljs-number">5</span>*t)) &#123;<br>                set.add(<span class="hljs-number">5</span>*t);<br>                minHeap.add(<span class="hljs-number">5</span>*t);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> minHeap.peek().intValue();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方法二：动态规划"><a href="#方法二：动态规划" class="headerlink" title="方法二：动态规划"></a>方法二：动态规划</h4><p>定义数组dp，其中dp[i]表示第i个丑数，第n个丑数即为dp[n]。</p><p>由于最小的丑数是1，因此dp[1]&#x3D;1。</p><p>定义三个指针p2、p3、p5，表示下一个丑数是当前指针指向的丑数乘以对应的质因数。初始时，三个指针的值都是1。</p><p>当2&lt;&#x3D;i&lt;&#x3D;n时，令dp[i]&#x3D;min(dp[p2]x2,dp[p3]x3,dp[p5]x5)，然后分别比较dp[i]和dp[p2]x2,dp[p3]x3,dp[p5]x5是否相等，如果相等则将相应的指针加1。</p><p>正确性证明：</p><blockquote><p>对于i&gt;1，在计算dp[i]时，指针px(x∈{2,3,5})的含义是使得dp[j] × x &gt; dp[i-1]的最小的下标j.即当j&gt;&#x3D;px时dp[j] × x &gt; dp[i-1],当j&lt;px时dp[j] × x &lt;&#x3D; dp[i-1]。</p><p>因此，对于i&gt;1，在计算dp[i]时，dp[p2]×2,dp[p3]×3,dp[p5]×5都大于dp[i-1],dp[p2-1]×2,dp[p3-1]×3,dp[p5-1]×5都小于或等于dp[i-1]。令dp[i] &#x3D; min(dp[p2]×2,dp[p3]×3,dp[p5]×5),则dp[i]是大于dp[i-1]的最小的丑数，即dp[i]是第i个丑数</p><p>在计算dp[i]之后，会更新三个指针p2、p3、p5，更新之后的指针将用于计算dp[i+1]，同样满足dp[i+1]是大于dp[i]的最小的丑数，即dp[i+1]是第i+1个丑数</p></blockquote><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nthUglyNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">long</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[n];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,p3 = <span class="hljs-number">0</span>,p5 = <span class="hljs-number">0</span>;<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++) &#123;<br>            dp[i] = Math.min(dp[p2]*<span class="hljs-number">2</span>,Math.min(dp[p3]*<span class="hljs-number">3</span>,dp[p5]*<span class="hljs-number">5</span>));<br>            <span class="hljs-keyword">if</span> (dp[i] == dp[p2]*<span class="hljs-number">2</span>) &#123;<br>                p2++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (dp[i] == dp[p3]*<span class="hljs-number">3</span>) &#123;<br>                p3++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (dp[i] == dp[p5]*<span class="hljs-number">5</span>) &#123;<br>                p5++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)dp[n-<span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>优雅的解题思路(持续更新)</title>
    <link href="/2022/09/17/%E4%BC%98%E9%9B%85%E7%9A%84%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/"/>
    <url>/2022/09/17/%E4%BC%98%E9%9B%85%E7%9A%84%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<hr><h5 id="215-数组中的第K个最大元素-力扣（LeetCode）"><a href="#215-数组中的第K个最大元素-力扣（LeetCode）" class="headerlink" title="215. 数组中的第K个最大元素 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/">215. 数组中的第K个最大元素 - 力扣（LeetCode）</a></h5><p>假设数组的左边界为left、右边界为right</p><p>改造快速排序求解。当通过partition确定选择的元素的位置i之后，判断i和right-k+1的大小</p><ul><li>如果 i &lt; right-k+1，在数组左边进行同样的操作（操作之前先更新left、right、k的值）</li><li>i &gt; right-k+1，在数组右边进行同样的操作（操作之前先更新left、right、k的值）</li><li>直到i &#x3D; right-k+1。</li></ul><hr><h5 id="220-存在重复元素-III-力扣（LeetCode）"><a href="#220-存在重复元素-III-力扣（LeetCode）" class="headerlink" title="220. 存在重复元素 III - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/contains-duplicate-iii/">220. 存在重复元素 III - 力扣（LeetCode）</a></h5><p>给你一个整数数组 nums 和两个整数 k 和 t 。请你判断是否存在 两个不同下标 i 和 j，使得 abs(nums[i] - nums[j]) &lt;&#x3D; t ，同时又满足 abs(i - j) &lt;&#x3D; k 。</p><p>思路：</p><ul><li>滑动窗口+有序集合<br>维护一个TreeSet（称为set）,set中最多有k个元素，当超过k个元素时，移除set中存在时间最长的元素。<br>对nums中的每个元素nums[i]，判断set中是否有元素在[nums[i]-t,nums[i]+t]范围内。<ul><li>如果存在这样一个元素，直接返回</li><li>如果不存在这样一个元素，将nums[i]加入set后继续检测nums[i+1]</li></ul></li><li>桶<br>对于元素x，其影响的区间为[x-t,x+t]。于是我们可以设定一个大小为t+1的桶。<ul><li>如果两个元素同属一个桶，那么这两个元素必然满足条件</li><li>如果两个元素属于相邻桶，那么我们需要校验这两个元素差值的绝对值是否不超过t</li><li>如果两个元素既不属于同一个桶，也不属于相邻桶，那么这两个元素必然不满足条件</li></ul></li></ul><hr><h5 id="222-完全二叉树的节点个数-力扣（LeetCode）"><a href="#222-完全二叉树的节点个数-力扣（LeetCode）" class="headerlink" title="222. 完全二叉树的节点个数 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/count-complete-tree-nodes/">222. 完全二叉树的节点个数 - 力扣（LeetCode）</a></h5><p>二分查找 + 位运算</p><p>假设完全二叉树的层数为h，则完全二叉树的节点数量在[2^h,2^(h+1)-1]之间</p><ul><li>在区间内使用二分查找算法，得到需要判断的数k</li><li>判断第k个节点是否存在：<ul><li>第k个节点位于第h层，则k有h+1位。</li><li>除掉最高位的1之后，从根节点开始，按照从高到低遍历k的二进制位。</li><li>如果二进制位为0，表示移动到左子节点；如果二进制位为1，表示移动到右子节点。</li><li>当移动到倒数第二位时，其下一个要移动到的子节点就是第k个节点。由此可以知道第k个节点是否存在</li></ul></li><li>如果第k个节点存在，则节点个数一定大于或等于k。如果第k个节点不存在，则节点个数一定小于k</li><li>得到新的节点个数区间后回到第一步继续进行二分查找直到得到节点个数</li></ul><hr><h5 id="235-二叉搜索树的最近公共祖先-力扣（LeetCode）"><a href="#235-二叉搜索树的最近公共祖先-力扣（LeetCode）" class="headerlink" title="235. 二叉搜索树的最近公共祖先 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/">235. 二叉搜索树的最近公共祖先 - 力扣（LeetCode）</a></h5><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><p>思路：</p><ul><li>找二叉树的最近公共祖先<ul><li>定义fx表示x节点的子树中是否包含p节点或q节点，如果包含则为true，否则为false。 那么p和q的最近公共祖先一定满足条件<br><img src="/2022/09/17/%E4%BC%98%E9%9B%85%E7%9A%84%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/1663503015805.png" class><br>当x的左子树和右子树分别包含p和q、x就是p或q并且x的左子树或右子树包含另一个节点时，x为二叉树的最近公共祖先。这两个条件分别对应上面的两个表达式。<br>找到最近公共祖先后，由fx的定义可以保证不会误找出新的最近公共祖先</li><li>记录每个节点的父节点，可以得到p和q到达根节点的路径，两条路径从下往上第一个交点就是p和q的最近公共祖先</li></ul></li><li>找二叉搜索树的最近公共祖先<ul><li>根据二叉搜索树的性质可以直接得到p和q到达根节点的路径，然后算出最近公共祖先</li><li>如果p和q分别在x的两边（包括x就是p或q），那么x就是p和q的最近公共祖先。根据二叉搜索树的性质可以通过p、q和节点root的值进行比较快速找到x</li></ul></li></ul><h5 id="240-搜索二维矩阵-II-力扣（LeetCode）"><a href="#240-搜索二维矩阵-II-力扣（LeetCode）" class="headerlink" title="240. 搜索二维矩阵 II - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/search-a-2d-matrix-ii/">240. 搜索二维矩阵 II - 力扣（LeetCode）</a></h5><p>编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target 。该矩阵具有以下特性：</p><ul><li>每行的元素从左到右升序排列。</li><li>每列的元素从上到下升序排列。</li></ul><p>思路:</p><p>从矩阵的右上方(0,n-1)开始搜索。在每一步的搜索过程中，如果我们位于位置 (x,y)，那么我们希望在以<em>matrix</em>的左下角为左下角、以(x,y)为右上角的矩阵中进行搜索，即行的范围为 [x,m-1]，列的范围为[0,y]：</p><p>对于位于位置（x,y）的数matrix[x,y],我们将其和target比较</p><ul><li>matrix[x,y] &lt; target 可以推断出target一定不在第x行（第x行的元素都严格小于target），将x+1，然后重新进行比较</li><li>matrix[x,y] &gt; target 同理将y-1后重新进行比较</li><li>matrix[x,y] &#x3D; target 找到target，返回结果</li></ul><p>最后如果x&gt;&#x3D;m 或 y&lt;0，表示矩阵matrix中没有值为target的数</p><hr><h5 id="254-因子的组合-力扣（LeetCode）"><a href="#254-因子的组合-力扣（LeetCode）" class="headerlink" title="254. 因子的组合 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/factor-combinations/">254. 因子的组合 - 力扣（LeetCode）</a></h5><p>请实现一个函数，该函数接收一个整数 <em>n</em> 并返回该整数所有的因子组合。</p><p>思路:</p><ul><li><p>dfs递归：遍历范围为i&#x3D;2~√n的因子</p></li><li><p>单层递归：如果i是n的因子，该层结果中添加一个[i，n&#x2F;&#x2F;i]组合</p></li><li><p>递归处理：</p><ul><li>查看n&#x2F;&#x2F;i能否从因子i开始被拆分成多因子组合sub序列</li><li>如果sub存在，则在该层结果中继续添加sub+[i]为一个新的组合</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>只出现一次的数字III</title>
    <link href="/2022/09/17/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97III/"/>
    <url>/2022/09/17/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97III/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/single-number-iii/">LeetCode链接</a></p><p>题目描述如下：</p><blockquote><p>给你一个整数数组 <code>nums</code>，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按 <strong>任意顺序</strong> 返回答案。</p></blockquote><p><strong>思路一</strong>：</p><blockquote><p>Map统计整数数组中元素出现的次数</p></blockquote><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] singleNumber(<span class="hljs-type">int</span>[] nums) &#123;<br>        Map&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++) &#123;<br>            map.computeIfPresent(nums[i],(key,value) -&gt; value+<span class="hljs-number">1</span>);<br>            map.putIfAbsent(nums[i],<span class="hljs-number">1</span>);<br>        &#125;<br>        List&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Integer,Integer&gt; entry:map.entrySet()) &#123;<br>            <span class="hljs-keyword">if</span> (entry.getValue() == <span class="hljs-number">1</span>) &#123;<br>                ans.add(entry.getKey());<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;ans.get(<span class="hljs-number">0</span>),ans.get(<span class="hljs-number">1</span>)&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>复杂度：</strong></p><ul><li>时间复杂度：O(n),其中n为数组长度</li><li>空间复杂度：O(n),n为哈希表使用的空间</li></ul><hr><p><strong>思路二</strong>：</p><blockquote><p>根据异或运算等位运算知识</p></blockquote><p>假设整数数组nums中只出现一次的数字分别为x1和x2、将nums中所有元素异或得到x，那么根据异或运算的性质</p><p>a ^ a &#x3D; 0 可知x1 ^ x2 &#x3D; x并且x1和x2不等(x1和x2都只出现了一次)。</p><p>根据x &amp; (-x)算出x的二进制表示中最低位的1，记为第i位。易知x1和x2的二进制表示的第i位一定不同，即一个数的第i位是0，另一个数的第i位是1</p><p>同时我们可以将nums中的数分为两类，一类数的二进制表示的第i位是0、一类数的二进制表示的第i位是0。</p><p>分别将这两类数的所有元素异或得到y1和y2，由于除了x1和x2其他的数都出现了两次，可以知道y1&#x3D;x1、y2&#x3D;x2</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] singleNumber(<span class="hljs-type">int</span>[] nums) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++) &#123;<br>            x = x ^ nums[i];<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> x &amp; (-x);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,x2 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++) &#123;<br>            <span class="hljs-comment">// 第i位为1</span><br>            <span class="hljs-keyword">if</span> ((nums[i] &amp; t) == t) &#123;<br>                x1 = x1 ^ nums[i];<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                x2 = x2 ^ nums[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;x1,x2&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>复杂度：</strong></p><ul><li>时间复杂度：O(n),其中n位数组长度</li><li>空间复杂度：O(1),算法用到了常数级别的空间</li></ul>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>N皇后问题</title>
    <link href="/2022/08/29/N%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/"/>
    <url>/2022/08/29/N%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="基于集合的回溯"><a href="#基于集合的回溯" class="headerlink" title="基于集合的回溯"></a>基于集合的回溯</h3><p>思路：按行遍历。维护三个集合<em>columns</em>、<em>diagonals1</em>和<em>diagonals2</em>分别表示每一列以及两个方向的每条斜线是否有皇后</p><p>代码如下:0-</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;List&lt;String&gt;&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">solveNQueens</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">int</span>[] column = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-type">int</span>[] slashL = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span>[] slashR = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>];<br>        <span class="hljs-type">boolean</span>[][] board = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n][n];<br>        dfs(board,column,slashL,slashR,n,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">boolean</span>[][] board,<span class="hljs-type">int</span>[] column,<span class="hljs-type">int</span>[] slashL,<span class="hljs-type">int</span>[] slashR,<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> rowIndex)</span> &#123;<br>        <span class="hljs-keyword">if</span> (rowIndex == n) &#123;<br>            List&lt;String&gt; t = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) &#123;<br>                <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++) &#123;<br>                    <span class="hljs-keyword">if</span> (board[i][j]) &#123;<br>                        sb.append(<span class="hljs-string">&#x27;Q&#x27;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        sb.append(<span class="hljs-string">&#x27;.&#x27;</span>);<br>                    &#125;<br>                &#125;<br>                t.add(sb.toString());<br>            &#125;<br>            ans.add(t);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) &#123;<br>            <span class="hljs-keyword">if</span> (column[i] == <span class="hljs-number">0</span> &amp;&amp; slashL[i+rowIndex] == <span class="hljs-number">0</span> &amp;&amp; slashR[rowIndex-i+n-<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>) &#123;<br>                column[i] = <span class="hljs-number">1</span>;<br>                slashL[i+rowIndex] = <span class="hljs-number">1</span>;<br>                slashR[rowIndex-i+n-<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>                board[rowIndex][i] = <span class="hljs-literal">true</span>;<br>                dfs(board,column,slashL,slashR,n,rowIndex+<span class="hljs-number">1</span>);<br>                column[i] = <span class="hljs-number">0</span>;<br>                slashL[i+rowIndex] = <span class="hljs-number">0</span>;<br>                slashR[rowIndex-i+n-<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>                board[rowIndex][i] = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基于位运算的回溯"><a href="#基于位运算的回溯" class="headerlink" title="基于位运算的回溯"></a>基于位运算的回溯</h3><p>思路：使用三个整数<em>columns</em>、<em>diagonals1</em>和<em>diagonals2</em>分别记录每一列和两个方向的每条斜线上是否有皇后</p><blockquote><p>此方法的空间复杂度可由基于集合回溯的O(N)降为O(1)</p></blockquote><p><em>columns</em>、<em>diagonals1</em>和<em>diagonals2</em>三个整数的低N位分别对应于棋盘中的N列，其中棋盘的最左列对应整数的最低二进制位、最右列对应整数的第N-1个二进制位</p><p>约定用0表示可以放置皇后的位置、用1表示不能放置皇后的位置。如n&#x3D;4 columns&#x3D;0101(2)表示第0、2列不能放置皇后；第1、3列可以放置皇后</p><p>下面说明每次放置皇后后如何更新三个整数的值</p><img src="/2022/08/29/N%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/1661847071002.png" class><br><br><p>如上图所示，在第1行第4列放置皇后后，考虑第2行能在哪些列放置皇后</p><blockquote><p>首先显然可以得到第2、4列不能放置皇后</p><p>然后根据从左上到右下的斜线可知第4、5列不能放置皇后。第4列为其前2行的第2列向右下方移动两步的位置、第5列为其前1行的第4列向右下方移动一步的位置</p><p>根据从右上到左下的斜线可知第0、3列不能放置皇后。第0列为其前2行的第2列向右下方移动两步的位置、第3列为其前1行的第4列向右下方移动一步的位置</p></blockquote><p>简单归纳可以得到三个整数的更新计算方法：</p><ul><li>初始时三个整数都置为0，表示没有放置任何皇后</li><li>在放置当前皇后时，如果皇后放置在第i列，则将三个整数的第i（从低到高）位置为1</li><li>进入下一行时，columns值保持不变，diagonals1左移1位（当前行不能放置皇后位置的右下方距离一步的位置也不能放置皇后），diagonals2右移1位（当前行不能放置皇后位置的左下方距离一步的位置也不能放置皇后）</li></ul><p>每次放置皇后时，通过三个整数的按位或运算的结果可以得到可以和不可以放置皇后的位置</p><p>可以通过（2^n-1）&amp; (~(columns | diagonals1 | diagonals2))得到所有可以放置皇后的位置（第i位为1表示第i位可以放置皇后），然后遍历这些位置，得到所有可能的解</p><p>遍历可以放置皇后的位置时，可以利用以下两个按位与运算的性质：</p><ul><li>x <strong>&amp;</strong> (−x) 可以获得 x 的二进制表示中的最低位的 1 的位置</li><li>x <strong>&amp;</strong> (x−1) 可以将 x 的二进制表示中的最低位的 1 置成 0</li></ul><p>具体做法是，每次获得可以放置皇后的位置中的最低位，并将该位的值置成 0，尝试在该位置放置皇后。这样即可遍历每个可以放置皇后的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">solveNQueens</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">int</span>[] queens = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        Arrays.fill(queens, -<span class="hljs-number">1</span>);<br>        List&lt;List&lt;String&gt;&gt; solutions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;List&lt;String&gt;&gt;();<br>        solve(solutions, queens, n, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> solutions;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(List&lt;List&lt;String&gt;&gt; solutions, <span class="hljs-type">int</span>[] queens, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> columns, <span class="hljs-type">int</span> diagonals1, <span class="hljs-type">int</span> diagonals2)</span> &#123;<br>        <span class="hljs-keyword">if</span> (row == n) &#123;<br>            List&lt;String&gt; board = generateBoard(queens, n);<br>            solutions.add(board);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">availablePositions</span> <span class="hljs-operator">=</span> ((<span class="hljs-number">1</span> &lt;&lt; n) - <span class="hljs-number">1</span>) &amp; (~(columns | diagonals1 | diagonals2));<br>            <span class="hljs-keyword">while</span> (availablePositions != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">position</span> <span class="hljs-operator">=</span> availablePositions &amp; (-availablePositions);<br>                availablePositions = availablePositions &amp; (availablePositions - <span class="hljs-number">1</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">column</span> <span class="hljs-operator">=</span> Integer.bitCount(position - <span class="hljs-number">1</span>);<br>                queens[row] = column;<br>                solve(solutions, queens, n, row + <span class="hljs-number">1</span>, columns | position, (diagonals1 | position) &lt;&lt; <span class="hljs-number">1</span>, (diagonals2 | position) &gt;&gt; <span class="hljs-number">1</span>);<br>                queens[row] = -<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">generateBoard</span><span class="hljs-params">(<span class="hljs-type">int</span>[] queens, <span class="hljs-type">int</span> n)</span> &#123;<br>        List&lt;String&gt; board = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">char</span>[] row = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[n];<br>            Arrays.fill(row, <span class="hljs-string">&#x27;.&#x27;</span>);<br>            row[queens[i]] = <span class="hljs-string">&#x27;Q&#x27;</span>;<br>            board.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(row));<br>        &#125;<br>        <span class="hljs-keyword">return</span> board;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>据Leetcode评论区：当数据量达到15时，基于集合的回溯会超时，基于位运算的回溯刚好能过</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
