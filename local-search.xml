<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringMVC请求流程图</title>
    <link href="/2024/04/20/SpringMVC%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B%E5%9B%BE/"/>
    <url>/2024/04/20/SpringMVC%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p><img src="/2024/04/20/SpringMVC%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B%E5%9B%BE/331228498888800.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>流程图</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ScheduledThreadPoolExecutor源码解析</title>
    <link href="/2023/11/06/ScheduledThreadPoolExecutor%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/11/06/ScheduledThreadPoolExecutor%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br><span class="line">1376</span><br><span class="line">1377</span><br><span class="line">1378</span><br><span class="line">1379</span><br><span class="line">1380</span><br><span class="line">1381</span><br><span class="line">1382</span><br><span class="line">1383</span><br><span class="line">1384</span><br><span class="line">1385</span><br><span class="line">1386</span><br><span class="line">1387</span><br><span class="line">1388</span><br><span class="line">1389</span><br><span class="line">1390</span><br><span class="line">1391</span><br><span class="line">1392</span><br><span class="line">1393</span><br><span class="line">1394</span><br><span class="line">1395</span><br><span class="line">1396</span><br><span class="line">1397</span><br><span class="line">1398</span><br><span class="line">1399</span><br><span class="line">1400</span><br><span class="line">1401</span><br><span class="line">1402</span><br><span class="line">1403</span><br><span class="line">1404</span><br><span class="line">1405</span><br><span class="line">1406</span><br><span class="line">1407</span><br><span class="line">1408</span><br><span class="line">1409</span><br><span class="line">1410</span><br><span class="line">1411</span><br><span class="line">1412</span><br><span class="line">1413</span><br><span class="line">1414</span><br><span class="line">1415</span><br><span class="line">1416</span><br><span class="line">1417</span><br><span class="line">1418</span><br><span class="line">1419</span><br><span class="line">1420</span><br><span class="line">1421</span><br><span class="line">1422</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * A &#123;<span class="hljs-doctag">@link</span> ThreadPoolExecutor&#125; that can additionally schedule</span><br><span class="hljs-comment"> * commands to run after a given delay, or to execute periodically.</span><br><span class="hljs-comment"> * This class is preferable to &#123;<span class="hljs-doctag">@link</span> java.util.Timer&#125; when multiple</span><br><span class="hljs-comment"> * worker threads are needed, or when the additional flexibility or</span><br><span class="hljs-comment"> * capabilities of &#123;<span class="hljs-doctag">@link</span> ThreadPoolExecutor&#125; (which this class</span><br><span class="hljs-comment"> * extends) are required.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;Delayed tasks execute no sooner than they are enabled, but</span><br><span class="hljs-comment"> * without any real-time guarantees about when, after they are</span><br><span class="hljs-comment"> * enabled, they will commence. Tasks scheduled for exactly the same</span><br><span class="hljs-comment"> * execution time are enabled in first-in-first-out (FIFO) order of</span><br><span class="hljs-comment"> * submission.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;When a submitted task is cancelled before it is run, execution</span><br><span class="hljs-comment"> * is suppressed.  By default, such a cancelled task is not</span><br><span class="hljs-comment"> * automatically removed from the work queue until its delay elapses.</span><br><span class="hljs-comment"> * While this enables further inspection and monitoring, it may also</span><br><span class="hljs-comment"> * cause unbounded retention of cancelled tasks.  To avoid this, use</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> #setRemoveOnCancelPolicy&#125; to cause tasks to be immediately</span><br><span class="hljs-comment"> * removed from the work queue at time of cancellation.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;Successive executions of a periodic task scheduled via</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> #scheduleAtFixedRate scheduleAtFixedRate&#125; or</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> #scheduleWithFixedDelay scheduleWithFixedDelay&#125;</span><br><span class="hljs-comment"> * do not overlap. While different executions may be performed by</span><br><span class="hljs-comment"> * different threads, the effects of prior executions</span><br><span class="hljs-comment"> * &lt;a href=&quot;package-summary.html#MemoryVisibility&quot;&gt;&lt;i&gt;happen-before&lt;/i&gt;&lt;/a&gt;</span><br><span class="hljs-comment"> * those of subsequent ones.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;While this class inherits from &#123;<span class="hljs-doctag">@link</span> ThreadPoolExecutor&#125;, a few</span><br><span class="hljs-comment"> * of the inherited tuning methods are not useful for it. In</span><br><span class="hljs-comment"> * particular, because it acts as a fixed-sized pool using</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@code</span> corePoolSize&#125; threads and an unbounded queue, adjustments</span><br><span class="hljs-comment"> * to &#123;<span class="hljs-doctag">@code</span> maximumPoolSize&#125; have no useful effect. Additionally, it</span><br><span class="hljs-comment"> * is almost never a good idea to set &#123;<span class="hljs-doctag">@code</span> corePoolSize&#125; to zero or</span><br><span class="hljs-comment"> * use &#123;<span class="hljs-doctag">@code</span> allowCoreThreadTimeOut&#125; because this may leave the pool</span><br><span class="hljs-comment"> * without threads to handle tasks once they become eligible to run.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;As with &#123;<span class="hljs-doctag">@code</span> ThreadPoolExecutor&#125;, if not otherwise specified,</span><br><span class="hljs-comment"> * this class uses &#123;<span class="hljs-doctag">@link</span> Executors#defaultThreadFactory&#125; as the</span><br><span class="hljs-comment"> * default thread factory, and &#123;<span class="hljs-doctag">@link</span> ThreadPoolExecutor.AbortPolicy&#125;</span><br><span class="hljs-comment"> * as the default rejected execution handler.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;&lt;b&gt;Extension notes:&lt;/b&gt; This class overrides the</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> ThreadPoolExecutor#execute(Runnable) execute&#125; and</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> AbstractExecutorService#submit(Runnable) submit&#125;</span><br><span class="hljs-comment"> * methods to generate internal &#123;<span class="hljs-doctag">@link</span> ScheduledFuture&#125; objects to</span><br><span class="hljs-comment"> * control per-task delays and scheduling.  To preserve</span><br><span class="hljs-comment"> * functionality, any further overrides of these methods in</span><br><span class="hljs-comment"> * subclasses must invoke superclass versions, which effectively</span><br><span class="hljs-comment"> * disables additional task customization.  However, this class</span><br><span class="hljs-comment"> * provides alternative protected extension method</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@code</span> decorateTask&#125; (one version each for &#123;<span class="hljs-doctag">@code</span> Runnable&#125; and</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@code</span> Callable&#125;) that can be used to customize the concrete task</span><br><span class="hljs-comment"> * types used to execute commands entered via &#123;<span class="hljs-doctag">@code</span> execute&#125;,</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@code</span> submit&#125;, &#123;<span class="hljs-doctag">@code</span> schedule&#125;, &#123;<span class="hljs-doctag">@code</span> scheduleAtFixedRate&#125;,</span><br><span class="hljs-comment"> * and &#123;<span class="hljs-doctag">@code</span> scheduleWithFixedDelay&#125;.  By default, a</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@code</span> ScheduledThreadPoolExecutor&#125; uses a task type extending</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> FutureTask&#125;. However, this may be modified or replaced using</span><br><span class="hljs-comment"> * subclasses of the form:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;pre&gt; &#123;<span class="hljs-doctag">@code</span></span><br><span class="hljs-comment"> * public class CustomScheduledExecutor extends ScheduledThreadPoolExecutor &#123;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *   static class CustomTask&lt;V&gt; implements RunnableScheduledFuture&lt;V&gt; &#123; ... &#125;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *   protected &lt;V&gt; RunnableScheduledFuture&lt;V&gt; decorateTask(</span><br><span class="hljs-comment"> *                Runnable r, RunnableScheduledFuture&lt;V&gt; task) &#123;</span><br><span class="hljs-comment"> *       return new CustomTask&lt;V&gt;(r, task);</span><br><span class="hljs-comment"> *   &#125;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *   protected &lt;V&gt; RunnableScheduledFuture&lt;V&gt; decorateTask(</span><br><span class="hljs-comment"> *                Callable&lt;V&gt; c, RunnableScheduledFuture&lt;V&gt; task) &#123;</span><br><span class="hljs-comment"> *       return new CustomTask&lt;V&gt;(c, task);</span><br><span class="hljs-comment"> *   &#125;</span><br><span class="hljs-comment"> *   // ... add constructors, etc.</span><br><span class="hljs-comment"> * &#125;&#125;&lt;/pre&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 1.5</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Doug Lea</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduledThreadPoolExecutor</span><br>        <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ThreadPoolExecutor</span><br>        <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ScheduledExecutorService</span> &#123;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * This class specializes ThreadPoolExecutor implementation by</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 1. Using a custom task type ScheduledFutureTask, even for tasks</span><br><span class="hljs-comment">     *    that don&#x27;t require scheduling because they are submitted</span><br><span class="hljs-comment">     *    using ExecutorService rather than ScheduledExecutorService</span><br><span class="hljs-comment">     *    methods, which are treated as tasks with a delay of zero.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 2. Using a custom queue (DelayedWorkQueue), a variant of</span><br><span class="hljs-comment">     *    unbounded DelayQueue. The lack of capacity constraint and</span><br><span class="hljs-comment">     *    the fact that corePoolSize and maximumPoolSize are</span><br><span class="hljs-comment">     *    effectively identical simplifies some execution mechanics</span><br><span class="hljs-comment">     *    (see delayedExecute) compared to ThreadPoolExecutor.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 3. Supporting optional run-after-shutdown parameters, which</span><br><span class="hljs-comment">     *    leads to overrides of shutdown methods to remove and cancel</span><br><span class="hljs-comment">     *    tasks that should NOT be run after shutdown, as well as</span><br><span class="hljs-comment">     *    different recheck logic when task (re)submission overlaps</span><br><span class="hljs-comment">     *    with a shutdown.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 4. Task decoration methods to allow interception and</span><br><span class="hljs-comment">     *    instrumentation, which are needed because subclasses cannot</span><br><span class="hljs-comment">     *    otherwise override submit methods to get this effect. These</span><br><span class="hljs-comment">     *    don&#x27;t have any impact on pool control logic though.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 1.使用自定义任务类型ScheduledFutureTask，即使对于不需要计划的任务也是如此，</span><br><span class="hljs-comment">     *   因为它们是使用ExecutorService而不是ScheduledExecutorService方法提交的，后者被视为延迟为零的任务。</span><br><span class="hljs-comment">     * 2.使用自定义队列（DelayedWorkQueue），它是无界延迟队列（DelayQueue）的一个变体。</span><br><span class="hljs-comment">     *   与 ThreadPoolExecutor 相比，由于没有容量限制，而且 corePoolSize 和 maximumPoolSize 实际上是相同的，</span><br><span class="hljs-comment">     *   因此简化了一些执行机制（参见 delayedExecute）。</span><br><span class="hljs-comment">     * 3.支持可选的关闭后运行参数，这导致覆盖关闭方法以移除和取消关闭后不应运行的任务，</span><br><span class="hljs-comment">     *   以及当任务(重新)提交与关闭重叠时不同的重新检查逻辑。</span><br><span class="hljs-comment">     * 4.任务修饰方法，以允许拦截和插装，这是必需的，因为子类不能通过重写提交方法来获得这种效果。</span><br><span class="hljs-comment">     *   但是这些对池控制逻辑没有任何影响。</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ThreadPoolExecutor.runWorker(Worker w) 方法注释</span><br><span class="hljs-comment">     * 主 Worker 运行循环。重复从队列中获取任务并执行它们，同时处理一系列问题：</span><br><span class="hljs-comment">     * 1. 我们可能一开始就有一个初始任务，在这种情况下，我们不需要获取第一个任务。</span><br><span class="hljs-comment">     *    否则，只要池还在运行，我们就从 getTask 获取任务。</span><br><span class="hljs-comment">     *    如果返回空值，则表示 Worker 因池状态或配置参数发生变化而退出。</span><br><span class="hljs-comment">     *    其他退出是由于外部代码抛出了异常，在这种情况下 completedAbruptly 保持不变，</span><br><span class="hljs-comment">     *    这通常会导致 processWorkerExit 替代该线程。</span><br><span class="hljs-comment">     * 2. 在运行任何任务之前，我们都会获取锁，以防止任务执行时发生其他池中断，</span><br><span class="hljs-comment">     *    然后确保除非池停止运行，否则本线程不会设置中断。</span><br><span class="hljs-comment">     * 3. 每个任务运行前都会调用 beforeExecute，它可能会抛出异常，</span><br><span class="hljs-comment">     *    在这种情况下，我们会在不处理任务的情况下导致线程死亡（在 completedAbruptly 为 true 的情况下中断循环）。</span><br><span class="hljs-comment">     * 4. 假设 beforeExecute 正常完成，我们运行任务，收集抛出的异常并发送给 afterExecute。</span><br><span class="hljs-comment">     *    我们会分别处理 RuntimeException、Error（规范保证我们会捕获这两种异常）和任意 Throwables。</span><br><span class="hljs-comment">     *    由于我们无法在 Runnable.run 中重新抛出 Throwables，</span><br><span class="hljs-comment">     *    因此我们在抛出时将它们封装在 Errors 中（交给线程的 UncaughtExceptionHandler）。</span><br><span class="hljs-comment">     *    任何抛出的异常都会导致线程死亡。</span><br><span class="hljs-comment">     * 5. 在 task.run 完成后，我们调用 afterExecute，它也可能抛出异常，这也会导致线程死亡。</span><br><span class="hljs-comment">     *    根据 JLS 第 14.20 节，即使 task.run 抛出，该异常也会生效。</span><br><span class="hljs-comment">     *    异常机制的净效果是，afterExecute 和线程的</span><br><span class="hljs-comment">     *    UncaughtExceptionHandler 可以获得我们所能提供的关于用户代码所遇到的任何问题的准确信息</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * False if should cancel/suppress periodic tasks on shutdown.</span><br><span class="hljs-comment">     * 如果值为false，则在shutdown时，cancel/supress周期性任务时</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> continueExistingPeriodicTasksAfterShutdown;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * False if should cancel non-periodic not-yet-expired tasks on shutdown.</span><br><span class="hljs-comment">     * 如果值为false，则在shutdown时，cancel非周期性、还未过期的任务</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">executeExistingDelayedTasksAfterShutdown</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * True if ScheduledFutureTask.cancel should remove from queue.</span><br><span class="hljs-comment">     * 如果值为true，则cancel状态的ScheduledFutureTask应该从队列中移除</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> removeOnCancel;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Sequence number to break scheduling ties, and in turn to</span><br><span class="hljs-comment">     * guarantee FIFO order among tied entries.</span><br><span class="hljs-comment">     * 打破调度联系的序列号，进而保证联系条目之间的FIFO顺序。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AtomicLong</span> <span class="hljs-variable">sequencer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicLong</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduledFutureTask</span>&lt;V&gt;<br>            <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FutureTask</span>&lt;V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RunnableScheduledFuture</span>&lt;V&gt; &#123;<br><br>        <span class="hljs-comment">/** Sequence number to break ties FIFO */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> sequenceNumber;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * The nanoTime-based time when the task is enabled to execute.</span><br><span class="hljs-comment">         * 任务允许执行的时间（以纳秒记）</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">long</span> time;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Period for repeating tasks, in nanoseconds.</span><br><span class="hljs-comment">         * A positive value indicates fixed-rate execution.</span><br><span class="hljs-comment">         * A negative value indicates fixed-delay execution.</span><br><span class="hljs-comment">         * A value of 0 indicates a non-repeating (one-shot) task.</span><br><span class="hljs-comment">         * 重复执行任务的周期，以纳秒记</span><br><span class="hljs-comment">         * 正数表示固定频率的执行</span><br><span class="hljs-comment">         * 负数表示固定延迟的执行</span><br><span class="hljs-comment">         * 0表示非周期性任务（即只执行一次）</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> period;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * The actual task to be re-enqueued by reExecutePeriodic</span><br><span class="hljs-comment">         * reExecutePeriodic方法重新入队的实际的任务</span><br><span class="hljs-comment">         */</span><br>        RunnableScheduledFuture&lt;V&gt; outerTask = <span class="hljs-built_in">this</span>;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Index into delay queue, to support faster cancellation.</span><br><span class="hljs-comment">         * 延迟队列索引，以支持更快的取消</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">int</span> heapIndex;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Creates a one-shot action with given nanoTime-based trigger time.</span><br><span class="hljs-comment">         */</span><br>        ScheduledFutureTask(Runnable r, V result, <span class="hljs-type">long</span> triggerTime,<br>                            <span class="hljs-type">long</span> sequenceNumber) &#123;<br>            <span class="hljs-built_in">super</span>(r, result);<br>            <span class="hljs-built_in">this</span>.time = triggerTime;<br>            <span class="hljs-built_in">this</span>.period = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">this</span>.sequenceNumber = sequenceNumber;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Creates a periodic action with given nanoTime-based initial</span><br><span class="hljs-comment">         * trigger time and period.</span><br><span class="hljs-comment">         */</span><br>        ScheduledFutureTask(Runnable r, V result, <span class="hljs-type">long</span> triggerTime,<br>                            <span class="hljs-type">long</span> period, <span class="hljs-type">long</span> sequenceNumber) &#123;<br>            <span class="hljs-built_in">super</span>(r, result);<br>            <span class="hljs-built_in">this</span>.time = triggerTime;<br>            <span class="hljs-built_in">this</span>.period = period;<br>            <span class="hljs-built_in">this</span>.sequenceNumber = sequenceNumber;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Creates a one-shot action with given nanoTime-based trigger time.</span><br><span class="hljs-comment">         */</span><br>        ScheduledFutureTask(Callable&lt;V&gt; callable, <span class="hljs-type">long</span> triggerTime,<br>                            <span class="hljs-type">long</span> sequenceNumber) &#123;<br>            <span class="hljs-built_in">super</span>(callable);<br>            <span class="hljs-built_in">this</span>.time = triggerTime;<br>            <span class="hljs-built_in">this</span>.period = <span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">this</span>.sequenceNumber = sequenceNumber;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 获取任务下一次执行的延迟</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getDelay</span><span class="hljs-params">(TimeUnit unit)</span> &#123;<br>            <span class="hljs-keyword">return</span> unit.convert(time - System.nanoTime(), NANOSECONDS);<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 比较两个任务谁先进行下一次执行</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> other the object to be compared.</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Delayed other)</span> &#123;<br>            <span class="hljs-keyword">if</span> (other == <span class="hljs-built_in">this</span>) <span class="hljs-comment">// compare zero if same object</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (other <span class="hljs-keyword">instanceof</span> ScheduledFutureTask) &#123;<br>                ScheduledFutureTask&lt;?&gt; x = (ScheduledFutureTask&lt;?&gt;)other;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">diff</span> <span class="hljs-operator">=</span> time - x.time;<br>                <span class="hljs-keyword">if</span> (diff &lt; <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (diff &gt; <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sequenceNumber &lt; x.sequenceNumber)<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">diff</span> <span class="hljs-operator">=</span> getDelay(NANOSECONDS) - other.getDelay(NANOSECONDS);<br>            <span class="hljs-keyword">return</span> (diff &lt; <span class="hljs-number">0</span>) ? -<span class="hljs-number">1</span> : (diff &gt; <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Returns &#123;<span class="hljs-doctag">@code</span> true&#125; if this is a periodic (not a one-shot) action.</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> true&#125; if periodic</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPeriodic</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> period != <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Sets the next time to run for a periodic task.</span><br><span class="hljs-comment">         * 设置周期性任务的下一次执行时间</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNextRunTime</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> period;<br>            <span class="hljs-keyword">if</span> (p &gt; <span class="hljs-number">0</span>)<br>                time += p;<br>            <span class="hljs-keyword">else</span><br>                time = triggerTime(-p);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">cancel</span><span class="hljs-params">(<span class="hljs-type">boolean</span> mayInterruptIfRunning)</span> &#123;<br>            <span class="hljs-comment">// The racy read of heapIndex below is benign:</span><br>            <span class="hljs-comment">// if heapIndex &lt; 0, then OOTA guarantees that we have surely</span><br>            <span class="hljs-comment">// been removed; else we recheck under lock in remove()</span><br>            <span class="hljs-comment">// 下面对 heapIndex 的粗略读取是无害的：如果 heapIndex &lt; 0，则 OOTA 保证我们肯定已被移除；</span><br>            <span class="hljs-comment">// 否则，我们在 remove() 中的锁下重新检查</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">cancelled</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.cancel(mayInterruptIfRunning);<br>            <span class="hljs-keyword">if</span> (cancelled &amp;&amp; removeOnCancel &amp;&amp; heapIndex &gt;= <span class="hljs-number">0</span>)<br>                remove(<span class="hljs-built_in">this</span>);<br>            <span class="hljs-keyword">return</span> cancelled;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Overrides FutureTask version so as to reset/requeue if periodic.</span><br><span class="hljs-comment">         * 重写FutureTask的run方法，以在需要周期性执行任务时reset/requeue任务</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (!canRunInCurrentRunState(<span class="hljs-built_in">this</span>))<br>                cancel(<span class="hljs-literal">false</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!isPeriodic())<br>                <span class="hljs-built_in">super</span>.run();<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">super</span>.runAndReset()) &#123;<br>                setNextRunTime();<br>                reExecutePeriodic(outerTask);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns true if can run a task given current run state and</span><br><span class="hljs-comment">     * run-after-shutdown parameters.</span><br><span class="hljs-comment">     * 如果能在给定当前状态和run-after-shutdown参数下执行任务，则返回true</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">canRunInCurrentRunState</span><span class="hljs-params">(RunnableScheduledFuture&lt;?&gt; task)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!isShutdown())<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (isStopped())<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">// 已经shutdown 还未 stop</span><br>        <span class="hljs-comment">// 如果是周期性的任务，则判断是否应该在shutdown后 cancel/supress 任务</span><br>        <span class="hljs-comment">// 否则，则判断是否应该在shutdown后放弃非周期、还未释放和任务是否可以立即执行</span><br>        <span class="hljs-keyword">return</span> task.isPeriodic()<br>                ? continueExistingPeriodicTasksAfterShutdown<br>                : (executeExistingDelayedTasksAfterShutdown<br>                || task.getDelay(NANOSECONDS) &lt;= <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Main execution method for delayed or periodic tasks.  If pool</span><br><span class="hljs-comment">     * is shut down, rejects the task. Otherwise adds task to queue</span><br><span class="hljs-comment">     * and starts a thread, if necessary, to run it.  (We cannot</span><br><span class="hljs-comment">     * prestart the thread to run the task because the task (probably)</span><br><span class="hljs-comment">     * shouldn&#x27;t be run yet.)  If the pool is shut down while the task</span><br><span class="hljs-comment">     * is being added, cancel and remove it if required by state and</span><br><span class="hljs-comment">     * run-after-shutdown parameters.</span><br><span class="hljs-comment">     * 对于延迟的或者周期性执行的任务的主要执行方法。如果线程池关闭，拒绝任务。</span><br><span class="hljs-comment">     * 否则添加任务到队列中并且如果有必要的话，开启一个线程，执行任务。（</span><br><span class="hljs-comment">     * 我们不能预启动一个线程来运行任务因为任务（可能） 还不应该运行）</span><br><span class="hljs-comment">     * 如果线程池关闭时任务正在添加，cancel和remove任务取决于状态和</span><br><span class="hljs-comment">     * run-after-shutdown参数的需求</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> task the task</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delayedExecute</span><span class="hljs-params">(RunnableScheduledFuture&lt;?&gt; task)</span> &#123;<br>        <span class="hljs-keyword">if</span> (isShutdown())<br>            reject(task);<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">super</span>.getQueue().add(task);<br>            <span class="hljs-keyword">if</span> (!canRunInCurrentRunState(task) &amp;&amp; remove(task))<br>                task.cancel(<span class="hljs-literal">false</span>);<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-comment">// 与 preartCoreThread 相同，但会安排至少一个 线程被启动，即使 corePoolSize 为 0。</span><br>                ensurePrestart();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Requeues a periodic task unless current run state precludes it.</span><br><span class="hljs-comment">     * Same idea as delayedExecute except drops task rather than rejecting.</span><br><span class="hljs-comment">     * 重新将周期性任务入队，除非当前运行状态不允许</span><br><span class="hljs-comment">     * 与delayedExecute想法相同，但会放弃任务而不是拒绝</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> task the task</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">reExecutePeriodic</span><span class="hljs-params">(RunnableScheduledFuture&lt;?&gt; task)</span> &#123;<br>        <span class="hljs-keyword">if</span> (canRunInCurrentRunState(task)) &#123;<br>            <span class="hljs-built_in">super</span>.getQueue().add(task);<br>            <span class="hljs-keyword">if</span> (canRunInCurrentRunState(task) || !remove(task)) &#123;<br>                ensurePrestart();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        task.cancel(<span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Cancels and clears the queue of all tasks that should not be run</span><br><span class="hljs-comment">     * due to shutdown policy.  Invoked within super.shutdown.</span><br><span class="hljs-comment">     * 取消并清除队列中所有因关机策略而不应运行的任务。 在 super.shutdown 中调用。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onShutdown</span><span class="hljs-params">()</span> &#123;<br>        BlockingQueue&lt;Runnable&gt; q = <span class="hljs-built_in">super</span>.getQueue();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">keepDelayed</span> <span class="hljs-operator">=</span><br>                getExecuteExistingDelayedTasksAfterShutdownPolicy();<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">keepPeriodic</span> <span class="hljs-operator">=</span><br>                getContinueExistingPeriodicTasksAfterShutdownPolicy();<br>        <span class="hljs-comment">// Traverse snapshot to avoid iterator exceptions</span><br>        <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> implement and use efficient removeIf</span><br>        <span class="hljs-comment">// super.getQueue().removeIf(...);</span><br>        <span class="hljs-keyword">for</span> (Object e : q.toArray()) &#123;<br>            <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> RunnableScheduledFuture) &#123;<br>                RunnableScheduledFuture&lt;?&gt; t = (RunnableScheduledFuture&lt;?&gt;)e;<br>                <span class="hljs-comment">// 这里有 t.getDelay(NANOSECONDS) &gt; 0 判断条件</span><br>                <span class="hljs-comment">// 不会remove 和 cancel已经开始执行或（正要执行的任务？）</span><br>                <span class="hljs-keyword">if</span> ((t.isPeriodic()<br>                        ? !keepPeriodic<br>                        : (!keepDelayed &amp;&amp; t.getDelay(NANOSECONDS) &gt; <span class="hljs-number">0</span>))<br>                        || t.isCancelled()) &#123; <span class="hljs-comment">// also remove if already cancelled</span><br>                    <span class="hljs-keyword">if</span> (q.remove(t))<br>                        t.cancel(<span class="hljs-literal">false</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        tryTerminate();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Modifies or replaces the task used to execute a runnable.</span><br><span class="hljs-comment">     * This method can be used to override the concrete</span><br><span class="hljs-comment">     * class used for managing internal tasks.</span><br><span class="hljs-comment">     * The default implementation simply returns the given task.</span><br><span class="hljs-comment">     * 修改或替换用于执行 runnable 的任务。</span><br><span class="hljs-comment">     * 该方法可用于覆盖用于管理内部任务的具体类。 默认实现只是返回给定的任务。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> runnable the submitted Runnable</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> task the task created to execute the runnable</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;V&gt; the type of the task&#x27;s result</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> a task that can execute the runnable</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 1.6</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> &lt;V&gt; RunnableScheduledFuture&lt;V&gt; <span class="hljs-title function_">decorateTask</span><span class="hljs-params">(</span><br><span class="hljs-params">            Runnable runnable, RunnableScheduledFuture&lt;V&gt; task)</span> &#123;<br>        <span class="hljs-keyword">return</span> task;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Modifies or replaces the task used to execute a callable.</span><br><span class="hljs-comment">     * This method can be used to override the concrete</span><br><span class="hljs-comment">     * class used for managing internal tasks.</span><br><span class="hljs-comment">     * The default implementation simply returns the given task.</span><br><span class="hljs-comment">     * 修改或替换用于执行 runnable 的任务。</span><br><span class="hljs-comment">     * 该方法可用于覆盖用于管理内部任务的具体类。 默认实现只是返回给定的任务。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> callable the submitted Callable</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> task the task created to execute the callable</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;V&gt; the type of the task&#x27;s result</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> a task that can execute the callable</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 1.6</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">protected</span> &lt;V&gt; RunnableScheduledFuture&lt;V&gt; <span class="hljs-title function_">decorateTask</span><span class="hljs-params">(</span><br><span class="hljs-params">            Callable&lt;V&gt; callable, RunnableScheduledFuture&lt;V&gt; task)</span> &#123;<br>        <span class="hljs-keyword">return</span> task;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The default keep-alive time for pool threads.</span><br><span class="hljs-comment">     * 线程池默认的keep-alive 时间</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * Normally, this value is unused because all pool threads will be</span><br><span class="hljs-comment">     * core threads, but if a user creates a pool with a corePoolSize</span><br><span class="hljs-comment">     * of zero (against our advice), we keep a thread alive as long as</span><br><span class="hljs-comment">     * there are queued tasks.  If the keep alive time is zero (the</span><br><span class="hljs-comment">     * historic value), we end up hot-spinning in getTask, wasting a</span><br><span class="hljs-comment">     * CPU.  But on the other hand, if we set the value too high, and</span><br><span class="hljs-comment">     * users create a one-shot pool which they don&#x27;t cleanly shutdown,</span><br><span class="hljs-comment">     * the pool&#x27;s non-daemon threads will prevent JVM termination.  A</span><br><span class="hljs-comment">     * small but non-zero value (relative to a JVM&#x27;s lifetime) seems</span><br><span class="hljs-comment">     * best.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">DEFAULT_KEEPALIVE_MILLIS</span> <span class="hljs-operator">=</span> <span class="hljs-number">10L</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a new &#123;<span class="hljs-doctag">@code</span> ScheduledThreadPoolExecutor&#125; with the</span><br><span class="hljs-comment">     * given core pool size.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span><br><span class="hljs-comment">     *        if they are idle, unless &#123;<span class="hljs-doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalArgumentException if &#123;<span class="hljs-doctag">@code</span> corePoolSize &lt; 0&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ScheduledThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize)</span> &#123;<br>        <span class="hljs-built_in">super</span>(corePoolSize, Integer.MAX_VALUE,<br>                DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayedWorkQueue</span>());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a new &#123;<span class="hljs-doctag">@code</span> ScheduledThreadPoolExecutor&#125; with the</span><br><span class="hljs-comment">     * given initial parameters.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span><br><span class="hljs-comment">     *        if they are idle, unless &#123;<span class="hljs-doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> threadFactory the factory to use when the executor</span><br><span class="hljs-comment">     *        creates a new thread</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalArgumentException if &#123;<span class="hljs-doctag">@code</span> corePoolSize &lt; 0&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> NullPointerException if &#123;<span class="hljs-doctag">@code</span> threadFactory&#125; is null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ScheduledThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params">                                       ThreadFactory threadFactory)</span> &#123;<br>        <span class="hljs-built_in">super</span>(corePoolSize, Integer.MAX_VALUE,<br>                DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayedWorkQueue</span>(), threadFactory);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a new &#123;<span class="hljs-doctag">@code</span> ScheduledThreadPoolExecutor&#125; with the</span><br><span class="hljs-comment">     * given initial parameters.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span><br><span class="hljs-comment">     *        if they are idle, unless &#123;<span class="hljs-doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler the handler to use when execution is blocked</span><br><span class="hljs-comment">     *        because the thread bounds and queue capacities are reached</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalArgumentException if &#123;<span class="hljs-doctag">@code</span> corePoolSize &lt; 0&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> NullPointerException if &#123;<span class="hljs-doctag">@code</span> handler&#125; is null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ScheduledThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params">                                       RejectedExecutionHandler handler)</span> &#123;<br>        <span class="hljs-built_in">super</span>(corePoolSize, Integer.MAX_VALUE,<br>                DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayedWorkQueue</span>(), handler);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a new &#123;<span class="hljs-doctag">@code</span> ScheduledThreadPoolExecutor&#125; with the</span><br><span class="hljs-comment">     * given initial parameters.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span><br><span class="hljs-comment">     *        if they are idle, unless &#123;<span class="hljs-doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> threadFactory the factory to use when the executor</span><br><span class="hljs-comment">     *        creates a new thread</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> handler the handler to use when execution is blocked</span><br><span class="hljs-comment">     *        because the thread bounds and queue capacities are reached</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalArgumentException if &#123;<span class="hljs-doctag">@code</span> corePoolSize &lt; 0&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> NullPointerException if &#123;<span class="hljs-doctag">@code</span> threadFactory&#125; or</span><br><span class="hljs-comment">     *         &#123;<span class="hljs-doctag">@code</span> handler&#125; is null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ScheduledThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params">                                       ThreadFactory threadFactory,</span><br><span class="hljs-params">                                       RejectedExecutionHandler handler)</span> &#123;<br>        <span class="hljs-built_in">super</span>(corePoolSize, Integer.MAX_VALUE,<br>                DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayedWorkQueue</span>(), threadFactory, handler);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns the nanoTime-based trigger time of a delayed action.</span><br><span class="hljs-comment">     * 返回延迟动作基于 nanoTime 的触发时间。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-title function_">triggerTime</span><span class="hljs-params">(<span class="hljs-type">long</span> delay, TimeUnit unit)</span> &#123;<br>        <span class="hljs-keyword">return</span> triggerTime(unit.toNanos((delay &lt; <span class="hljs-number">0</span>) ? <span class="hljs-number">0</span> : delay));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns the nanoTime-based trigger time of a delayed action.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">long</span> <span class="hljs-title function_">triggerTime</span><span class="hljs-params">(<span class="hljs-type">long</span> delay)</span> &#123;<br>        <span class="hljs-keyword">return</span> System.nanoTime() +<br>                ((delay &lt; (Long.MAX_VALUE &gt;&gt; <span class="hljs-number">1</span>)) ? delay : overflowFree(delay));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Constrains the values of all delays in the queue to be within</span><br><span class="hljs-comment">     * Long.MAX_VALUE of each other, to avoid overflow in compareTo.</span><br><span class="hljs-comment">     * This may occur if a task is eligible to be dequeued, but has</span><br><span class="hljs-comment">     * not yet been, while some other task is added with a delay of</span><br><span class="hljs-comment">     * Long.MAX_VALUE.</span><br><span class="hljs-comment">     * 为了避免 compareTo 中的溢出，队列中所有延迟的值都必须在 Long.MAX_VALUE 范围内。</span><br><span class="hljs-comment">     * 如果一个任务符合出队条件，但尚未出队，而其他任务被添加了一个 Long.MAX_VALUE 的延迟，则可能出现这种情况。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-title function_">overflowFree</span><span class="hljs-params">(<span class="hljs-type">long</span> delay)</span> &#123;<br>        <span class="hljs-type">Delayed</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> (Delayed) <span class="hljs-built_in">super</span>.getQueue().peek();<br>        <span class="hljs-keyword">if</span> (head != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">headDelay</span> <span class="hljs-operator">=</span> head.getDelay(NANOSECONDS);<br>            <span class="hljs-keyword">if</span> (headDelay &lt; <span class="hljs-number">0</span> &amp;&amp; (delay - headDelay &lt; <span class="hljs-number">0</span>))<br>                delay = Long.MAX_VALUE + headDelay;<br>        &#125;<br>        <span class="hljs-keyword">return</span> delay;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> RejectedExecutionException &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> NullPointerException       &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> ScheduledFuture&lt;?&gt; schedule(Runnable command,<br>                                       <span class="hljs-type">long</span> delay,<br>                                       TimeUnit unit) &#123;<br>        <span class="hljs-keyword">if</span> (command == <span class="hljs-literal">null</span> || unit == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>        <span class="hljs-comment">// 这里装饰task其实啥都没做</span><br>        RunnableScheduledFuture&lt;Void&gt; t = decorateTask(command,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScheduledFutureTask</span>&lt;Void&gt;(command, <span class="hljs-literal">null</span>,<br>                        triggerTime(delay, unit),<br>                        sequencer.getAndIncrement()));<br>        delayedExecute(t);<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> RejectedExecutionException &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> NullPointerException       &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;V&gt; ScheduledFuture&lt;V&gt; <span class="hljs-title function_">schedule</span><span class="hljs-params">(Callable&lt;V&gt; callable,</span><br><span class="hljs-params">                                           <span class="hljs-type">long</span> delay,</span><br><span class="hljs-params">                                           TimeUnit unit)</span> &#123;<br>        <span class="hljs-keyword">if</span> (callable == <span class="hljs-literal">null</span> || unit == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>        RunnableScheduledFuture&lt;V&gt; t = decorateTask(callable,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScheduledFutureTask</span>&lt;V&gt;(callable,<br>                        triggerTime(delay, unit),<br>                        sequencer.getAndIncrement()));<br>        delayedExecute(t);<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Submits a periodic action that becomes enabled first after the</span><br><span class="hljs-comment">     * given initial delay, and subsequently with the given period;</span><br><span class="hljs-comment">     * that is, executions will commence after</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> initialDelay&#125;, then &#123;<span class="hljs-doctag">@code</span> initialDelay + period&#125;, then</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> initialDelay + 2 * period&#125;, and so on.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;The sequence of task executions continues indefinitely until</span><br><span class="hljs-comment">     * one of the following exceptional completions occur:</span><br><span class="hljs-comment">     * &lt;ul&gt;</span><br><span class="hljs-comment">     * &lt;li&gt;The task is &#123;<span class="hljs-doctag">@linkplain</span> Future#cancel explicitly cancelled&#125;</span><br><span class="hljs-comment">     * via the returned future.</span><br><span class="hljs-comment">     * &lt;li&gt;Method &#123;<span class="hljs-doctag">@link</span> #shutdown&#125; is called and the &#123;<span class="hljs-doctag">@linkplain</span></span><br><span class="hljs-comment">     * #getContinueExistingPeriodicTasksAfterShutdownPolicy policy on</span><br><span class="hljs-comment">     * whether to continue after shutdown&#125; is not set true, or method</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> #shutdownNow&#125; is called; also resulting in task</span><br><span class="hljs-comment">     * cancellation.</span><br><span class="hljs-comment">     * &lt;li&gt;An execution of the task throws an exception.  In this case</span><br><span class="hljs-comment">     * calling &#123;<span class="hljs-doctag">@link</span> Future#get() get&#125; on the returned future will throw</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> ExecutionException&#125;, holding the exception as its cause.</span><br><span class="hljs-comment">     * &lt;/ul&gt;</span><br><span class="hljs-comment">     * Subsequent executions are suppressed.  Subsequent calls to</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> Future#isDone isDone()&#125; on the returned future will</span><br><span class="hljs-comment">     * return &#123;<span class="hljs-doctag">@code</span> true&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;If any execution of this task takes longer than its period, then</span><br><span class="hljs-comment">     * subsequent executions may start late, but will not concurrently</span><br><span class="hljs-comment">     * execute.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> RejectedExecutionException &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> NullPointerException       &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalArgumentException   &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable command,<br>                                                  <span class="hljs-type">long</span> initialDelay,<br>                                                  <span class="hljs-type">long</span> period,<br>                                                  TimeUnit unit) &#123;<br>        <span class="hljs-keyword">if</span> (command == <span class="hljs-literal">null</span> || unit == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>        <span class="hljs-keyword">if</span> (period &lt;= <span class="hljs-number">0L</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>        ScheduledFutureTask&lt;Void&gt; sft =<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScheduledFutureTask</span>&lt;Void&gt;(command,<br>                        <span class="hljs-literal">null</span>,<br>                        triggerTime(initialDelay, unit),<br>                        unit.toNanos(period),<br>                        sequencer.getAndIncrement());<br>        RunnableScheduledFuture&lt;Void&gt; t = decorateTask(command, sft);<br>        sft.outerTask = t;<br>        delayedExecute(t);<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Submits a periodic action that becomes enabled first after the</span><br><span class="hljs-comment">     * given initial delay, and subsequently with the given delay</span><br><span class="hljs-comment">     * between the termination of one execution and the commencement of</span><br><span class="hljs-comment">     * the next.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;The sequence of task executions continues indefinitely until</span><br><span class="hljs-comment">     * one of the following exceptional completions occur:</span><br><span class="hljs-comment">     * &lt;ul&gt;</span><br><span class="hljs-comment">     * &lt;li&gt;The task is &#123;<span class="hljs-doctag">@linkplain</span> Future#cancel explicitly cancelled&#125;</span><br><span class="hljs-comment">     * via the returned future.</span><br><span class="hljs-comment">     * &lt;li&gt;Method &#123;<span class="hljs-doctag">@link</span> #shutdown&#125; is called and the &#123;<span class="hljs-doctag">@linkplain</span></span><br><span class="hljs-comment">     * #getContinueExistingPeriodicTasksAfterShutdownPolicy policy on</span><br><span class="hljs-comment">     * whether to continue after shutdown&#125; is not set true, or method</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> #shutdownNow&#125; is called; also resulting in task</span><br><span class="hljs-comment">     * cancellation.</span><br><span class="hljs-comment">     * &lt;li&gt;An execution of the task throws an exception.  In this case</span><br><span class="hljs-comment">     * calling &#123;<span class="hljs-doctag">@link</span> Future#get() get&#125; on the returned future will throw</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> ExecutionException&#125;, holding the exception as its cause.</span><br><span class="hljs-comment">     * &lt;/ul&gt;</span><br><span class="hljs-comment">     * Subsequent executions are suppressed.  Subsequent calls to</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> Future#isDone isDone()&#125; on the returned future will</span><br><span class="hljs-comment">     * return &#123;<span class="hljs-doctag">@code</span> true&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> RejectedExecutionException &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> NullPointerException       &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IllegalArgumentException   &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> ScheduledFuture&lt;?&gt; scheduleWithFixedDelay(Runnable command,<br>                                                     <span class="hljs-type">long</span> initialDelay,<br>                                                     <span class="hljs-type">long</span> delay,<br>                                                     TimeUnit unit) &#123;<br>        <span class="hljs-keyword">if</span> (command == <span class="hljs-literal">null</span> || unit == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>        <span class="hljs-keyword">if</span> (delay &lt;= <span class="hljs-number">0L</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>        ScheduledFutureTask&lt;Void&gt; sft =<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScheduledFutureTask</span>&lt;Void&gt;(command,<br>                        <span class="hljs-literal">null</span>,<br>                        triggerTime(initialDelay, unit),<br>                        -unit.toNanos(delay),<br>                        sequencer.getAndIncrement());<br>        RunnableScheduledFuture&lt;Void&gt; t = decorateTask(command, sft);<br>        sft.outerTask = t;<br>        delayedExecute(t);<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Executes &#123;<span class="hljs-doctag">@code</span> command&#125; with zero required delay.</span><br><span class="hljs-comment">     * This has effect equivalent to</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> #schedule(Runnable,long,TimeUnit) schedule(command, 0, anyUnit)&#125;.</span><br><span class="hljs-comment">     * Note that inspections of the queue and of the list returned by</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> shutdownNow&#125; will access the zero-delayed</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@link</span> ScheduledFuture&#125;, not the &#123;<span class="hljs-doctag">@code</span> command&#125; itself.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;A consequence of the use of &#123;<span class="hljs-doctag">@code</span> ScheduledFuture&#125; objects is</span><br><span class="hljs-comment">     * that &#123;<span class="hljs-doctag">@link</span> ThreadPoolExecutor#afterExecute afterExecute&#125; is always</span><br><span class="hljs-comment">     * called with a null second &#123;<span class="hljs-doctag">@code</span> Throwable&#125; argument, even if the</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> command&#125; terminated abruptly.  Instead, the &#123;<span class="hljs-doctag">@code</span> Throwable&#125;</span><br><span class="hljs-comment">     * thrown by such a task can be obtained via &#123;<span class="hljs-doctag">@link</span> Future#get&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> RejectedExecutionException at discretion of</span><br><span class="hljs-comment">     *         &#123;<span class="hljs-doctag">@code</span> RejectedExecutionHandler&#125;, if the task</span><br><span class="hljs-comment">     *         cannot be accepted for execution because the</span><br><span class="hljs-comment">     *         executor has been shut down</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> NullPointerException &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(Runnable command)</span> &#123;<br>        schedule(command, <span class="hljs-number">0</span>, NANOSECONDS);<br>    &#125;<br><br>    <span class="hljs-comment">// Override AbstractExecutorService methods</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> RejectedExecutionException &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> NullPointerException       &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;<br>        <span class="hljs-keyword">return</span> schedule(task, <span class="hljs-number">0</span>, NANOSECONDS);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> RejectedExecutionException &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> NullPointerException       &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; Future&lt;T&gt; <span class="hljs-title function_">submit</span><span class="hljs-params">(Runnable task, T result)</span> &#123;<br>        <span class="hljs-keyword">return</span> schedule(Executors.callable(task, result), <span class="hljs-number">0</span>, NANOSECONDS);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> RejectedExecutionException &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> NullPointerException       &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; Future&lt;T&gt; <span class="hljs-title function_">submit</span><span class="hljs-params">(Callable&lt;T&gt; task)</span> &#123;<br>        <span class="hljs-keyword">return</span> schedule(task, <span class="hljs-number">0</span>, NANOSECONDS);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Sets the policy on whether to continue executing existing</span><br><span class="hljs-comment">     * periodic tasks even when this executor has been &#123;<span class="hljs-doctag">@code</span> shutdown&#125;.</span><br><span class="hljs-comment">     * In this case, executions will continue until &#123;<span class="hljs-doctag">@code</span> shutdownNow&#125;</span><br><span class="hljs-comment">     * or the policy is set to &#123;<span class="hljs-doctag">@code</span> false&#125; when already shutdown.</span><br><span class="hljs-comment">     * This value is by default &#123;<span class="hljs-doctag">@code</span> false&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value if &#123;<span class="hljs-doctag">@code</span> true&#125;, continue after shutdown, else don&#x27;t</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> #getContinueExistingPeriodicTasksAfterShutdownPolicy</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setContinueExistingPeriodicTasksAfterShutdownPolicy</span><span class="hljs-params">(<span class="hljs-type">boolean</span> value)</span> &#123;<br>        continueExistingPeriodicTasksAfterShutdown = value;<br>        <span class="hljs-keyword">if</span> (!value &amp;&amp; isShutdown())<br>            onShutdown();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Gets the policy on whether to continue executing existing</span><br><span class="hljs-comment">     * periodic tasks even when this executor has been &#123;<span class="hljs-doctag">@code</span> shutdown&#125;.</span><br><span class="hljs-comment">     * In this case, executions will continue until &#123;<span class="hljs-doctag">@code</span> shutdownNow&#125;</span><br><span class="hljs-comment">     * or the policy is set to &#123;<span class="hljs-doctag">@code</span> false&#125; when already shutdown.</span><br><span class="hljs-comment">     * This value is by default &#123;<span class="hljs-doctag">@code</span> false&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> true&#125; if will continue after shutdown</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> #setContinueExistingPeriodicTasksAfterShutdownPolicy</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">getContinueExistingPeriodicTasksAfterShutdownPolicy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> continueExistingPeriodicTasksAfterShutdown;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Sets the policy on whether to execute existing delayed</span><br><span class="hljs-comment">     * tasks even when this executor has been &#123;<span class="hljs-doctag">@code</span> shutdown&#125;.</span><br><span class="hljs-comment">     * In this case, these tasks will only terminate upon</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> shutdownNow&#125;, or after setting the policy to</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> false&#125; when already shutdown.</span><br><span class="hljs-comment">     * This value is by default &#123;<span class="hljs-doctag">@code</span> true&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value if &#123;<span class="hljs-doctag">@code</span> true&#125;, execute after shutdown, else don&#x27;t</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> #getExecuteExistingDelayedTasksAfterShutdownPolicy</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setExecuteExistingDelayedTasksAfterShutdownPolicy</span><span class="hljs-params">(<span class="hljs-type">boolean</span> value)</span> &#123;<br>        executeExistingDelayedTasksAfterShutdown = value;<br>        <span class="hljs-keyword">if</span> (!value &amp;&amp; isShutdown())<br>            onShutdown();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Gets the policy on whether to execute existing delayed</span><br><span class="hljs-comment">     * tasks even when this executor has been &#123;<span class="hljs-doctag">@code</span> shutdown&#125;.</span><br><span class="hljs-comment">     * In this case, these tasks will only terminate upon</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> shutdownNow&#125;, or after setting the policy to</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> false&#125; when already shutdown.</span><br><span class="hljs-comment">     * This value is by default &#123;<span class="hljs-doctag">@code</span> true&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> true&#125; if will execute after shutdown</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> #setExecuteExistingDelayedTasksAfterShutdownPolicy</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">getExecuteExistingDelayedTasksAfterShutdownPolicy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> executeExistingDelayedTasksAfterShutdown;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Sets the policy on whether cancelled tasks should be immediately</span><br><span class="hljs-comment">     * removed from the work queue at time of cancellation.  This value is</span><br><span class="hljs-comment">     * by default &#123;<span class="hljs-doctag">@code</span> false&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value if &#123;<span class="hljs-doctag">@code</span> true&#125;, remove on cancellation, else don&#x27;t</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> #getRemoveOnCancelPolicy</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 1.7</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRemoveOnCancelPolicy</span><span class="hljs-params">(<span class="hljs-type">boolean</span> value)</span> &#123;<br>        removeOnCancel = value;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Gets the policy on whether cancelled tasks should be immediately</span><br><span class="hljs-comment">     * removed from the work queue at time of cancellation.  This value is</span><br><span class="hljs-comment">     * by default &#123;<span class="hljs-doctag">@code</span> false&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-doctag">@code</span> true&#125; if cancelled tasks are immediately removed</span><br><span class="hljs-comment">     *         from the queue</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@see</span> #setRemoveOnCancelPolicy</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 1.7</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">getRemoveOnCancelPolicy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> removeOnCancel;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Initiates an orderly shutdown in which previously submitted</span><br><span class="hljs-comment">     * tasks are executed, but no new tasks will be accepted.</span><br><span class="hljs-comment">     * Invocation has no additional effect if already shut down.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;This method does not wait for previously submitted tasks to</span><br><span class="hljs-comment">     * complete execution.  Use &#123;<span class="hljs-doctag">@link</span> #awaitTermination awaitTermination&#125;</span><br><span class="hljs-comment">     * to do that.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;If the &#123;<span class="hljs-doctag">@code</span> ExecuteExistingDelayedTasksAfterShutdownPolicy&#125;</span><br><span class="hljs-comment">     * has been set &#123;<span class="hljs-doctag">@code</span> false&#125;, existing delayed tasks whose delays</span><br><span class="hljs-comment">     * have not yet elapsed are cancelled.  And unless the &#123;<span class="hljs-doctag">@code</span></span><br><span class="hljs-comment">     * ContinueExistingPeriodicTasksAfterShutdownPolicy&#125; has been set</span><br><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> true&#125;, future executions of existing periodic tasks will</span><br><span class="hljs-comment">     * be cancelled.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> SecurityException &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shutdown</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.shutdown();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Attempts to stop all actively executing tasks, halts the</span><br><span class="hljs-comment">     * processing of waiting tasks, and returns a list of the tasks</span><br><span class="hljs-comment">     * that were awaiting execution. These tasks are drained (removed)</span><br><span class="hljs-comment">     * from the task queue upon return from this method.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;This method does not wait for actively executing tasks to</span><br><span class="hljs-comment">     * terminate.  Use &#123;<span class="hljs-doctag">@link</span> #awaitTermination awaitTermination&#125; to</span><br><span class="hljs-comment">     * do that.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;There are no guarantees beyond best-effort attempts to stop</span><br><span class="hljs-comment">     * processing actively executing tasks.  This implementation</span><br><span class="hljs-comment">     * interrupts tasks via &#123;<span class="hljs-doctag">@link</span> Thread#interrupt&#125;; any task that</span><br><span class="hljs-comment">     * fails to respond to interrupts may never terminate.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> list of tasks that never commenced execution.</span><br><span class="hljs-comment">     *         Each element of this list is a &#123;<span class="hljs-doctag">@link</span> ScheduledFuture&#125;.</span><br><span class="hljs-comment">     *         For tasks submitted via one of the &#123;<span class="hljs-doctag">@code</span> schedule&#125;</span><br><span class="hljs-comment">     *         methods, the element will be identical to the returned</span><br><span class="hljs-comment">     *         &#123;<span class="hljs-doctag">@code</span> ScheduledFuture&#125;.  For tasks submitted using</span><br><span class="hljs-comment">     *         &#123;<span class="hljs-doctag">@link</span> #execute execute&#125;, the element will be a</span><br><span class="hljs-comment">     *         zero-delay &#123;<span class="hljs-doctag">@code</span> ScheduledFuture&#125;.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> SecurityException &#123;<span class="hljs-doctag">@inheritDoc</span>&#125;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;Runnable&gt; <span class="hljs-title function_">shutdownNow</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.shutdownNow();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns the task queue used by this executor.  Access to the</span><br><span class="hljs-comment">     * task queue is intended primarily for debugging and monitoring.</span><br><span class="hljs-comment">     * This queue may be in active use.  Retrieving the task queue</span><br><span class="hljs-comment">     * does not prevent queued tasks from executing.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;Each element of this queue is a &#123;<span class="hljs-doctag">@link</span> ScheduledFuture&#125;.</span><br><span class="hljs-comment">     * For tasks submitted via one of the &#123;<span class="hljs-doctag">@code</span> schedule&#125; methods, the</span><br><span class="hljs-comment">     * element will be identical to the returned &#123;<span class="hljs-doctag">@code</span> ScheduledFuture&#125;.</span><br><span class="hljs-comment">     * For tasks submitted using &#123;<span class="hljs-doctag">@link</span> #execute execute&#125;, the element</span><br><span class="hljs-comment">     * will be a zero-delay &#123;<span class="hljs-doctag">@code</span> ScheduledFuture&#125;.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;Iteration over this queue is &lt;em&gt;not&lt;/em&gt; guaranteed to traverse</span><br><span class="hljs-comment">     * tasks in the order in which they will execute.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the task queue</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> BlockingQueue&lt;Runnable&gt; <span class="hljs-title function_">getQueue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.getQueue();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Specialized delay queue. To mesh with TPE declarations, this</span><br><span class="hljs-comment">     * class must be declared as a BlockingQueue&lt;Runnable&gt; even though</span><br><span class="hljs-comment">     * it can only hold RunnableScheduledFutures.</span><br><span class="hljs-comment">     * 专用延迟队列。为了与 TPE 声明保持一致，该类必须声明为 BlockingQueue&lt;Runnable&gt; 类，</span><br><span class="hljs-comment">     * 即使 它只能容纳 RunnableScheduledFutures。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DelayedWorkQueue</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueue</span>&lt;Runnable&gt;<br>            <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BlockingQueue</span>&lt;Runnable&gt; &#123;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * A DelayedWorkQueue is based on a heap-based data structure</span><br><span class="hljs-comment">         * like those in DelayQueue and PriorityQueue, except that</span><br><span class="hljs-comment">         * every ScheduledFutureTask also records its index into the</span><br><span class="hljs-comment">         * heap array. This eliminates the need to find a task upon</span><br><span class="hljs-comment">         * cancellation, greatly speeding up removal (down from O(n)</span><br><span class="hljs-comment">         * to O(log n)), and reducing garbage retention that would</span><br><span class="hljs-comment">         * otherwise occur by waiting for the element to rise to top</span><br><span class="hljs-comment">         * before clearing. But because the queue may also hold</span><br><span class="hljs-comment">         * RunnableScheduledFutures that are not ScheduledFutureTasks,</span><br><span class="hljs-comment">         * we are not guaranteed to have such indices available, in</span><br><span class="hljs-comment">         * which case we fall back to linear search. (We expect that</span><br><span class="hljs-comment">         * most tasks will not be decorated, and that the faster cases</span><br><span class="hljs-comment">         * will be much more common.)</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * All heap operations must record index changes -- mainly</span><br><span class="hljs-comment">         * within siftUp and siftDown. Upon removal, a task&#x27;s</span><br><span class="hljs-comment">         * heapIndex is set to -1. Note that ScheduledFutureTasks can</span><br><span class="hljs-comment">         * appear at most once in the queue (this need not be true for</span><br><span class="hljs-comment">         * other kinds of tasks or work queues), so are uniquely</span><br><span class="hljs-comment">         * identified by heapIndex.</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * DelayedWorkQueue 基于堆数据结构，就像 DelayQueue 和 PriorityQueue 中的数据结构一样，</span><br><span class="hljs-comment">         * 只是每个 ScheduledFutureTask 也将其索引记录到堆数组中。</span><br><span class="hljs-comment">         * 这样就不需要在取消任务时查找任务，从而大大加快了移除速度（从 O(n) 降至 O(log n)），</span><br><span class="hljs-comment">         * 并减少了因等待元素升至顶端后再清除而产生的垃圾滞留。</span><br><span class="hljs-comment">         * 但是，由于队列中也可能包含不是 ScheduledFutureTasks 的 RunnableScheduledFutures，</span><br><span class="hljs-comment">         * 我们不能保证一定会有这样的索引，在这种情况下，我们就会退回到线性搜索。</span><br><span class="hljs-comment">         * (我们预计大多数任务不会被装饰，而速度更快的情况将更为常见）。</span><br><span class="hljs-comment">         * 所有堆操作都必须记录索引变化 -- 主要是在 siftUp 和 siftDown 中。</span><br><span class="hljs-comment">         * 删除时，任务的 heapIndex 将被设置为-1。</span><br><span class="hljs-comment">         * 请注意，ScheduledFutureTasks 在队列中最多只能出现一次（其他类型的任务或工作队列则不需要如此），</span><br><span class="hljs-comment">         * 因此由 heapIndex 唯一标识。由 heapIndex 唯一标识。</span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">INITIAL_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<br>        <span class="hljs-keyword">private</span> RunnableScheduledFuture&lt;?&gt;[] queue =<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">RunnableScheduledFuture</span>&lt;?&gt;[INITIAL_CAPACITY];<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Thread designated to wait for the task at the head of the</span><br><span class="hljs-comment">         * queue.  This variant of the Leader-Follower pattern</span><br><span class="hljs-comment">         * (http://www.cs.wustl.edu/~schmidt/POSA/POSA2/) serves to</span><br><span class="hljs-comment">         * minimize unnecessary timed waiting.  When a thread becomes</span><br><span class="hljs-comment">         * the leader, it waits only for the next delay to elapse, but</span><br><span class="hljs-comment">         * other threads await indefinitely.  The leader thread must</span><br><span class="hljs-comment">         * signal some other thread before returning from take() or</span><br><span class="hljs-comment">         * poll(...), unless some other thread becomes leader in the</span><br><span class="hljs-comment">         * interim.  Whenever the head of the queue is replaced with a</span><br><span class="hljs-comment">         * task with an earlier expiration time, the leader field is</span><br><span class="hljs-comment">         * invalidated by being reset to null, and some waiting</span><br><span class="hljs-comment">         * thread, but not necessarily the current leader, is</span><br><span class="hljs-comment">         * signalled.  So waiting threads must be prepared to acquire</span><br><span class="hljs-comment">         * and lose leadership while waiting.</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * 指定线程等待队列头部的任务。</span><br><span class="hljs-comment">         * 这种 &quot;领导者-追随者 &quot;模式（http://www.cs.wustl.edu/~schmidt/POSA/POSA2/）的变体</span><br><span class="hljs-comment">         * 可最大限度地减少不必要的定时等待。</span><br><span class="hljs-comment">         * 当一个线程成为领导者时，它只等待下一次延迟的到来，而其他线程则无限期地等待。</span><br><span class="hljs-comment">         * 在从 take() 或 poll(...) 返回之前，领导线程必须向其他线程发出信号，除非其他线程在此期间成为领导线程。</span><br><span class="hljs-comment">         * 每当队列的头被一个到期时间更早的任务取代时，领导者字段就会被重置为空而失效，</span><br><span class="hljs-comment">         * 同时一些等待线程（但不一定是当前的领导者）会收到信号。</span><br><span class="hljs-comment">         * 因此，等待线程必须做好在等待期间获得和失去领导者的准备。</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> Thread leader;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Condition signalled when a newer task becomes available at the</span><br><span class="hljs-comment">         * head of the queue or a new thread may need to become leader.</span><br><span class="hljs-comment">         * 当队列头部有新任务可用或新线程需要成为领导时，就会发出信号。</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">available</span> <span class="hljs-operator">=</span> lock.newCondition();<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Sets f&#x27;s heapIndex if it is a ScheduledFutureTask.</span><br><span class="hljs-comment">         * 如果 f 是 ScheduledFutureTask，则设置其 heapIndex。</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setIndex</span><span class="hljs-params">(RunnableScheduledFuture&lt;?&gt; f, <span class="hljs-type">int</span> idx)</span> &#123;<br>            <span class="hljs-keyword">if</span> (f <span class="hljs-keyword">instanceof</span> ScheduledFutureTask)<br>                ((ScheduledFutureTask)f).heapIndex = idx;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Sifts element added at bottom up to its heap-ordered spot.</span><br><span class="hljs-comment">         * Call only when holding lock.</span><br><span class="hljs-comment">         * 将底部添加的元素上移到堆中有序的位置。仅在持有锁时调用</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">siftUp</span><span class="hljs-params">(<span class="hljs-type">int</span> k, RunnableScheduledFuture&lt;?&gt; key)</span> &#123;<br>            <span class="hljs-keyword">while</span> (k &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> (k - <span class="hljs-number">1</span>) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>                RunnableScheduledFuture&lt;?&gt; e = queue[parent];<br>                <span class="hljs-keyword">if</span> (key.compareTo(e) &gt;= <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">break</span>;<br>                queue[k] = e;<br>                setIndex(e, k);<br>                k = parent;<br>            &#125;<br>            queue[k] = key;<br>            setIndex(key, k);<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Sifts element added at top down to its heap-ordered spot.</span><br><span class="hljs-comment">         * Call only when holding lock.</span><br><span class="hljs-comment">         * 将顶部添加的元素下移到堆中有序的位置。仅在持有锁时调用</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">siftDown</span><span class="hljs-params">(<span class="hljs-type">int</span> k, RunnableScheduledFuture&lt;?&gt; key)</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">half</span> <span class="hljs-operator">=</span> size &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (k &lt; half) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> (k &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<br>                RunnableScheduledFuture&lt;?&gt; c = queue[child];<br>                <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> child + <span class="hljs-number">1</span>;<br>                <span class="hljs-comment">// 除了边界处，应该一般都满足下面的条件</span><br>                <span class="hljs-keyword">if</span> (right &lt; size &amp;&amp; c.compareTo(queue[right]) &gt; <span class="hljs-number">0</span>)<br>                    c = queue[child = right];<br>                <span class="hljs-keyword">if</span> (key.compareTo(c) &lt;= <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">break</span>;<br>                queue[k] = c;<br>                setIndex(c, k);<br>                k = child;<br>            &#125;<br>            queue[k] = key;<br>            setIndex(key, k);<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Resizes the heap array.  Call only when holding lock.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> queue.length;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>); <span class="hljs-comment">// grow 50%</span><br>            <span class="hljs-keyword">if</span> (newCapacity &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>                newCapacity = Integer.MAX_VALUE;<br>            queue = Arrays.copyOf(queue, newCapacity);<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Finds index of given object, or -1 if absent.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexOf</span><span class="hljs-params">(Object x)</span> &#123;<br>            <span class="hljs-keyword">if</span> (x != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (x <span class="hljs-keyword">instanceof</span> ScheduledFutureTask) &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> ((ScheduledFutureTask) x).heapIndex;<br>                    <span class="hljs-comment">// Sanity check; x could conceivably be a</span><br>                    <span class="hljs-comment">// ScheduledFutureTask from some other pool.</span><br>                    <span class="hljs-comment">// 理智检查；x有可能是来自其他任务池的ScheduledFutureTask。</span><br>                    <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">0</span> &amp;&amp; i &lt; size &amp;&amp; queue[i] == x)<br>                        <span class="hljs-keyword">return</span> i;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++)<br>                        <span class="hljs-keyword">if</span> (x.equals(queue[i]))<br>                            <span class="hljs-keyword">return</span> i;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(Object x)</span> &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">return</span> indexOf(x) != -<span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Object x)</span> &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> indexOf(x);<br>                <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>                setIndex(queue[i], -<span class="hljs-number">1</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> --size;<br>                RunnableScheduledFuture&lt;?&gt; replacement = queue[s];<br>                queue[s] = <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">if</span> (s != i) &#123;<br>                    siftDown(i, replacement);<br>                    <span class="hljs-comment">// 没有下移，上移</span><br>                    <span class="hljs-keyword">if</span> (queue[i] == replacement)<br>                        siftUp(i, replacement);<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">return</span> size;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> size() == <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">remainingCapacity</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> Integer.MAX_VALUE;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> RunnableScheduledFuture&lt;?&gt; peek() &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">return</span> queue[<span class="hljs-number">0</span>];<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 往队列中添加元素</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> x the element to add</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(Runnable x)</span> &#123;<br>            <span class="hljs-keyword">if</span> (x == <span class="hljs-literal">null</span>)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>            RunnableScheduledFuture&lt;?&gt; e = (RunnableScheduledFuture&lt;?&gt;)x;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> size;<br>                <span class="hljs-keyword">if</span> (i &gt;= queue.length)<br>                    grow();<br>                size = i + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>                    queue[<span class="hljs-number">0</span>] = e;<br>                    setIndex(e, <span class="hljs-number">0</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    siftUp(i, e);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (queue[<span class="hljs-number">0</span>] == e) &#123;<br>                    leader = <span class="hljs-literal">null</span>;<br>                    available.signal();<br>                &#125;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(Runnable e)</span> &#123;<br>            offer(e);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Runnable e)</span> &#123;<br>            <span class="hljs-keyword">return</span> offer(e);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(Runnable e, <span class="hljs-type">long</span> timeout, TimeUnit unit)</span> &#123;<br>            <span class="hljs-keyword">return</span> offer(e);<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Performs common bookkeeping for poll and take: Replaces</span><br><span class="hljs-comment">         * first element with last and sifts it down.  Call only when</span><br><span class="hljs-comment">         * holding lock.</span><br><span class="hljs-comment">         * 为轮询和取值执行普通簿记： 将第一个元素替换为最后一个元素并向下筛选。仅在持有锁时调用。</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@param</span> f the task to remove and return</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> RunnableScheduledFuture&lt;?&gt; finishPoll(RunnableScheduledFuture&lt;?&gt; f) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> --size;<br>            RunnableScheduledFuture&lt;?&gt; x = queue[s];<br>            queue[s] = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">if</span> (s != <span class="hljs-number">0</span>)<br>                siftDown(<span class="hljs-number">0</span>, x);<br>            setIndex(f, -<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> f;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> RunnableScheduledFuture&lt;?&gt; poll() &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                RunnableScheduledFuture&lt;?&gt; first = queue[<span class="hljs-number">0</span>];<br>                <span class="hljs-keyword">return</span> (first == <span class="hljs-literal">null</span> || first.getDelay(NANOSECONDS) &gt; <span class="hljs-number">0</span>)<br>                        ? <span class="hljs-literal">null</span><br>                        : finishPoll(first);<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> RunnableScheduledFuture&lt;?&gt; take() <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>            lock.lockInterruptibly();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">for</span> (;;) &#123;<br>                    RunnableScheduledFuture&lt;?&gt; first = queue[<span class="hljs-number">0</span>];<br>                    <span class="hljs-keyword">if</span> (first == <span class="hljs-literal">null</span>)<br>                        available.await();<br>                    <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-type">long</span> <span class="hljs-variable">delay</span> <span class="hljs-operator">=</span> first.getDelay(NANOSECONDS);<br>                        <span class="hljs-keyword">if</span> (delay &lt;= <span class="hljs-number">0L</span>)<br>                            <span class="hljs-keyword">return</span> finishPoll(first);<br>                        first = <span class="hljs-literal">null</span>; <span class="hljs-comment">// don&#x27;t retain ref while waiting</span><br>                        <span class="hljs-keyword">if</span> (leader != <span class="hljs-literal">null</span>)<br>                            available.await();<br>                        <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-type">Thread</span> <span class="hljs-variable">thisThread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>                            leader = thisThread;<br>                            <span class="hljs-keyword">try</span> &#123;<br>                                available.awaitNanos(delay);<br>                            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                                <span class="hljs-keyword">if</span> (leader == thisThread)<br>                                    leader = <span class="hljs-literal">null</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">if</span> (leader == <span class="hljs-literal">null</span> &amp;&amp; queue[<span class="hljs-number">0</span>] != <span class="hljs-literal">null</span>)<br>                    available.signal();<br>                lock.unlock();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> RunnableScheduledFuture&lt;?&gt; poll(<span class="hljs-type">long</span> timeout, TimeUnit unit)<br>                <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">nanos</span> <span class="hljs-operator">=</span> unit.toNanos(timeout);<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>            lock.lockInterruptibly();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">for</span> (;;) &#123;<br>                    RunnableScheduledFuture&lt;?&gt; first = queue[<span class="hljs-number">0</span>];<br>                    <span class="hljs-keyword">if</span> (first == <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-keyword">if</span> (nanos &lt;= <span class="hljs-number">0L</span>)<br>                            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                        <span class="hljs-keyword">else</span><br>                            nanos = available.awaitNanos(nanos);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-type">long</span> <span class="hljs-variable">delay</span> <span class="hljs-operator">=</span> first.getDelay(NANOSECONDS);<br>                        <span class="hljs-keyword">if</span> (delay &lt;= <span class="hljs-number">0L</span>)<br>                            <span class="hljs-keyword">return</span> finishPoll(first);<br>                        <span class="hljs-keyword">if</span> (nanos &lt;= <span class="hljs-number">0L</span>)<br>                            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>                        first = <span class="hljs-literal">null</span>; <span class="hljs-comment">// don&#x27;t retain ref while waiting</span><br>                        <span class="hljs-keyword">if</span> (nanos &lt; delay || leader != <span class="hljs-literal">null</span>)<br>                            nanos = available.awaitNanos(nanos);<br>                        <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-type">Thread</span> <span class="hljs-variable">thisThread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>                            leader = thisThread;<br>                            <span class="hljs-keyword">try</span> &#123;<br>                                <span class="hljs-type">long</span> <span class="hljs-variable">timeLeft</span> <span class="hljs-operator">=</span> available.awaitNanos(delay);<br>                                nanos -= delay - timeLeft;<br>                            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                                <span class="hljs-keyword">if</span> (leader == thisThread)<br>                                    leader = <span class="hljs-literal">null</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-keyword">if</span> (leader == <span class="hljs-literal">null</span> &amp;&amp; queue[<span class="hljs-number">0</span>] != <span class="hljs-literal">null</span>)<br>                    available.signal();<br>                lock.unlock();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>                    RunnableScheduledFuture&lt;?&gt; t = queue[i];<br>                    <span class="hljs-keyword">if</span> (t != <span class="hljs-literal">null</span>) &#123;<br>                        queue[i] = <span class="hljs-literal">null</span>;<br>                        setIndex(t, -<span class="hljs-number">1</span>);<br>                    &#125;<br>                &#125;<br>                size = <span class="hljs-number">0</span>;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">drainTo</span><span class="hljs-params">(Collection&lt;? <span class="hljs-built_in">super</span> Runnable&gt; c)</span> &#123;<br>            <span class="hljs-keyword">return</span> drainTo(c, Integer.MAX_VALUE);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">drainTo</span><span class="hljs-params">(Collection&lt;? <span class="hljs-built_in">super</span> Runnable&gt; c, <span class="hljs-type">int</span> maxElements)</span> &#123;<br>            Objects.requireNonNull(c);<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-built_in">this</span>)<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>            <span class="hljs-keyword">if</span> (maxElements &lt;= <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (RunnableScheduledFuture&lt;?&gt; first;<br>                     n &lt; maxElements<br>                             &amp;&amp; (first = queue[<span class="hljs-number">0</span>]) != <span class="hljs-literal">null</span><br>                             &amp;&amp; first.getDelay(NANOSECONDS) &lt;= <span class="hljs-number">0</span>;) &#123;<br>                    c.add(first);   <span class="hljs-comment">// In this order, in case add() throws.</span><br>                    finishPoll(first);<br>                    ++n;<br>                &#125;<br>                <span class="hljs-keyword">return</span> n;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Object[] toArray() &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">return</span> Arrays.copyOf(queue, size, Object[].class);<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>        <span class="hljs-keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (a.length &lt; size)<br>                    <span class="hljs-keyword">return</span> (T[]) Arrays.copyOf(queue, size, a.getClass());<br>                System.arraycopy(queue, <span class="hljs-number">0</span>, a, <span class="hljs-number">0</span>, size);<br>                <span class="hljs-keyword">if</span> (a.length &gt; size)<br>                    a[size] = <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">return</span> a;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Iterator&lt;Runnable&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Itr</span>(Arrays.copyOf(queue, size));<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Snapshot iterator that works off copy of underlying q array.</span><br><span class="hljs-comment">         * 从底层 q 数组的副本开始工作的快照迭代器。</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Itr</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span>&lt;Runnable&gt; &#123;<br>            <span class="hljs-keyword">final</span> RunnableScheduledFuture&lt;?&gt;[] array;<br>            <span class="hljs-type">int</span> cursor;        <span class="hljs-comment">// index of next element to return; initially 0</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">lastRet</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;  <span class="hljs-comment">// index of last element returned; -1 if no such</span><br><br>            Itr(RunnableScheduledFuture&lt;?&gt;[] array) &#123;<br>                <span class="hljs-built_in">this</span>.array = array;<br>            &#125;<br><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> cursor &lt; array.length;<br>            &#125;<br><br>            <span class="hljs-keyword">public</span> Runnable <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">if</span> (cursor &gt;= array.length)<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoSuchElementException</span>();<br>                <span class="hljs-keyword">return</span> array[lastRet = cursor++];<br>            &#125;<br><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">if</span> (lastRet &lt; <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>();<br>                DelayedWorkQueue.<span class="hljs-built_in">this</span>.remove(array[lastRet]);<br>                lastRet = -<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JEP-444:虚拟线程</title>
    <link href="/2023/10/03/JEP-444-%E8%99%9A%E6%8B%9F%E7%BA%BF%E7%A8%8B/"/>
    <url>/2023/10/03/JEP-444-%E8%99%9A%E6%8B%9F%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="JEP-444-虚拟线程"><a href="#JEP-444-虚拟线程" class="headerlink" title="JEP 444 虚拟线程"></a><a href="https://openjdk.org/jeps/444">JEP 444 虚拟线程</a></h3><table><thead><tr><th>Author</th><th>Ron Pressler &amp; Alan Bateman</th></tr></thead><tbody><tr><td>Owner</td><td>Alan Bateman</td></tr><tr><td>Type</td><td>Feature</td></tr><tr><td>Scope</td><td>SE</td></tr><tr><td>Status</td><td>Closed &#x2F; Delivered</td></tr><tr><td>Release</td><td>21</td></tr><tr><td>Component</td><td>core-libs</td></tr><tr><td>Discussion</td><td>loom dash dev at openjdk dot org</td></tr><tr><td>Relates to</td><td><a href="https://openjdk.org/jeps/436">JEP 436: Virtual Threads (Second Preview)</a></td></tr><tr><td>Reviewed by</td><td>Alex Buckley</td></tr><tr><td>Endorsed by</td><td>Brian Goetz</td></tr><tr><td>Created</td><td>2023&#x2F;03&#x2F;06 18:00</td></tr><tr><td>Updated</td><td>2023&#x2F;09&#x2F;22 16:54</td></tr><tr><td>Issue</td><td><a href="https://bugs.openjdk.org/browse/JDK-8303683">8303683</a></td></tr></tbody></table><h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>​ 将虚拟线程引入Java平台。虚拟线程是轻量级线程，可以显著减少编写、维护和观察高吞吐量并发应用程序的工作量</p><h4 id="History"><a href="#History" class="headerlink" title="History"></a>History</h4><p>​ 虚拟线程由JEP 425提议作为预览特性，并首先在JDK 19中提供。为了留出时间进行反馈并获得更多体验，JEP 436再次提议将虚拟线程作为预览特性（feature）并在JDK 20中提供。根据开发者反馈，此JEP建议在JDK 21中完成虚拟线程，并对JDK20进行以下更改：</p><ul><li>虚拟线程现在始终支持线程局部变量。与预览版本中一样，不再允许创建不能持有线程局部变量的虚拟线程。对线程局部变量的有保证的支持确保了更多现有库可以在虚拟线程中不加修改地使用，并有助于将面向代码的任务迁移到使用虚拟线程。</li><li>默认情况下，直接使用 Thread.Builder API 创建的虚拟线程（而不是通过 Executors.newVirtualThreadPerTaskExecutor() 创建的虚拟线程）现在也在其整个生命周期中受到监视，并且可以通过 <em>Observing virtual threads</em> 章节描述的新的线程堆栈观察</li></ul><h4 id="Goals"><a href="#Goals" class="headerlink" title="Goals"></a>Goals</h4><ul><li>使得以简单的一个请求一个线程的风格编写的服务应用程序能够以接近最佳的硬件利用率进行扩展</li><li>使得使用java.lang.Thread API的现有代码能够以最小的改动适配虚拟线程</li><li>能够使用现有的JDK工具进行轻松的虚拟线程故障排除(troubleshooting)、调试(debugging)和分析(profiling)</li></ul><h4 id="Non-Goals"><a href="#Non-Goals" class="headerlink" title="Non-Goals"></a>Non-Goals</h4><ul><li>移除传统的线程实现或是将现有应用程序静默地迁移至使用虚拟线程并不是我们的目标</li><li>改变Java的基本并发模型也不是目标</li><li>在Java语言或Java库中提供新的数据并行结构并不是我们的目标。Stream API仍然是并行处理大型数据集的首选方式</li></ul><h4 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h4><p>​ 近三十年来，Java开发人员一直依赖线程作为并发服务器应用程序的构建块。每个方法的每个语句都在一个线程内执行，并且由于Java是多线程的，因此多个线程的执行同时发生。线程是Java的并发单元：一段与其它此类单元同时运行且很大程度上独立的顺序代码。每个线程都提供一个堆栈来存储局部变量和协调方法调用，以及出现问题时的上下文：异常是由同一线程中的方法抛出和捕获的，因此开发人员可以使用线程的堆栈跟踪来找出发生了什么。线程也是一些工具的核心概念：调试器逐步执行线程方法中的语句；分析器可视化多个线程的行为以帮助了解其性能。</p><h4 id="The-thread-per-request-style"><a href="#The-thread-per-request-style" class="headerlink" title="The thread-per-request style"></a>The thread-per-request style</h4><p>​ 服务器应用程序通常处理彼此独立的并发用户请求，因此应用程序通过 使用一个线程在此请求的持续时间内专用于此请求 来处理请求是有意义的。这种一个请求一个线程的风格易于理解、易于编程、易于调试和分析，因为它使用平台的并发单元来表示应用程序的并发单元。</p><p>​ 服务器应用程序的可扩展性收到利特尔定律（Little‘s Law）的约束，该定律与延迟、并发性、吞吐量相关：对于给定的请求处理持续时间（即延迟），应用程序同时处理的请求数量（即并发性）必须与到达率（即吞吐量）成比例增长。假如，假设平均延迟为50ms的应用程序通过同时处理10个请求，实现了每秒200个请求的吞吐量。为了使该应用程序扩展到每秒2000个请求的吞吐量，需要同时处理100个请求。如果每个请求在请求持续时间内都在一个线程中处理，那么为了让应用程序跟上，线程数量必须随着吞吐量的增长而增长。</p><p>​ 不幸的是，可用线程的数量是有限的，因为JDK通过包装操作系统（OS）线程来实现线程。操作系统线程的成本很高，因此我们不能拥有太多线程，这使得JDK的线程实现不适合一个请求一个线程的风格。如果每个请求在其持续时间内占用（原文用的是consume，我觉得翻译成占用更合适）一个线程，从而占用一个操作系统线程，那么在其它资源（例如CPU或网络连接）耗尽之前，线程数量通常会成为限制因素。JDK当前的线程实现将应用程序的吞吐量限制在远低于硬件可支持的水平。即使线程被池化，也会发生这种情况，因为池化有助于避免启动新线程的高成本，但不会增加线程总数。</p><h4 id="Improving-scalability-with-the-asynchronous-style"><a href="#Improving-scalability-with-the-asynchronous-style" class="headerlink" title="Improving scalability with the asynchronous style"></a>Improving scalability with the asynchronous style</h4><p>​ 一些希望充分利用硬件的开发人员已经放弃了一个请求一个线程的风格，转而采用线程共享风格。请求处理代码不是在一个线程上从头到尾处理请求，而是在等待另一I&#x2F;O操作完成时将其线程返回到池中，以便该线程可以为其它请求提供服务。这种细粒度的线程共享–在这种共享中线程仅在执行计算时而不是在等待I&#x2F;O时持有线程–允许大量的并发操作而无需占用大量线程。虽然它消除了操作系统线程稀缺对吞吐量的限制，但它的代价很高：它需要所谓的异步编程风格，采用一组单独的I&#x2F;O方法，这些方法不等待I&#x2F;O操作完成，而是稍后向回调发出其完成信号。如果没有专用线程，开发人员必须将他们的请求处理逻辑分解为一些小步骤，通常编写为lambda表达式，然后使用API将她们组合成顺序管道（例如，可以参考CompletableFuture或所谓的“反应式”框架）。因此，它们放弃了语言的基本顺序组合运算符，例如循环和try&#x2F;catch块。</p><p>​ 在异步风格中，请求的每个阶段可能在不同的线程上执行，并且每个线程以交错的方式运行属于不同请求的阶段。这对于理解程序行为具有深远的影响：堆栈跟踪不提供可用的上下文，调试器无法单步执行请求处理逻辑，分析器无法将操作的成本与其调用者关联起来。当使用Java的流API处理短管道中的数据时，编写lambda表达式是可以管理的，但当应用程序中的所有请求处理代码必须以这种方式编写时，就会出现问题。这种编程风格与Java平台不一致，因为应用程序的并发单位（异步管道）不再是平台的并发单位。</p><h4 id="Preserving-the-thread-per-request-style-with-virtual-threads"><a href="#Preserving-the-thread-per-request-style-with-virtual-threads" class="headerlink" title="Preserving the thread-per-request style with virtual threads"></a>Preserving the thread-per-request style with virtual threads</h4><p>​ 为了使应用程序能够扩展，同时与平台保持和谐，我们应该努力保留一个请求一个线程的风格。我们可以通过更有效地实现线程来做到这一点，这样它们就可以更加丰富。操作系统无法更有效地实现操作系统线程，因为不同的语言和运行时以不同的方式使用线程堆栈。然而，Java运行时可以通过切断Java线程与操作系统线程的一对一对应关系的方式来实现Java线程。正如操作系统通过将大的虚拟地址空间映射到有限的物理RAM来提供充足内存的假象一样，Java运行时也可以通过将大量的虚拟线程映射到少量操作系统线程来提供充足线程的假象。</p><p>​ 虚拟线程是java.lang.Thread的一个实例，它不依赖于特定的操作系统线程。相比之下，平台线程是以传统方式实现的java.lang.Thread实例，作为操作系统线程的薄包装器。</p><p>​ 一个请求一个线程风格的应用程序代码可以在请求的整个持续时间内在虚拟线程中运行，但虚拟线程仅在CPU上执行计算时才会占用操作系统线程。这样的结果是与异步风格相同的可扩展性，只不过它是透明实现的：当虚拟线程中运行的代码调用java.*API中的阻塞I&#x2F;O操作时，运行时会执行非阻塞操作系统调用并自动挂起虚拟线程，知道稍后I&#x2F;O操作执行完后虚拟线程可以恢复。对于Java开发人员来说，虚拟线程只是创建成本低廉且数量几乎无限的线程。硬件利用率接近最佳，允许高水平的并发性，从而实现高吞吐量，同时应用程序与Java平台及其工具的多线程设计保持协调。</p><h4 id="Implications-of-virtual-threads"><a href="#Implications-of-virtual-threads" class="headerlink" title="Implications of virtual threads"></a>Implications of virtual threads</h4><p>​ 虚拟线程成本低廉且充足，因此永远不应该被池化：应该为每个应用程序任务创建一个新的虚拟线程。因此，大多数虚拟线程的生命周期都很短，并且具有较浅的调用堆栈，只执行单个HTTP客户端调用或单个JDBC查询。相比之下，平台线程重且昂贵，因此通常必须进行池化。它们往往寿命很长，具有很深的调用堆栈，并且在许多任务之间共享。</p><p>​ 总而言之，虚拟线程保留了可靠的一个请求一个线程的风格，该风格与Java平台的设计相协调，同时最佳地利用了可用的硬件。使用虚拟线程不需要学习新概念，尽管它可能需要放弃为应对当今线程的高成本而养成的习惯。虚拟线程不仅可以帮助应用程序开发人员，还可以帮助框架设计人员提供易于使用、不影响扩展性的API，并且这些API与平台的设计兼容。</p><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><p>​ 如今，JDK中java.lang.Thread的每个实例都是一个平台线程。平台线程在底层操作系统线程上运行Java代码，并在代码的整个生命周期内占有操作系统线程。平台线程数受限于操作系统线程数。</p><p>​ 虚拟线程是java.lang.Thread的一个实例，它在底层操作系统线程上运行Java代码，但不会在代码的整个生命周期内占有操作系统线程。这意味着许多虚拟线程可以在同一个操作系统线程上运行它们的Java代码，从而有效地共享操作系统线程。平台线程独占宝贵的操作系统线程，但虚拟线程不然。虚拟线程的数量可以比操作系统线程大得多。</p><p>​ 虚拟线程是JDK而不是操作系统提供的轻量级线程实现。它们是用户模式线程的一种形式，在其它多线程语言中已经取得了成功（例如，Go中的goroutine和Erlang中的进程）。当操作系统线程尚未成熟和普及时，用户模式线程甚至在Java的早期版本中被称为所谓的[“绿色线程”](<a href="https://en.wikipedia.org/wiki/Green_thread">Green thread - Wikipedia</a>)。然而，Java的绿色线程都共享一个操作系统线程（M:1调度），并且最终被作为操作系统线程包装器实现的平台线程所超越（1:1调度）。虚拟线程采用M:N调度，其中大量（M）虚拟线程被调度在较少数量（N）的操作系统线程上运行。</p><h4 id="Using-virtual-threads-vs-platform-threads"><a href="#Using-virtual-threads-vs-platform-threads" class="headerlink" title="Using virtual threads vs. platform threads"></a>Using virtual threads vs. platform threads</h4><p>​ 开发者可以选择使用虚拟线程还是平台线程。下面是一个创建大量虚拟线程的示例程序。程序首先获取一个ExecutorService，它将为每个提交的任务创建一个新的虚拟线程。然后它提交10000个任务并等待所有任务完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (<span class="hljs-type">var</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executors.newVirtualThreadPerTaskExecutor()) &#123;<br>    IntStream.range(<span class="hljs-number">0</span>, <span class="hljs-number">10_000</span>).forEach(i -&gt; &#123;<br>        executor.submit(() -&gt; &#123;<br>            Thread.sleep(Duration.ofSeconds(<span class="hljs-number">1</span>));<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;);<br>    &#125;);<br>&#125;  <span class="hljs-comment">// executor.close() is called implicitly, and waits</span><br></code></pre></td></tr></table></figure><p>此示例中的任务是简单的代码（休眠一秒钟），现代硬件可以轻松支持10000个虚拟线程同时运行此类代码。在后台，JDK在少量操作系统线程（可能只有一个）上运行代码。</p><p>​ 如果该程序使用ExecutorService为每个任务创建一个新的平台线程，例如Executors.newCachedThreadPool(),情况将会非常不同。ExecutorService将尝试创建10000个平台线程，从而创建10000个操作系统线程，并且程序可能会崩溃，这具体取决于计算机和操作系统。</p><p>​ 如果程序使用从池中获取平台线程的ExecutorService，例如Executors.newFixedThreadPool(200)，情况也不会好多少。ExecutorService将创建200个平台线程供所有10000个任务共享，因此许多任务将顺序运行而不是并发运行，并且程序将需要很长时间才能完成。对于该程序，具有200个平台线程的池只能实现每秒200个任务的吞吐量，而虚拟线程可实现每秒约10000个任务的吞吐量（在充分预热后）。此外，如果示例程序中的10_000更改为1_000_000，则该程序将提交1000000个任务，创建1000000个并发运行的虚拟线程，并（在充分预热后），实现每秒约1000000个任务的吞吐量。</p><p>​ 如果该程序中的任务执行一秒钟的计算（例如，对一个巨大的数组进行排序），而不是仅仅休眠，那么增加线程数量超出处理器核心的数量将无济于事，无论它们是虚拟线程还是平台线程。虚拟线程并不是更快的线程—-它们运行代码的速度并不必平台线程快。<strong>它们的存在是为了提供规模（更高的吞吐量），而不是速度（更低的延迟）</strong>。它们的数量可以比平台线程多得多，因此根据利特尔定律，它们使得更高吞吐量所需的更高并发性成为可能。</p><p>​ 换句话说，当满足下面情况时，虚拟线程可以显著提高应用程序的吞吐量</p><ul><li>并发任务数较高（数千以上）</li><li>工作负载不受CPU限制，因为在这种情况下，线程数多于处理器核心数无法提高吞吐量</li></ul><p>​ 虚拟线程有助于提高典型服务器应用程序的吞吐量，因为此类应用程序由大量并发任务组成，而这些任务大部分时间都在等待。</p><p>​ 平台线程可以运行的任何代码，虚拟线程都可以运行。特别是，虚拟线程支持线程局部变量和线程中断，就像平台线程一样。这意味着处理请求的现有Java代码可以轻松地在虚拟线程中运行。许多服务器框架会选择自动地为每个传入请求启动一个新的虚拟线程并在其中运行应用程序的业务逻辑。</p><p>​ 下面是聚合其它两个服务的结果的服务器应用程序的示例。假设有一个服务器框架（未出示）为每个请求创建一个新的虚拟线程，并在该虚拟线程中运行应用程序的句柄代码。应用程序代码反过来创建两个新的虚拟线程，通过与第一个示例相同的ExecutorService同时获取多个资源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(Request request, Response response)</span> &#123;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">url1</span> <span class="hljs-operator">=</span> ...<br>    <span class="hljs-type">var</span> <span class="hljs-variable">url2</span> <span class="hljs-operator">=</span> ...<br><br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">var</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executors.newVirtualThreadPerTaskExecutor()) &#123;<br>        <span class="hljs-type">var</span> <span class="hljs-variable">future1</span> <span class="hljs-operator">=</span> executor.submit(() -&gt; fetchURL(url1));<br>        <span class="hljs-type">var</span> <span class="hljs-variable">future2</span> <span class="hljs-operator">=</span> executor.submit(() -&gt; fetchURL(url2));<br>        response.send(future1.get() + future2.get());<br>    &#125; <span class="hljs-keyword">catch</span> (ExecutionException | InterruptedException e) &#123;<br>        response.fail(e);<br>    &#125;<br>&#125;<br><br>String <span class="hljs-title function_">fetchURL</span><span class="hljs-params">(URL url)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">var</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> url.openStream()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(in.readAllBytes(), StandardCharsets.UTF_8);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>像这样的服务器应用程序具有简单的阻塞代码，可以很好地扩展，因为它可以使用大量的虚拟线程。</p><p>​ Executor.newVirtualThreadPerTaskExecutor()并不是创建虚拟线程的唯一方法。下面要讨论的新java.lang.Thread.Builder API可以创建和启动虚拟线程。此外，结构化并发提供了更强大的API来创建和管理虚拟线程，特别是在类似于这个服务器示例的代码中，由此平台及其工具可以了解线程之间的关系。</p><h4 id="Do-not-pool-virtual-threads"><a href="#Do-not-pool-virtual-threads" class="headerlink" title="Do not pool virtual threads"></a>Do not pool virtual threads</h4><p>​ 开发人员通常会将应用程序代码从基于传统线程池的ExecutorService迁移到一个任务一个虚拟线程的ExecutorService。与任何资源池一样，线程池旨在共享昂贵的资源，但虚拟线程并不昂贵，因此不需要将它们池化。</p><p>​ 开发人员有时会使用线程池来限制对有限资源的并发访问。例如，如果某个服务无法处理超过20个并发请求，则通过提交到大小为20的线程池的任务向该服务发送请求来确保对服务资源的限制访问。这种习惯用法已经变得无处不在，因为平台线程的高成本使得线程池无处不在，但不要试图池化虚拟线程以限制并发性。相反，请使用专门为此目的设计的数据结构，例如信号量。</p><p>​ 结合线程池，开发人员有时侯会使用线程局部变量在共享同一线程的多个任务之间共享昂贵的资源。例如，如果创建数据库连接的成本很高，那么您可以打开一次数据库连接并将其存储在线程局部变量中，以供同一线程中的其他任务稍后使用。如果您将代码从使用线程池迁移到使用一个任务一个虚拟线程，请谨慎使用此习惯用法，因为为每个虚拟线程创建昂贵的资源可能会显著降低性能。更改此类代码至使用可替代的缓存策略，以便可以在大量虚拟线程之间有效共享昂贵的资源。</p><h4 id="Observing-virtual-threads"><a href="#Observing-virtual-threads" class="headerlink" title="Observing virtual threads"></a>Observing virtual threads</h4><p>​ 编写清晰的代码并不是故事的全部。清晰地呈现正在运行地程序地状态对于故障排查、维护和优化也至关重要，并且JDK长期以来一直提供调试、分析和监控线程的机制。这些工具应该对虚拟线程同样有效–也许会根据它们很大的数量进行一些调整–因为它们毕竟是Java.lang.Thread的实例。</p><p>Java调试器可以单步执行虚拟线程、显示调用堆栈以及查看堆栈帧中的变量。JDK Flight Recorder（JFR）是JDK的低开销分析和监控工具，可以将应用程序代码中的事件（例如对象分配和I&#x2F;O操作）与正确的虚拟线程关联起来。这些工具无法为以异步风格编写的应用程序执行这些操作。在异步风格中，任务与线程无关，因此调试器无法显示或操作任务的状态，并且分析器无法判断任务花费了多少时间等待I&#x2F;O。</p><p>线程dump是另一种流行的工具，用于对以一个请求一个线程风格编写的应用程序进行故障排除。不幸的是，JDK的传统线程转储（使用jstack或jcmd获得）提供了一个简单的线程列表。这适用于数十或数百个平台线程，但不适合数千或数百万虚拟线程。因此，我们不会扩展传统的线程转储以包含虚拟线程；相反，我们将在 jcmd 中引入一种新型线程转储，以将虚拟线程与平台线程一起呈现，所有这些都以有意义的方式分组。当程序使用[结构化并发](<a href="https://openjdk.org/jeps/428">JEP 428: Structured Concurrency (Incubator) (openjdk.org)</a>)时，可以显示线程之间更丰富的关系。</p><p>由于可视化和分析大量线程可以从分析中收益，因此除了存文本之外，jcmd还可以以json格式发出新的线程dump命令：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">$ jcmd &lt;<span class="hljs-keyword">pid</span>&gt; Thread.dump_to_file -<span class="hljs-keyword">format</span>=json &lt;<span class="hljs-keyword">file</span>&gt;<br></code></pre></td></tr></table></figure><p>新的线程dump格式不包括对象地址、锁、JNI统计信息、堆统计信息以及传统线程dump中出现的其他统计信息。此外，由于它可能需要列出大量线程，因此生成新的线程dump不会暂停应用程序。</p><p>如果系统属性<code>jdk.trackAllThreads</code>设置为false，即使用<code>-Djdk.trackAllThreads=false</code>命令行选项，使用Thread.Builder API直接创建的虚拟线程不会始终被运行时跟踪，并且可能不会出现在新的线程dump中。在这种情况下，新的线程dump将列出在网络I&#x2F;O操作中被阻止的虚拟线程，以及由上面所示的新的一个任务一个线程风格的ExecutorService创建的虚拟线程。</p><p>以下是此类线程转储的示例，取自与上面第二个示例类似的应用程序，在 JSON 查看器中呈现（单击可放大）：</p><p><img src="https://bugs.openjdk.org/secure/attachment/98212/threaddump-700.png"></p><p>由于虚拟线程是在 JDK 中实现的，并且不依赖于任何特定的操作系统线程，因此它们对于操作系统来说是不可见的，操作系统不知道它们的存在。操作系统级的监控将观察到 JDK 进程使用的操作系统线程少于虚拟线程。</p><h4 id="Scheduling-virtual-threads"><a href="#Scheduling-virtual-threads" class="headerlink" title="Scheduling virtual threads"></a>Scheduling virtual threads</h4><p>为了完成有用的工作，需要调度线程，即分配线程在处理器核心上工作。对于作为操作系统线程实现的平台线程，JDK依赖于操作系统中的调度程序。相比之下，对于虚拟线程，JDK有自己的调度程序。JDK的调度程序不是直接将虚拟线程分配给处理器，而是将虚拟线程分配给平台线程（这就是前面提到的虚拟线程的M:N调度）。然后，操作系统像往常一样调度平台线程。</p><p>JDK的虚拟线程调度程序是一个work-stealing的ForkJoinPool，它以FIFO模式运行。调度程序的并行度是可用于调度虚拟线程的平台线程数。默认情况下，它等于可用处理器的数量，但可以使用系统属性jdk.virtualThreadScheduler.parallelism进行调整。此ForkJoinPool与一般的池不同，一般的池用于例如并行流的实现，以LIFO模式运行。</p><p>调度程序为其分配虚拟线程的平台线程称为虚拟线程的载体。虚拟线程在其生命周期内可以被调度到不同的载体上；换句话说，调度程序不维护虚拟线程和任何特定平台线程之间的关联性。从Java代码的角度来看，一个正在运行的虚拟线程在逻辑上独立于它当前的载体：</p><ul><li><p>虚拟线程无法获取载体的身份。 Thread.currentThread() 返回的值始终是虚拟线程本身。</p></li><li><p>载体和虚拟线程的堆栈跟踪是分开的。 虚拟线程中抛出的异常将不包括载体的堆栈帧。 线程dump不会显示虚拟线程堆栈中载体的堆栈帧，反之亦然。</p></li><li><p>载体的线程局部变量对于虚拟线程不可用，反之亦然。</p></li></ul><p>另外，从Java代码的角度来看，虚拟线程及其载体暂时共享一个操作系统线程这一事实是不可见的。相比之下，从native代码的角度来看，虚拟线程及其载体都运行在同一个native线程上。因此，在同一虚拟线程上多次调用的native代码可能会在每次调用时观察到不同的操作系统线程标识符。</p><p>调度程序目前没有实现虚拟线程的时间共享。时间共享是对消耗了分配的 CPU 时间的线程进行强制抢占。虽然当平台线程数量相对较少且 CPU 利用率为 100% 时，时间共享可以有效减少某些任务的延迟，但尚不清楚时间共享对于 100 万个虚拟线程是否同样有效。</p><h4 id="Executing-virtual-threads"><a href="#Executing-virtual-threads" class="headerlink" title="Executing virtual threads"></a>Executing virtual threads</h4><p>要使用虚拟线程，无需重写程序。虚拟线程不需要或期望应用程序代码将控制权显式交还给调度程序；换句话说，虚拟线程是不合作的。用户代码不得对如何或何时将虚拟线程分配给平台线程做出任何假设，就像不得对如何或何时将平台线程分配给处理器内核做出假设一样。</p><p>为了在虚拟线程中运行代码，JDK的虚拟线程调度程序通过将虚拟线程挂载到平台线程上来分配虚拟线程在平台线程上执行。这使得平台线程成为虚拟线程的载体。稍后，在运行一些代码后，虚拟线程可以从其载体上卸载。此时平台线程是空闲的，因此调度程序可以在其上挂载另一个虚拟线程，从而使其再次成为载体。</p><p>通常，当虚拟线程被 I&#x2F;O 操作或 JDK 中的某些其他阻塞操作（例如 BlockingQueue.take()）阻塞时，它将卸载。当阻塞操作准备完成时（例如，套接字上已接收到字节），它将虚拟线程提交回调度程序，调度程序将虚拟线程挂载在载体上以恢复执行。</p><p>虚拟线程的挂载和卸载频繁且透明地发生，并且不会阻塞任何操作系统线程。例如，前面显示的服务器应用程序包含以下代码行，其中包含对阻塞操作的调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">response.send(future1.get() + future2.get());<br></code></pre></td></tr></table></figure><p>通常每次调用 get() 一次，并且可能在 send(…) 执行 I&#x2F;O 的过程中多次。</p><p>JDK中绝大多数的阻塞操作都会卸载虚拟线程，释放其载体和底层OS线程来承担新的工作。然而，JDK中的一些阻塞操作不会卸载虚拟线程，从而阻塞其载体和底层操作系统线程。这是因为操作系统级别（例如，许多文件系统操作）或 JDK 级别（例如，Object.wait()）的限制。这些阻塞操作的实现通过暂时扩展调度程序的并行性来补偿操作系统线程的捕获。因此，调度程序的 ForkJoinPool 中的平台线程数量可能会暂时超过可用处理器的数量。调度程序可用的最大平台线程数可以使用系统属性 jdk.virtualThreadScheduler.maxPoolSize 进行调整。</p><p>在两种情况下，虚拟线程在阻塞操作期间无法卸载，因为它被固定到其载体上：</p><ol><li><p>当它在同步块或方法内执行代码时，或者</p></li><li><p>当它执行native方法或外部函数时</p></li></ol><p>固定（Pinning）不会使应用程序不正确，但可能会妨碍其可扩展性。如果虚拟线程在固定时执行阻塞操作，例如 I&#x2F;O 或 BlockingQueue.take()，则其载体和底层操作系统线程在操作期间将被阻塞。长时间频繁固定可能会通过捕获载体来损害应用程序的可扩展性。</p><p>调度程序不会通过扩展其并行性来补偿固定。相反，通过修改经常运行的同步代码块或方法来避免频繁且 长期的固定，使用java.util.concurrent.locks.ReentrantLock来保护潜在的长时间I&#x2F;O操作。无需替换不经常使用（例如，仅在启动时执行）或保护内存中的操作的同步块和方法。一如既往，努力保持加锁策略简单明了。</p><p>新的诊断有助于将代码迁移到虚拟线程，并评估是否应该用 java.util.concurrent 锁替换同步的特定用法：</p><ul><li><p>A JDK Flight Recorder (JFR) event is emitted when a thread blocks while pinned (see <a href="https://openjdk.org/jeps/444#JDK-Flight-Recorder-JFR">JDK Flight Recorder</a>).</p></li><li><p>当线程在固定状态下阻塞时，系统属性 jdk.tracePinnedThreads 会触发堆栈跟踪。当线程在固定时阻塞时，带有 -Djdk.tracePinnedThreads&#x3D;full 属性会打印完整的堆栈跟踪，突出显示本机帧和持有监视器的帧。 -Djdk.tracePinnedThreads&#x3D;short 将限制仅输出有问题的帧。</p></li></ul><h4 id="Memory-use-and-interaction-with-garbage-collection"><a href="#Memory-use-and-interaction-with-garbage-collection" class="headerlink" title="Memory use and interaction with garbage collection"></a>Memory use and interaction with garbage collection</h4><p>虚拟线程的堆栈作为堆栈块对象存储在 Java 的垃圾收集堆中。堆栈随着应用程序的运行而增长和缩小，既是为了提高内存效率，也是为了容纳深度达到 JVM 配置的平台线程堆栈大小的堆栈。这种效率使得大量虚拟线程成为可能，从而使服务器应用程序中一个请求一个线程风格保持持续的可行性。</p><p>在上面的第二个示例中，回想一下假设的框架通过创建新的虚拟线程并调用句柄方法来处理每个请求。即使它在深度调用堆栈的末尾调用句柄（在身份验证、事务等之后），句柄本身也会生成多个仅执行短期任务的虚拟线程。因此，对于每个具有深调用堆栈的虚拟线程，都会有多个具有浅调用堆栈的虚拟线程，消耗很少的内存。</p><p>一般来说，虚拟线程所需的堆空间和垃圾收集器活动量很难与异步代码进行比较。一百万个虚拟线程需要至少一百万个对象，但共享平台线程池的一百万个任务也需要一百万个对象。此外，处理请求的应用程序代码通常会跨 I&#x2F;O 操作维护数据。一个请求一个线程风格的代码可以将该数据保存在局部变量中，这些变量存储在堆中的虚拟线程堆栈上，而异步代码必须将相同的数据保存在从管道的一个阶段传递到下一阶段的堆对象中。一方面，虚拟线程所需的栈帧布局比紧凑对象更浪费；另一方面，虚拟线程可以在许多情况下改变和重用它们的堆栈（取决于低级 GC 交互），而异步管道总是需要分配新对象，因此虚拟线程可能需要更少的分配。总体而言，每个请求线程与异步代码的堆消耗和垃圾收集器活动应该大致相似。随着时间的推移，我们希望使虚拟线程堆栈的内部表示更加紧凑。</p><p>与平台线程堆栈不同，虚拟线程堆栈不是 GC root。因此，它们包含的引用不会被执行并发堆扫描的垃圾收集器（例如 G1）在stop-the-world暂停的情况下遍历。这也意味着，如果一个虚拟线程被阻塞，例如，BlockingQueue.take()，并且没有其他线程可以获得对虚拟线程或队列的引用，那么该线程可以被垃圾收集——这很好，因为这种虚拟线程永远不会被中断或解除阻塞。当然，如果虚拟线程正在运行或者被阻塞并且可以被解除阻塞，则它不会被垃圾回收。</p><p>当前对虚拟线程的限制是 G1 GC 不支持巨大的堆栈块对象。如果虚拟线程的堆栈达到区域大小的一半（可能小至 512KB），则可能会引发 StackOverflowError。</p><h4 id="Detail-changes"><a href="#Detail-changes" class="headerlink" title="Detail changes"></a>Detail changes</h4><p>其余小节详细描述了我们在 Java 平台及其实现中提出的更改：</p><ul><li><a href="https://openjdk.org/jeps/444#java-lang-Thread">java.lang.Thread</a></li><li><a href="https://openjdk.org/jeps/444#Thread-local-variables">Thread-local variables</a></li><li><a href="https://openjdk.org/jeps/444#java-util-concurrent">java.util.concurrent</a></li><li><a href="https://openjdk.org/jeps/444#Networking">Networking</a></li><li><a href="https://openjdk.org/jeps/444#java-io">java.io</a></li><li><a href="https://openjdk.org/jeps/444#Java-Native-Interface-JNI">Java Native Interface (JNI)</a></li><li><a href="https://openjdk.org/jeps/444#Debugging">Debugging (JVM TI, JDWP, and JDI)</a></li><li><a href="https://openjdk.org/jeps/444#JDK-Flight-Recorder-JFR">JDK Flight Recorder (JFR)</a></li><li><a href="https://openjdk.org/jeps/444#Java-Management-Extensions-JMX">Java Management Extensions (JMX)</a></li></ul><h5 id="java-lang-Thread"><a href="#java-lang-Thread" class="headerlink" title="java.lang.Thread"></a>java.lang.Thread</h5><p>我们更新 java.lang.Thread API 如下：</p><ul><li><p><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Thread.Builder.html"><code>Thread.Builder</code></a>, <a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Thread.html#ofVirtual()"><code>Thread.ofVirtual()</code></a>, and <a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Thread.html#ofPlatform()"><code>Thread.ofPlatform()</code></a> 是用于创建虚拟线程和平台线程的新 API。例如，</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-keyword">Thread</span> <span class="hljs-keyword">thread</span> = <span class="hljs-keyword">Thread</span>.ofVirtual().name(<span class="hljs-string">&quot;duke&quot;</span>).unstarted(runnable)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>创建一个名为“duke”的新的未启动虚拟线程。</p></li><li><p><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Thread.html#startVirtualThread(java.lang.Runnable)"><code>Thread.startVirtualThread(Runnable)</code></a>是创建然后启动虚拟线程的便捷方法。</p></li><li><p>Thread.Builder 可以创建线程或 <a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/concurrent/ThreadFactory.html"><code>ThreadFactory</code></a>，然后 ThreadFactory 可以创建具有相同属性的多个线程。</p></li><li><p><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Thread.html#isVirtual()"><code>Thread.isVirtual()</code></a>测试线程是否是虚拟线程。</p></li><li><p><a href="https://docs.oracle.com/en/java/javase/21/docs/docs/api/java.base/java/lang/Thread.html#getAllStackTraces()"><code>Thread.getAllStackTraces()</code></a> 现在返回所有平台线程的映射，而不是所有线程。</p></li></ul><p>java.lang.Thread API 在其他方面在此 JEP 中没有改变。与以前一样，Thread 类定义的构造函数创建平台线程。没有新的公共构造函数。</p><p>（Thread 中为虚拟线程抛出 UnsupportedOperationException 的三个方法 — stop()、suspend() 和resume() — 在 JDK 20 中进行了更改，也为平台线程抛出 UnsupportedOperationException。）</p><p>虚拟线程和平台线程之间的主要 API 差异是：</p><ul><li><p>公共 Thread 构造函数无法创建虚拟线程。</p></li><li><p>虚拟线程始终是守护线程 。Thread.setDaemon(boolean)方法无法将虚拟线程更改为非守护线程。</p></li><li><p>虚拟线程具有固定的优先级 Thread.NORM_PRIORITY。 Thread.setPriority(int) 方法对虚拟线程没有影响。未来版本中可能会重新考虑此限制。</p></li><li><p>虚拟线程不是线程组的活动成员。在虚拟线程上调用时，Thread.getThreadGroup() 返回一个名为“VirtualThreads”的占位符线程组。Thread.Builder API 没有定义设置虚拟线程的线程组的方法。</p></li><li><p>当使用 SecurityManager 集运行时，虚拟线程没有权限。</p></li></ul><h5 id="Thread-local-variables"><a href="#Thread-local-variables" class="headerlink" title="Thread-local variables"></a>Thread-local variables</h5><p>虚拟线程支持线程局部变量 (ThreadLocal) 和可继承的线程局部变量 (InheritableThreadLocal)，就像平台线程一样，因此它们可以运行使用线程局部变量的现有代码。但是，由于虚拟线程可能非常多，因此只有在仔细考虑后才能使用线程局部变量。特别是，不要使用线程局部变量在线程池中共享同一线程的多个任务之间池化昂贵的资源。虚拟线程永远不应该被池化，因为每个虚拟线程在其生命周期内只运行一个任务。我们从 JDK 的 java.base 模块中删除了许多线程局部变量的使用，为虚拟线程做准备，以便在运行数百万个线程时减少内存占用。</p><p>当虚拟线程设置任何线程局部变量的值时，系统属性 jdk.traceVirtualThreadLocals 可用于触发堆栈跟踪。当迁移代码以使用虚拟线程时，此诊断输出可能有助于删除线程局部变量。将系统属性设置为 true 以触发堆栈跟踪；默认值为 false。</p><p>对于某些用例，作用域值（<a href="https://openjdk.org/jeps/429">JEP 429</a>）可能被证明是线程局部变量的更好替代方案。</p><h5 id="java-util-concurrent"><a href="#java-util-concurrent" class="headerlink" title="java.util.concurrent"></a>java.util.concurrent</h5><p>支持锁定的原始 API java.util.concurrent.LockSupport 现在支持虚拟线程：park虚拟线程会释放底层平台线程以执行其他工作，unpark虚拟线程会安排其继续运行。对 LockSupport 的这一更改使所有使用它的 API（Lock, Semaphores, blocking queues等）在虚拟线程中调用时能够正常停放。</p><p>此外，Executors.newThreadPerTaskExecutor(ThreadFactory) 和 Executors.newVirtualThreadPerTaskExecutor() 创建一个 ExecutorService，为每个任务创建一个新线程。这些方法支持与使用线程池和 ExecutorService 的现有代码进行迁移和互操作。</p><h5 id="Networking"><a href="#Networking" class="headerlink" title="Networking"></a>Networking</h5><p>java.net 和 java.nio.channels 包中网络 API 的实现现在可以使用虚拟线程：虚拟线程上的操作会阻塞，例如建立网络连接或从套接字读取，释放底层平台线程以执行其他工作。</p><p>为了允许中断和取消，由 java.net.Socket、ServerSocket 和 DatagramSocket 定义的阻塞 I&#x2F;O 方法现在被指定为在虚拟线程中调用时可中断：中断套接字上阻塞的虚拟线程将取消该线程的驻留并关闭套接字。从 InterruptibleChannel 获取时，这些类型的套接字上的阻塞 I&#x2F;O 操作始终是可中断的，因此此更改使这些 API 在使用其构造函数创建时的行为与从通道获取时的行为保持一致。</p><h5 id="java-io"><a href="#java-io" class="headerlink" title="java.io"></a>java.io</h5><p>java.io 包提供了字节流和字符流的 API。这些 API 的实现高度同步，需要进行更改以避免在虚拟线程中使用它们时固定。</p><p>作为背景，面向字节的输入&#x2F;输出流未指定为线程安全的，并且未指定在读取或写入方法中阻塞线程时调用 close() 时的预期行为。在大多数情况下，使用来自多个并发线程的特定输入或输出流是没有意义的。面向字符的读取器&#x2F;写入器也未指定为线程安全的，但它们确实为子类公开了锁对象。除了固定之外，这些类中的同步也存在问题且不一致；例如，InputStreamReader 和 OutputStreamWriter 使用的流解码器和编码器在流对象而不是锁定对象上同步。</p><p>为了防止固定，现在的实现如下：</p><ul><li><p>BufferedInputStream、BufferedOutputStream、BufferedReader、BufferedWriter、PrintStream 和 PrintWriter 现在在直接使用时使用显式锁而不是monitor。这些类在被子类化时会像以前一样同步。</p></li><li><p>InputStreamReader 和 OutputStreamWriter 使用的流解码器和编码器现在使用与封闭的 InputStreamReader 或 OutputStreamWriter 相同的锁。</p></li></ul><p>进一步消除所有这些通常不必要的锁定超出了本 JEP 的范围。</p><p>此外，BufferedOutputStream、BufferedWriter 和 OutputStreamWriter 的流编码器使用的缓冲区的初始大小现在更小，以便在堆中存在许多流或写入器时减少内存使用量（如果存在一百万个虚拟线程，则可能会出现这种情况） ，每个在套接字连接上都有一个缓冲流。</p><h5 id="Java-Native-Interface（JNI）"><a href="#Java-Native-Interface（JNI）" class="headerlink" title="Java Native Interface（JNI）"></a>Java Native Interface（JNI）</h5><p>JNI 定义了一个新函数 IsVirtualThread，用于测试对象是否为虚拟线程。</p><p>JNI 规范在其他方面保持不变。</p><h4 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h4><p>调试架构由三个接口组成：JVM 工具接口 (JVM TI)、Java 调试线协议 (JDWP) 和 Java 调试接口 (JDI)。所有三个接口现在都支持虚拟线程。</p><p><a href="https://docs.oracle.com/en/java/javase/21/docs/specs/jvmti.html">JVM TI</a> 的更新是：</p><ul><li><p>使用 jthread（即对 Thread 对象的 JNI 引用）调用的大多数函数都可以通过对虚拟线程的引用来调用。虚拟线程上不支持或可选择支持少数函数，即 AgentStartFunction、PopFrame、ForceEarlyReturn<em>、StopThread 和 GetThreadCpuTime。SetLocal</em> 函数仅限于在断点或单步事件处挂起的虚拟线程的最顶层框架中设置局部变量。</p></li><li><p>现在指定 GetAllThreads 和 GetAllStackTraces 函数返回所有平台线程而不是所有线程。</p></li><li><p>除早期 VM 启动期间或堆迭代期间发布的事件外，所有事件都可以在虚拟线程上下文中调用事件回调。</p></li><li><p>挂起&#x2F;恢复实现允许调试器挂起和恢复虚拟线程，并且允许在挂载虚拟线程时挂起平台线程。</p></li><li><p>新功能 can_support_virtual_threads 使代理可以更好地控制虚拟线程的线程启动和结束事件。</p></li><li><p>新功能支持虚拟线程批量暂停和恢复；这些需要 can_support_virtual_threads 功能。</p></li></ul><p>现有的 JVM TI 代理大部分会像以前一样工作，但如果它们调用虚拟线程不支持的函数，则可能会遇到错误。当不知道虚拟线程的代理与使用虚拟线程的应用程序一起使用时，就会出现这些问题。对 GetAllThreads 进行更改以返回仅包含平台线程的数组对于某些代理来说可能是一个问题。启用 ThreadStart 和 ThreadEnd 事件的现有代理可能会遇到性能问题，因为它们缺乏将这些事件限制为平台线程的能力。</p><p><a href="https://docs.oracle.com/en/java/javase/21/docs/specs/jdwp/jdwp-protocol.html">JDWP</a> 的更新如下：</p><ul><li><p>新命令允许调试器测试线程是否是虚拟线程。</p></li><li><p>EventRequest 命令上的新修饰符允许调试器将线程启动和结束事件限制为平台线程。</p></li></ul><p><a href="https://docs.oracle.com/en/java/javase/21/docs/api/jdk.jdi/module-summary.html">JDI</a>的更新如下：</p><ul><li><p>com.sun.jdi.ThreadReference 中的新方法测试线程是否为虚拟线程。</p></li><li><p>com.sun.jdi.request.ThreadStartRequest 和 com.sun.jdi.request.ThreadDeathRequest 中的新方法限制了为平台线程请求生成的事件。</p></li></ul><p>如上所述，虚拟线程不被视为线程组中的活动线程。因此，JVM TI 函数 GetThreadGroupChildren、JDWP 命令 ThreadGroupReference&#x2F;Children 和 JDI 方法 com.sun.jdi.ThreadGroupReference.threads() 返回的线程列表仅包含平台线程。</p><h4 id="JDK-Flight-Recorder（JFR）"><a href="#JDK-Flight-Recorder（JFR）" class="headerlink" title="JDK Flight Recorder（JFR）"></a>JDK Flight Recorder（JFR）</h4><p>JFR 支持具有多个新事件的虚拟线程：</p><ul><li><p>jdk.VirtualThreadStart 和 jdk.VirtualThreadEnd 表示虚拟线程的开始和结束。默认情况下禁用这些事件。</p></li><li><p>jdk.VirtualThreadPinned 表示虚拟线程在固定时被park，即没有释放其平台线程（见上文）。该事件默认启用，阈值为 20 毫秒。</p></li><li><p>dk.VirtualThreadSubmitFailed 表示启动或取消停放虚拟线程失败，可能是由于资源问题。该事件默认启用。</p></li></ul><h4 id="Java-Management-Extensions（JMX）"><a href="#Java-Management-Extensions（JMX）" class="headerlink" title="Java Management Extensions（JMX）"></a>Java Management Extensions（JMX）</h4><p>java.lang.management.ThreadMXBean 仅支持平台线程的监控和管理。findDeadlockedThreads() 方法查找处于死锁状态的平台线程的周期；它不找处于死锁状态的虚拟线程循环。</p><p>com.sun.management.HotSpotDiagnosticsMXBean 中的新方法生成上述新型线程dump。还可以通过平台 MBeanServer 从本地或远程 JMX 工具间接调用此方法。</p><h4 id="Alternatives"><a href="#Alternatives" class="headerlink" title="Alternatives"></a>Alternatives</h4><ul><li><p>继续依赖异步API。异步 API 很难与同步 API 集成，创建相同 I&#x2F;O 操作的两种表示的分裂世界，并且没有提供可供平台用作故障排除、监视、调试上下文的操作序列的统一概念 和分析。</p></li><li><p>将句法无堆栈协程（即 async&#x2F;await）添加到 Java 语言中。这些比用户模式线程更容易实现，并且将提供表示操作序列上下文的统一构造。</p><p>然而，该构造将是新的，并且与线程分开，在许多方面与线程相似，但在某些细微差别上有所不同。它将在为线程设计的 API 和为协程设计的 API 之间划分世界，并且需要将新的类似线程的构造引入到平台及其工具的所有层中。这将需要更长的时间才能被生态系统采用，并且不会像用户模式线程那样与平台优雅和谐。</p><p>大多数采用语法协程的语言都是由于无法实现用户模式线程（例如 Kotlin）、遗留语义保证（例如固有的单线程 JavaScript）或特定于语言的技术限制（例如 C++）而这样做的。 ）。 这些限制不适用于 Java。</p></li><li><p>引入一个新的公共类来表示用户模式线程，与 java.lang.Thread 无关。这将是一个抛弃 Thread 类 25 年来积累的不需要的包袱的机会。我们探索并原型化了这种方法的几种变体，但在每种情况下都要解决如何运行现有代码的问题。</p><p>主要问题是 Thread.currentThread() 在现有代码中直接或间接普遍使用（例如，确定锁所有权或线程局部变量）。此方法必须返回一个表示当前执行线程的对象。如果我们引入一个新类来表示用户模式线程，那么 currentThread() 必须返回某种看起来像 Thread 但委托给用户模式线程对象的包装对象。</p><p>让两个对象代表当前执行线程会令人困惑，因此我们最终得出结论，保留旧的 Thread API 并不是一个重大障碍。除了 currentThread() 等少数方法外，开发人员很少直接使用 Thread API；它们主要使用更高级别的 API（例如 ExecutorService）进行交互。随着时间的推移，我们将通过弃用和删除过时的方法，从 Thread 类和相关类（例如 ThreadGroup）中抛弃不需要的包袱。</p></li></ul><h4 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h4><ul><li><p>现有的测试将确保我们在此提出的更改不会导致运行它们的多种配置和执行模式出现意外的回归。</p></li><li><p>我们将扩展 jtreg 测试工具，以允许现有测试在虚拟线程的上下文中运行。这将避免需要许多测试出现两个版本。</p></li><li><p>新的测试将测试所有新的和修订的 API，并且所有区域都将更改为支持虚拟线程。</p></li><li><p>新的压力测试将针对对可靠性和性能至关重要的领域。</p></li><li><p>新的微基准测试将针对性能关键领域。</p></li><li><p>我们将使用许多现有服务器（包括 Helidon 和 Jetty）进行更大规模的测试。</p></li></ul><h4 id="Risks-and-Assumptions"><a href="#Risks-and-Assumptions" class="headerlink" title="Risks and Assumptions"></a>Risks and Assumptions</h4><p>该提案的主要风险是由于现有 API 及其实现的变化而导致的兼容性风险：</p><ul><li>java.io.BufferedInputStream、BufferedOutputStream、BufferedReader、BufferedWriter、PrintStream 和 PrintWriter 类中使用的内部（未记录的）锁定协议的修订可能会影响假定 I&#x2F;O 方法在调用它们的流上同步的代码 。 这些更改不会影响继承这些类并假定由超类锁定的代码，也不会影响继承 java.io.Reader 或 java.io.Writer 并使用这些 API 公开的锁对象的代码。</li></ul><p>一些源代码和二进制文件不兼容的更改可能会影响继承 java.lang.Thread 的代码：</p><ul><li><p>Thread 定义了几个新方法。如果现有源文件中的代码继承了 Thread 并且子类中的方法与任何新的 Thread 方法发生冲突，则该文件将无法在不进行更改的情况下进行编译。</p></li><li><p>Thread.Builder 是一个新的嵌套接口。如果现有源文件中的代码继承了 Thread，导入名为 Builder 的类，并且子类中的代码引用 Builder 作为简单名称，则该文件将无法在不进行更改的情况下进行编译。</p></li><li><p>Thread.isVirtual() 是一个新的final方法。如果存在继承 Thread 的现有编译代码，并且子类声明了具有相同名称和返回类型的方法，则在加载子类时将在运行时抛出 IncompleteClassChangeError 。</p></li></ul><p>将现有代码与使用虚拟线程或新 API 的新代码混合时，可能会观察到平台线程和虚拟线程之间的一些行为差异（上面都提到过，这里做了总结）：</p><ul><li><p>Thread.setPriority(int) 方法对虚拟线程没有影响，虚拟线程始终具有 Thread.NORM_PRIORITY 优先级。</p></li><li><p>Thread.setDaemon(boolean) 方法对虚拟线程没有影响，虚拟线程始终是守护线程。</p></li><li><p>Thread.getAllStackTraces() 现在返回所有平台线程的映射，而不是所有线程的映射。</p></li><li><p>现在，当在虚拟线程上下文中调用时，由 java.net.Socket、ServerSocket 和 DatagramSocket 定义的阻塞 I&#x2F;O 方法是可中断的。当在套接字操作上阻塞的线程被中断时，现有代码可能会中断，这将唤醒线程并关闭套接字。</p></li><li><p>虚拟线程不是线程组的活动成员。在虚拟线程上调用 Thread.getThreadGroup() 将返回一个空的虚拟“VirtualThreads”组。</p></li><li><p>当使用安全管理器集运行时，虚拟线程没有权限。有关在 Java 17 及更高版本上运行安全管理器的信息，请参阅 <a href="https://openjdk.org/jeps/411">JEP 411 (Deprecate the Security Manager for Removal)</a>。</p></li><li><p>在 JVM TI 中，GetAllThreads 和 GetAllStackTraces 函数不返回虚拟线程。启用 ThreadStart 和 ThreadEnd 事件的现有代理可能会遇到性能问题，因为它们缺乏将事件限制为平台线程的能力。</p></li><li><p>java.lang.management.ThreadMXBean API 支持平台线程的监视和管理，但不支持虚拟线程。</p></li><li><p>-XX:+PreserveFramePointer 标志对虚拟线程性能有巨大的负面影响。</p></li></ul><h4 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h4><ul><li><p>JDK 18 中的 <a href="https://openjdk.java.net/jeps/416">JEP 416 (Reimplement Core Reflection with Method Handles)</a>删除了虚拟机本机反射实现。这允许虚拟线程在反射调用方法时优雅地park。</p></li><li><p>JDK 13 中的<a href="https://openjdk.java.net/jeps/353">JEP 353 (Reimplement the Legacy Socket API)</a>和 JDK 15 中的  <a href="https://openjdk.java.net/jeps/373">JEP 373 (Reimplement the Legacy DatagramSocket API)</a>用设计用于虚拟线程的新实现替换了 java.net.Socket、ServerSocket 和 DatagramSocket 的实现 。</p></li><li><p>JDK 18 中的 <a href="https://openjdk.java.net/jeps/418">JEP 418 (Internet-Address Resolution SPI)</a>定义了用于主机名和地址查找的服务提供者接口。 这将允许第三方库实现替代的 java.net.InetAddress 解析器，这些解析器在主机查找期间不会固定线程。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>文章翻译</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mybatis-configuration类</title>
    <link href="/2023/09/05/mybatis-configuration%E7%B1%BB/"/>
    <url>/2023/09/05/mybatis-configuration%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h4 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h4><p>    配置中心，里面好多配置项</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Configuration</span> &#123; <br><br>  <span class="hljs-comment">// 决定加载哪种环境（开发|生产）</span><br>  <span class="hljs-keyword">protected</span> Environment environment; <br><br>  <span class="hljs-comment">//---------以下都是&lt;settings&gt;节点-------</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">safeRowBoundsEnabled</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">safeResultHandlerEnabled</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">mapUnderscoreToCamelCase</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">aggressiveLazyLoading</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">multipleResultSetsEnabled</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">useGeneratedKeys</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">useColumnLabel</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>; <br><br>  <span class="hljs-comment">// 默认启用缓存（Executor缓存）</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">cacheEnabled</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">callSettersOnNulls</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <br><br>  <span class="hljs-comment">// 日志前缀，用于获取日志</span><br>  <span class="hljs-keyword">protected</span> String logPrefix;<br>  <span class="hljs-comment">// 日志实现类</span><br>  <span class="hljs-keyword">protected</span> Class &lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Log</span>&gt; logImpl;<br>  <span class="hljs-comment">// 本地缓存级别，默认为session</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">LocalCacheScope</span> <span class="hljs-variable">localCacheScope</span> <span class="hljs-operator">=</span> LocalCacheScope.SESSION;<br>  <span class="hljs-comment">// null对应的JdbcType</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">JdbcType</span> <span class="hljs-variable">jdbcTypeForNull</span> <span class="hljs-operator">=</span> JdbcType.OTHER;<br>  <span class="hljs-comment">// 懒加载触发方法</span><br>  <span class="hljs-keyword">protected</span> Set&lt;String&gt; lazyLoadTriggerMethods = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;String&gt;(Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123; <span class="hljs-string">&quot;equals&quot;</span>, <span class="hljs-string">&quot;clone&quot;</span>, <span class="hljs-string">&quot;hashCode&quot;</span>, <span class="hljs-string">&quot;toString&quot;</span> &#125;));<br>  <span class="hljs-comment">// 语句默认超时时间</span><br>  <span class="hljs-keyword">protected</span> Integer defaultStatementTimeout;<br>  <span class="hljs-comment">// 默认为简单执行器</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">ExecutorType</span> <span class="hljs-variable">defaultExecutorType</span> <span class="hljs-operator">=</span> ExecutorType.SIMPLE;<br>  <span class="hljs-comment">// 默认为部分映射，即不处理嵌套等复杂映射行为</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">AutoMappingBehavior</span> <span class="hljs-variable">autoMappingBehavior</span> <span class="hljs-operator">=</span> AutoMappingBehavior.PARTIAL; <br>  <span class="hljs-comment">//---------以上都是&lt;settings&gt;节点-------</span><br><br>  <span class="hljs-comment">// 全局属性</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">Properties</span> <span class="hljs-variable">variables</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>  <span class="hljs-comment">// 对象工厂和对象包装器工厂</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">ObjectFactory</span> <span class="hljs-variable">objectFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultObjectFactory</span>();<br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">ObjectWrapperFactory</span> <span class="hljs-variable">objectWrapperFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultObjectWrapperFactory</span>();<br>  <span class="hljs-comment">// 映射注册机</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">MapperRegistry</span> <span class="hljs-variable">mapperRegistry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapperRegistry</span>(<span class="hljs-built_in">this</span>);<br><br>  <span class="hljs-comment">// 默认禁用延迟加载</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">lazyLoadingEnabled</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>  <span class="hljs-comment">// 默认代理工厂为 JavassistProxyFactory</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">ProxyFactory</span> <span class="hljs-variable">proxyFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavassistProxyFactory</span>(); <span class="hljs-comment">// #224 Using internal Javassist instead of OGNL</span><br><br>  <span class="hljs-comment">// 数据库id</span><br>  <span class="hljs-keyword">protected</span> String databaseId;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Configuration factory class.</span><br><span class="hljs-comment">   * Used to create Configuration for loading deserialized unread properties.</span><br><span class="hljs-comment">   * 配置工厂类，用于创建加载反序列化的未读属性的配置</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@see</span> &lt;a href=&#x27;https://code.google.com/p/mybatis/issues/detail?id=300&#x27;&gt;Issue 300&lt;/a&gt; (google code)</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">protected</span> Class&lt;?&gt; configurationFactory;<br><br>  <span class="hljs-comment">// 拦截器链</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">InterceptorChain</span> <span class="hljs-variable">interceptorChain</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterceptorChain</span>();<br>  <span class="hljs-comment">// 类型处理器注册机</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">TypeHandlerRegistry</span> <span class="hljs-variable">typeHandlerRegistry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeHandlerRegistry</span>();<br>  <span class="hljs-comment">// 类型别名注册机</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">TypeAliasRegistry</span> <span class="hljs-variable">typeAliasRegistry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeAliasRegistry</span>();<br>  <span class="hljs-comment">// 语言驱动注册机</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">LanguageDriverRegistry</span> <span class="hljs-variable">languageRegistry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LanguageDriverRegistry</span>();<br><br>  <span class="hljs-comment">// 映射的语句,存在Map里</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Map&lt;String, MappedStatement&gt; mappedStatements = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StrictMap</span>&lt;MappedStatement&gt;(<span class="hljs-string">&quot;Mapped Statements collection&quot;</span>);<br>  <span class="hljs-comment">// 缓存,存在Map里</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Map&lt;String, Cache&gt; caches = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StrictMap</span>&lt;Cache&gt;(<span class="hljs-string">&quot;Caches collection&quot;</span>);<br>  <span class="hljs-comment">// 结果映射,存在Map里</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Map&lt;String, ResultMap&gt; resultMaps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StrictMap</span>&lt;ResultMap&gt;(<span class="hljs-string">&quot;Result Maps collection&quot;</span>);<br>  <span class="hljs-comment">// 参数映射</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Map&lt;String, ParameterMap&gt; parameterMaps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StrictMap</span>&lt;ParameterMap&gt;(<span class="hljs-string">&quot;Parameter Maps collection&quot;</span>);<br>  <span class="hljs-comment">// 键值生成器</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Map&lt;String, KeyGenerator&gt; keyGenerators = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StrictMap</span>&lt;KeyGenerator&gt;(<span class="hljs-string">&quot;Key Generators collection&quot;</span>);<br><br>  <span class="hljs-comment">// 已经加载的资源</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Set&lt;String&gt; loadedResources = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;String&gt;();<br>  <span class="hljs-comment">// sql片段</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Map&lt;String, XNode&gt; sqlFragments = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StrictMap</span>&lt;XNode&gt;(<span class="hljs-string">&quot;XML fragments parsed from previous mappers&quot;</span>);<br><br>  <span class="hljs-comment">// 不完整的SQL语句</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Collection&lt;XMLStatementBuilder&gt; incompleteStatements = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;XMLStatementBuilder&gt;();<br>  <span class="hljs-comment">// 缓存引用解析器</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Collection&lt;CacheRefResolver&gt; incompleteCacheRefs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;CacheRefResolver&gt;();<br>  <span class="hljs-comment">// 结果映射解析器</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Collection&lt;ResultMapResolver&gt; incompleteResultMaps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;ResultMapResolver&gt;();<br>  <span class="hljs-comment">// 方法解析器</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Collection&lt;MethodResolver&gt; incompleteMethods = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;MethodResolver&gt;();<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * A map holds cache-ref relationship. The key is the namespace that</span><br><span class="hljs-comment">   * references a cache bound to another namespace and the value is the</span><br><span class="hljs-comment">   * namespace which the actual cache is bound to.</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * 键是 引用 绑定到另一个名称空间的缓存的名称空间，值是实际缓存绑定到的名称空间。</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Map&lt;String, String&gt; cacheRefMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;(); <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Configuration</span><span class="hljs-params">(Environment environment)</span> &#123;<br>    <span class="hljs-built_in">this</span>();<br>    <span class="hljs-built_in">this</span>.environment = environment;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Configuration</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 注册更多的类型别名，至于为何不直接在TypeAliasRegistry里注册，还需进一步研究</span><br>    typeAliasRegistry.registerAlias(<span class="hljs-string">&quot;JDBC&quot;</span>, JdbcTransactionFactory.class);<br>    typeAliasRegistry.registerAlias(<span class="hljs-string">&quot;MANAGED&quot;</span>, ManagedTransactionFactory.class);<br><br>    typeAliasRegistry.registerAlias(<span class="hljs-string">&quot;JNDI&quot;</span>, JndiDataSourceFactory.class);<br>    typeAliasRegistry.registerAlias(<span class="hljs-string">&quot;POOLED&quot;</span>, PooledDataSourceFactory.class);<br>    typeAliasRegistry.registerAlias(<span class="hljs-string">&quot;UNPOOLED&quot;</span>, UnpooledDataSourceFactory.class);<br><br>    typeAliasRegistry.registerAlias(<span class="hljs-string">&quot;PERPETUAL&quot;</span>, PerpetualCache.class);<br>    typeAliasRegistry.registerAlias(<span class="hljs-string">&quot;FIFO&quot;</span>, FifoCache.class);<br>    typeAliasRegistry.registerAlias(<span class="hljs-string">&quot;LRU&quot;</span>, LruCache.class);<br>    typeAliasRegistry.registerAlias(<span class="hljs-string">&quot;SOFT&quot;</span>, SoftCache.class);<br>    typeAliasRegistry.registerAlias(<span class="hljs-string">&quot;WEAK&quot;</span>, WeakCache.class);<br><br>    typeAliasRegistry.registerAlias(<span class="hljs-string">&quot;DB_VENDOR&quot;</span>, VendorDatabaseIdProvider.class);<br><br>    typeAliasRegistry.registerAlias(<span class="hljs-string">&quot;XML&quot;</span>, XMLLanguageDriver.class);<br>    typeAliasRegistry.registerAlias(<span class="hljs-string">&quot;RAW&quot;</span>, RawLanguageDriver.class);<br><br>    typeAliasRegistry.registerAlias(<span class="hljs-string">&quot;SLF4J&quot;</span>, Slf4jImpl.class);<br>    typeAliasRegistry.registerAlias(<span class="hljs-string">&quot;COMMONS_LOGGING&quot;</span>, JakartaCommonsLoggingImpl.class);<br>    typeAliasRegistry.registerAlias(<span class="hljs-string">&quot;LOG4J&quot;</span>, Log4jImpl.class);<br>    typeAliasRegistry.registerAlias(<span class="hljs-string">&quot;LOG4J2&quot;</span>, Log4j2Impl.class);<br>    typeAliasRegistry.registerAlias(<span class="hljs-string">&quot;JDK_LOGGING&quot;</span>, Jdk14LoggingImpl.class);<br>    typeAliasRegistry.registerAlias(<span class="hljs-string">&quot;STDOUT_LOGGING&quot;</span>, StdOutImpl.class);<br>    typeAliasRegistry.registerAlias(<span class="hljs-string">&quot;NO_LOGGING&quot;</span>, NoLoggingImpl.class);<br><br>    typeAliasRegistry.registerAlias(<span class="hljs-string">&quot;CGLIB&quot;</span>, CglibProxyFactory.class);<br>    typeAliasRegistry.registerAlias(<span class="hljs-string">&quot;JAVASSIST&quot;</span>, JavassistProxyFactory.class);<br><br>    languageRegistry.setDefaultDriverClass(XMLLanguageDriver.class);<br>    languageRegistry.register(RawLanguageDriver.class);<br>  &#125; <br><br>  <span class="hljs-comment">// 略过没有特殊处理的set/get方法</span><br>  <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLogImpl</span><span class="hljs-params">(Class&lt;?&gt; logImpl)</span> &#123;<br>    <span class="hljs-keyword">if</span> (logImpl != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-built_in">this</span>.logImpl = (Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Log</span>&gt;) logImpl;<br>      LogFactory.useCustomLogging(<span class="hljs-built_in">this</span>.logImpl);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 添加已加载的资源</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addLoadedResource</span><span class="hljs-params">(String resource)</span> &#123;<br>    loadedResources.add(resource);<br>  &#125;<br><br>  <span class="hljs-comment">// 资源是否已加载</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isResourceLoaded</span><span class="hljs-params">(String resource)</span> &#123;<br>    <span class="hljs-keyword">return</span> loadedResources.contains(resource);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProxyFactory</span><span class="hljs-params">(ProxyFactory proxyFactory)</span> &#123;<br>    <span class="hljs-keyword">if</span> (proxyFactory == <span class="hljs-literal">null</span>) &#123; <br>      <span class="hljs-comment">// 默认为JavassistProxyFactory</span><br>      proxyFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavassistProxyFactory</span>();<br>    &#125;<br>    <span class="hljs-built_in">this</span>.proxyFactory = proxyFactory;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDefaultScriptingLanguage</span><span class="hljs-params">(Class&lt;?&gt; driver)</span> &#123;<br>    <span class="hljs-keyword">if</span> (driver == <span class="hljs-literal">null</span>) &#123; <br>      <span class="hljs-comment">// 默认为 XMLLanguageDriver</span><br>      driver = XMLLanguageDriver.class;<br>    &#125;<br>    getLanguageRegistry().setDefaultDriverClass(driver);<br>  &#125; <br><br>  <span class="hljs-comment">// 创建元对象</span><br>  <span class="hljs-keyword">public</span> MetaObject <span class="hljs-title function_">newMetaObject</span><span class="hljs-params">(Object object)</span> &#123;<br>    <span class="hljs-keyword">return</span> MetaObject.forObject(object, objectFactory, objectWrapperFactory);<br>  &#125; <br><br>  <span class="hljs-comment">// 创建参数处理器</span><br>  <span class="hljs-keyword">public</span> ParameterHandler <span class="hljs-title function_">newParameterHandler</span><span class="hljs-params">(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql)</span> &#123;<br>    <span class="hljs-comment">// 创建ParameterHandler</span><br>    <span class="hljs-type">ParameterHandler</span> <span class="hljs-variable">parameterHandler</span> <span class="hljs-operator">=</span> mappedStatement.getLang().createParameterHandler(mappedStatement, parameterObject, boundSql);<br>    <span class="hljs-comment">// 插件在这里插入</span><br>    parameterHandler = (ParameterHandler) interceptorChain.pluginAll(parameterHandler);<br>    <span class="hljs-keyword">return</span> parameterHandler;<br>  &#125; <br><br>  <span class="hljs-comment">// 创建结果集处理器</span><br>  <span class="hljs-keyword">public</span> ResultSetHandler <span class="hljs-title function_">newResultSetHandler</span><span class="hljs-params">(Executor executor, MappedStatement mappedStatement, RowBounds rowBounds, ParameterHandler parameterHandler,</span><br><span class="hljs-params">      ResultHandler resultHandler, BoundSql boundSql)</span> &#123;<br>    <span class="hljs-comment">// 创建DefaultResultSetHandler(稍老一点的版本3.1是创建NestedResultSetHandler或者FastResultSetHandler)</span><br>    <span class="hljs-type">ResultSetHandler</span> <span class="hljs-variable">resultSetHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultResultSetHandler</span>(executor, mappedStatement, parameterHandler, resultHandler, boundSql, rowBounds);<br>    <span class="hljs-comment">// 插件在这里插入</span><br>    resultSetHandler = (ResultSetHandler) interceptorChain.pluginAll(resultSetHandler);<br>    <span class="hljs-keyword">return</span> resultSetHandler;<br>  &#125; <br><br>  <span class="hljs-comment">// 创建语句处理器</span><br>  <span class="hljs-keyword">public</span> StatementHandler <span class="hljs-title function_">newStatementHandler</span><span class="hljs-params">(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> &#123;<br>    <span class="hljs-comment">// 创建路由选择语句处理器</span><br>    <span class="hljs-type">StatementHandler</span> <span class="hljs-variable">statementHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RoutingStatementHandler</span>(executor, mappedStatement, parameterObject, rowBounds, resultHandler, boundSql);<br>    <span class="hljs-comment">// 插件在这里插入</span><br>    statementHandler = (StatementHandler) interceptorChain.pluginAll(statementHandler);<br>    <span class="hljs-keyword">return</span> statementHandler;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Executor <span class="hljs-title function_">newExecutor</span><span class="hljs-params">(Transaction transaction)</span> &#123;<br>    <span class="hljs-keyword">return</span> newExecutor(transaction, defaultExecutorType);<br>  &#125; <br><br>  <span class="hljs-comment">// 产生执行器</span><br>  <span class="hljs-keyword">public</span> Executor <span class="hljs-title function_">newExecutor</span><span class="hljs-params">(Transaction transaction, ExecutorType executorType)</span> &#123;<br>    executorType = executorType == <span class="hljs-literal">null</span> ? defaultExecutorType : executorType;<br>    <span class="hljs-comment">// 这句再做一下保护,囧,防止粗心大意的人将defaultExecutorType设成null?</span><br>    executorType = executorType == <span class="hljs-literal">null</span> ? ExecutorType.SIMPLE : executorType;<br>    Executor executor;<br>    <span class="hljs-comment">// 然后就是简单的3个分支，产生3种执行器BatchExecutor/ReuseExecutor/SimpleExecutor</span><br>    <span class="hljs-keyword">if</span> (ExecutorType.BATCH == executorType) &#123;<br>      executor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BatchExecutor</span>(<span class="hljs-built_in">this</span>, transaction);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ExecutorType.REUSE == executorType) &#123;<br>      executor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReuseExecutor</span>(<span class="hljs-built_in">this</span>, transaction);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      executor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleExecutor</span>(<span class="hljs-built_in">this</span>, transaction);<br>    &#125;<br>    <span class="hljs-comment">// 如果要求缓存，生成另一种CachingExecutor(默认就是有缓存),装饰者模式,所以默认都是返回CachingExecutor</span><br>    <span class="hljs-keyword">if</span> (cacheEnabled) &#123;<br>      executor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CachingExecutor</span>(executor);<br>    &#125;<br>    <span class="hljs-comment">// 此处调用插件,通过插件可以改变Executor行为</span><br>    executor = (Executor) interceptorChain.pluginAll(executor);<br>    <span class="hljs-keyword">return</span> executor;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResultMap</span><span class="hljs-params">(ResultMap rm)</span> &#123;<br>    resultMaps.put(rm.getId(), rm);<br>    checkLocallyForDiscriminatedNestedResultMaps(rm);<br>    checkGloballyForDiscriminatedNestedResultMaps(rm);<br>  &#125; <br><br>  <span class="hljs-comment">// Slow but a one time cost. A better solution is welcome.</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkGloballyForDiscriminatedNestedResultMaps</span><span class="hljs-params">(ResultMap rm)</span> &#123;<br>    <span class="hljs-keyword">if</span> (rm.hasNestedResultMaps()) &#123;<br>      <span class="hljs-keyword">for</span> (Map.Entry&lt;String, ResultMap&gt; entry : resultMaps.entrySet()) &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> entry.getValue();<br>        <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> ResultMap) &#123;<br>          <span class="hljs-type">ResultMap</span> <span class="hljs-variable">entryResultMap</span> <span class="hljs-operator">=</span> (ResultMap) value;<br>          <span class="hljs-keyword">if</span> (!entryResultMap.hasNestedResultMaps() &amp;&amp; entryResultMap.getDiscriminator() != <span class="hljs-literal">null</span>) &#123;<br>            Collection&lt;String&gt; discriminatedResultMapNames = entryResultMap.getDiscriminator().getDiscriminatorMap().values();<br>            <span class="hljs-keyword">if</span> (discriminatedResultMapNames.contains(rm.getId())) &#123;<br>              entryResultMap.forceNestedResultMaps();<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// Slow but a one time cost. A better solution is welcome.</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkLocallyForDiscriminatedNestedResultMaps</span><span class="hljs-params">(ResultMap rm)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!rm.hasNestedResultMaps() &amp;&amp; rm.getDiscriminator() != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; entry : rm.getDiscriminator().getDiscriminatorMap().entrySet()) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">discriminatedResultMapName</span> <span class="hljs-operator">=</span> entry.getValue();<br>        <span class="hljs-keyword">if</span> (hasResultMap(discriminatedResultMapName)) &#123;<br>          <span class="hljs-type">ResultMap</span> <span class="hljs-variable">discriminatedResultMap</span> <span class="hljs-operator">=</span> resultMaps.get(discriminatedResultMapName);<br>          <span class="hljs-keyword">if</span> (discriminatedResultMap.hasNestedResultMaps()) &#123;<br>            rm.forceNestedResultMaps();<br>            <span class="hljs-keyword">break</span>;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Collection&lt;String&gt; <span class="hljs-title function_">getMappedStatementNames</span><span class="hljs-params">()</span> &#123;<br>    buildAllStatements();<br>    <span class="hljs-keyword">return</span> mappedStatements.keySet();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Collection&lt;MappedStatement&gt; <span class="hljs-title function_">getMappedStatements</span><span class="hljs-params">()</span> &#123;<br>    buildAllStatements();<br>    <span class="hljs-keyword">return</span> mappedStatements.values();<br>  &#125; <br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * Parses all the unprocessed statement nodes in the cache. It is recommended</span><br><span class="hljs-comment">   * to call this method once all the mappers are added as it provides fail-fast</span><br><span class="hljs-comment">   * statement validation.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildAllStatements</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (!incompleteResultMaps.isEmpty()) &#123;<br>      <span class="hljs-keyword">synchronized</span> (incompleteResultMaps) &#123;<br>        <span class="hljs-comment">// This always throws a BuilderException.</span><br>        incompleteResultMaps.iterator().next().resolve();<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!incompleteCacheRefs.isEmpty()) &#123;<br>      <span class="hljs-keyword">synchronized</span> (incompleteCacheRefs) &#123;<br>        <span class="hljs-comment">// This always throws a BuilderException.</span><br>        incompleteCacheRefs.iterator().next().resolveCacheRef();<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!incompleteStatements.isEmpty()) &#123;<br>      <span class="hljs-keyword">synchronized</span> (incompleteStatements) &#123;<br>        <span class="hljs-comment">// This always throws a BuilderException.</span><br>        incompleteStatements.iterator().next().parseStatementNode();<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!incompleteMethods.isEmpty()) &#123;<br>      <span class="hljs-keyword">synchronized</span> (incompleteMethods) &#123;<br>        <span class="hljs-comment">// This always throws a BuilderException.</span><br>        incompleteMethods.iterator().next().resolve();<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 由DefaultSqlSession.selectList调用过来</span><br>  <span class="hljs-keyword">public</span> MappedStatement <span class="hljs-title function_">getMappedStatement</span><span class="hljs-params">(String id)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getMappedStatement(id, <span class="hljs-literal">true</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> MappedStatement <span class="hljs-title function_">getMappedStatement</span><span class="hljs-params">(String id, <span class="hljs-type">boolean</span> validateIncompleteStatements)</span> &#123;<br>    <span class="hljs-comment">// 先构建所有语句，再返回语句</span><br>    <span class="hljs-keyword">if</span> (validateIncompleteStatements) &#123;<br>      buildAllStatements();<br>    &#125;<br>    <span class="hljs-keyword">return</span> mappedStatements.get(id);<br>  &#125; <br><br>  <span class="hljs-comment">// 将包下所有类加入到mapper</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMappers</span><span class="hljs-params">(String packageName, Class&lt;?&gt; superType)</span> &#123;<br>    mapperRegistry.addMappers(packageName, superType);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasStatement</span><span class="hljs-params">(String statementName, <span class="hljs-type">boolean</span> validateIncompleteStatements)</span> &#123;<br>    <span class="hljs-keyword">if</span> (validateIncompleteStatements) &#123;<br>      buildAllStatements();<br>    &#125;<br>    <span class="hljs-keyword">return</span> mappedStatements.containsKey(statementName);<br>  &#125; <br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * Extracts namespace from fully qualified statement id.</span><br><span class="hljs-comment">   * 从完全限定的语句id中提取命名空间。</span><br><span class="hljs-comment">   * @param statementId</span><br><span class="hljs-comment">   * @return namespace or null when id does not contain period.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">protected</span> String <span class="hljs-title function_">extractNamespace</span><span class="hljs-params">(String statementId)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">lastPeriod</span> <span class="hljs-operator">=</span> statementId.lastIndexOf(<span class="hljs-string">&#x27;.&#x27;</span>);<br>    <span class="hljs-keyword">return</span> lastPeriod &gt; <span class="hljs-number">0</span> ? statementId.substring(<span class="hljs-number">0</span>, lastPeriod) : <span class="hljs-literal">null</span>;<br>  &#125; <br><br>  <span class="hljs-comment">// 静态内部类,严格的Map，不允许多次覆盖key所对应的value</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StrictMap</span>&lt;V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashMap</span>&lt;String, V&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">4950446264854982944L</span>;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StrictMap</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> initialCapacity, <span class="hljs-type">float</span> loadFactor)</span> &#123;<br>      <span class="hljs-built_in">super</span>(initialCapacity, loadFactor);<br>      <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StrictMap</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>      <span class="hljs-built_in">super</span>(initialCapacity);<br>      <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StrictMap</span><span class="hljs-params">(String name)</span> &#123;<br>      <span class="hljs-built_in">super</span>();<br>      <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">StrictMap</span><span class="hljs-params">(String name, Map&lt;String, ? extends V&gt; m)</span> &#123;<br>      <span class="hljs-built_in">super</span>(m);<br>      <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(String key, V value)</span> &#123;<br>      <span class="hljs-keyword">if</span> (containsKey(key)) &#123;<br>        <span class="hljs-comment">// 如果已经存在此key了，直接报错</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(name + <span class="hljs-string">&quot; already contains value for &quot;</span> + key);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (key.contains(<span class="hljs-string">&quot;.&quot;</span>)) &#123;<br>        <span class="hljs-comment">// 如果有.符号，取得短名称，大致用意就是包名不同，类名相同，提供模糊查询的功能</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">shortKey</span> <span class="hljs-operator">=</span> getShortName(key);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">super</span>.get(shortKey) == <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-comment">// 如果没有这个缩略，则放一个缩略</span><br>          <span class="hljs-built_in">super</span>.put(shortKey, value);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// 如果已经有此缩略，表示模糊，放一个Ambiguity型的</span><br>          <span class="hljs-built_in">super</span>.put(shortKey, (V) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ambiguity</span>(shortKey));<br>        &#125;<br>      &#125;<br>      <span class="hljs-comment">// 再放一个全名</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.put(key, value);<br>      <span class="hljs-comment">// 可以看到，如果有包名，会放2个key到这个map，一个缩略，一个全名</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>      <span class="hljs-type">V</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.get(key);<br>      <span class="hljs-comment">// 如果找不到相应的key，直接报错</span><br>      <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(name + <span class="hljs-string">&quot; does not contain value for &quot;</span> + key);<br>      &#125;<br>      <span class="hljs-comment">// 如果是模糊型的，也报错，提示用户</span><br>      <span class="hljs-comment">// 原来这个模糊型就是为了提示用户啊</span><br>      <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> Ambiguity) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(((Ambiguity) value).getSubject() + <span class="hljs-string">&quot; is ambiguous in &quot;</span> + name<br>            + <span class="hljs-string">&quot; (try using the full name including the namespace, or rename one of the entries)&quot;</span>);<br>      &#125;<br>      <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-comment">// 取得短名称，也就是取得最后那个句号的后面那部分</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getShortName</span><span class="hljs-params">(String key)</span> &#123;<br>      <span class="hljs-keyword">final</span> String[] keyparts = key.split(<span class="hljs-string">&quot;\\.&quot;</span>);<br>      <span class="hljs-keyword">return</span> keyparts[keyparts.length - <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-comment">// 模糊，居然放在Map里面的一个静态内部类，</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Ambiguity</span> &#123;<br>      <span class="hljs-comment">//提供一个主题</span><br>      <span class="hljs-keyword">private</span> String subject;<br><br>      <span class="hljs-keyword">public</span> <span class="hljs-title function_">Ambiguity</span><span class="hljs-params">(String subject)</span> &#123;<br>        <span class="hljs-built_in">this</span>.subject = subject;<br>      &#125;<br><br>      <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSubject</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> subject;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>17-plugin</title>
    <link href="/2023/09/04/17-plugin/"/>
    <url>/2023/09/04/17-plugin/</url>
    
    <content type="html"><![CDATA[<h4 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h4><p>    签名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Signature &#123;<br>  <span class="hljs-comment">// 就是定义哪些类，方法，参数需要被拦截</span><br>  Class&lt;?&gt; type();<br><br>  String <span class="hljs-title function_">method</span><span class="hljs-params">()</span>;<br><br>  Class&lt;?&gt;[] args();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Intercepts"><a href="#Intercepts" class="headerlink" title="Intercepts"></a>Intercepts</h4><p>    <code>@Intercepts</code>注解用于表明当前的对象是一个拦截器。其配置值是一个<code>@Signature</code>数组，而<code>@Signature</code>则用于声明要拦截的接口、方法以及对应的参数列表.所谓拦截器的作用就是可以拦截某些方法的调用，和Spring中的AOP是完全一致的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Intercepts &#123;<br>  Signature[] value();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Interceptor"><a href="#Interceptor" class="headerlink" title="Interceptor"></a>Interceptor</h4><p>    拦截器抽象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Interceptor</span> &#123;<br><br>  <span class="hljs-comment">// 拦截</span><br>  Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Invocation invocation)</span> <span class="hljs-keyword">throws</span> Throwable;<br><br>  <span class="hljs-comment">// 返回代理类</span><br>  Object <span class="hljs-title function_">plugin</span><span class="hljs-params">(Object target)</span>;<br><br>  <span class="hljs-comment">// 设置属性</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties properties)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Plugin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123; <br><br>  <span class="hljs-comment">// 被代理的对象</span><br>  <span class="hljs-keyword">private</span> Object target;<br>  <span class="hljs-comment">// 拦截器</span><br>  <span class="hljs-keyword">private</span> Interceptor interceptor;<br>  <span class="hljs-comment">// 要代理的方法</span><br>  <span class="hljs-keyword">private</span> Map&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt; signatureMap; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">Plugin</span><span class="hljs-params">(Object target, Interceptor interceptor, Map&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt; signatureMap)</span> &#123;<br>    <span class="hljs-built_in">this</span>.target = target;<br>    <span class="hljs-built_in">this</span>.interceptor = interceptor;<br>    <span class="hljs-built_in">this</span>.signatureMap = signatureMap;<br>  &#125; <br><br>  <span class="hljs-comment">// 生成代理类</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">wrap</span><span class="hljs-params">(Object target, Interceptor interceptor)</span> &#123;<br>    <span class="hljs-comment">// 取得签名Map</span><br>    Map&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt; signatureMap = getSignatureMap(interceptor);<br>    <span class="hljs-comment">// 取得要改变行为的类(ParameterHandler|ResultSetHandler|StatementHandler|Executor)</span><br>    Class&lt;?&gt; type = target.getClass();<br>    <span class="hljs-comment">// 取得接口</span><br>    Class&lt;?&gt;[] interfaces = getAllInterfaces(type, signatureMap);<br>    <span class="hljs-comment">// 产生代理</span><br>    <span class="hljs-keyword">if</span> (interfaces.length &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<br>          type.getClassLoader(),<br>          interfaces,<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">Plugin</span>(target, interceptor, signatureMap));<br>    &#125;<br>    <span class="hljs-keyword">return</span> target;<br>  &#125; <br><br>  <span class="hljs-comment">// 取得签名Map</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt; getSignatureMap(Interceptor interceptor) &#123;<br>    <span class="hljs-comment">// 取Intercepts注解，例子可参见ExamplePlugin.java</span><br>    <span class="hljs-type">Intercepts</span> <span class="hljs-variable">interceptsAnnotation</span> <span class="hljs-operator">=</span> interceptor.getClass().getAnnotation(Intercepts.class);<br>    <span class="hljs-comment">// issue #251</span><br>    <span class="hljs-comment">// 必须得有Intercepts注解，没有报错</span><br>    <span class="hljs-keyword">if</span> (interceptsAnnotation == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PluginException</span>(<span class="hljs-string">&quot;No @Intercepts annotation was found in interceptor &quot;</span> + interceptor.getClass().getName());      <br>    &#125;<br>    <span class="hljs-comment">// value是数组型，Signature的数组</span><br>    Signature[] sigs = interceptsAnnotation.value();<br>    <span class="hljs-comment">// 每个class里有多个Method需要被拦截,所以这么定义</span><br>    Map&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt; signatureMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt;();<br>    <span class="hljs-keyword">for</span> (Signature sig : sigs) &#123;<br>      Set&lt;Method&gt; methods = signatureMap.get(sig.type());<br>      <span class="hljs-keyword">if</span> (methods == <span class="hljs-literal">null</span>) &#123;<br>        methods = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Method&gt;();<br>        signatureMap.put(sig.type(), methods);<br>      &#125;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> sig.type().getMethod(sig.method(), sig.args());<br>        methods.add(method);<br>      &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PluginException</span>(<span class="hljs-string">&quot;Could not find method on &quot;</span> + sig.type() + <span class="hljs-string">&quot; named &quot;</span> + sig.method() + <span class="hljs-string">&quot;. Cause: &quot;</span> + e, e);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> signatureMap;<br>  &#125; <br><br>  <span class="hljs-comment">// 取得接口</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Class&lt;?&gt;[] getAllInterfaces(Class&lt;?&gt; type, Map&lt;Class&lt;?&gt;, Set&lt;Method&gt;&gt; signatureMap) &#123;<br>    Set&lt;Class&lt;?&gt;&gt; interfaces = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Class&lt;?&gt;&gt;();<br>    <span class="hljs-keyword">while</span> (type != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">for</span> (Class&lt;?&gt; c : type.getInterfaces()) &#123;<br>        <span class="hljs-comment">// 貌似只能拦截ParameterHandler|ResultSetHandler|StatementHandler|Executor</span><br>        <span class="hljs-comment">// 拦截其他的无效</span><br>        <span class="hljs-comment">// 当然我们可以覆盖Plugin.wrap方法，达到拦截其他类的功能</span><br>        <span class="hljs-keyword">if</span> (signatureMap.containsKey(c)) &#123;<br>          interfaces.add(c);<br>        &#125;<br>      &#125;<br>      type = type.getSuperclass();<br>    &#125;<br>    <span class="hljs-keyword">return</span> interfaces.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[interfaces.size()]);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 看看如何拦截</span><br>      Set&lt;Method&gt; methods = signatureMap.get(method.getDeclaringClass());<br>      <span class="hljs-comment">// 看哪些方法需要拦截</span><br>      <span class="hljs-keyword">if</span> (methods != <span class="hljs-literal">null</span> &amp;&amp; methods.contains(method)) &#123;<br>        <span class="hljs-comment">// 调用Interceptor.intercept，也即插入了我们自己的逻辑</span><br>        <span class="hljs-keyword">return</span> interceptor.intercept(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Invocation</span>(target, method, args));<br>      &#125;<br>      <span class="hljs-comment">// 没有拦截的话执行原来逻辑</span><br>      <span class="hljs-keyword">return</span> method.invoke(target, args);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(e);<br>    &#125;<br>  &#125; <br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Invocation"><a href="#Invocation" class="headerlink" title="Invocation"></a>Invocation</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Invocation</span> &#123;<br><br>  <span class="hljs-comment">// 调用的对象</span><br>  <span class="hljs-keyword">private</span> Object target;<br>  <span class="hljs-comment">// 调用的方法</span><br>  <span class="hljs-keyword">private</span> Method method;<br>  <span class="hljs-comment">// 参数</span><br>  <span class="hljs-keyword">private</span> Object[] args;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Invocation</span><span class="hljs-params">(Object target, Method method, Object[] args)</span> &#123;<br>    <span class="hljs-built_in">this</span>.target = target;<br>    <span class="hljs-built_in">this</span>.method = method;<br>    <span class="hljs-built_in">this</span>.args = args;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getTarget</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> target;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Method <span class="hljs-title function_">getMethod</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> method;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Object[] getArgs() &#123;<br>    <span class="hljs-keyword">return</span> args;<br>  &#125;<br><br>  <span class="hljs-comment">// 继续做下去</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">proceed</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InvocationTargetException, IllegalAccessException &#123;<br>    <span class="hljs-keyword">return</span> method.invoke(target, args);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="InterceptorChain"><a href="#InterceptorChain" class="headerlink" title="InterceptorChain"></a>InterceptorChain</h4><p>    拦截器链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterceptorChain</span> &#123;<br><br>  <span class="hljs-comment">// 内部就是一个拦截器的List</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;Interceptor&gt; interceptors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Interceptor&gt;();<br><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">pluginAll</span><span class="hljs-params">(Object target)</span> &#123;<br>    <span class="hljs-comment">// 循环调用每个Interceptor.plugin方法</span><br>    <span class="hljs-keyword">for</span> (Interceptor interceptor : interceptors) &#123;<br>      target = interceptor.plugin(target);<br>    &#125;<br>    <span class="hljs-keyword">return</span> target;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptor</span><span class="hljs-params">(Interceptor interceptor)</span> &#123;<br>    interceptors.add(interceptor);<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> List&lt;Interceptor&gt; <span class="hljs-title function_">getInterceptors</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Collections.unmodifiableList(interceptors);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>16-executor</title>
    <link href="/2023/08/28/16-executor/"/>
    <url>/2023/08/28/16-executor/</url>
    
    <content type="html"><![CDATA[<h4 id="ExecutionPlaceholder"><a href="#ExecutionPlaceholder" class="headerlink" title="ExecutionPlaceholder"></a>ExecutionPlaceholder</h4><p>    占位符,DeferredLoad判断是否能加载时用到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ExecutionPlaceholder</span> &#123;<br>  EXECUTION_PLACEHOLDER<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ErrorContext"><a href="#ErrorContext" class="headerlink" title="ErrorContext"></a>ErrorContext</h4><p>    错误上下文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ErrorContext</span> &#123; <br><br>  <span class="hljs-comment">// 获得 \n 不同的操作系统不一样</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LINE_SEPARATOR</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;line.separator&quot;</span>,<span class="hljs-string">&quot;\n&quot;</span>);<br>  <span class="hljs-comment">// 每个线程给开一个错误上下文，防止多线程问题</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;ErrorContext&gt; LOCAL = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;ErrorContext&gt;(); <br><br>  <span class="hljs-keyword">private</span> ErrorContext stored;<br>  <span class="hljs-keyword">private</span> String resource;<br>  <span class="hljs-keyword">private</span> String activity;<br>  <span class="hljs-keyword">private</span> String object;<br>  <span class="hljs-keyword">private</span> String message;<br>  <span class="hljs-keyword">private</span> String sql;<br>  <span class="hljs-keyword">private</span> Throwable cause; <br><br>  <span class="hljs-comment">// 单例模式</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">ErrorContext</span><span class="hljs-params">()</span> &#123;<br>  &#125; <br><br>  <span class="hljs-comment">// 工厂方法，得到一个实例</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ErrorContext <span class="hljs-title function_">instance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 因为是多线程，所以用了ThreadLocal  线程安全</span><br>    <span class="hljs-type">ErrorContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> LOCAL.get();<br>    <span class="hljs-comment">// 懒汉 单例模式</span><br>    <span class="hljs-keyword">if</span> (context == <span class="hljs-literal">null</span>) &#123;<br>      context = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorContext</span>();<br>      LOCAL.set(context);<br>    &#125;<br>    <span class="hljs-keyword">return</span> context;<br>  &#125; <br><br>  <span class="hljs-comment">// 看代码的意思是把ErrorContext存起来供后用，并把ThreadLocal里的东西清空了</span><br>  <span class="hljs-comment">// 这里的代码似乎有点问题</span><br>  <span class="hljs-comment">// 修复代码和相关信息在下面的commit中</span><br>  <span class="hljs-comment">// https://github.com/mybatis/mybatis-3/commit/1e224840c362367d42fa2617581f2446025f7ff4</span><br>  <span class="hljs-keyword">public</span> ErrorContext <span class="hljs-title function_">store</span><span class="hljs-params">()</span> &#123;<br>    stored = <span class="hljs-built_in">this</span>;<br>    LOCAL.set(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorContext</span>());<br>    <span class="hljs-keyword">return</span> LOCAL.get();<br>  &#125; <br><br>  <span class="hljs-comment">// 应该是和store相对应的方法，store是存储起来，recall是召回</span><br>  <span class="hljs-keyword">public</span> ErrorContext <span class="hljs-title function_">recall</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (stored != <span class="hljs-literal">null</span>) &#123;<br>      LOCAL.set(stored);<br>      stored = <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> LOCAL.get();<br>  &#125; <br><br>  <span class="hljs-comment">// 以下都是建造者模式</span><br>  <span class="hljs-keyword">public</span> ErrorContext <span class="hljs-title function_">resource</span><span class="hljs-params">(String resource)</span> &#123;<br>    <span class="hljs-built_in">this</span>.resource = resource;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> ErrorContext <span class="hljs-title function_">activity</span><span class="hljs-params">(String activity)</span> &#123;<br>    <span class="hljs-built_in">this</span>.activity = activity;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> ErrorContext <span class="hljs-title function_">object</span><span class="hljs-params">(String object)</span> &#123;<br>    <span class="hljs-built_in">this</span>.object = object;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> ErrorContext <span class="hljs-title function_">message</span><span class="hljs-params">(String message)</span> &#123;<br>    <span class="hljs-built_in">this</span>.message = message;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> ErrorContext <span class="hljs-title function_">sql</span><span class="hljs-params">(String sql)</span> &#123;<br>    <span class="hljs-built_in">this</span>.sql = sql;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> ErrorContext <span class="hljs-title function_">cause</span><span class="hljs-params">(Throwable cause)</span> &#123;<br>    <span class="hljs-built_in">this</span>.cause = cause;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>  &#125; <br><br>  <span class="hljs-comment">// 全部清空重置</span><br>  <span class="hljs-keyword">public</span> ErrorContext <span class="hljs-title function_">reset</span><span class="hljs-params">()</span> &#123;<br>    resource = <span class="hljs-literal">null</span>;<br>    activity = <span class="hljs-literal">null</span>;<br>    object = <span class="hljs-literal">null</span>;<br>    message = <span class="hljs-literal">null</span>;<br>    sql = <span class="hljs-literal">null</span>;<br>    cause = <span class="hljs-literal">null</span>;<br>    LOCAL.remove();<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>  &#125; <br><br>  <span class="hljs-comment">// 打印信息供人阅读</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">description</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>    <span class="hljs-comment">// message</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.message != <span class="hljs-literal">null</span>) &#123;<br>      description.append(LINE_SEPARATOR);<br>      description.append(<span class="hljs-string">&quot;### &quot;</span>);<br>      description.append(<span class="hljs-built_in">this</span>.message);<br>    &#125;<br><br>    <span class="hljs-comment">// resource</span><br>    <span class="hljs-keyword">if</span> (resource != <span class="hljs-literal">null</span>) &#123;<br>      description.append(LINE_SEPARATOR);<br>      description.append(<span class="hljs-string">&quot;### The error may exist in &quot;</span>);<br>      description.append(resource);<br>    &#125;<br><br>    <span class="hljs-comment">// object</span><br>    <span class="hljs-keyword">if</span> (object != <span class="hljs-literal">null</span>) &#123;<br>      description.append(LINE_SEPARATOR);<br>      description.append(<span class="hljs-string">&quot;### The error may involve &quot;</span>);<br>      description.append(object);<br>    &#125;<br><br>    <span class="hljs-comment">// activity</span><br>    <span class="hljs-keyword">if</span> (activity != <span class="hljs-literal">null</span>) &#123;<br>      description.append(LINE_SEPARATOR);<br>      description.append(<span class="hljs-string">&quot;### The error occurred while &quot;</span>);<br>      description.append(activity);<br>    &#125;<br><br>    <span class="hljs-comment">// activity</span><br>    <span class="hljs-keyword">if</span> (sql != <span class="hljs-literal">null</span>) &#123;<br>      description.append(LINE_SEPARATOR);<br>      description.append(<span class="hljs-string">&quot;### SQL: &quot;</span>);<br>      <span class="hljs-comment">// 把sql压缩到一行里</span><br>      description.append(sql.replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>).replace(<span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>).replace(<span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>).trim());<br>    &#125;<br><br>    <span class="hljs-comment">// cause</span><br>    <span class="hljs-keyword">if</span> (cause != <span class="hljs-literal">null</span>) &#123;<br>      description.append(LINE_SEPARATOR);<br>      description.append(<span class="hljs-string">&quot;### Cause: &quot;</span>);<br>      description.append(cause.toString());<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> description.toString();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ResultExtractor"><a href="#ResultExtractor" class="headerlink" title="ResultExtractor"></a>ResultExtractor</h4><p>    结果抽取器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultExtractor</span> &#123; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Configuration configuration;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ObjectFactory objectFactory; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResultExtractor</span><span class="hljs-params">(Configuration configuration, ObjectFactory objectFactory)</span> &#123;<br>    <span class="hljs-built_in">this</span>.configuration = configuration;<br>    <span class="hljs-built_in">this</span>.objectFactory = objectFactory;<br>  &#125; <br><br>  <span class="hljs-comment">// 对targetType为List、Collection和Array时做转换处理</span><br>  <span class="hljs-comment">// 否则，检查并只返回一项</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">extractObjectFromList</span><span class="hljs-params">(List&lt;Object&gt; list, Class&lt;?&gt; targetType)</span> &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (targetType != <span class="hljs-literal">null</span> &amp;&amp; targetType.isAssignableFrom(list.getClass())) &#123;<br>      <span class="hljs-comment">// 1.如果targetType是list，直接返回list</span><br>      value = list;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (targetType != <span class="hljs-literal">null</span> &amp;&amp; objectFactory.isCollection(targetType)) &#123;<br>      <span class="hljs-comment">// 2.如果targetType是Collection，返回包装好的list</span><br>      value = objectFactory.create(targetType);<br>      <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaObject</span> <span class="hljs-operator">=</span> configuration.newMetaObject(value);<br>      metaObject.addAll(list);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (targetType != <span class="hljs-literal">null</span> &amp;&amp; targetType.isArray()) &#123;<br>      <span class="hljs-comment">// 3.如果targetType是数组，则list转数组</span><br>      Class&lt;?&gt; arrayComponentType = targetType.getComponentType();<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">array</span> <span class="hljs-operator">=</span> Array.newInstance(arrayComponentType, list.size());<br>      <span class="hljs-keyword">if</span> (arrayComponentType.isPrimitive()) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>          Array.set(array, i, list.get(i));<br>        &#125;<br>        value = array;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        value = list.toArray((Object[])array);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 4.否则返回list的第0个元素</span><br>      <span class="hljs-keyword">if</span> (list != <span class="hljs-literal">null</span> &amp;&amp; list.size() &gt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Statement returned more than one row, where no more than one was expected.&quot;</span>);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (list != <span class="hljs-literal">null</span> &amp;&amp; list.size() == <span class="hljs-number">1</span>) &#123;<br>        value = list.get(<span class="hljs-number">0</span>);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> value;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="KeyGenerator"><a href="#KeyGenerator" class="headerlink" title="KeyGenerator"></a>KeyGenerator</h4><p>    键值生成器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">KeyGenerator</span> &#123;<br><br>  <span class="hljs-comment">// 定了2个回调方法，processBefore,processAfter</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">processBefore</span><span class="hljs-params">(Executor executor, MappedStatement ms, Statement stmt, Object parameter)</span>;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">processAfter</span><span class="hljs-params">(Executor executor, MappedStatement ms, Statement stmt, Object parameter)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="NoKeyGenerator"><a href="#NoKeyGenerator" class="headerlink" title="NoKeyGenerator"></a>NoKeyGenerator</h4><p>    不用键值生成器,MappedStatement有一个keyGenerator属性，默认的就用NoKeyGenerator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NoKeyGenerator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">KeyGenerator</span> &#123;<br><br>  <span class="hljs-comment">// 都是空方法</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processBefore</span><span class="hljs-params">(Executor executor, MappedStatement ms, Statement stmt, Object parameter)</span> &#123;<br>    <span class="hljs-comment">// Do Nothing</span><br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processAfter</span><span class="hljs-params">(Executor executor, MappedStatement ms, Statement stmt, Object parameter)</span> &#123;<br>    <span class="hljs-comment">// Do Nothing</span><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Jdbc3KeyGenerator"><a href="#Jdbc3KeyGenerator" class="headerlink" title="Jdbc3KeyGenerator"></a>Jdbc3KeyGenerator</h4><p>    JDBC3键值生成器,核心是使用JDBC3的Statement.getGeneratedKeys</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Jdbc3KeyGenerator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">KeyGenerator</span> &#123;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processBefore</span><span class="hljs-params">(Executor executor, MappedStatement ms, Statement stmt, Object parameter)</span> &#123;<br>    <span class="hljs-comment">// do nothing</span><br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processAfter</span><span class="hljs-params">(Executor executor, MappedStatement ms, Statement stmt, Object parameter)</span> &#123;<br>    List&lt;Object&gt; parameters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;();<br>    parameters.add(parameter);<br>    processBatch(ms, stmt, parameters);<br>  &#125; <br><br>  <span class="hljs-comment">// 批处理</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processBatch</span><span class="hljs-params">(MappedStatement ms, Statement stmt, List&lt;Object&gt; parameters)</span> &#123;<br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 核心是使用JDBC3的Statement.getGeneratedKeys</span><br>      rs = stmt.getGeneratedKeys();<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">Configuration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> ms.getConfiguration();<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">TypeHandlerRegistry</span> <span class="hljs-variable">typeHandlerRegistry</span> <span class="hljs-operator">=</span> configuration.getTypeHandlerRegistry();<br>      <span class="hljs-keyword">final</span> String[] keyProperties = ms.getKeyProperties();<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">rsmd</span> <span class="hljs-operator">=</span> rs.getMetaData();<br>      TypeHandler&lt;?&gt;[] typeHandlers = <span class="hljs-literal">null</span>; <br>      <span class="hljs-comment">// ResultSet 返回的列大于等于定义的返回列的数量</span><br>      <span class="hljs-keyword">if</span> (keyProperties != <span class="hljs-literal">null</span> &amp;&amp; rsmd.getColumnCount() &gt;= keyProperties.length) &#123;<br>        <span class="hljs-keyword">for</span> (Object parameter : parameters) &#123;<br>          <span class="hljs-comment">// there should be one row for each statement (also one for each parameter)</span><br>          <span class="hljs-keyword">if</span> (!rs.next()) &#123;<br>            <span class="hljs-keyword">break</span>;<br>          &#125;<br>          <span class="hljs-keyword">final</span> <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaParam</span> <span class="hljs-operator">=</span> configuration.newMetaObject(parameter);<br>          <span class="hljs-keyword">if</span> (typeHandlers == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 先取得类型处理器</span><br>            typeHandlers = getTypeHandlers(typeHandlerRegistry, metaParam, keyProperties);<br>          &#125;<br>          <span class="hljs-comment">// 填充键值</span><br>          populateKeys(rs, metaParam, keyProperties, typeHandlers);<br>        &#125;<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Error getting generated key or setting result to parameter object. Cause: &quot;</span> + e, e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-keyword">if</span> (rs != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          rs.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>          <span class="hljs-comment">// ignore</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> TypeHandler&lt;?&gt;[] getTypeHandlers(TypeHandlerRegistry typeHandlerRegistry, MetaObject metaParam, String[] keyProperties) &#123;<br>    TypeHandler&lt;?&gt;[] typeHandlers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeHandler</span>&lt;?&gt;[keyProperties.length];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; keyProperties.length; i++) &#123;<br>      <span class="hljs-keyword">if</span> (metaParam.hasSetter(keyProperties[i])) &#123;<br>        Class&lt;?&gt; keyPropertyType = metaParam.getSetterType(keyProperties[i]);<br>        TypeHandler&lt;?&gt; th = typeHandlerRegistry.getTypeHandler(keyPropertyType);<br>        typeHandlers[i] = th;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> typeHandlers;<br>  &#125; <br><br>  <span class="hljs-comment">// 给key属性赋值</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">populateKeys</span><span class="hljs-params">(ResultSet rs, MetaObject metaParam, String[] keyProperties, TypeHandler&lt;?&gt;[] typeHandlers)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; keyProperties.length; i++) &#123;<br>      TypeHandler&lt;?&gt; th = typeHandlers[i];<br>      <span class="hljs-keyword">if</span> (th != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> th.getResult(rs, i + <span class="hljs-number">1</span>);<br>        metaParam.setValue(keyProperties[i], value);<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SelectKeyGenerator"><a href="#SelectKeyGenerator" class="headerlink" title="SelectKeyGenerator"></a>SelectKeyGenerator</h4><p>    自定义查询语句KeyGenerator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SelectKeyGenerator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">KeyGenerator</span> &#123; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SELECT_KEY_SUFFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;!selectKey&quot;</span>;<br>  <span class="hljs-comment">// 可以自定义在sql语句执行之前还是之后执行selectKey语句</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> executeBefore;<br>  <span class="hljs-keyword">private</span> MappedStatement keyStatement; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">SelectKeyGenerator</span><span class="hljs-params">(MappedStatement keyStatement, <span class="hljs-type">boolean</span> executeBefore)</span> &#123;<br>    <span class="hljs-built_in">this</span>.executeBefore = executeBefore;<br>    <span class="hljs-built_in">this</span>.keyStatement = keyStatement;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processBefore</span><span class="hljs-params">(Executor executor, MappedStatement ms, Statement stmt, Object parameter)</span> &#123;<br>    <span class="hljs-keyword">if</span> (executeBefore) &#123;<br>      processGeneratedKeys(executor, ms, parameter);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processAfter</span><span class="hljs-params">(Executor executor, MappedStatement ms, Statement stmt, Object parameter)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!executeBefore) &#123;<br>      processGeneratedKeys(executor, ms, parameter);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processGeneratedKeys</span><span class="hljs-params">(Executor executor, MappedStatement ms, Object parameter)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">if</span> (parameter != <span class="hljs-literal">null</span> &amp;&amp; keyStatement != <span class="hljs-literal">null</span> &amp;&amp; keyStatement.getKeyProperties() != <span class="hljs-literal">null</span>) &#123;<br>        String[] keyProperties = keyStatement.getKeyProperties();<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Configuration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> ms.getConfiguration();<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaParam</span> <span class="hljs-operator">=</span> configuration.newMetaObject(parameter);<br>        <span class="hljs-keyword">if</span> (keyProperties != <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-comment">// Do not close keyExecutor.</span><br>          <span class="hljs-comment">// The transaction will be closed by parent executor.</span><br>          <span class="hljs-type">Executor</span> <span class="hljs-variable">keyExecutor</span> <span class="hljs-operator">=</span> configuration.newExecutor(executor.getTransaction(), ExecutorType.SIMPLE);<br>          List&lt;Object&gt; values = keyExecutor.query(keyStatement, parameter, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER);<br>          <span class="hljs-keyword">if</span> (values.size() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;SelectKey returned no data.&quot;</span>);            <br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (values.size() &gt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;SelectKey returned more than one value.&quot;</span>);<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaResult</span> <span class="hljs-operator">=</span> configuration.newMetaObject(values.get(<span class="hljs-number">0</span>));<br>            <span class="hljs-keyword">if</span> (keyProperties.length == <span class="hljs-number">1</span>) &#123;<br>              <span class="hljs-keyword">if</span> (metaResult.hasGetter(keyProperties[<span class="hljs-number">0</span>])) &#123;<br>                setValue(metaParam, keyProperties[<span class="hljs-number">0</span>], metaResult.getValue(keyProperties[<span class="hljs-number">0</span>]));<br>              &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// no getter for the property - maybe just a single value object</span><br>                <span class="hljs-comment">// so try that</span><br>                setValue(metaParam, keyProperties[<span class="hljs-number">0</span>], values.get(<span class="hljs-number">0</span>));<br>              &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              handleMultipleProperties(keyProperties, metaParam, metaResult);<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (ExecutorException e) &#123;<br>      <span class="hljs-keyword">throw</span> e;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Error selecting key or setting result to parameter object. Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(MetaObject metaParam, String property, Object value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (metaParam.hasSetter(property)) &#123;<br>      metaParam.setValue(property, value);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;No setter found for the keyProperty &#x27;&quot;</span> + property + <span class="hljs-string">&quot;&#x27; in &quot;</span> + metaParam.getOriginalObject().getClass().getName() + <span class="hljs-string">&quot;.&quot;</span>);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMultipleProperties</span><span class="hljs-params">(String[] keyProperties,</span><br><span class="hljs-params">      MetaObject metaParam, MetaObject metaResult)</span> &#123;<br>    String[] keyColumns = keyStatement.getKeyColumns();<br><br>    <span class="hljs-keyword">if</span> (keyColumns == <span class="hljs-literal">null</span> || keyColumns.length == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">// no key columns specified, just use the property names </span><br>      <span class="hljs-comment">// 没有指定key property对应的columns</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; keyProperties.length; i++) &#123;<br>        setValue(metaParam, keyProperties[i], metaResult.getValue(keyProperties[i]));<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (keyColumns.length != keyProperties.length) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;If SelectKey has key columns, the number must match the number of key properties.&quot;</span>);<br>      &#125;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; keyProperties.length; i++) &#123;<br>        setValue(metaParam, keyProperties[i], metaResult.getValue(keyColumns[i]));<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ProxyFactory"><a href="#ProxyFactory" class="headerlink" title="ProxyFactory"></a>ProxyFactory</h4><p>    代理工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProxyFactory</span> &#123;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties properties)</span>;<br><br>  Object <span class="hljs-title function_">createProxy</span><span class="hljs-params">(Object target, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ResultLoader"><a href="#ResultLoader" class="headerlink" title="ResultLoader"></a>ResultLoader</h4><p>    结果延迟加载器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultLoader</span> &#123; <br><br>  <span class="hljs-comment">// 配置</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Configuration configuration;<br>  <span class="hljs-comment">// 执行器</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Executor executor;<br>  <span class="hljs-comment">// 映射的语句</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> MappedStatement mappedStatement;<br>  <span class="hljs-comment">// 参数</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Object parameterObject;<br>  <span class="hljs-comment">// 定义的返回类型</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Class&lt;?&gt; targetType;<br>  <span class="hljs-comment">// 对象工厂</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> ObjectFactory objectFactory;<br>  <span class="hljs-comment">// cache key</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> CacheKey cacheKey;<br>  <span class="hljs-comment">// 绑定的sql，包括?和绑定的参数</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> BoundSql boundSql;<br>  <span class="hljs-comment">// 结果抽取器</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> ResultExtractor resultExtractor;<br>  <span class="hljs-comment">// 创建线程</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> creatorThreadId;<br>  <span class="hljs-comment">// 是否加载</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> loaded;<br>  <span class="hljs-comment">// 结果</span><br>  <span class="hljs-keyword">protected</span> Object resultObject; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResultLoader</span><span class="hljs-params">(Configuration config, Executor executor, MappedStatement mappedStatement, Object parameterObject, Class&lt;?&gt; targetType, CacheKey cacheKey, BoundSql boundSql)</span> &#123;<br>    <span class="hljs-built_in">this</span>.configuration = config;<br>    <span class="hljs-built_in">this</span>.executor = executor;<br>    <span class="hljs-built_in">this</span>.mappedStatement = mappedStatement;<br>    <span class="hljs-built_in">this</span>.parameterObject = parameterObject;<br>    <span class="hljs-built_in">this</span>.targetType = targetType;<br>    <span class="hljs-built_in">this</span>.objectFactory = configuration.getObjectFactory();<br>    <span class="hljs-built_in">this</span>.cacheKey = cacheKey;<br>    <span class="hljs-built_in">this</span>.boundSql = boundSql;<br>    <span class="hljs-built_in">this</span>.resultExtractor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultExtractor</span>(configuration, objectFactory);<br>    <span class="hljs-built_in">this</span>.creatorThreadId = Thread.currentThread().getId();<br>  &#125; <br><br>  <span class="hljs-comment">// 加载结果</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">loadResult</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">// 1.selectList</span><br>    List&lt;Object&gt; list = selectList();<br>    <span class="hljs-comment">// 2.ResultExtractor.extractObjectFromList</span><br>    resultObject = resultExtractor.extractObjectFromList(list, targetType);<br>    <span class="hljs-keyword">return</span> resultObject;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">selectList</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">Executor</span> <span class="hljs-variable">localExecutor</span> <span class="hljs-operator">=</span> executor;<br>    <span class="hljs-comment">// 如果executor已经被关闭了，则创建一个新的</span><br>    <span class="hljs-keyword">if</span> (Thread.currentThread().getId() != <span class="hljs-built_in">this</span>.creatorThreadId || localExecutor.isClosed()) &#123;<br>      localExecutor = newExecutor();<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 委托给Executor.query</span><br>      <span class="hljs-keyword">return</span> localExecutor.&lt;E&gt; query(mappedStatement, parameterObject, RowBounds.DEFAULT, Executor.NO_RESULT_HANDLER, cacheKey, boundSql);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-keyword">if</span> (localExecutor != executor) &#123;<br>        localExecutor.close(<span class="hljs-literal">false</span>);<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Executor <span class="hljs-title function_">newExecutor</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Environment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> configuration.getEnvironment();<br>    <span class="hljs-keyword">if</span> (environment == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;ResultLoader could not load lazily.  Environment was not configured.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">DataSource</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> environment.getDataSource();<br>    <span class="hljs-keyword">if</span> (ds == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;ResultLoader could not load lazily.  DataSource was not configured.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">TransactionFactory</span> <span class="hljs-variable">transactionFactory</span> <span class="hljs-operator">=</span> environment.getTransactionFactory();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Transaction</span> <span class="hljs-variable">tx</span> <span class="hljs-operator">=</span> transactionFactory.newTransaction(ds, <span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>);<br>    <span class="hljs-comment">// 如果executor已经被关闭了，则创建一个新的SimpleExecutor</span><br>    <span class="hljs-keyword">return</span> configuration.newExecutor(tx, ExecutorType.SIMPLE);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">wasNull</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> resultObject == <span class="hljs-literal">null</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ResultLoaderMap"><a href="#ResultLoaderMap" class="headerlink" title="ResultLoaderMap"></a>ResultLoaderMap</h4><p>    结果延迟加载器映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultLoaderMap</span> &#123; <br><br>  <span class="hljs-comment">// 加载对应的hashmap</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, LoadPair&gt; loaderMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, LoadPair&gt;();<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Property which was not loaded yet.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 静态内部类，加载对</span><br>  <span class="hljs-comment">// 尚未加载的属性</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoadPair</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">20130412</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Name of factory method which returns database connection.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FACTORY_METHOD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;getConfiguration&quot;</span>; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Object to check whether we went through serialization..</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">Object</span> <span class="hljs-variable">serializationCheck</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(); <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Meta object which sets loaded properties.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> MetaObject metaResultObject; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Result loader which loads unread properties.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">// 通过ResultLoader加载属性</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> ResultLoader resultLoader; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Wow, logger.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> Log log; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Factory class through which we get database connection.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Class&lt;?&gt; configurationFactory; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Name of the unread property.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">// 尚未加载的属性名称</span><br>    <span class="hljs-keyword">private</span> String property; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ID of SQL statement which loads the property.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String mappedStatement; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Parameter of the sql statement.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Serializable mappedParameter; <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">LoadPair</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String property, MetaObject metaResultObject, ResultLoader resultLoader)</span> &#123;<br>      <span class="hljs-built_in">this</span>.property = property;<br>      <span class="hljs-built_in">this</span>.metaResultObject = metaResultObject;<br>      <span class="hljs-built_in">this</span>.resultLoader = resultLoader;<br><br>      <span class="hljs-comment">/* Save required information only if original object can be serialized. */</span><br>      <span class="hljs-keyword">if</span> (metaResultObject != <span class="hljs-literal">null</span> &amp;&amp; metaResultObject.getOriginalObject() <span class="hljs-keyword">instanceof</span> Serializable) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">mappedStatementParameter</span> <span class="hljs-operator">=</span> resultLoader.parameterObject;<br><br>        <span class="hljs-comment">/* @todo May the parameter be null? */</span><br>        <span class="hljs-keyword">if</span> (mappedStatementParameter <span class="hljs-keyword">instanceof</span> Serializable) &#123;<br>          <span class="hljs-built_in">this</span>.mappedStatement = resultLoader.mappedStatement.getId();<br>          <span class="hljs-built_in">this</span>.mappedParameter = (Serializable) mappedStatementParameter;<br><br>          <span class="hljs-built_in">this</span>.configurationFactory = resultLoader.configuration.getConfigurationFactory();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-built_in">this</span>.getLogger().debug(<span class="hljs-string">&quot;Property [&quot;</span> + <span class="hljs-built_in">this</span>.property + <span class="hljs-string">&quot;] of [&quot;</span><br>                  + metaResultObject.getOriginalObject().getClass() + <span class="hljs-string">&quot;] cannot be loaded &quot;</span><br>                  + <span class="hljs-string">&quot;after deserialization. Make sure it&#x27;s loaded before serializing &quot;</span><br>                  + <span class="hljs-string">&quot;forenamed object.&quot;</span>);<br>        &#125;<br>      &#125;<br>    &#125; <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">load</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>      <span class="hljs-comment">/* These field should not be null unless the loadpair was serialized.</span><br><span class="hljs-comment">       * Yet in that case this method should not be called. */</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.metaResultObject == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;metaResultObject is null&quot;</span>);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.resultLoader == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;resultLoader is null&quot;</span>);<br>      &#125;<br><br>      <span class="hljs-built_in">this</span>.load(<span class="hljs-literal">null</span>);<br>    &#125; <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">load</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>      <span class="hljs-comment">/* These field should not be null unless the loadpair was serialized.</span><br><span class="hljs-comment">       * Yet in that case this method should not be called. */</span><br>      <span class="hljs-comment">// 除非loadpair可序列化，否则 this.metaResultObject 和</span><br>      <span class="hljs-comment">// this.resultLoader应该非空</span><br>      <span class="hljs-comment">// 而loadpair可序列化时，这个方法不应该被调用</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.metaResultObject == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;metaResultObject is null&quot;</span>);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.resultLoader == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;resultLoader is null&quot;</span>);<br>      &#125;<br><br>      <span class="hljs-built_in">this</span>.load(<span class="hljs-literal">null</span>);<br>    &#125; <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">load</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object userObject)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.metaResultObject == <span class="hljs-literal">null</span> || <span class="hljs-built_in">this</span>.resultLoader == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.mappedParameter == <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-comment">// 对应构造函数中的判断</span><br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Property [&quot;</span> + <span class="hljs-built_in">this</span>.property + <span class="hljs-string">&quot;] cannot be loaded because &quot;</span><br>                  + <span class="hljs-string">&quot;required parameter of mapped statement [&quot;</span><br>                  + <span class="hljs-built_in">this</span>.mappedStatement + <span class="hljs-string">&quot;] is not serializable.&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Configuration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getConfiguration();<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">MappedStatement</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> config.getMappedStatement(<span class="hljs-built_in">this</span>.mappedStatement);<br>        <span class="hljs-keyword">if</span> (ms == <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Cannot lazy load property [&quot;</span> + <span class="hljs-built_in">this</span>.property<br>                  + <span class="hljs-string">&quot;] of deserialized object [&quot;</span> + userObject.getClass()<br>                  + <span class="hljs-string">&quot;] because configuration does not contain statement [&quot;</span><br>                  + <span class="hljs-built_in">this</span>.mappedStatement + <span class="hljs-string">&quot;]&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-built_in">this</span>.metaResultObject = config.newMetaObject(userObject);<br>        <span class="hljs-built_in">this</span>.resultLoader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultLoader</span>(config, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClosedExecutor</span>(), ms, <span class="hljs-built_in">this</span>.mappedParameter,<br>                metaResultObject.getSetterType(<span class="hljs-built_in">this</span>.property), <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>      &#125;<br><br>      <span class="hljs-comment">/* We are using a new executor because we may be (and likely are) on a new thread</span><br><span class="hljs-comment">       * and executors aren&#x27;t thread safe. (Is this sufficient?)</span><br><span class="hljs-comment">       *</span><br><span class="hljs-comment">       * A better approach would be making executors thread safe. */</span><br>      <span class="hljs-comment">// 可能是在新的线程中，而executor不是线程安全的，所以用了一个新的excutor</span><br>      <span class="hljs-comment">// 更好的方法是使得executors线程安全</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.serializationCheck == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ResultLoader</span> <span class="hljs-variable">old</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.resultLoader;<br>        <span class="hljs-built_in">this</span>.resultLoader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultLoader</span>(old.configuration, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClosedExecutor</span>(), old.mappedStatement,<br>                old.parameterObject, old.targetType, old.cacheKey, old.boundSql);<br>      &#125;<br>      <span class="hljs-comment">// 就是构造resultLoader后设置属性</span><br>      <span class="hljs-built_in">this</span>.metaResultObject.setValue(property, <span class="hljs-built_in">this</span>.resultLoader.loadResult());<br>    &#125; <br><br>    <span class="hljs-comment">// 通过反射获取配置</span><br>    <span class="hljs-keyword">private</span> Configuration <span class="hljs-title function_">getConfiguration</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.configurationFactory == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Cannot get Configuration as configuration factory was not set.&quot;</span>);<br>      &#125;<br><br>      <span class="hljs-type">Object</span> <span class="hljs-variable">configurationObject</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Method</span> <span class="hljs-variable">factoryMethod</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.configurationFactory.getDeclaredMethod(FACTORY_METHOD);<br>        <span class="hljs-keyword">if</span> (!Modifier.isStatic(factoryMethod.getModifiers())) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Cannot get Configuration as factory method [&quot;</span><br>                  + <span class="hljs-built_in">this</span>.configurationFactory + <span class="hljs-string">&quot;]#[&quot;</span><br>                  + FACTORY_METHOD + <span class="hljs-string">&quot;] is not static.&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (!factoryMethod.isAccessible()) &#123;<br>          configurationObject = AccessController.doPrivileged(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrivilegedExceptionAction</span>&lt;Object&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">run</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>              <span class="hljs-keyword">try</span> &#123;<br>                factoryMethod.setAccessible(<span class="hljs-literal">true</span>);<br>                <span class="hljs-keyword">return</span> factoryMethod.invoke(<span class="hljs-literal">null</span>);<br>              &#125; <span class="hljs-keyword">finally</span> &#123;<br>                factoryMethod.setAccessible(<span class="hljs-literal">false</span>);<br>              &#125;<br>            &#125;<br>          &#125;);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          configurationObject = factoryMethod.invoke(<span class="hljs-literal">null</span>);<br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-keyword">final</span> NoSuchMethodException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Cannot get Configuration as factory class [&quot;</span><br>                + <span class="hljs-built_in">this</span>.configurationFactory + <span class="hljs-string">&quot;] is missing factory method of name [&quot;</span><br>                + FACTORY_METHOD + <span class="hljs-string">&quot;].&quot;</span>, ex);<br>      &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-keyword">final</span> PrivilegedActionException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Cannot get Configuration as factory method [&quot;</span><br>                + <span class="hljs-built_in">this</span>.configurationFactory + <span class="hljs-string">&quot;]#[&quot;</span><br>                + FACTORY_METHOD + <span class="hljs-string">&quot;] threw an exception.&quot;</span>, ex.getCause());<br>      &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-keyword">final</span> Exception ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Cannot get Configuration as factory method [&quot;</span><br>                + <span class="hljs-built_in">this</span>.configurationFactory + <span class="hljs-string">&quot;]#[&quot;</span><br>                + FACTORY_METHOD + <span class="hljs-string">&quot;] threw an exception.&quot;</span>, ex);<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (!(configurationObject <span class="hljs-keyword">instanceof</span> Configuration)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Cannot get Configuration as factory method [&quot;</span><br>                + <span class="hljs-built_in">this</span>.configurationFactory + <span class="hljs-string">&quot;]#[&quot;</span><br>                + FACTORY_METHOD + <span class="hljs-string">&quot;] didn&#x27;t return [&quot;</span> + Configuration.class + <span class="hljs-string">&quot;] but [&quot;</span><br>                + (configurationObject == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;null&quot;</span> : configurationObject.getClass()) + <span class="hljs-string">&quot;].&quot;</span>);<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> Configuration.class.cast(configurationObject);<br>    &#125; <br><br>    <span class="hljs-keyword">private</span> Log <span class="hljs-title function_">getLogger</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.log == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-built_in">this</span>.log = LogFactory.getLog(<span class="hljs-built_in">this</span>.getClass());<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.log;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 关闭了的Excutor，啥都不能干</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClosedExecutor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseExecutor</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ClosedExecutor</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-built_in">super</span>(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isClosed</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">doUpdate</span><span class="hljs-params">(MappedStatement ms, Object parameter)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(<span class="hljs-string">&quot;Not supported.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> List&lt;BatchResult&gt; <span class="hljs-title function_">doFlushStatements</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isRollback)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(<span class="hljs-string">&quot;Not supported.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">doQuery</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(<span class="hljs-string">&quot;Not supported.&quot;</span>);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 把要延迟加载的属性记到ResultLoaderMap里（一个哈希表）</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addLoader</span><span class="hljs-params">(String property, MetaObject metaResultObject, ResultLoader resultLoader)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">upperFirst</span> <span class="hljs-operator">=</span> getUppercaseFirstProperty(property);<br>    <span class="hljs-keyword">if</span> (!upperFirst.equalsIgnoreCase(property) &amp;&amp; loaderMap.containsKey(upperFirst)) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Nested lazy loaded result property &#x27;&quot;</span> + property +<br>              <span class="hljs-string">&quot;&#x27; for query id &#x27;&quot;</span> + resultLoader.mappedStatement.getId() +<br>              <span class="hljs-string">&quot; already exists in the result map. The leftmost property of all lazy loaded properties must be unique within a result map.&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// key是property，这样当客户端调用getter来取真实值时，会判断这个属性是否是延迟加载属性，是才去加载</span><br>    <span class="hljs-comment">// 可参见CglibProxyFactory的代码</span><br>    <span class="hljs-comment">//    if (lazyLoader.hasLoader(property)) &#123;</span><br>    <span class="hljs-comment">//        lazyLoader.load(property);</span><br>    <span class="hljs-comment">//    &#125;</span><br>    loaderMap.put(upperFirst, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoadPair</span>(property, metaResultObject, resultLoader));<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getUppercaseFirstProperty</span><span class="hljs-params">(String property)</span> &#123;<br>    String[] parts = property.split(<span class="hljs-string">&quot;\\.&quot;</span>);<br>    <span class="hljs-keyword">return</span> parts[<span class="hljs-number">0</span>].toUpperCase(Locale.ENGLISH);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Map&lt;String, LoadPair&gt; <span class="hljs-title function_">getProperties</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, LoadPair&gt;(<span class="hljs-built_in">this</span>.loaderMap);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Set&lt;String&gt; <span class="hljs-title function_">getPropertyNames</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> loaderMap.keySet();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> loaderMap.size();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasLoader</span><span class="hljs-params">(String property)</span> &#123;<br>    <span class="hljs-keyword">return</span> loaderMap.containsKey(property.toUpperCase(Locale.ENGLISH));<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">load</span><span class="hljs-params">(String property)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">// 先删除key，防止第二次又去查数据库就不对了</span><br>    <span class="hljs-type">LoadPair</span> <span class="hljs-variable">pair</span> <span class="hljs-operator">=</span> loaderMap.remove(property.toUpperCase(Locale.ENGLISH));<br>    <span class="hljs-keyword">if</span> (pair != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 去数据库查</span><br>      pair.load();<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">final</span> Set&lt;String&gt; methodNameSet = loaderMap.keySet();<br>    <span class="hljs-comment">// 为啥要转成Array...</span><br>    String[] methodNames = methodNameSet.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[methodNameSet.size()]);<br>    <span class="hljs-keyword">for</span> (String methodName : methodNames) &#123;<br>      load(methodName);<br>    &#125;<br>  &#125; <br><br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="WriteReplaceInterface"><a href="#WriteReplaceInterface" class="headerlink" title="WriteReplaceInterface"></a>WriteReplaceInterface</h4><p>    这个接口在这个版本的mybatis中似乎没有用到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">WriteReplaceInterface</span> &#123;<br><br>  Object <span class="hljs-title function_">writeReplace</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ObjectStreamException;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ProxyFactory-1"><a href="#ProxyFactory-1" class="headerlink" title="ProxyFactory"></a>ProxyFactory</h4><p>    延迟加载代理工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProxyFactory</span> &#123;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties properties)</span>;<br><br>  Object <span class="hljs-title function_">createProxy</span><span class="hljs-params">(Object target, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="AbstractSerialStateHolder"><a href="#AbstractSerialStateHolder" class="headerlink" title="AbstractSerialStateHolder"></a>AbstractSerialStateHolder</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractSerialStateHolder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Externalizable</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">8940388717901644661L</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;ObjectOutputStream&gt; stream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;ObjectOutputStream&gt;();<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] userBeanBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">private</span> Object userBean;<br>  <span class="hljs-keyword">private</span> Map&lt;String, ResultLoaderMap.LoadPair&gt; unloadedProperties;<br>  <span class="hljs-keyword">private</span> ObjectFactory objectFactory;<br>  <span class="hljs-keyword">private</span> Class&lt;?&gt;[] constructorArgTypes;<br>  <span class="hljs-keyword">private</span> Object[] constructorArgs;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">AbstractSerialStateHolder</span><span class="hljs-params">()</span> &#123;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">AbstractSerialStateHolder</span><span class="hljs-params">(</span><br><span class="hljs-params">          <span class="hljs-keyword">final</span> Object userBean,</span><br><span class="hljs-params">          <span class="hljs-keyword">final</span> Map&lt;String, ResultLoaderMap.LoadPair&gt; unloadedProperties,</span><br><span class="hljs-params">          <span class="hljs-keyword">final</span> ObjectFactory objectFactory,</span><br><span class="hljs-params">          List&lt;Class&lt;?&gt;&gt; constructorArgTypes,</span><br><span class="hljs-params">          List&lt;Object&gt; constructorArgs)</span> &#123;<br>    <span class="hljs-built_in">this</span>.userBean = userBean;<br>    <span class="hljs-built_in">this</span>.unloadedProperties = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, ResultLoaderMap.LoadPair&gt;(unloadedProperties);<br>    <span class="hljs-built_in">this</span>.objectFactory = objectFactory;<br>    <span class="hljs-built_in">this</span>.constructorArgTypes = constructorArgTypes.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[constructorArgTypes.size()]);<br>    <span class="hljs-built_in">this</span>.constructorArgs = constructorArgs.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[constructorArgs.size()]);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeExternal</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ObjectOutput out)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">firstRound</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>    <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> stream.get();<br>    <span class="hljs-keyword">if</span> (os == <span class="hljs-literal">null</span>) &#123;<br>      os = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>      firstRound = <span class="hljs-literal">true</span>;<br>      stream.set(os);<br>    &#125;<br><br>    os.writeObject(<span class="hljs-built_in">this</span>.userBean);<br>    os.writeObject(<span class="hljs-built_in">this</span>.unloadedProperties);<br>    os.writeObject(<span class="hljs-built_in">this</span>.objectFactory);<br>    os.writeObject(<span class="hljs-built_in">this</span>.constructorArgTypes);<br>    os.writeObject(<span class="hljs-built_in">this</span>.constructorArgs);<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] bytes = baos.toByteArray();<br>    out.writeObject(bytes);<br><br>    <span class="hljs-keyword">if</span> (firstRound) &#123;<br>      stream.remove();<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readExternal</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ObjectInput in)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> in.readObject();<br>    <span class="hljs-keyword">if</span> (data.getClass().isArray()) &#123;<br>      <span class="hljs-built_in">this</span>.userBeanBytes = (<span class="hljs-type">byte</span>[]) data;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-built_in">this</span>.userBean = data;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Object <span class="hljs-title function_">readResolve</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ObjectStreamException &#123;<br>    <span class="hljs-comment">/* Second run */</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.userBean != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.userBeanBytes.length == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.userBean;<br>    &#125;<br><br>    <span class="hljs-comment">/* First run */</span><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(<span class="hljs-built_in">this</span>.userBeanBytes));<br>      <span class="hljs-built_in">this</span>.userBean = in.readObject();<br>      <span class="hljs-built_in">this</span>.unloadedProperties = (Map&lt;String, ResultLoaderMap.LoadPair&gt;) in.readObject();<br>      <span class="hljs-built_in">this</span>.objectFactory = (ObjectFactory) in.readObject();<br>      <span class="hljs-built_in">this</span>.constructorArgTypes = (Class&lt;?&gt;[]) in.readObject();<br>      <span class="hljs-built_in">this</span>.constructorArgs = (Object[]) in.readObject();<br>    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-keyword">final</span> IOException ex) &#123;<br>      <span class="hljs-keyword">throw</span> (ObjectStreamException) <span class="hljs-keyword">new</span> <span class="hljs-title class_">StreamCorruptedException</span>().initCause(ex);<br>    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-keyword">final</span> ClassNotFoundException ex) &#123;<br>      <span class="hljs-keyword">throw</span> (ObjectStreamException) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvalidClassException</span>(ex.getLocalizedMessage()).initCause(ex);<br>    &#125;<br><br>    <span class="hljs-keyword">final</span> Map&lt;String, ResultLoaderMap.LoadPair&gt; arrayProps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, ResultLoaderMap.LoadPair&gt;(<span class="hljs-built_in">this</span>.unloadedProperties);<br>    <span class="hljs-keyword">final</span> List&lt;Class&lt;?&gt;&gt; arrayTypes = Arrays.asList(<span class="hljs-built_in">this</span>.constructorArgTypes);<br>    <span class="hljs-keyword">final</span> List&lt;Object&gt; arrayValues = Arrays.asList(<span class="hljs-built_in">this</span>.constructorArgs);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.createDeserializationProxy(userBean, arrayProps, objectFactory, arrayTypes, arrayValues);<br>  &#125; <br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> Object <span class="hljs-title function_">createDeserializationProxy</span><span class="hljs-params">(Object target, Map&lt;String, ResultLoaderMap.LoadPair&gt; unloadedProperties, ObjectFactory objectFactory,</span><br><span class="hljs-params">          List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="AbstractEnhancedDeserializationProxy"><a href="#AbstractEnhancedDeserializationProxy" class="headerlink" title="AbstractEnhancedDeserializationProxy"></a>AbstractEnhancedDeserializationProxy</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractEnhancedDeserializationProxy</span> &#123; <br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FINALIZE_METHOD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;finalize&quot;</span>;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">WRITE_REPLACE_METHOD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;writeReplace&quot;</span>;<br>  <span class="hljs-keyword">private</span> Class&lt;?&gt; type;<br>  <span class="hljs-keyword">private</span> Map&lt;String, ResultLoaderMap.LoadPair&gt; unloadedProperties;<br>  <span class="hljs-keyword">private</span> ObjectFactory objectFactory;<br>  <span class="hljs-keyword">private</span> List&lt;Class&lt;?&gt;&gt; constructorArgTypes;<br>  <span class="hljs-keyword">private</span> List&lt;Object&gt; constructorArgs;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object reloadingPropertyLock;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> reloadingProperty; <br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-title function_">AbstractEnhancedDeserializationProxy</span><span class="hljs-params">(Class&lt;?&gt; type, Map&lt;String, ResultLoaderMap.LoadPair&gt; unloadedProperties,</span><br><span class="hljs-params">          ObjectFactory objectFactory, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;<br>    <span class="hljs-built_in">this</span>.type = type;<br>    <span class="hljs-built_in">this</span>.unloadedProperties = unloadedProperties;<br>    <span class="hljs-built_in">this</span>.objectFactory = objectFactory;<br>    <span class="hljs-built_in">this</span>.constructorArgTypes = constructorArgTypes;<br>    <span class="hljs-built_in">this</span>.constructorArgs = constructorArgs;<br>    <span class="hljs-built_in">this</span>.reloadingPropertyLock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-built_in">this</span>.reloadingProperty = <span class="hljs-literal">false</span>;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object enhanced, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> method.getName();<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">if</span> (WRITE_REPLACE_METHOD.equals(methodName)) &#123;<br>        <span class="hljs-keyword">final</span> Object original;<br>        <span class="hljs-keyword">if</span> (constructorArgTypes.isEmpty()) &#123;<br>          original = objectFactory.create(type);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          original = objectFactory.create(type, constructorArgTypes, constructorArgs);<br>        &#125;<br><br>        PropertyCopier.copyBeanProperties(type, enhanced, original);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.newSerialStateHolder(original, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.reloadingPropertyLock) &#123;<br>          <span class="hljs-keyword">if</span> (!FINALIZE_METHOD.equals(methodName) &amp;&amp; PropertyNamer.isProperty(methodName) &amp;&amp; !reloadingProperty) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">property</span> <span class="hljs-operator">=</span> PropertyNamer.methodToProperty(methodName);<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">propertyKey</span> <span class="hljs-operator">=</span> property.toUpperCase(Locale.ENGLISH);<br>            <span class="hljs-keyword">if</span> (unloadedProperties.containsKey(propertyKey)) &#123;<br>              <span class="hljs-keyword">final</span> ResultLoaderMap.<span class="hljs-type">LoadPair</span> <span class="hljs-variable">loadPair</span> <span class="hljs-operator">=</span> unloadedProperties.remove(propertyKey);<br>              <span class="hljs-keyword">if</span> (loadPair != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                  reloadingProperty = <span class="hljs-literal">true</span>;<br>                  loadPair.load(enhanced);<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                  reloadingProperty = <span class="hljs-literal">false</span>;<br>                &#125;<br>              &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">/* I&#x27;m not sure if this case can really happen or is just in tests -</span><br><span class="hljs-comment">                 * we have an unread property but no loadPair to load it. */</span><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;An attempt has been made to read a not loaded lazy property &#x27;&quot;</span><br>                        + property + <span class="hljs-string">&quot;&#x27; of a disconnected object&quot;</span>);<br>              &#125;<br>            &#125;<br>          &#125;<br><br>          <span class="hljs-keyword">return</span> enhanced;<br>        &#125;<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>      <span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(t);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> AbstractSerialStateHolder <span class="hljs-title function_">newSerialStateHolder</span><span class="hljs-params">(</span><br><span class="hljs-params">          Object userBean,</span><br><span class="hljs-params">          Map&lt;String, ResultLoaderMap.LoadPair&gt; unloadedProperties,</span><br><span class="hljs-params">          ObjectFactory objectFactory,</span><br><span class="hljs-params">          List&lt;Class&lt;?&gt;&gt; constructorArgTypes,</span><br><span class="hljs-params">          List&lt;Object&gt; constructorArgs)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="CglibProxyFactory"><a href="#CglibProxyFactory" class="headerlink" title="CglibProxyFactory"></a>CglibProxyFactory</h4><p>    Cglib延迟加载代理工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CglibProxyFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ProxyFactory</span> &#123; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LogFactory.getLog(CglibProxyFactory.class);<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FINALIZE_METHOD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;finalize&quot;</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">WRITE_REPLACE_METHOD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;writeReplace&quot;</span>; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">CglibProxyFactory</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 先检查是否有Cglib</span><br>      Resources.classForName(<span class="hljs-string">&quot;net.sf.cglib.proxy.Enhancer&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Cannot enable lazy loading because CGLIB is not available. Add CGLIB to your classpath.&quot;</span>, e);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">createProxy</span><span class="hljs-params">(Object target, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;<br>    <span class="hljs-keyword">return</span> EnhancedResultObjectProxyImpl.createProxy(target, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">createDeserializationProxy</span><span class="hljs-params">(Object target, Map&lt;String, ResultLoaderMap.LoadPair&gt; unloadedProperties, ObjectFactory objectFactory, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;<br>    <span class="hljs-keyword">return</span> EnhancedDeserializationProxyImpl.createProxy(target, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties properties)</span> &#123;<br>      <span class="hljs-comment">// Not Implemented</span><br>  &#125;<br><br>  <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">crateProxy</span><span class="hljs-params">(Class&lt;?&gt; type, Callback callback, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;<br>    <span class="hljs-comment">// 核心就是用cglib的Enhancer</span><br>    <span class="hljs-type">Enhancer</span> <span class="hljs-variable">enhancer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Enhancer</span>();<br>    enhancer.setCallback(callback);<br>    enhancer.setSuperclass(type);<br>    <span class="hljs-keyword">try</span> &#123;<br>      type.getDeclaredMethod(WRITE_REPLACE_METHOD);<br>      <span class="hljs-comment">// ObjectOutputStream will call writeReplace of objects returned by writeReplace</span><br>      log.debug(WRITE_REPLACE_METHOD + <span class="hljs-string">&quot; method was found on bean &quot;</span> + type + <span class="hljs-string">&quot;, make sure it returns this&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>      enhancer.setInterfaces(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;WriteReplaceInterface.class&#125;);<br>    &#125; <span class="hljs-keyword">catch</span> (SecurityException e) &#123;<br>      <span class="hljs-comment">// nothing to do here</span><br>    &#125;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">enhanced</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (constructorArgTypes.isEmpty()) &#123;<br>      enhanced = enhancer.create();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      Class&lt;?&gt;[] typesArray = constructorArgTypes.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[constructorArgTypes.size()]);<br>      Object[] valuesArray = constructorArgs.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[constructorArgs.size()]);<br>      enhanced = enhancer.create(typesArray, valuesArray);<br>    &#125;<br>    <span class="hljs-keyword">return</span> enhanced;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnhancedResultObjectProxyImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodInterceptor</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Class&lt;?&gt; type;<br>    <span class="hljs-keyword">private</span> ResultLoaderMap lazyLoader;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> aggressive;<br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; lazyLoadTriggerMethods;<br>    <span class="hljs-keyword">private</span> ObjectFactory objectFactory;<br>    <span class="hljs-keyword">private</span> List&lt;Class&lt;?&gt;&gt; constructorArgTypes;<br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; constructorArgs; <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">EnhancedResultObjectProxyImpl</span><span class="hljs-params">(Class&lt;?&gt; type, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;<br>      <span class="hljs-built_in">this</span>.type = type;<br>      <span class="hljs-built_in">this</span>.lazyLoader = lazyLoader;<br>      <span class="hljs-built_in">this</span>.aggressive = configuration.isAggressiveLazyLoading();<br>      <span class="hljs-built_in">this</span>.lazyLoadTriggerMethods = configuration.getLazyLoadTriggerMethods();<br>      <span class="hljs-built_in">this</span>.objectFactory = objectFactory;<br>      <span class="hljs-built_in">this</span>.constructorArgTypes = constructorArgTypes;<br>      <span class="hljs-built_in">this</span>.constructorArgs = constructorArgs;<br>    &#125; <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">createProxy</span><span class="hljs-params">(Object target, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;<br>      <span class="hljs-keyword">final</span> Class&lt;?&gt; type = target.getClass();<br>      <span class="hljs-type">EnhancedResultObjectProxyImpl</span> <span class="hljs-variable">callback</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnhancedResultObjectProxyImpl</span>(type, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">enhanced</span> <span class="hljs-operator">=</span> crateProxy(type, callback, constructorArgTypes, constructorArgs);<br>      PropertyCopier.copyBeanProperties(type, target, enhanced);<br>      <span class="hljs-keyword">return</span> enhanced;<br>    &#125; <br><br>    <span class="hljs-comment">// cglib拦截方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object enhanced, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> method.getName();<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (lazyLoader) &#123;<br>          <span class="hljs-keyword">if</span> (WRITE_REPLACE_METHOD.equals(methodName)) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">original</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">if</span> (constructorArgTypes.isEmpty()) &#123;<br>              original = objectFactory.create(type);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              original = objectFactory.create(type, constructorArgTypes, constructorArgs);<br>            &#125;<br>            PropertyCopier.copyBeanProperties(type, enhanced, original);<br>            <span class="hljs-keyword">if</span> (lazyLoader.size() &gt; <span class="hljs-number">0</span>) &#123;<br>              <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CglibSerialStateHolder</span>(original, lazyLoader.getProperties(), objectFactory, constructorArgTypes, constructorArgs);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-keyword">return</span> original;<br>            &#125;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 这里是关键，延迟加载就是调用ResultLoaderMap.loadAll()</span><br>            <span class="hljs-keyword">if</span> (lazyLoader.size() &gt; <span class="hljs-number">0</span> &amp;&amp; !FINALIZE_METHOD.equals(methodName)) &#123;<br>              <span class="hljs-keyword">if</span> (aggressive || lazyLoadTriggerMethods.contains(methodName)) &#123;<br>                lazyLoader.loadAll();<br>              &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (PropertyNamer.isProperty(methodName)) &#123;<br>                  <span class="hljs-comment">// 或者调用ResultLoaderMap.load()</span><br>                <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">property</span> <span class="hljs-operator">=</span> PropertyNamer.methodToProperty(methodName);<br>                <span class="hljs-keyword">if</span> (lazyLoader.hasLoader(property)) &#123;<br>                  lazyLoader.load(property);<br>                &#125;<br>              &#125;<br>            &#125;<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> methodProxy.invokeSuper(enhanced, args);<br>      &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>        <span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(t);<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 这个代理判断方法名称是 WRITE_REPLACE_METHOD，则返回 AbstractSerialStateHolder</span><br>  <span class="hljs-comment">// 否则进行延迟加载</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnhancedDeserializationProxyImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractEnhancedDeserializationProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodInterceptor</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">EnhancedDeserializationProxyImpl</span><span class="hljs-params">(Class&lt;?&gt; type, Map&lt;String, ResultLoaderMap.LoadPair&gt; unloadedProperties, ObjectFactory objectFactory,</span><br><span class="hljs-params">            List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;<br>      <span class="hljs-built_in">super</span>(type, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">createProxy</span><span class="hljs-params">(Object target, Map&lt;String, ResultLoaderMap.LoadPair&gt; unloadedProperties, ObjectFactory objectFactory,</span><br><span class="hljs-params">            List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;<br>      <span class="hljs-keyword">final</span> Class&lt;?&gt; type = target.getClass();<br>      <span class="hljs-type">EnhancedDeserializationProxyImpl</span> <span class="hljs-variable">callback</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnhancedDeserializationProxyImpl</span>(type, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">enhanced</span> <span class="hljs-operator">=</span> crateProxy(type, callback, constructorArgTypes, constructorArgs);<br>      PropertyCopier.copyBeanProperties(type, target, enhanced);<br>      <span class="hljs-keyword">return</span> enhanced;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object enhanced, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.invoke(enhanced, method, args);<br>      <span class="hljs-keyword">return</span> (o <span class="hljs-keyword">instanceof</span> AbstractSerialStateHolder) ? o : methodProxy.invokeSuper(o, args);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AbstractSerialStateHolder <span class="hljs-title function_">newSerialStateHolder</span><span class="hljs-params">(Object userBean, Map&lt;String, ResultLoaderMap.LoadPair&gt; unloadedProperties, ObjectFactory objectFactory,</span><br><span class="hljs-params">            List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CglibSerialStateHolder</span>(userBean, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="CglibSerialStateHolder"><a href="#CglibSerialStateHolder" class="headerlink" title="CglibSerialStateHolder"></a>CglibSerialStateHolder</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CglibSerialStateHolder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractSerialStateHolder</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">8940388717901644661L</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">CglibSerialStateHolder</span><span class="hljs-params">()</span> &#123;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">CglibSerialStateHolder</span><span class="hljs-params">(</span><br><span class="hljs-params">          <span class="hljs-keyword">final</span> Object userBean,</span><br><span class="hljs-params">          <span class="hljs-keyword">final</span> Map&lt;String, ResultLoaderMap.LoadPair&gt; unloadedProperties,</span><br><span class="hljs-params">          <span class="hljs-keyword">final</span> ObjectFactory objectFactory,</span><br><span class="hljs-params">          List&lt;Class&lt;?&gt;&gt; constructorArgTypes,</span><br><span class="hljs-params">          List&lt;Object&gt; constructorArgs)</span> &#123;<br>    <span class="hljs-built_in">super</span>(userBean, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">createDeserializationProxy</span><span class="hljs-params">(Object target, Map&lt;String, ResultLoaderMap.LoadPair&gt; unloadedProperties, ObjectFactory objectFactory,</span><br><span class="hljs-params">          List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CglibProxyFactory</span>().createDeserializationProxy(target, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="JavassistProxyFactory"><a href="#JavassistProxyFactory" class="headerlink" title="JavassistProxyFactory"></a>JavassistProxyFactory</h4><p>    Javassist延迟加载代理工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavassistProxyFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">org</span>.apache.ibatis.executor.loader.ProxyFactory &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LogFactory.getLog(JavassistProxyFactory.class);<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FINALIZE_METHOD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;finalize&quot;</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">WRITE_REPLACE_METHOD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;writeReplace&quot;</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">JavassistProxyFactory</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">//先检查是否有javassist</span><br>      Resources.classForName(<span class="hljs-string">&quot;javassist.util.proxy.ProxyFactory&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Cannot enable lazy loading because Javassist is not available. Add Javassist to your classpath.&quot;</span>, e);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">createProxy</span><span class="hljs-params">(Object target, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;<br>    <span class="hljs-keyword">return</span> EnhancedResultObjectProxyImpl.createProxy(target, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">createDeserializationProxy</span><span class="hljs-params">(Object target, Map&lt;String, ResultLoaderMap.LoadPair&gt; unloadedProperties, ObjectFactory objectFactory, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;<br>    <span class="hljs-keyword">return</span> EnhancedDeserializationProxyImpl.createProxy(target, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties properties)</span> &#123;<br>      <span class="hljs-comment">// Not Implemented</span><br>  &#125;<br><br>  <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">crateProxy</span><span class="hljs-params">(Class&lt;?&gt; type, MethodHandler callback, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;<br><br>    <span class="hljs-comment">// 核心就是用javassist的ProxyFactory,没啥可说的，下面逻辑都是cglib的翻版</span><br>    <span class="hljs-type">ProxyFactory</span> <span class="hljs-variable">enhancer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxyFactory</span>();<br>    enhancer.setSuperclass(type);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>      type.getDeclaredMethod(WRITE_REPLACE_METHOD);<br>      <span class="hljs-comment">// ObjectOutputStream will call writeReplace of objects returned by writeReplace</span><br>      log.debug(WRITE_REPLACE_METHOD + <span class="hljs-string">&quot; method was found on bean &quot;</span> + type + <span class="hljs-string">&quot;, make sure it returns this&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>      enhancer.setInterfaces(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;WriteReplaceInterface.class&#125;);<br>    &#125; <span class="hljs-keyword">catch</span> (SecurityException e) &#123;<br>      <span class="hljs-comment">// nothing to do here</span><br>    &#125;<br><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">enhanced</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    Class&lt;?&gt;[] typesArray = constructorArgTypes.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[constructorArgTypes.size()]);<br>    Object[] valuesArray = constructorArgs.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[constructorArgs.size()]);<br>    <span class="hljs-keyword">try</span> &#123;<br>      enhanced = enhancer.create(typesArray, valuesArray);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Error creating lazy proxy.  Cause: &quot;</span> + e, e);<br>    &#125;<br>    ((Proxy) enhanced).setHandler(callback);<br>    <span class="hljs-keyword">return</span> enhanced;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnhancedResultObjectProxyImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodHandler</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Class&lt;?&gt; type;<br>    <span class="hljs-keyword">private</span> ResultLoaderMap lazyLoader;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> aggressive;<br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; lazyLoadTriggerMethods;<br>    <span class="hljs-keyword">private</span> ObjectFactory objectFactory;<br>    <span class="hljs-keyword">private</span> List&lt;Class&lt;?&gt;&gt; constructorArgTypes;<br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; constructorArgs;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">EnhancedResultObjectProxyImpl</span><span class="hljs-params">(Class&lt;?&gt; type, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;<br>      <span class="hljs-built_in">this</span>.type = type;<br>      <span class="hljs-built_in">this</span>.lazyLoader = lazyLoader;<br>      <span class="hljs-built_in">this</span>.aggressive = configuration.isAggressiveLazyLoading();<br>      <span class="hljs-built_in">this</span>.lazyLoadTriggerMethods = configuration.getLazyLoadTriggerMethods();<br>      <span class="hljs-built_in">this</span>.objectFactory = objectFactory;<br>      <span class="hljs-built_in">this</span>.constructorArgTypes = constructorArgTypes;<br>      <span class="hljs-built_in">this</span>.constructorArgs = constructorArgs;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">createProxy</span><span class="hljs-params">(Object target, ResultLoaderMap lazyLoader, Configuration configuration, ObjectFactory objectFactory, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;<br>      <span class="hljs-keyword">final</span> Class&lt;?&gt; type = target.getClass();<br>      <span class="hljs-type">EnhancedResultObjectProxyImpl</span> <span class="hljs-variable">callback</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnhancedResultObjectProxyImpl</span>(type, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">enhanced</span> <span class="hljs-operator">=</span> crateProxy(type, callback, constructorArgTypes, constructorArgs);<br>      PropertyCopier.copyBeanProperties(type, target, enhanced);<br>      <span class="hljs-keyword">return</span> enhanced;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object enhanced, Method method, Method methodProxy, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> method.getName();<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (lazyLoader) &#123;<br>          <span class="hljs-keyword">if</span> (WRITE_REPLACE_METHOD.equals(methodName)) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">original</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">if</span> (constructorArgTypes.isEmpty()) &#123;<br>              original = objectFactory.create(type);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              original = objectFactory.create(type, constructorArgTypes, constructorArgs);<br>            &#125;<br>            PropertyCopier.copyBeanProperties(type, enhanced, original);<br>            <span class="hljs-keyword">if</span> (lazyLoader.size() &gt; <span class="hljs-number">0</span>) &#123;<br>              <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavassistSerialStateHolder</span>(original, lazyLoader.getProperties(), objectFactory, constructorArgTypes, constructorArgs);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-keyword">return</span> original;<br>            &#125;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (lazyLoader.size() &gt; <span class="hljs-number">0</span> &amp;&amp; !FINALIZE_METHOD.equals(methodName)) &#123;<br>              <span class="hljs-keyword">if</span> (aggressive || lazyLoadTriggerMethods.contains(methodName)) &#123;<br>                lazyLoader.loadAll();<br>              &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (PropertyNamer.isProperty(methodName)) &#123;<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">property</span> <span class="hljs-operator">=</span> PropertyNamer.methodToProperty(methodName);<br>                <span class="hljs-keyword">if</span> (lazyLoader.hasLoader(property)) &#123;<br>                  lazyLoader.load(property);<br>                &#125;<br>              &#125;<br>            &#125;<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> methodProxy.invoke(enhanced, args);<br>      &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>        <span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(t);<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnhancedDeserializationProxyImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractEnhancedDeserializationProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodHandler</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">EnhancedDeserializationProxyImpl</span><span class="hljs-params">(Class&lt;?&gt; type, Map&lt;String, ResultLoaderMap.LoadPair&gt; unloadedProperties, ObjectFactory objectFactory,</span><br><span class="hljs-params">            List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;<br>      <span class="hljs-built_in">super</span>(type, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">createProxy</span><span class="hljs-params">(Object target, Map&lt;String, ResultLoaderMap.LoadPair&gt; unloadedProperties, ObjectFactory objectFactory,</span><br><span class="hljs-params">            List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;<br>      <span class="hljs-keyword">final</span> Class&lt;?&gt; type = target.getClass();<br>      <span class="hljs-type">EnhancedDeserializationProxyImpl</span> <span class="hljs-variable">callback</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnhancedDeserializationProxyImpl</span>(type, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">enhanced</span> <span class="hljs-operator">=</span> crateProxy(type, callback, constructorArgTypes, constructorArgs);<br>      PropertyCopier.copyBeanProperties(type, target, enhanced);<br>      <span class="hljs-keyword">return</span> enhanced;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object enhanced, Method method, Method methodProxy, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.invoke(enhanced, method, args);<br>      <span class="hljs-keyword">return</span> (o <span class="hljs-keyword">instanceof</span> AbstractSerialStateHolder) ? o : methodProxy.invoke(o, args);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AbstractSerialStateHolder <span class="hljs-title function_">newSerialStateHolder</span><span class="hljs-params">(Object userBean, Map&lt;String, ResultLoaderMap.LoadPair&gt; unloadedProperties, ObjectFactory objectFactory,</span><br><span class="hljs-params">            List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavassistSerialStateHolder</span>(userBean, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);<br>    &#125;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="JavassistSerialStateHolder"><a href="#JavassistSerialStateHolder" class="headerlink" title="JavassistSerialStateHolder"></a>JavassistSerialStateHolder</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">JavassistSerialStateHolder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractSerialStateHolder</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">8940388717901644661L</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">JavassistSerialStateHolder</span><span class="hljs-params">()</span> &#123;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">JavassistSerialStateHolder</span><span class="hljs-params">(</span><br><span class="hljs-params">          <span class="hljs-keyword">final</span> Object userBean,</span><br><span class="hljs-params">          <span class="hljs-keyword">final</span> Map&lt;String, ResultLoaderMap.LoadPair&gt; unloadedProperties,</span><br><span class="hljs-params">          <span class="hljs-keyword">final</span> ObjectFactory objectFactory,</span><br><span class="hljs-params">          List&lt;Class&lt;?&gt;&gt; constructorArgTypes,</span><br><span class="hljs-params">          List&lt;Object&gt; constructorArgs)</span> &#123;<br>    <span class="hljs-built_in">super</span>(userBean, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">createDeserializationProxy</span><span class="hljs-params">(Object target, Map&lt;String, ResultLoaderMap.LoadPair&gt; unloadedProperties, ObjectFactory objectFactory,</span><br><span class="hljs-params">          List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavassistProxyFactory</span>().createDeserializationProxy(target, unloadedProperties, objectFactory, constructorArgTypes, constructorArgs);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ParameterHandler"><a href="#ParameterHandler" class="headerlink" title="ParameterHandler"></a>ParameterHandler</h4><p>    参数处理器,其实现类DefaultParameterHandler已在scripting模块讲过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ParameterHandler</span> &#123;<br><br>  <span class="hljs-comment">// 得到参数</span><br>  Object <span class="hljs-title function_">getParameterObject</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">// 设置参数</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">setParameters</span><span class="hljs-params">(PreparedStatement ps)</span><br>      <span class="hljs-keyword">throws</span> SQLException;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="DefaultResultHandler"><a href="#DefaultResultHandler" class="headerlink" title="DefaultResultHandler"></a>DefaultResultHandler</h4><p>    默认结果处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultResultHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ResultHandler</span> &#123;<br><br>  <span class="hljs-comment">// 内部实现是存了一个List</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;Object&gt; list;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">DefaultResultHandler</span><span class="hljs-params">()</span> &#123;<br>    list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;();<br>  &#125;<br><br>  <span class="hljs-comment">// 但不一定是ArrayList,也可以通过ObjectFactory来产生特定的List</span><br>  <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">DefaultResultHandler</span><span class="hljs-params">(ObjectFactory objectFactory)</span> &#123;<br>    list = objectFactory.create(List.class);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleResult</span><span class="hljs-params">(ResultContext context)</span> &#123;<br>    <span class="hljs-comment">// 处理很简单，就是把记录加入List</span><br>    list.add(context.getResultObject());<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">getResultList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> list;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="DefaultResultContext"><a href="#DefaultResultContext" class="headerlink" title="DefaultResultContext"></a>DefaultResultContext</h4><p>    默认结果上下文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultResultContext</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ResultContext</span> &#123;<br><br>  <span class="hljs-keyword">private</span> Object resultObject;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> resultCount;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> stopped;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">DefaultResultContext</span><span class="hljs-params">()</span> &#123;<br>    resultObject = <span class="hljs-literal">null</span>;<br>    resultCount = <span class="hljs-number">0</span>;<br>    stopped = <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getResultObject</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> resultObject;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getResultCount</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> resultCount;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isStopped</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> stopped;<br>  &#125;<br><br>  <span class="hljs-comment">// 应该是每次调用nextResultObject这个方法，这样内部count就加1</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">nextResultObject</span><span class="hljs-params">(Object resultObject)</span> &#123;<br>    resultCount++;<br>    <span class="hljs-built_in">this</span>.resultObject = resultObject;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.stopped = <span class="hljs-literal">true</span>;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="DefaultMapResultHandler"><a href="#DefaultMapResultHandler" class="headerlink" title="DefaultMapResultHandler"></a>DefaultMapResultHandler</h4><p>    默认Map结果处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultMapResultHandler</span>&lt;K, V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ResultHandler</span> &#123;<br><br>  <span class="hljs-comment">// 内部实现是存了一个Map</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;K, V&gt; mappedResults;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String mapKey;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ObjectFactory objectFactory;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ObjectWrapperFactory objectWrapperFactory;<br><br>  <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">DefaultMapResultHandler</span><span class="hljs-params">(String mapKey, ObjectFactory objectFactory, ObjectWrapperFactory objectWrapperFactory)</span> &#123;<br>    <span class="hljs-built_in">this</span>.objectFactory = objectFactory;<br>    <span class="hljs-built_in">this</span>.objectWrapperFactory = objectWrapperFactory;<br>    <span class="hljs-built_in">this</span>.mappedResults = objectFactory.create(Map.class);<br>    <span class="hljs-built_in">this</span>.mapKey = mapKey;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleResult</span><span class="hljs-params">(ResultContext context)</span> &#123;<br>    <span class="hljs-comment">// TODO is that assignment always true?</span><br>    <span class="hljs-comment">// 得到一条记录</span><br>    <span class="hljs-comment">// 这边黄色警告没法去掉了？因为返回Object型</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">V</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (V) context.getResultObject();<br>    <span class="hljs-comment">// MetaObject.forObject,包装一下记录</span><br>    <span class="hljs-comment">// MetaObject是用反射来包装各种类型</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">MetaObject</span> <span class="hljs-variable">mo</span> <span class="hljs-operator">=</span> MetaObject.forObject(value, objectFactory, objectWrapperFactory);<br>    <span class="hljs-comment">// TODO is that assignment always true?</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (K) mo.getValue(mapKey);<br>    mappedResults.put(key, value);<br>    <span class="hljs-comment">// 这个类主要目的是把得到的List转为Map</span><br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Map&lt;K, V&gt; <span class="hljs-title function_">getMappedResults</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> mappedResults;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ResultSetHandler"><a href="#ResultSetHandler" class="headerlink" title="ResultSetHandler"></a>ResultSetHandler</h4><p>    结果集处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ResultSetHandler</span> &#123;<br><br>  <span class="hljs-comment">// 处理结果集</span><br>  &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">handleResultSets</span><span class="hljs-params">(Statement stmt)</span> <span class="hljs-keyword">throws</span> SQLException;<br><br>  <span class="hljs-comment">// 处理OUT参数</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleOutputParameters</span><span class="hljs-params">(CallableStatement cs)</span> <span class="hljs-keyword">throws</span> SQLException;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ResultSetWrapper"><a href="#ResultSetWrapper" class="headerlink" title="ResultSetWrapper"></a>ResultSetWrapper</h4><p>    ResultSet包装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultSetWrapper</span> &#123; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ResultSet resultSet;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> TypeHandlerRegistry typeHandlerRegistry;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;String&gt; columnNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;String&gt; classNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;JdbcType&gt; jdbcTypes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;JdbcType&gt;();<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, Map&lt;Class&lt;?&gt;, TypeHandler&lt;?&gt;&gt;&gt; typeHandlerMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Map&lt;Class&lt;?&gt;, TypeHandler&lt;?&gt;&gt;&gt;();<br>  <span class="hljs-keyword">private</span> Map&lt;String, List&lt;String&gt;&gt; mappedColumnNamesMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, List&lt;String&gt;&gt;();<br>  <span class="hljs-keyword">private</span> Map&lt;String, List&lt;String&gt;&gt; unMappedColumnNamesMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, List&lt;String&gt;&gt;(); <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResultSetWrapper</span><span class="hljs-params">(ResultSet rs, Configuration configuration)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-built_in">super</span>();<br>    <span class="hljs-built_in">this</span>.typeHandlerRegistry = configuration.getTypeHandlerRegistry();<br>    <span class="hljs-built_in">this</span>.resultSet = rs;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">metaData</span> <span class="hljs-operator">=</span> rs.getMetaData();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">columnCount</span> <span class="hljs-operator">=</span> metaData.getColumnCount();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= columnCount; i++) &#123;<br>      columnNames.add(configuration.isUseColumnLabel() ? metaData.getColumnLabel(i) : metaData.getColumnName(i));<br>      jdbcTypes.add(JdbcType.forCode(metaData.getColumnType(i)));<br>      classNames.add(metaData.getColumnClassName(i));<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Gets the type handler to use when reading the result set.</span><br><span class="hljs-comment">   * Tries to get from the TypeHandlerRegistry by searching for the property type.</span><br><span class="hljs-comment">   * If not found it gets the column JDBC type and tries to get a handler for it.</span><br><span class="hljs-comment">   * </span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> propertyType</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> columnName</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> TypeHandler&lt;?&gt; getTypeHandler(Class&lt;?&gt; propertyType, String columnName) &#123;<br>    TypeHandler&lt;?&gt; handler = <span class="hljs-literal">null</span>; <br>    <span class="hljs-comment">// 列名对应的属性类型和TypeHandler</span><br>    <span class="hljs-comment">// 这里考虑到了在不同的statement中列名重复，属性类型不同的问题</span><br>    Map&lt;Class&lt;?&gt;, TypeHandler&lt;?&gt;&gt; columnHandlers = typeHandlerMap.get(columnName);<br>    <span class="hljs-keyword">if</span> (columnHandlers == <span class="hljs-literal">null</span>) &#123;<br>      columnHandlers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Class&lt;?&gt;, TypeHandler&lt;?&gt;&gt;();<br>      typeHandlerMap.put(columnName, columnHandlers);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      handler = columnHandlers.get(propertyType);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (handler == <span class="hljs-literal">null</span>) &#123;<br>      handler = typeHandlerRegistry.getTypeHandler(propertyType);<br>      <span class="hljs-comment">// Replicate logic of UnknownTypeHandler#resolveTypeHandler</span><br>      <span class="hljs-comment">// See issue #59 comment 10</span><br>      <span class="hljs-keyword">if</span> (handler == <span class="hljs-literal">null</span> || handler <span class="hljs-keyword">instanceof</span> UnknownTypeHandler) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> columnNames.indexOf(columnName);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">JdbcType</span> <span class="hljs-variable">jdbcType</span> <span class="hljs-operator">=</span> jdbcTypes.get(index);<br>        <span class="hljs-keyword">final</span> Class&lt;?&gt; javaType = resolveClass(classNames.get(index));<br>        <span class="hljs-keyword">if</span> (javaType != <span class="hljs-literal">null</span> &amp;&amp; jdbcType != <span class="hljs-literal">null</span>) &#123;<br>          handler = typeHandlerRegistry.getTypeHandler(javaType, jdbcType);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (javaType != <span class="hljs-literal">null</span>) &#123;<br>          handler = typeHandlerRegistry.getTypeHandler(javaType);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (jdbcType != <span class="hljs-literal">null</span>) &#123;<br>          handler = typeHandlerRegistry.getTypeHandler(jdbcType);<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (handler == <span class="hljs-literal">null</span> || handler <span class="hljs-keyword">instanceof</span> UnknownTypeHandler) &#123;<br>        handler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectTypeHandler</span>();<br>      &#125;<br>      columnHandlers.put(propertyType, handler);<br>    &#125;<br>    <span class="hljs-keyword">return</span> handler;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Class&lt;?&gt; resolveClass(String className) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> Resources.classForName(className);<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">getMappedColumnNames</span><span class="hljs-params">(ResultMap resultMap, String columnPrefix)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    List&lt;String&gt; mappedColumnNames = mappedColumnNamesMap.get(getMapKey(resultMap, columnPrefix));<br>    <span class="hljs-keyword">if</span> (mappedColumnNames == <span class="hljs-literal">null</span>) &#123;<br>      loadMappedAndUnmappedColumnNames(resultMap, columnPrefix);<br>      mappedColumnNames = mappedColumnNamesMap.get(getMapKey(resultMap, columnPrefix));<br>    &#125;<br>    <span class="hljs-keyword">return</span> mappedColumnNames;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getMapKey</span><span class="hljs-params">(ResultMap resultMap, String columnPrefix)</span> &#123;<br>    <span class="hljs-keyword">return</span> resultMap.getId() + <span class="hljs-string">&quot;:&quot;</span> + columnPrefix;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadMappedAndUnmappedColumnNames</span><span class="hljs-params">(ResultMap resultMap, String columnPrefix)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    List&lt;String&gt; mappedColumnNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    List&lt;String&gt; unmappedColumnNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">upperColumnPrefix</span> <span class="hljs-operator">=</span> columnPrefix == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : columnPrefix.toUpperCase(Locale.ENGLISH);<br>    <span class="hljs-keyword">final</span> Set&lt;String&gt; mappedColumns = prependPrefixes(resultMap.getMappedColumns(), upperColumnPrefix);<br>    <span class="hljs-keyword">for</span> (String columnName : columnNames) &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">upperColumnName</span> <span class="hljs-operator">=</span> columnName.toUpperCase(Locale.ENGLISH);<br>      <span class="hljs-keyword">if</span> (mappedColumns.contains(upperColumnName)) &#123;<br>        mappedColumnNames.add(upperColumnName);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        unmappedColumnNames.add(columnName);<br>      &#125;<br>    &#125; <br>    <span class="hljs-comment">// 这里的根据resultMap的mappedColumns属性判断映射的列名</span><br>    mappedColumnNamesMap.put(getMapKey(resultMap, columnPrefix), mappedColumnNames);<br>    unMappedColumnNamesMap.put(getMapKey(resultMap, columnPrefix), unmappedColumnNames);<br>  &#125; <br><br>  <span class="hljs-comment">// 未列名加上前缀</span><br>  <span class="hljs-keyword">private</span> Set&lt;String&gt; <span class="hljs-title function_">prependPrefixes</span><span class="hljs-params">(Set&lt;String&gt; columnNames, String prefix)</span> &#123;<br>    <span class="hljs-keyword">if</span> (columnNames == <span class="hljs-literal">null</span> || columnNames.isEmpty() || prefix == <span class="hljs-literal">null</span> || prefix.length() == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span> columnNames;<br>    &#125;<br>    <span class="hljs-keyword">final</span> Set&lt;String&gt; prefixed = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;String&gt;();<br>    <span class="hljs-keyword">for</span> (String columnName : columnNames) &#123;<br>      prefixed.add(prefix + columnName);<br>    &#125;<br>    <span class="hljs-keyword">return</span> prefixed;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">getUnmappedColumnNames</span><span class="hljs-params">(ResultMap resultMap, String columnPrefix)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    List&lt;String&gt; unMappedColumnNames = unMappedColumnNamesMap.get(getMapKey(resultMap, columnPrefix));<br>    <span class="hljs-keyword">if</span> (unMappedColumnNames == <span class="hljs-literal">null</span>) &#123;<br>      loadMappedAndUnmappedColumnNames(resultMap, columnPrefix);<br>      unMappedColumnNames = unMappedColumnNamesMap.get(getMapKey(resultMap, columnPrefix));<br>    &#125;<br>    <span class="hljs-keyword">return</span> unMappedColumnNames;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="DefaultResultSetHandler"><a href="#DefaultResultSetHandler" class="headerlink" title="DefaultResultSetHandler"></a>DefaultResultSetHandler</h4><p>    默认结果集处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultResultSetHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ResultSetHandler</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">NO_VALUE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Executor executor;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Configuration configuration;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> MappedStatement mappedStatement;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> RowBounds rowBounds;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ParameterHandler parameterHandler;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ResultHandler resultHandler;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BoundSql boundSql;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> TypeHandlerRegistry typeHandlerRegistry;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ObjectFactory objectFactory;<br><br>  <span class="hljs-comment">// nested resultmaps</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;CacheKey, Object&gt; nestedResultObjects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;CacheKey, Object&gt;();<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;CacheKey, Object&gt; ancestorObjects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;CacheKey, Object&gt;();<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, String&gt; ancestorColumnPrefix = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;();<br><br>  <span class="hljs-comment">// multiple resultsets</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, ResultMapping&gt; nextResultMaps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, ResultMapping&gt;();<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;CacheKey, List&lt;PendingRelation&gt;&gt; pendingRelations = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;CacheKey, List&lt;PendingRelation&gt;&gt;();<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PendingRelation</span> &#123;<br>    <span class="hljs-keyword">public</span> MetaObject metaObject;<br>    <span class="hljs-keyword">public</span> ResultMapping propertyMapping;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">DefaultResultSetHandler</span><span class="hljs-params">(Executor executor, MappedStatement mappedStatement, ParameterHandler parameterHandler, ResultHandler resultHandler, BoundSql boundSql,</span><br><span class="hljs-params">      RowBounds rowBounds)</span> &#123;<br>    <span class="hljs-built_in">this</span>.executor = executor;<br>    <span class="hljs-built_in">this</span>.configuration = mappedStatement.getConfiguration();<br>    <span class="hljs-built_in">this</span>.mappedStatement = mappedStatement;<br>    <span class="hljs-built_in">this</span>.rowBounds = rowBounds;<br>    <span class="hljs-built_in">this</span>.parameterHandler = parameterHandler;<br>    <span class="hljs-built_in">this</span>.boundSql = boundSql;<br>    <span class="hljs-built_in">this</span>.typeHandlerRegistry = configuration.getTypeHandlerRegistry();<br>    <span class="hljs-built_in">this</span>.objectFactory = configuration.getObjectFactory();<br>    <span class="hljs-built_in">this</span>.resultHandler = resultHandler;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleOutputParameters</span><span class="hljs-params">(CallableStatement cs)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">parameterObject</span> <span class="hljs-operator">=</span> parameterHandler.getParameterObject();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaParam</span> <span class="hljs-operator">=</span> configuration.newMetaObject(parameterObject);<br>    <span class="hljs-keyword">final</span> List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();<br>    <span class="hljs-comment">// 循环处理每个参数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; parameterMappings.size(); i++) &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">ParameterMapping</span> <span class="hljs-variable">parameterMapping</span> <span class="hljs-operator">=</span> parameterMappings.get(i);<br>      <span class="hljs-comment">// 只处理OUT|INOUT</span><br>      <span class="hljs-keyword">if</span> (parameterMapping.getMode() == ParameterMode.OUT || parameterMapping.getMode() == ParameterMode.INOUT) &#123;<br>        <span class="hljs-keyword">if</span> (ResultSet.class.equals(parameterMapping.getJavaType())) &#123;<br>          <span class="hljs-comment">// 如果是ResultSet型(游标)</span><br>          <span class="hljs-comment">// #&#123;result, jdbcType=CURSOR, mode=OUT, javaType=ResultSet, resultMap=userResultMap&#125;</span><br>          <span class="hljs-comment">// 先用CallableStatement.getObject取得这个游标，作为参数传进去</span><br>          handleRefCursorOutputParameter((ResultSet) cs.getObject(i + <span class="hljs-number">1</span>), parameterMapping, metaParam);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// 否则是普通型，核心就是CallableStatement.getXXX取得值</span><br>          <span class="hljs-keyword">final</span> TypeHandler&lt;?&gt; typeHandler = parameterMapping.getTypeHandler();<br>          metaParam.setValue(parameterMapping.getProperty(), typeHandler.getResult(cs, i + <span class="hljs-number">1</span>));<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 处理游标(OUT参数)</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRefCursorOutputParameter</span><span class="hljs-params">(ResultSet rs, ParameterMapping parameterMapping, MetaObject metaParam)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">resultMapId</span> <span class="hljs-operator">=</span> parameterMapping.getResultMapId();<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">ResultMap</span> <span class="hljs-variable">resultMap</span> <span class="hljs-operator">=</span> configuration.getResultMap(resultMapId);<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">DefaultResultHandler</span> <span class="hljs-variable">resultHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultResultHandler</span>(objectFactory);<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">ResultSetWrapper</span> <span class="hljs-variable">rsw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultSetWrapper</span>(rs, configuration);<br>      <span class="hljs-comment">// 里面就和一般ResultSet处理没两样了</span><br>      handleRowValues(rsw, resultMap, resultHandler, <span class="hljs-keyword">new</span> <span class="hljs-title class_">RowBounds</span>(), <span class="hljs-literal">null</span>);<br>      metaParam.setValue(parameterMapping.getProperty(), resultHandler.getResultList());<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-comment">// issue #228 (close resultsets)</span><br>      closeResultSet(rs);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRowValues</span><span class="hljs-params">(ResultSetWrapper rsw, ResultMap resultMap, ResultHandler resultHandler, RowBounds rowBounds, ResultMapping parentMapping)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">if</span> (resultMap.hasNestedResultMaps()) &#123;<br>      ensureNoRowBounds();<br>      checkResultHandler();<br>      handleRowValuesForNestedResultMap(rsw, resultMap, resultHandler, rowBounds, parentMapping);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      handleRowValuesForSimpleResultMap(rsw, resultMap, resultHandler, rowBounds, parentMapping);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRowValuesForSimpleResultMap</span><span class="hljs-params">(ResultSetWrapper rsw, ResultMap resultMap, ResultHandler resultHandler, RowBounds rowBounds, ResultMapping parentMapping)</span><br>      <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">DefaultResultContext</span> <span class="hljs-variable">resultContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultResultContext</span>();<br>    skipRows(rsw.getResultSet(), rowBounds);<br>    <span class="hljs-keyword">while</span> (shouldProcessMoreRows(resultContext, rowBounds) &amp;&amp; rsw.getResultSet().next()) &#123;<br>      <span class="hljs-type">ResultMap</span> <span class="hljs-variable">discriminatedResultMap</span> <span class="hljs-operator">=</span> resolveDiscriminatedResultMap(rsw.getResultSet(), resultMap, <span class="hljs-literal">null</span>);<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">rowValue</span> <span class="hljs-operator">=</span> getRowValue(rsw, discriminatedResultMap);<br>      storeObject(resultHandler, resultContext, rowValue, parentMapping, rsw.getResultSet());<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">skipRows</span><span class="hljs-params">(ResultSet rs, RowBounds rowBounds)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">if</span> (rs.getType() != ResultSet.TYPE_FORWARD_ONLY) &#123;<br>      <span class="hljs-keyword">if</span> (rowBounds.getOffset() != RowBounds.NO_ROW_OFFSET) &#123;<br>        rs.absolute(rowBounds.getOffset());<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; rowBounds.getOffset(); i++) &#123;<br>        rs.next();<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">shouldProcessMoreRows</span><span class="hljs-params">(ResultContext context, RowBounds rowBounds)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">return</span> !context.isStopped() &amp;&amp; context.getResultCount() &lt; rowBounds.getLimit();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> ResultMap <span class="hljs-title function_">resolveDiscriminatedResultMap</span><span class="hljs-params">(ResultSet rs, ResultMap resultMap, String columnPrefix)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    Set&lt;String&gt; pastDiscriminators = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;String&gt;();<br>    <span class="hljs-type">Discriminator</span> <span class="hljs-variable">discriminator</span> <span class="hljs-operator">=</span> resultMap.getDiscriminator();<br>    <span class="hljs-comment">// 这里应该是处理嵌套的Discriminator</span><br>    <span class="hljs-keyword">while</span> (discriminator != <span class="hljs-literal">null</span>) &#123; <br>      <span class="hljs-comment">// 拿到Discriminator的值</span><br>      <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> getDiscriminatorValue(rs, discriminator, columnPrefix);<br>      <span class="hljs-comment">// 拿到值对应的ResultMap id</span><br>      <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">discriminatedMapId</span> <span class="hljs-operator">=</span> discriminator.getMapIdFor(String.valueOf(value));<br>      <span class="hljs-keyword">if</span> (configuration.hasResultMap(discriminatedMapId)) &#123;<br>        resultMap = configuration.getResultMap(discriminatedMapId);<br>        <span class="hljs-type">Discriminator</span> <span class="hljs-variable">lastDiscriminator</span> <span class="hljs-operator">=</span> discriminator;<br>        discriminator = resultMap.getDiscriminator();<br>        <span class="hljs-keyword">if</span> (discriminator == lastDiscriminator || !pastDiscriminators.add(discriminatedMapId)) &#123;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> resultMap;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">getDiscriminatorValue</span><span class="hljs-params">(ResultSet rs, Discriminator discriminator, String columnPrefix)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ResultMapping</span> <span class="hljs-variable">resultMapping</span> <span class="hljs-operator">=</span> discriminator.getResultMapping();<br>    <span class="hljs-keyword">final</span> TypeHandler&lt;?&gt; typeHandler = resultMapping.getTypeHandler();<br>    <span class="hljs-keyword">return</span> typeHandler.getResult(rs, prependPrefix(resultMapping.getColumn(), columnPrefix));<br>  &#125; <br><br>  <span class="hljs-comment">// 核心，取得一行的值</span><br>  <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">getRowValue</span><span class="hljs-params">(ResultSetWrapper rsw, ResultMap resultMap)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">// 实例化ResultLoaderMap(延迟加载器)</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ResultLoaderMap</span> <span class="hljs-variable">lazyLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultLoaderMap</span>();<br>    <span class="hljs-comment">// 调用自己的createResultObject,内部就是new一个对象(如果是简单类型，new完也把值赋进去)</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">resultObject</span> <span class="hljs-operator">=</span> createResultObject(rsw, resultMap, lazyLoader, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">if</span> (resultObject != <span class="hljs-literal">null</span> &amp;&amp; !typeHandlerRegistry.hasTypeHandler(resultMap.getType())) &#123;<br>      <span class="hljs-comment">// 一般不是简单类型不会有typehandler,这个if会进来</span><br>      <span class="hljs-keyword">final</span> <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaObject</span> <span class="hljs-operator">=</span> configuration.newMetaObject(resultObject);<br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">foundValues</span> <span class="hljs-operator">=</span> !resultMap.getConstructorResultMappings().isEmpty();<br>      <span class="hljs-keyword">if</span> (shouldApplyAutomaticMappings(resultMap, <span class="hljs-literal">false</span>)) &#123;        <br>        <span class="hljs-comment">// 自动映射</span><br>        <span class="hljs-comment">// 这里把每个列的值都赋到相应的字段里去了</span><br>        foundValues = applyAutomaticMappings(rsw, resultMap, metaObject, <span class="hljs-literal">null</span>) || foundValues;<br>      &#125;<br>      foundValues = applyPropertyMappings(rsw, resultMap, metaObject, lazyLoader, <span class="hljs-literal">null</span>) || foundValues;<br>      foundValues = lazyLoader.size() &gt; <span class="hljs-number">0</span> || foundValues;<br>      resultObject = foundValues ? resultObject : <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">return</span> resultObject;<br>    &#125;<br>    <span class="hljs-keyword">return</span> resultObject;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">createResultObject</span><span class="hljs-params">(ResultSetWrapper rsw, ResultMap resultMap, ResultLoaderMap lazyLoader, String columnPrefix)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">final</span> List&lt;Class&lt;?&gt;&gt; constructorArgTypes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Class&lt;?&gt;&gt;();<br>    <span class="hljs-keyword">final</span> List&lt;Object&gt; constructorArgs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">resultObject</span> <span class="hljs-operator">=</span> createResultObject(rsw, resultMap, constructorArgTypes, constructorArgs, columnPrefix);<br>    <span class="hljs-keyword">if</span> (resultObject != <span class="hljs-literal">null</span> &amp;&amp; !typeHandlerRegistry.hasTypeHandler(resultMap.getType())) &#123;<br>      <span class="hljs-keyword">final</span> List&lt;ResultMapping&gt; propertyMappings = resultMap.getPropertyResultMappings();<br>      <span class="hljs-keyword">for</span> (ResultMapping propertyMapping : propertyMappings) &#123;<br>        <span class="hljs-comment">// issue gcode #109 &amp;&amp; issue #149</span><br>        <span class="hljs-keyword">if</span> (propertyMapping.getNestedQueryId() != <span class="hljs-literal">null</span> &amp;&amp; propertyMapping.isLazy()) &#123;<br>          <span class="hljs-comment">// 使用代理(cglib/javaassist)</span><br>          <span class="hljs-keyword">return</span> configuration.getProxyFactory().createProxy(resultObject, lazyLoader, configuration, objectFactory, constructorArgTypes, constructorArgs);<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> resultObject;<br>  &#125; <br><br>  <span class="hljs-comment">// 创建结果对象</span><br>  <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">createResultObject</span><span class="hljs-params">(ResultSetWrapper rsw, ResultMap resultMap, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs, String columnPrefix)</span><br>      <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">// 得到result type</span><br>    <span class="hljs-keyword">final</span> Class&lt;?&gt; resultType = resultMap.getType();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">MetaClass</span> <span class="hljs-variable">metaType</span> <span class="hljs-operator">=</span> MetaClass.forClass(resultType);<br>    <span class="hljs-keyword">final</span> List&lt;ResultMapping&gt; constructorMappings = resultMap.getConstructorResultMappings();<br>    <span class="hljs-keyword">if</span> (typeHandlerRegistry.hasTypeHandler(resultType)) &#123;<br>      <span class="hljs-comment">// 基本型</span><br>      <span class="hljs-keyword">return</span> createPrimitiveResultObject(rsw, resultMap, columnPrefix);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!constructorMappings.isEmpty()) &#123;<br>      <span class="hljs-comment">// 有参数的构造函数</span><br>      <span class="hljs-keyword">return</span> createParameterizedResultObject(rsw, resultType, constructorMappings, constructorArgTypes, constructorArgs, columnPrefix);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (resultType.isInterface() || metaType.hasDefaultConstructor()) &#123;<br>      <span class="hljs-comment">// 普通bean类型</span><br>      <span class="hljs-keyword">return</span> objectFactory.create(resultType);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (shouldApplyAutomaticMappings(resultMap, <span class="hljs-literal">false</span>)) &#123;<br>      <span class="hljs-comment">// 自动映射</span><br>      <span class="hljs-keyword">return</span> createByConstructorSignature(rsw, resultType, constructorArgTypes, constructorArgs, columnPrefix);<br>    &#125;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Do not know how to create an instance of &quot;</span> + resultType);<br>  &#125; <br><br>  <span class="hljs-comment">// 简单类型走这里</span><br>  <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">createPrimitiveResultObject</span><span class="hljs-params">(ResultSetWrapper rsw, ResultMap resultMap, String columnPrefix)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">final</span> Class&lt;?&gt; resultType = resultMap.getType();<br>    <span class="hljs-keyword">final</span> String columnName;<br>    <span class="hljs-comment">// 因为只有1列，所以取得这一列的名字</span><br>    <span class="hljs-keyword">if</span> (!resultMap.getResultMappings().isEmpty()) &#123;<br>      <span class="hljs-keyword">final</span> List&lt;ResultMapping&gt; resultMappingList = resultMap.getResultMappings();<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">ResultMapping</span> <span class="hljs-variable">mapping</span> <span class="hljs-operator">=</span> resultMappingList.get(<span class="hljs-number">0</span>);<br>      columnName = prependPrefix(mapping.getColumn(), columnPrefix);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      columnName = rsw.getColumnNames().get(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">final</span> TypeHandler&lt;?&gt; typeHandler = rsw.getTypeHandler(resultType, columnName);<br>    <span class="hljs-keyword">return</span> typeHandler.getResult(rsw.getResultSet(), columnName);<br>  &#125; <br><br>  <span class="hljs-comment">// 设置了构造函数参数</span><br>  <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">createParameterizedResultObject</span><span class="hljs-params">(ResultSetWrapper rsw, Class&lt;?&gt; resultType, List&lt;ResultMapping&gt; constructorMappings,</span><br><span class="hljs-params">      List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs, String columnPrefix)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">foundValues</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (ResultMapping constructorMapping : constructorMappings) &#123;<br>      <span class="hljs-keyword">final</span> Class&lt;?&gt; parameterType = constructorMapping.getJavaType();<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">column</span> <span class="hljs-operator">=</span> constructorMapping.getColumn();<br>      <span class="hljs-keyword">final</span> Object value;<br>      <span class="hljs-keyword">if</span> (constructorMapping.getNestedQueryId() != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 值由嵌套查询获得</span><br>        value = getNestedQueryConstructorValue(rsw.getResultSet(), constructorMapping, columnPrefix);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (constructorMapping.getNestedResultMapId() != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ResultMap</span> <span class="hljs-variable">resultMap</span> <span class="hljs-operator">=</span> configuration.getResultMap(constructorMapping.getNestedResultMapId());<br>        <span class="hljs-comment">// 递归获取一行的值</span><br>        value = getRowValue(rsw, resultMap);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 通过typeHandler获取值</span><br>        <span class="hljs-keyword">final</span> TypeHandler&lt;?&gt; typeHandler = constructorMapping.getTypeHandler();<br>        value = typeHandler.getResult(rsw.getResultSet(), prependPrefix(column, columnPrefix));<br>      &#125;<br>      constructorArgTypes.add(parameterType);<br>      constructorArgs.add(value);<br>      foundValues = value != <span class="hljs-literal">null</span> || foundValues;<br>    &#125;<br>    <span class="hljs-keyword">return</span> foundValues ? objectFactory.create(resultType, constructorArgTypes, constructorArgs) : <span class="hljs-literal">null</span>;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">getNestedQueryConstructorValue</span><span class="hljs-params">(ResultSet rs, ResultMapping constructorMapping, String columnPrefix)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">nestedQueryId</span> <span class="hljs-operator">=</span> constructorMapping.getNestedQueryId();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">MappedStatement</span> <span class="hljs-variable">nestedQuery</span> <span class="hljs-operator">=</span> configuration.getMappedStatement(nestedQueryId);<br>    <span class="hljs-keyword">final</span> Class&lt;?&gt; nestedQueryParameterType = nestedQuery.getParameterMap().getType();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">nestedQueryParameterObject</span> <span class="hljs-operator">=</span> prepareParameterForNestedQuery(rs, constructorMapping, nestedQueryParameterType, columnPrefix);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (nestedQueryParameterObject != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">BoundSql</span> <span class="hljs-variable">nestedBoundSql</span> <span class="hljs-operator">=</span> nestedQuery.getBoundSql(nestedQueryParameterObject);<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">CacheKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> executor.createCacheKey(nestedQuery, nestedQueryParameterObject, RowBounds.DEFAULT, nestedBoundSql);<br>      <span class="hljs-keyword">final</span> Class&lt;?&gt; targetType = constructorMapping.getJavaType();<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">ResultLoader</span> <span class="hljs-variable">resultLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultLoader</span>(configuration, executor, nestedQuery, nestedQueryParameterObject, targetType, key, nestedBoundSql);<br>      value = resultLoader.loadResult();<br>    &#125;<br>    <span class="hljs-keyword">return</span> value;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">prepareParameterForNestedQuery</span><span class="hljs-params">(ResultSet rs, ResultMapping resultMapping, Class&lt;?&gt; parameterType, String columnPrefix)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">if</span> (resultMapping.isCompositeResult()) &#123;<br>      <span class="hljs-keyword">return</span> prepareCompositeKeyParameter(rs, resultMapping, parameterType, columnPrefix);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> prepareSimpleKeyParameter(rs, resultMapping, parameterType, columnPrefix);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">prepareCompositeKeyParameter</span><span class="hljs-params">(ResultSet rs, ResultMapping resultMapping, Class&lt;?&gt; parameterType, String columnPrefix)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">parameterObject</span> <span class="hljs-operator">=</span> instantiateParameterObject(parameterType);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaObject</span> <span class="hljs-operator">=</span> configuration.newMetaObject(parameterObject);<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">foundValues</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (ResultMapping innerResultMapping : resultMapping.getComposites()) &#123;<br>      <span class="hljs-keyword">final</span> Class&lt;?&gt; propType = metaObject.getSetterType(innerResultMapping.getProperty());<br>      <span class="hljs-keyword">final</span> TypeHandler&lt;?&gt; typeHandler = typeHandlerRegistry.getTypeHandler(propType);<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">propValue</span> <span class="hljs-operator">=</span> typeHandler.getResult(rs, prependPrefix(innerResultMapping.getColumn(), columnPrefix));<br>      <span class="hljs-comment">// issue #353 &amp; #560 do not execute nested query if key is null</span><br>      <span class="hljs-keyword">if</span> (propValue != <span class="hljs-literal">null</span>) &#123;<br>        metaObject.setValue(innerResultMapping.getProperty(), propValue);<br>        foundValues = <span class="hljs-literal">true</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> foundValues ? parameterObject : <span class="hljs-literal">null</span>;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">instantiateParameterObject</span><span class="hljs-params">(Class&lt;?&gt; parameterType)</span> &#123;<br>    <span class="hljs-keyword">if</span> (parameterType == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Object, Object&gt;();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> objectFactory.create(parameterType);<br>    &#125;<br>  &#125;  <br><br>  <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">prepareSimpleKeyParameter</span><span class="hljs-params">(ResultSet rs, ResultMapping resultMapping, Class&lt;?&gt; parameterType, String columnPrefix)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">final</span> TypeHandler&lt;?&gt; typeHandler;<br>    <span class="hljs-keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterType)) &#123;<br>      typeHandler = typeHandlerRegistry.getTypeHandler(parameterType);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      typeHandler = typeHandlerRegistry.getUnknownTypeHandler();<br>    &#125;<br>    <span class="hljs-keyword">return</span> typeHandler.getResult(rs, prependPrefix(resultMapping.getColumn(), columnPrefix));<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">shouldApplyAutomaticMappings</span><span class="hljs-params">(ResultMap resultMap, <span class="hljs-type">boolean</span> isNested)</span> &#123;<br>    <span class="hljs-keyword">if</span> (resultMap.getAutoMapping() != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> resultMap.getAutoMapping();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (isNested) &#123;<br>        <span class="hljs-keyword">return</span> AutoMappingBehavior.FULL == configuration.getAutoMappingBehavior();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> AutoMappingBehavior.NONE != configuration.getAutoMappingBehavior();<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">createByConstructorSignature</span><span class="hljs-params">(ResultSetWrapper rsw, Class&lt;?&gt; resultType, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs,</span><br><span class="hljs-params">      String columnPrefix)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">for</span> (Constructor&lt;?&gt; constructor : resultType.getDeclaredConstructors()) &#123;<br>       <span class="hljs-comment">// 返回的一行数据的类型正好对应上一种构造函数的参数类型</span><br>       <span class="hljs-keyword">if</span> (typeNames(constructor.getParameterTypes()).equals(rsw.getClassNames())) &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">foundValues</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; constructor.getParameterTypes().length; i++) &#123;<br>          Class&lt;?&gt; parameterType = constructor.getParameterTypes()[i];<br>          <span class="hljs-type">String</span> <span class="hljs-variable">columnName</span> <span class="hljs-operator">=</span> rsw.getColumnNames().get(i);<br>          TypeHandler&lt;?&gt; typeHandler = rsw.getTypeHandler(parameterType, columnName);<br>          <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> typeHandler.getResult(rsw.getResultSet(), prependPrefix(columnName, columnPrefix));<br>          constructorArgTypes.add(parameterType);<br>          constructorArgs.add(value);<br>          foundValues = value != <span class="hljs-literal">null</span> || foundValues;<br>        &#125;<br>        <span class="hljs-comment">//上面是构造函数创建对象，下面是对象工厂来创建</span><br>        <span class="hljs-keyword">return</span> foundValues ? objectFactory.create(resultType, constructorArgTypes, constructorArgs) : <span class="hljs-literal">null</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;No constructor found in &quot;</span> + resultType.getName() + <span class="hljs-string">&quot; matching &quot;</span> + rsw.getClassNames());<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> List&lt;String&gt; <span class="hljs-title function_">typeNames</span><span class="hljs-params">(Class&lt;?&gt;[] parameterTypes)</span> &#123;<br>    List&lt;String&gt; names = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    <span class="hljs-keyword">for</span> (Class&lt;?&gt; type : parameterTypes) &#123;<br>      names.add(type.getName());<br>    &#125;<br>    <span class="hljs-keyword">return</span> names;<br>  &#125; <br><br>  <span class="hljs-comment">// 自动映射没有手动定义映射的列</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">applyAutomaticMappings</span><span class="hljs-params">(ResultSetWrapper rsw, ResultMap resultMap, MetaObject metaObject, String columnPrefix)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">final</span> List&lt;String&gt; unmappedColumnNames = rsw.getUnmappedColumnNames(resultMap, columnPrefix);<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">foundValues</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (String columnName : unmappedColumnNames) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">propertyName</span> <span class="hljs-operator">=</span> columnName;<br>      <span class="hljs-keyword">if</span> (columnPrefix != <span class="hljs-literal">null</span> &amp;&amp; !columnPrefix.isEmpty()) &#123;<br>        <span class="hljs-comment">// When columnPrefix is specified,</span><br>        <span class="hljs-comment">// ignore columns without the prefix.</span><br>        <span class="hljs-keyword">if</span> (columnName.toUpperCase(Locale.ENGLISH).startsWith(columnPrefix)) &#123;<br>          propertyName = columnName.substring(columnPrefix.length());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">continue</span>;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">property</span> <span class="hljs-operator">=</span> metaObject.findProperty(propertyName, configuration.isMapUnderscoreToCamelCase());<br>      <span class="hljs-keyword">if</span> (property != <span class="hljs-literal">null</span> &amp;&amp; metaObject.hasSetter(property)) &#123;<br>        <span class="hljs-keyword">final</span> Class&lt;?&gt; propertyType = metaObject.getSetterType(property);<br>        <span class="hljs-keyword">if</span> (typeHandlerRegistry.hasTypeHandler(propertyType)) &#123;<br>          <span class="hljs-keyword">final</span> TypeHandler&lt;?&gt; typeHandler = rsw.getTypeHandler(propertyType, columnName);<br>          <span class="hljs-comment">// 巧妙的用TypeHandler取得结果</span><br>          <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> typeHandler.getResult(rsw.getResultSet(), columnName);<br>          <span class="hljs-comment">// issue #377, call setter on nulls</span><br>          <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span> || configuration.isCallSettersOnNulls()) &#123;<br>            <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span> || !propertyType.isPrimitive()) &#123;<br>              <span class="hljs-comment">// 然后巧妙的用反射来设置到对象</span><br>              metaObject.setValue(property, value);<br>            &#125;<br>            foundValues = <span class="hljs-literal">true</span>;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> foundValues;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">applyPropertyMappings</span><span class="hljs-params">(ResultSetWrapper rsw, ResultMap resultMap, MetaObject metaObject, ResultLoaderMap lazyLoader, String columnPrefix)</span><br>      <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">final</span> List&lt;String&gt; mappedColumnNames = rsw.getMappedColumnNames(resultMap, columnPrefix);<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">foundValues</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">final</span> List&lt;ResultMapping&gt; propertyMappings = resultMap.getPropertyResultMappings();<br>    <span class="hljs-keyword">for</span> (ResultMapping propertyMapping : propertyMappings) &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">column</span> <span class="hljs-operator">=</span> prependPrefix(propertyMapping.getColumn(), columnPrefix);<br>      <span class="hljs-keyword">if</span> (propertyMapping.isCompositeResult() <br>          || (column != <span class="hljs-literal">null</span> &amp;&amp; mappedColumnNames.contains(column.toUpperCase(Locale.ENGLISH))) <br>          || propertyMapping.getResultSet() != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> getPropertyMappingValue(rsw.getResultSet(), metaObject, propertyMapping, lazyLoader, columnPrefix);<br>        <span class="hljs-comment">// issue #541 make property optional</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">property</span> <span class="hljs-operator">=</span> propertyMapping.getProperty();<br>        <span class="hljs-comment">// issue #377, call setter on nulls</span><br>        <span class="hljs-keyword">if</span> (value != NO_VALUE &amp;&amp; property != <span class="hljs-literal">null</span> &amp;&amp; (value != <span class="hljs-literal">null</span> || configuration.isCallSettersOnNulls())) &#123;<br>          <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span> || !metaObject.getSetterType(property).isPrimitive()) &#123;<br>            metaObject.setValue(property, value);<br>          &#125;<br>          foundValues = <span class="hljs-literal">true</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> foundValues;<br>  &#125; <br><br>  <span class="hljs-comment">// 获取属性映射的值</span><br>  <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">getPropertyMappingValue</span><span class="hljs-params">(ResultSet rs, MetaObject metaResultObject, ResultMapping propertyMapping, ResultLoaderMap lazyLoader, String columnPrefix)</span><br>      <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">if</span> (propertyMapping.getNestedQueryId() != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> getNestedQueryMappingValue(rs, metaResultObject, propertyMapping, lazyLoader, columnPrefix);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (propertyMapping.getResultSet() != <span class="hljs-literal">null</span>) &#123;<br>      addPendingChildRelation(rs, metaResultObject, propertyMapping);<br>      <span class="hljs-keyword">return</span> NO_VALUE;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (propertyMapping.getNestedResultMapId() != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// the user added a column attribute to a nested result map, ignore it</span><br>      <span class="hljs-keyword">return</span> NO_VALUE;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">final</span> TypeHandler&lt;?&gt; typeHandler = propertyMapping.getTypeHandler();<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">column</span> <span class="hljs-operator">=</span> prependPrefix(propertyMapping.getColumn(), columnPrefix);<br>      <span class="hljs-keyword">return</span> typeHandler.getResult(rs, column);<br>    &#125;<br>  &#125;  <br><br>  <span class="hljs-comment">// 得到嵌套查询值</span><br>  <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">getNestedQueryMappingValue</span><span class="hljs-params">(ResultSet rs, MetaObject metaResultObject, ResultMapping propertyMapping, ResultLoaderMap lazyLoader, String columnPrefix)</span><br>      <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">nestedQueryId</span> <span class="hljs-operator">=</span> propertyMapping.getNestedQueryId();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">property</span> <span class="hljs-operator">=</span> propertyMapping.getProperty();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">MappedStatement</span> <span class="hljs-variable">nestedQuery</span> <span class="hljs-operator">=</span> configuration.getMappedStatement(nestedQueryId);<br>    <span class="hljs-keyword">final</span> Class&lt;?&gt; nestedQueryParameterType = nestedQuery.getParameterMap().getType();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">nestedQueryParameterObject</span> <span class="hljs-operator">=</span> prepareParameterForNestedQuery(rs, propertyMapping, nestedQueryParameterType, columnPrefix);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> NO_VALUE;<br>    <span class="hljs-keyword">if</span> (nestedQueryParameterObject != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">BoundSql</span> <span class="hljs-variable">nestedBoundSql</span> <span class="hljs-operator">=</span> nestedQuery.getBoundSql(nestedQueryParameterObject);<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">CacheKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> executor.createCacheKey(nestedQuery, nestedQueryParameterObject, RowBounds.DEFAULT, nestedBoundSql);<br>      <span class="hljs-keyword">final</span> Class&lt;?&gt; targetType = propertyMapping.getJavaType();<br>      <span class="hljs-keyword">if</span> (executor.isCached(nestedQuery, key)) &#123;<br>        <span class="hljs-comment">// 如果已经有一级缓存了，则延迟加载(实际上deferLoad方法中可以看到则是立即加载)</span><br>        executor.deferLoad(nestedQuery, metaResultObject, property, key, targetType);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 否则lazyLoader.addLoader 需要延迟加载则addLoader</span><br>        <span class="hljs-comment">// 或者ResultLoader.loadResult 不需要延迟加载则立即加载</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ResultLoader</span> <span class="hljs-variable">resultLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultLoader</span>(configuration, executor, nestedQuery, nestedQueryParameterObject, targetType, key, nestedBoundSql);<br>        <span class="hljs-keyword">if</span> (propertyMapping.isLazy()) &#123;<br>          lazyLoader.addLoader(property, metaResultObject, resultLoader);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          value = resultLoader.loadResult();<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> value;<br>  &#125; <br><br>  <span class="hljs-comment">// 后面的不想看了，以后再看</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addPendingChildRelation</span><span class="hljs-params">(ResultSet rs, MetaObject metaResultObject, ResultMapping parentMapping)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">CacheKey</span> <span class="hljs-variable">cacheKey</span> <span class="hljs-operator">=</span> createKeyForMultipleResults(rs, parentMapping, parentMapping.getColumn(), parentMapping.getColumn());<br>    <span class="hljs-type">PendingRelation</span> <span class="hljs-variable">deferLoad</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PendingRelation</span>();<br>    deferLoad.metaObject = metaResultObject;<br>    deferLoad.propertyMapping = parentMapping;<br>    List&lt;PendingRelation&gt; relations = pendingRelations.get(cacheKey);<br>    <span class="hljs-comment">// issue #255</span><br>    <span class="hljs-keyword">if</span> (relations == <span class="hljs-literal">null</span>) &#123;<br>      relations = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;DefaultResultSetHandler.PendingRelation&gt;();<br>      pendingRelations.put(cacheKey, relations);<br>    &#125;<br>    relations.add(deferLoad);<br>    <span class="hljs-type">ResultMapping</span> <span class="hljs-variable">previous</span> <span class="hljs-operator">=</span> nextResultMaps.get(parentMapping.getResultSet());<br>    <span class="hljs-keyword">if</span> (previous == <span class="hljs-literal">null</span>) &#123;<br>      nextResultMaps.put(parentMapping.getResultSet(), parentMapping);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (!previous.equals(parentMapping)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Two different properties are mapped to the same resultSet&quot;</span>);<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">storeObject</span><span class="hljs-params">(ResultHandler resultHandler, DefaultResultContext resultContext, Object rowValue, ResultMapping parentMapping, ResultSet rs)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">if</span> (parentMapping != <span class="hljs-literal">null</span>) &#123;<br>      linkToParents(rs, parentMapping, rowValue);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      callResultHandler(resultHandler, resultContext, rowValue);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// MULTIPLE RESULT SETS</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">linkToParents</span><span class="hljs-params">(ResultSet rs, ResultMapping parentMapping, Object rowValue)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">CacheKey</span> <span class="hljs-variable">parentKey</span> <span class="hljs-operator">=</span> createKeyForMultipleResults(rs, parentMapping, parentMapping.getColumn(), parentMapping.getForeignColumn());<br>    List&lt;PendingRelation&gt; parents = pendingRelations.get(parentKey);<br>    <span class="hljs-keyword">for</span> (PendingRelation parent : parents) &#123;<br>      <span class="hljs-keyword">if</span> (parent != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">collectionProperty</span> <span class="hljs-operator">=</span> instantiateCollectionPropertyIfAppropriate(parent.propertyMapping, parent.metaObject);<br>        <span class="hljs-keyword">if</span> (rowValue != <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">if</span> (collectionProperty != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">MetaObject</span> <span class="hljs-variable">targetMetaObject</span> <span class="hljs-operator">=</span> configuration.newMetaObject(collectionProperty);<br>            targetMetaObject.add(rowValue);<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            parent.metaObject.setValue(parent.propertyMapping.getProperty(), rowValue);<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;  <br><br>  <span class="hljs-keyword">private</span> CacheKey <span class="hljs-title function_">createKeyForMultipleResults</span><span class="hljs-params">(ResultSet rs, ResultMapping resultMapping, String names, String columns)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">CacheKey</span> <span class="hljs-variable">cacheKey</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheKey</span>();<br>    cacheKey.update(resultMapping);<br>    <span class="hljs-keyword">if</span> (columns != <span class="hljs-literal">null</span> &amp;&amp; names != <span class="hljs-literal">null</span>) &#123;<br>      String[] columnsArray = columns.split(<span class="hljs-string">&quot;,&quot;</span>);<br>      String[] namesArray = names.split(<span class="hljs-string">&quot;,&quot;</span>);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; columnsArray.length ; i++) &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> rs.getString(columnsArray[i]);<br>        <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>) &#123;<br>          cacheKey.update(namesArray[i]);<br>          cacheKey.update(value);<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> cacheKey;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">instantiateCollectionPropertyIfAppropriate</span><span class="hljs-params">(ResultMapping resultMapping, MetaObject metaObject)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">propertyName</span> <span class="hljs-operator">=</span> resultMapping.getProperty();<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">propertyValue</span> <span class="hljs-operator">=</span> metaObject.getValue(propertyName);<br>    <span class="hljs-keyword">if</span> (propertyValue == <span class="hljs-literal">null</span>) &#123;<br>      Class&lt;?&gt; type = resultMapping.getJavaType();<br>      <span class="hljs-keyword">if</span> (type == <span class="hljs-literal">null</span>) &#123;<br>        type = metaObject.getSetterType(propertyName);<br>      &#125;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (objectFactory.isCollection(type)) &#123;<br>          propertyValue = objectFactory.create(type);<br>          metaObject.setValue(propertyName, propertyValue);<br>          <span class="hljs-keyword">return</span> propertyValue;<br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Error instantiating collection property for result &#x27;&quot;</span> + resultMapping.getProperty() + <span class="hljs-string">&quot;&#x27;.  Cause: &quot;</span> + e, e);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (objectFactory.isCollection(propertyValue.getClass())) &#123;<br>      <span class="hljs-keyword">return</span> propertyValue;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">callResultHandler</span><span class="hljs-params">(ResultHandler resultHandler, DefaultResultContext resultContext, Object rowValue)</span> &#123;<br>    resultContext.nextResultObject(rowValue);<br>    resultHandler.handleResult(resultContext);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureNoRowBounds</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (configuration.isSafeRowBoundsEnabled() &amp;&amp; rowBounds != <span class="hljs-literal">null</span> &amp;&amp; (rowBounds.getLimit() &lt; RowBounds.NO_ROW_LIMIT || rowBounds.getOffset() &gt; RowBounds.NO_ROW_OFFSET)) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Mapped Statements with nested result mappings cannot be safely constrained by RowBounds. &quot;</span><br>          + <span class="hljs-string">&quot;Use safeRowBoundsEnabled=false setting to bypass this check.&quot;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkResultHandler</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (resultHandler != <span class="hljs-literal">null</span> &amp;&amp; configuration.isSafeResultHandlerEnabled() &amp;&amp; !mappedStatement.isResultOrdered()) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Mapped Statements with nested result mappings cannot be safely used with a custom ResultHandler. &quot;</span><br>          + <span class="hljs-string">&quot;Use safeResultHandlerEnabled=false setting to bypass this check &quot;</span> <br>          + <span class="hljs-string">&quot;or ensure your statement returns ordered data and set resultOrdered=true on it.&quot;</span>);<br>    &#125;<br>  &#125;  <br><br>  <span class="hljs-comment">//</span><br>  <span class="hljs-comment">// HANDLE NESTED RESULT MAPS</span><br>  <span class="hljs-comment">//</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRowValuesForNestedResultMap</span><span class="hljs-params">(ResultSetWrapper rsw, ResultMap resultMap, ResultHandler resultHandler, RowBounds rowBounds, ResultMapping parentMapping)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">DefaultResultContext</span> <span class="hljs-variable">resultContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultResultContext</span>();<br>    skipRows(rsw.getResultSet(), rowBounds);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">rowValue</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span> (shouldProcessMoreRows(resultContext, rowBounds) &amp;&amp; rsw.getResultSet().next()) &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">ResultMap</span> <span class="hljs-variable">discriminatedResultMap</span> <span class="hljs-operator">=</span> resolveDiscriminatedResultMap(rsw.getResultSet(), resultMap, <span class="hljs-literal">null</span>);<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">CacheKey</span> <span class="hljs-variable">rowKey</span> <span class="hljs-operator">=</span> createRowKey(discriminatedResultMap, rsw, <span class="hljs-literal">null</span>);<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">partialObject</span> <span class="hljs-operator">=</span> nestedResultObjects.get(rowKey);<br>      <span class="hljs-comment">// issue #577 &amp;&amp; #542</span><br>      <span class="hljs-keyword">if</span> (mappedStatement.isResultOrdered()) &#123;<br>        <span class="hljs-keyword">if</span> (partialObject == <span class="hljs-literal">null</span> &amp;&amp; rowValue != <span class="hljs-literal">null</span>) &#123;<br>          nestedResultObjects.clear();<br>          storeObject(resultHandler, resultContext, rowValue, parentMapping, rsw.getResultSet());<br>        &#125;<br>        rowValue = getRowValue(rsw, discriminatedResultMap, rowKey, rowKey, <span class="hljs-literal">null</span>, partialObject);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        rowValue = getRowValue(rsw, discriminatedResultMap, rowKey, rowKey, <span class="hljs-literal">null</span>, partialObject);<br>        <span class="hljs-keyword">if</span> (partialObject == <span class="hljs-literal">null</span>) &#123;<br>          storeObject(resultHandler, resultContext, rowValue, parentMapping, rsw.getResultSet());<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (rowValue != <span class="hljs-literal">null</span> &amp;&amp; mappedStatement.isResultOrdered() &amp;&amp; shouldProcessMoreRows(resultContext, rowBounds)) &#123;<br>      storeObject(resultHandler, resultContext, rowValue, parentMapping, rsw.getResultSet());<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">//</span><br>  <span class="hljs-comment">// UNIQUE RESULT KEY</span><br>  <span class="hljs-comment">//</span><br>  <span class="hljs-keyword">private</span> CacheKey <span class="hljs-title function_">createRowKey</span><span class="hljs-params">(ResultMap resultMap, ResultSetWrapper rsw, String columnPrefix)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">CacheKey</span> <span class="hljs-variable">cacheKey</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheKey</span>();<br>    cacheKey.update(resultMap.getId());<br>    List&lt;ResultMapping&gt; resultMappings = getResultMappingsForRowKey(resultMap);<br>    <span class="hljs-keyword">if</span> (resultMappings.size() == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">if</span> (Map.class.isAssignableFrom(resultMap.getType())) &#123;<br>        createRowKeyForMap(rsw, cacheKey);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        createRowKeyForUnmappedProperties(resultMap, rsw, cacheKey, columnPrefix);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      createRowKeyForMappedProperties(resultMap, rsw, cacheKey, resultMappings, columnPrefix);<br>    &#125;<br>    <span class="hljs-keyword">return</span> cacheKey;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> List&lt;ResultMapping&gt; <span class="hljs-title function_">getResultMappingsForRowKey</span><span class="hljs-params">(ResultMap resultMap)</span> &#123;<br>    List&lt;ResultMapping&gt; resultMappings = resultMap.getIdResultMappings();<br>    <span class="hljs-keyword">if</span> (resultMappings.size() == <span class="hljs-number">0</span>) &#123;<br>      resultMappings = resultMap.getPropertyResultMappings();<br>    &#125;<br>    <span class="hljs-keyword">return</span> resultMappings;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createRowKeyForMap</span><span class="hljs-params">(ResultSetWrapper rsw, CacheKey cacheKey)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    List&lt;String&gt; columnNames = rsw.getColumnNames();<br>    <span class="hljs-keyword">for</span> (String columnName : columnNames) &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> rsw.getResultSet().getString(columnName);<br>      <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>) &#123;<br>        cacheKey.update(columnName);<br>        cacheKey.update(value);<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createRowKeyForUnmappedProperties</span><span class="hljs-params">(ResultMap resultMap, ResultSetWrapper rsw, CacheKey cacheKey, String columnPrefix)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">MetaClass</span> <span class="hljs-variable">metaType</span> <span class="hljs-operator">=</span> MetaClass.forClass(resultMap.getType());<br>    List&lt;String&gt; unmappedColumnNames = rsw.getUnmappedColumnNames(resultMap, columnPrefix);<br>    <span class="hljs-keyword">for</span> (String column : unmappedColumnNames) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">property</span> <span class="hljs-operator">=</span> column;<br>      <span class="hljs-keyword">if</span> (columnPrefix != <span class="hljs-literal">null</span> &amp;&amp; !columnPrefix.isEmpty()) &#123;<br>        <span class="hljs-comment">// When columnPrefix is specified, ignore columns without the prefix.</span><br>        <span class="hljs-keyword">if</span> (column.toUpperCase(Locale.ENGLISH).startsWith(columnPrefix)) &#123;<br>          property = column.substring(columnPrefix.length());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">continue</span>;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (metaType.findProperty(property, configuration.isMapUnderscoreToCamelCase()) != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> rsw.getResultSet().getString(column);<br>        <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>) &#123;<br>          cacheKey.update(column);<br>          cacheKey.update(value);<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createRowKeyForMappedProperties</span><span class="hljs-params">(ResultMap resultMap, ResultSetWrapper rsw, CacheKey cacheKey, List&lt;ResultMapping&gt; resultMappings, String columnPrefix)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">for</span> (ResultMapping resultMapping : resultMappings) &#123;<br>      <span class="hljs-keyword">if</span> (resultMapping.getNestedResultMapId() != <span class="hljs-literal">null</span> &amp;&amp; resultMapping.getResultSet() == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// Issue #392</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ResultMap</span> <span class="hljs-variable">nestedResultMap</span> <span class="hljs-operator">=</span> configuration.getResultMap(resultMapping.getNestedResultMapId());<br>        createRowKeyForMappedProperties(nestedResultMap, rsw, cacheKey, nestedResultMap.getConstructorResultMappings(),<br>            prependPrefix(resultMapping.getColumnPrefix(), columnPrefix));<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (resultMapping.getNestedQueryId() == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">column</span> <span class="hljs-operator">=</span> prependPrefix(resultMapping.getColumn(), columnPrefix);<br>        <span class="hljs-keyword">final</span> TypeHandler&lt;?&gt; th = resultMapping.getTypeHandler();<br>        List&lt;String&gt; mappedColumnNames = rsw.getMappedColumnNames(resultMap, columnPrefix);<br>        <span class="hljs-comment">// Issue #114</span><br>        <span class="hljs-keyword">if</span> (column != <span class="hljs-literal">null</span> &amp;&amp; mappedColumnNames.contains(column.toUpperCase(Locale.ENGLISH))) &#123;<br>          <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> th.getResult(rsw.getResultSet(), column);<br>          <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>) &#123;<br>            cacheKey.update(column);<br>            cacheKey.update(value);<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;  <br><br>  <span class="hljs-comment">//</span><br>  <span class="hljs-comment">// GET VALUE FROM ROW FOR NESTED RESULT MAP</span><br>  <span class="hljs-comment">//</span><br>  <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">getRowValue</span><span class="hljs-params">(ResultSetWrapper rsw, ResultMap resultMap, CacheKey combinedKey, CacheKey absoluteKey, String columnPrefix, Object partialObject)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">resultMapId</span> <span class="hljs-operator">=</span> resultMap.getId();<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">resultObject</span> <span class="hljs-operator">=</span> partialObject;<br>    <span class="hljs-keyword">if</span> (resultObject != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaObject</span> <span class="hljs-operator">=</span> configuration.newMetaObject(resultObject);<br>      putAncestor(absoluteKey, resultObject, resultMapId, columnPrefix);<br>      applyNestedResultMappings(rsw, resultMap, metaObject, columnPrefix, combinedKey, <span class="hljs-literal">false</span>);<br>      ancestorObjects.remove(absoluteKey);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">ResultLoaderMap</span> <span class="hljs-variable">lazyLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultLoaderMap</span>();<br>      resultObject = createResultObject(rsw, resultMap, lazyLoader, columnPrefix);<br>      <span class="hljs-keyword">if</span> (resultObject != <span class="hljs-literal">null</span> &amp;&amp; !typeHandlerRegistry.hasTypeHandler(resultMap.getType())) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaObject</span> <span class="hljs-operator">=</span> configuration.newMetaObject(resultObject);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">foundValues</span> <span class="hljs-operator">=</span> !resultMap.getConstructorResultMappings().isEmpty();<br>        <span class="hljs-keyword">if</span> (shouldApplyAutomaticMappings(resultMap, <span class="hljs-literal">true</span>)) &#123;<br>          foundValues = applyAutomaticMappings(rsw, resultMap, metaObject, columnPrefix) || foundValues;<br>        &#125;        <br>        foundValues = applyPropertyMappings(rsw, resultMap, metaObject, lazyLoader, columnPrefix) || foundValues;<br>        putAncestor(absoluteKey, resultObject, resultMapId, columnPrefix);<br>        foundValues = applyNestedResultMappings(rsw, resultMap, metaObject, columnPrefix, combinedKey, <span class="hljs-literal">true</span>) || foundValues;<br>        ancestorObjects.remove(absoluteKey);<br>        foundValues = lazyLoader.size() &gt; <span class="hljs-number">0</span> || foundValues;<br>        resultObject = foundValues ? resultObject : <span class="hljs-literal">null</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (combinedKey != CacheKey.NULL_CACHE_KEY) &#123;<br>        nestedResultObjects.put(combinedKey, resultObject);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> resultObject;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putAncestor</span><span class="hljs-params">(CacheKey rowKey, Object resultObject, String resultMapId, String columnPrefix)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!ancestorColumnPrefix.containsKey(resultMapId)) &#123;<br>      ancestorColumnPrefix.put(resultMapId, columnPrefix);<br>    &#125;<br>    ancestorObjects.put(rowKey, resultObject);<br>  &#125; <br><br>  <span class="hljs-comment">//</span><br>  <span class="hljs-comment">// NESTED RESULT MAP (JOIN MAPPING)</span><br>  <span class="hljs-comment">//</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">applyNestedResultMappings</span><span class="hljs-params">(ResultSetWrapper rsw, ResultMap resultMap, MetaObject metaObject, String parentPrefix, CacheKey parentRowKey, <span class="hljs-type">boolean</span> newObject)</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">foundValues</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> (ResultMapping resultMapping : resultMap.getPropertyResultMappings()) &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">nestedResultMapId</span> <span class="hljs-operator">=</span> resultMapping.getNestedResultMapId();<br>      <span class="hljs-keyword">if</span> (nestedResultMapId != <span class="hljs-literal">null</span> &amp;&amp; resultMapping.getResultSet() == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">columnPrefix</span> <span class="hljs-operator">=</span> getColumnPrefix(parentPrefix, resultMapping);<br>          <span class="hljs-keyword">final</span> <span class="hljs-type">ResultMap</span> <span class="hljs-variable">nestedResultMap</span> <span class="hljs-operator">=</span> getNestedResultMap(rsw.getResultSet(), nestedResultMapId, columnPrefix);<br>          <span class="hljs-type">CacheKey</span> <span class="hljs-variable">rowKey</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>          <span class="hljs-type">Object</span> <span class="hljs-variable">ancestorObject</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>          <span class="hljs-keyword">if</span> (ancestorColumnPrefix.containsKey(nestedResultMapId)) &#123;<br>            rowKey = createRowKey(nestedResultMap, rsw, ancestorColumnPrefix.get(nestedResultMapId));<br>            ancestorObject = ancestorObjects.get(rowKey);<br>          &#125;<br>          <span class="hljs-keyword">if</span> (ancestorObject != <span class="hljs-literal">null</span>) &#123; <br>            <span class="hljs-keyword">if</span> (newObject) &#123;<br>              metaObject.setValue(resultMapping.getProperty(), ancestorObject);<br>            &#125;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            rowKey = createRowKey(nestedResultMap, rsw, columnPrefix);<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">CacheKey</span> <span class="hljs-variable">combinedKey</span> <span class="hljs-operator">=</span> combineKeys(rowKey, parentRowKey);            <br>            <span class="hljs-type">Object</span> <span class="hljs-variable">rowValue</span> <span class="hljs-operator">=</span> nestedResultObjects.get(combinedKey);<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">knownValue</span> <span class="hljs-operator">=</span> (rowValue != <span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">collectionProperty</span> <span class="hljs-operator">=</span> instantiateCollectionPropertyIfAppropriate(resultMapping, metaObject);            <br>            <span class="hljs-keyword">if</span> (anyNotNullColumnHasValue(resultMapping, columnPrefix, rsw.getResultSet())) &#123;<br>              rowValue = getRowValue(rsw, nestedResultMap, combinedKey, rowKey, columnPrefix, rowValue);<br>              <span class="hljs-keyword">if</span> (rowValue != <span class="hljs-literal">null</span> &amp;&amp; !knownValue) &#123;<br>                <span class="hljs-keyword">if</span> (collectionProperty != <span class="hljs-literal">null</span>) &#123;<br>                  <span class="hljs-keyword">final</span> <span class="hljs-type">MetaObject</span> <span class="hljs-variable">targetMetaObject</span> <span class="hljs-operator">=</span> configuration.newMetaObject(collectionProperty);<br>                  targetMetaObject.add(rowValue);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                  metaObject.setValue(resultMapping.getProperty(), rowValue);<br>                &#125;<br>                foundValues = <span class="hljs-literal">true</span>;<br>              &#125;<br>            &#125;<br>          &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Error getting nested result map values for &#x27;&quot;</span> + resultMapping.getProperty() + <span class="hljs-string">&quot;&#x27;.  Cause: &quot;</span> + e, e);<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> foundValues;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getColumnPrefix</span><span class="hljs-params">(String parentPrefix, ResultMapping resultMapping)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">columnPrefixBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-keyword">if</span> (parentPrefix != <span class="hljs-literal">null</span>) &#123;<br>      columnPrefixBuilder.append(parentPrefix);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (resultMapping.getColumnPrefix() != <span class="hljs-literal">null</span>) &#123;<br>      columnPrefixBuilder.append(resultMapping.getColumnPrefix());<br>    &#125;<br>    <span class="hljs-keyword">return</span> columnPrefixBuilder.length() == <span class="hljs-number">0</span> ? <span class="hljs-literal">null</span> : columnPrefixBuilder.toString().toUpperCase(Locale.ENGLISH);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> ResultMap <span class="hljs-title function_">getNestedResultMap</span><span class="hljs-params">(ResultSet rs, String nestedResultMapId, String columnPrefix)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">ResultMap</span> <span class="hljs-variable">nestedResultMap</span> <span class="hljs-operator">=</span> configuration.getResultMap(nestedResultMapId);<br>    <span class="hljs-keyword">return</span> resolveDiscriminatedResultMap(rs, nestedResultMap, columnPrefix);<br>  &#125;  <br><br>  <span class="hljs-keyword">private</span> CacheKey <span class="hljs-title function_">combineKeys</span><span class="hljs-params">(CacheKey rowKey, CacheKey parentRowKey)</span> &#123;<br>    <span class="hljs-keyword">if</span> (rowKey.getUpdateCount() &gt; <span class="hljs-number">1</span> &amp;&amp; parentRowKey.getUpdateCount() &gt; <span class="hljs-number">1</span>) &#123;<br>      CacheKey combinedKey;<br>      <span class="hljs-keyword">try</span> &#123;<br>        combinedKey = rowKey.clone();<br>      &#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Error cloning cache key.  Cause: &quot;</span> + e, e);<br>      &#125;<br>      combinedKey.update(parentRowKey);<br>      <span class="hljs-keyword">return</span> combinedKey;<br>    &#125;<br>    <span class="hljs-keyword">return</span> CacheKey.NULL_CACHE_KEY;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">anyNotNullColumnHasValue</span><span class="hljs-params">(ResultMapping resultMapping, String columnPrefix, ResultSet rs)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    Set&lt;String&gt; notNullColumns = resultMapping.getNotNullColumns();<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">anyNotNullColumnHasValue</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (notNullColumns != <span class="hljs-literal">null</span> &amp;&amp; !notNullColumns.isEmpty()) &#123;<br>      anyNotNullColumnHasValue = <span class="hljs-literal">false</span>;<br>      <span class="hljs-keyword">for</span> (String column: notNullColumns) &#123;<br>        rs.getObject(prependPrefix(column, columnPrefix));<br>        <span class="hljs-keyword">if</span> (!rs.wasNull()) &#123;<br>          anyNotNullColumnHasValue = <span class="hljs-literal">true</span>;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> anyNotNullColumnHasValue;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">closeResultSet</span><span class="hljs-params">(ResultSet rs)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">if</span> (rs != <span class="hljs-literal">null</span>) &#123;<br>        rs.close();<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>      <span class="hljs-comment">// ignore</span><br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">//</span><br>  <span class="hljs-comment">// HANDLE RESULT SETS</span><br>  <span class="hljs-comment">//</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">handleResultSets</span><span class="hljs-params">(Statement stmt)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    ErrorContext.instance().activity(<span class="hljs-string">&quot;handling results&quot;</span>).object(mappedStatement.getId());<br><br>    <span class="hljs-keyword">final</span> List&lt;Object&gt; multipleResults = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;();<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">resultSetCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">ResultSetWrapper</span> <span class="hljs-variable">rsw</span> <span class="hljs-operator">=</span> getFirstResultSet(stmt);<br><br>    List&lt;ResultMap&gt; resultMaps = mappedStatement.getResultMaps();<br>    <span class="hljs-comment">// 一般resultMaps里只有一个元素</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">resultMapCount</span> <span class="hljs-operator">=</span> resultMaps.size();<br>    validateResultMapsCount(rsw, resultMapCount);<br>    <span class="hljs-keyword">while</span> (rsw != <span class="hljs-literal">null</span> &amp;&amp; resultMapCount &gt; resultSetCount) &#123;<br>      <span class="hljs-type">ResultMap</span> <span class="hljs-variable">resultMap</span> <span class="hljs-operator">=</span> resultMaps.get(resultSetCount);<br>      handleResultSet(rsw, resultMap, multipleResults, <span class="hljs-literal">null</span>);<br>      rsw = getNextResultSet(stmt);<br>      cleanUpAfterHandlingResultSet();<br>      resultSetCount++;<br>    &#125;<br><br>    String[] resultSets = mappedStatement.getResulSets();<br>    <span class="hljs-keyword">if</span> (resultSets != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">while</span> (rsw != <span class="hljs-literal">null</span> &amp;&amp; resultSetCount &lt; resultSets.length) &#123;<br>        <span class="hljs-type">ResultMapping</span> <span class="hljs-variable">parentMapping</span> <span class="hljs-operator">=</span> nextResultMaps.get(resultSets[resultSetCount]);<br>        <span class="hljs-keyword">if</span> (parentMapping != <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-type">String</span> <span class="hljs-variable">nestedResultMapId</span> <span class="hljs-operator">=</span> parentMapping.getNestedResultMapId();<br>          <span class="hljs-type">ResultMap</span> <span class="hljs-variable">resultMap</span> <span class="hljs-operator">=</span> configuration.getResultMap(nestedResultMapId);<br>          handleResultSet(rsw, resultMap, <span class="hljs-literal">null</span>, parentMapping);<br>        &#125;<br>        rsw = getNextResultSet(stmt);<br>        cleanUpAfterHandlingResultSet();<br>        resultSetCount++;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> collapseSingleResultList(multipleResults);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> ResultSetWrapper <span class="hljs-title function_">getFirstResultSet</span><span class="hljs-params">(Statement stmt)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> stmt.getResultSet();<br>    <span class="hljs-comment">// HSQLDB2.1特殊情况处理</span><br>    <span class="hljs-keyword">while</span> (rs == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// move forward to get the first resultset in case the driver</span><br>      <span class="hljs-comment">// doesn&#x27;t return the resultset as the first result (HSQLDB 2.1)</span><br>      <span class="hljs-keyword">if</span> (stmt.getMoreResults()) &#123;<br>        rs = stmt.getResultSet();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (stmt.getUpdateCount() == -<span class="hljs-number">1</span>) &#123;<br>          <span class="hljs-comment">// no more results. Must be no resultset</span><br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> rs != <span class="hljs-literal">null</span> ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultSetWrapper</span>(rs, configuration) : <span class="hljs-literal">null</span>;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">validateResultMapsCount</span><span class="hljs-params">(ResultSetWrapper rsw, <span class="hljs-type">int</span> resultMapCount)</span> &#123;<br>    <span class="hljs-keyword">if</span> (rsw != <span class="hljs-literal">null</span> &amp;&amp; resultMapCount &lt; <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;A query was run and no Result Maps were found for the Mapped Statement &#x27;&quot;</span> + mappedStatement.getId()<br>          + <span class="hljs-string">&quot;&#x27;.  It&#x27;s likely that neither a Result Type nor a Result Map was specified.&quot;</span>);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> ResultSetWrapper <span class="hljs-title function_">getNextResultSet</span><span class="hljs-params">(Statement stmt)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">// Making this method tolerant of bad JDBC drivers</span><br>    <span class="hljs-comment">// 使得该方法能够容忍不良的JDBC驱动程序</span><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">if</span> (stmt.getConnection().getMetaData().supportsMultipleResultSets()) &#123;<br>        <span class="hljs-comment">// Crazy Standard JDBC way of determining if there are more results</span><br>        <span class="hljs-keyword">if</span> (!((!stmt.getMoreResults()) &amp;&amp; (stmt.getUpdateCount() == -<span class="hljs-number">1</span>))) &#123;<br>          <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> stmt.getResultSet();<br>          <span class="hljs-keyword">return</span> rs != <span class="hljs-literal">null</span> ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultSetWrapper</span>(rs, configuration) : <span class="hljs-literal">null</span>;<br>        &#125;<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-comment">// Intentionally ignored.</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanUpAfterHandlingResultSet</span><span class="hljs-params">()</span> &#123;<br>    nestedResultObjects.clear();<br>    ancestorColumnPrefix.clear();<br>  &#125; <br><br>  <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>  <span class="hljs-keyword">private</span> List&lt;Object&gt; <span class="hljs-title function_">collapseSingleResultList</span><span class="hljs-params">(List&lt;Object&gt; multipleResults)</span> &#123;<br>    <span class="hljs-keyword">return</span> multipleResults.size() == <span class="hljs-number">1</span> ? (List&lt;Object&gt;) multipleResults.get(<span class="hljs-number">0</span>) : multipleResults;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="StatementHandler"><a href="#StatementHandler" class="headerlink" title="StatementHandler"></a>StatementHandler</h4><p>    语句处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StatementHandler</span> &#123;<br><br>  <span class="hljs-comment">// 准备语句</span><br>  Statement <span class="hljs-title function_">prepare</span><span class="hljs-params">(Connection connection)</span><br>      <span class="hljs-keyword">throws</span> SQLException;<br><br>  <span class="hljs-comment">// 参数化</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">parameterize</span><span class="hljs-params">(Statement statement)</span><br>      <span class="hljs-keyword">throws</span> SQLException;<br><br>  <span class="hljs-comment">// 批处理</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">batch</span><span class="hljs-params">(Statement statement)</span><br>      <span class="hljs-keyword">throws</span> SQLException;<br><br>  <span class="hljs-comment">// update</span><br>  <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Statement statement)</span><br>      <span class="hljs-keyword">throws</span> SQLException;<br><br>  <span class="hljs-comment">// select--&gt;结果给ResultHandler</span><br>  &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">query</span><span class="hljs-params">(Statement statement, ResultHandler resultHandler)</span><br>      <span class="hljs-keyword">throws</span> SQLException;<br><br>  <span class="hljs-comment">// 得到绑定sql</span><br>  BoundSql <span class="hljs-title function_">getBoundSql</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">// 得到参数处理器</span><br>  ParameterHandler <span class="hljs-title function_">getParameterHandler</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BaseStatementHandler"><a href="#BaseStatementHandler" class="headerlink" title="BaseStatementHandler"></a>BaseStatementHandler</h4><p>      语句处理器的基类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseStatementHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StatementHandler</span> &#123;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Configuration configuration;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> ObjectFactory objectFactory;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> TypeHandlerRegistry typeHandlerRegistry;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> ResultSetHandler resultSetHandler;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> ParameterHandler parameterHandler;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Executor executor;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> MappedStatement mappedStatement;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> RowBounds rowBounds;<br><br>  <span class="hljs-keyword">protected</span> BoundSql boundSql;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-title function_">BaseStatementHandler</span><span class="hljs-params">(Executor executor, MappedStatement mappedStatement, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> &#123;<br>    <span class="hljs-built_in">this</span>.configuration = mappedStatement.getConfiguration();<br>    <span class="hljs-built_in">this</span>.executor = executor;<br>    <span class="hljs-built_in">this</span>.mappedStatement = mappedStatement;<br>    <span class="hljs-built_in">this</span>.rowBounds = rowBounds;<br><br>    <span class="hljs-built_in">this</span>.typeHandlerRegistry = configuration.getTypeHandlerRegistry();<br>    <span class="hljs-built_in">this</span>.objectFactory = configuration.getObjectFactory();<br><br>    <span class="hljs-keyword">if</span> (boundSql == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// issue #435, get the key before calculating the statement</span><br>      generateKeys(parameterObject);<br>      boundSql = mappedStatement.getBoundSql(parameterObject);<br>    &#125;<br><br>    <span class="hljs-built_in">this</span>.boundSql = boundSql;<br><br>    <span class="hljs-comment">// 生成parameterHandler</span><br>    <span class="hljs-built_in">this</span>.parameterHandler = configuration.newParameterHandler(mappedStatement, parameterObject, boundSql);<br>    <span class="hljs-comment">// 生成resultSetHandler</span><br>    <span class="hljs-built_in">this</span>.resultSetHandler = configuration.newResultSetHandler(executor, mappedStatement, rowBounds, parameterHandler, resultHandler, boundSql);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> BoundSql <span class="hljs-title function_">getBoundSql</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> boundSql;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> ParameterHandler <span class="hljs-title function_">getParameterHandler</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> parameterHandler;<br>  &#125;<br><br>  <span class="hljs-comment">// 准备语句</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Statement <span class="hljs-title function_">prepare</span><span class="hljs-params">(Connection connection)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    ErrorContext.instance().sql(boundSql.getSql());<br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 实例化Statement</span><br>      statement = instantiateStatement(connection);<br>      <span class="hljs-comment">// 设置超时</span><br>      setStatementTimeout(statement);<br>      <span class="hljs-comment">// 设置读取条数</span><br>      setFetchSize(statement);<br>      <span class="hljs-keyword">return</span> statement;<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>      closeStatement(statement);<br>      <span class="hljs-keyword">throw</span> e;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      closeStatement(statement);<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Error preparing statement.  Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 如何实例化Statement，交给子类做</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> Statement <span class="hljs-title function_">instantiateStatement</span><span class="hljs-params">(Connection connection)</span> <span class="hljs-keyword">throws</span> SQLException;<br><br>  <span class="hljs-comment">// 设置超时,其实就是调用Statement.setQueryTimeout</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStatementTimeout</span><span class="hljs-params">(Statement stmt)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">timeout</span> <span class="hljs-operator">=</span> mappedStatement.getTimeout();<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">defaultTimeout</span> <span class="hljs-operator">=</span> configuration.getDefaultStatementTimeout();<br>    <span class="hljs-keyword">if</span> (timeout != <span class="hljs-literal">null</span>) &#123;<br>      stmt.setQueryTimeout(timeout);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (defaultTimeout != <span class="hljs-literal">null</span>) &#123;<br>      stmt.setQueryTimeout(defaultTimeout);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 设置读取条数,其实就是调用Statement.setFetchSize</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFetchSize</span><span class="hljs-params">(Statement stmt)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">fetchSize</span> <span class="hljs-operator">=</span> mappedStatement.getFetchSize();<br>    <span class="hljs-keyword">if</span> (fetchSize != <span class="hljs-literal">null</span>) &#123;<br>      stmt.setFetchSize(fetchSize);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 关闭语句</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">closeStatement</span><span class="hljs-params">(Statement statement)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">if</span> (statement != <span class="hljs-literal">null</span>) &#123;<br>        statement.close();<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>      <span class="hljs-comment">// ignore</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 生成key</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">generateKeys</span><span class="hljs-params">(Object parameter)</span> &#123;<br>    <span class="hljs-type">KeyGenerator</span> <span class="hljs-variable">keyGenerator</span> <span class="hljs-operator">=</span> mappedStatement.getKeyGenerator();<br>    ErrorContext.instance().store();<br>    keyGenerator.processBefore(executor, mappedStatement, <span class="hljs-literal">null</span>, parameter);<br>    ErrorContext.instance().recall();<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SimpleStatementHandler"><a href="#SimpleStatementHandler" class="headerlink" title="SimpleStatementHandler"></a>SimpleStatementHandler</h4><p>    简单语句处理器(STATEMENT)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleStatementHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseStatementHandler</span> &#123; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">SimpleStatementHandler</span><span class="hljs-params">(Executor executor, MappedStatement mappedStatement, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> &#123;<br>    <span class="hljs-built_in">super</span>(executor, mappedStatement, parameter, rowBounds, resultHandler, boundSql);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Statement statement)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> boundSql.getSql();<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">parameterObject</span> <span class="hljs-operator">=</span> boundSql.getParameterObject();<br>    <span class="hljs-type">KeyGenerator</span> <span class="hljs-variable">keyGenerator</span> <span class="hljs-operator">=</span> mappedStatement.getKeyGenerator();<br>    <span class="hljs-type">int</span> rows;<br>    <span class="hljs-keyword">if</span> (keyGenerator <span class="hljs-keyword">instanceof</span> Jdbc3KeyGenerator) &#123;<br>      statement.execute(sql, Statement.RETURN_GENERATED_KEYS);<br>      rows = statement.getUpdateCount();<br>      keyGenerator.processAfter(executor, mappedStatement, statement, parameterObject);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (keyGenerator <span class="hljs-keyword">instanceof</span> SelectKeyGenerator) &#123;<br>      statement.execute(sql);<br>      rows = statement.getUpdateCount();<br>      keyGenerator.processAfter(executor, mappedStatement, statement, parameterObject);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 如果没有keyGenerator,直接调用Statement.execute和Statement.getUpdateCount</span><br>      statement.execute(sql);<br>      rows = statement.getUpdateCount();<br>    &#125;<br>    <span class="hljs-keyword">return</span> rows;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">batch</span><span class="hljs-params">(Statement statement)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> boundSql.getSql();<br>    <span class="hljs-comment">// 调用Statement.addBatch</span><br>    statement.addBatch(sql);<br>  &#125;<br><br>  <span class="hljs-comment">// select--&gt;结果给ResultHandler</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">query</span><span class="hljs-params">(Statement statement, ResultHandler resultHandler)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> boundSql.getSql();<br>    statement.execute(sql);<br>    <span class="hljs-comment">// 先执行Statement.execute，然后交给ResultSetHandler.handleResultSets</span><br>    <span class="hljs-keyword">return</span> resultSetHandler.&lt;E&gt;handleResultSets(statement);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> Statement <span class="hljs-title function_">instantiateStatement</span><span class="hljs-params">(Connection connection)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">// 调用Connection.createStatement</span><br>    <span class="hljs-keyword">if</span> (mappedStatement.getResultSetType() != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> connection.createStatement(mappedStatement.getResultSetType().getValue(), ResultSet.CONCUR_READ_ONLY);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> connection.createStatement();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parameterize</span><span class="hljs-params">(Statement statement)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">// N/A</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="PreparedStatementHandler"><a href="#PreparedStatementHandler" class="headerlink" title="PreparedStatementHandler"></a>PreparedStatementHandler</h4><p>    预处理语句处理器(PREPARED)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PreparedStatementHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseStatementHandler</span> &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">PreparedStatementHandler</span><span class="hljs-params">(Executor executor, MappedStatement mappedStatement, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> &#123;<br>    <span class="hljs-built_in">super</span>(executor, mappedStatement, parameter, rowBounds, resultHandler, boundSql);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Statement statement)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">// 调用PreparedStatement.execute和PreparedStatement.getUpdateCount</span><br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> (PreparedStatement) statement;<br>    ps.execute();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> ps.getUpdateCount();<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">parameterObject</span> <span class="hljs-operator">=</span> boundSql.getParameterObject();<br>    <span class="hljs-type">KeyGenerator</span> <span class="hljs-variable">keyGenerator</span> <span class="hljs-operator">=</span> mappedStatement.getKeyGenerator();<br>    keyGenerator.processAfter(executor, mappedStatement, ps, parameterObject);<br>    <span class="hljs-keyword">return</span> rows;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">batch</span><span class="hljs-params">(Statement statement)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> (PreparedStatement) statement;<br>    ps.addBatch();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">query</span><span class="hljs-params">(Statement statement, ResultHandler resultHandler)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> (PreparedStatement) statement;<br>    ps.execute();<br>    <span class="hljs-keyword">return</span> resultSetHandler.&lt;E&gt; handleResultSets(ps);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> Statement <span class="hljs-title function_">instantiateStatement</span><span class="hljs-params">(Connection connection)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">// 调用Connection.prepareStatement</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> boundSql.getSql();<br>    <span class="hljs-keyword">if</span> (mappedStatement.getKeyGenerator() <span class="hljs-keyword">instanceof</span> Jdbc3KeyGenerator) &#123;<br>      String[] keyColumnNames = mappedStatement.getKeyColumns();<br>      <span class="hljs-keyword">if</span> (keyColumnNames == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> connection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> connection.prepareStatement(sql, keyColumnNames);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mappedStatement.getResultSetType() != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> connection.prepareStatement(sql, mappedStatement.getResultSetType().getValue(), ResultSet.CONCUR_READ_ONLY);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> connection.prepareStatement(sql);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parameterize</span><span class="hljs-params">(Statement statement)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">// 调用ParameterHandler.setParameters</span><br>    parameterHandler.setParameters((PreparedStatement) statement);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="CallableStatementHandler"><a href="#CallableStatementHandler" class="headerlink" title="CallableStatementHandler"></a>CallableStatementHandler</h4><p>      存储过程语句处理器(CALLABLE)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CallableStatementHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseStatementHandler</span> &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">CallableStatementHandler</span><span class="hljs-params">(Executor executor, MappedStatement mappedStatement, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> &#123;<br>    <span class="hljs-built_in">super</span>(executor, mappedStatement, parameter, rowBounds, resultHandler, boundSql);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Statement statement)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">// 这个方法和PreparedStatementHandler代码基本一样,就多了最后的handleOutputParameters</span><br>    <span class="hljs-comment">// 调用Statement.execute和Statement.getUpdateCount</span><br>    <span class="hljs-type">CallableStatement</span> <span class="hljs-variable">cs</span> <span class="hljs-operator">=</span> (CallableStatement) statement;<br>    cs.execute();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> cs.getUpdateCount();<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">parameterObject</span> <span class="hljs-operator">=</span> boundSql.getParameterObject();<br>    <span class="hljs-type">KeyGenerator</span> <span class="hljs-variable">keyGenerator</span> <span class="hljs-operator">=</span> mappedStatement.getKeyGenerator();<br>    keyGenerator.processAfter(executor, mappedStatement, cs, parameterObject);<br>    <span class="hljs-comment">// 然后交给ResultSetHandler.handleOutputParameters</span><br>    resultSetHandler.handleOutputParameters(cs);<br>    <span class="hljs-keyword">return</span> rows;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">batch</span><span class="hljs-params">(Statement statement)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">CallableStatement</span> <span class="hljs-variable">cs</span> <span class="hljs-operator">=</span> (CallableStatement) statement;<br>    cs.addBatch();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">query</span><span class="hljs-params">(Statement statement, ResultHandler resultHandler)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">CallableStatement</span> <span class="hljs-variable">cs</span> <span class="hljs-operator">=</span> (CallableStatement) statement;<br>    cs.execute();<br>    List&lt;E&gt; resultList = resultSetHandler.&lt;E&gt;handleResultSets(cs);<br>    resultSetHandler.handleOutputParameters(cs);<br>    <span class="hljs-keyword">return</span> resultList;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> Statement <span class="hljs-title function_">instantiateStatement</span><span class="hljs-params">(Connection connection)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">// 调用Connection.prepareCall</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> boundSql.getSql();<br>    <span class="hljs-keyword">if</span> (mappedStatement.getResultSetType() != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> connection.prepareCall(sql, mappedStatement.getResultSetType().getValue(), ResultSet.CONCUR_READ_ONLY);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> connection.prepareCall(sql);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parameterize</span><span class="hljs-params">(Statement statement)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">// 注册OUT参数</span><br>    registerOutputParameters((CallableStatement) statement);<br>    <span class="hljs-comment">// 调用ParameterHandler.setParameters</span><br>    parameterHandler.setParameters((CallableStatement) statement);<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerOutputParameters</span><span class="hljs-params">(CallableStatement cs)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, n = parameterMappings.size(); i &lt; n; i++) &#123;<br>      <span class="hljs-type">ParameterMapping</span> <span class="hljs-variable">parameterMapping</span> <span class="hljs-operator">=</span> parameterMappings.get(i);<br>      <span class="hljs-comment">//只处理OUT|INOUT</span><br>      <span class="hljs-keyword">if</span> (parameterMapping.getMode() == ParameterMode.OUT || parameterMapping.getMode() == ParameterMode.INOUT) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == parameterMapping.getJdbcType()) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;The JDBC Type must be specified for output parameter.  Parameter: &quot;</span> + parameterMapping.getProperty());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">if</span> (parameterMapping.getNumericScale() != <span class="hljs-literal">null</span> &amp;&amp; (parameterMapping.getJdbcType() == JdbcType.NUMERIC || parameterMapping.getJdbcType() == JdbcType.DECIMAL)) &#123;<br>            cs.registerOutParameter(i + <span class="hljs-number">1</span>, parameterMapping.getJdbcType().TYPE_CODE, parameterMapping.getNumericScale());<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//核心是调用CallableStatement.registerOutParameter</span><br>            <span class="hljs-keyword">if</span> (parameterMapping.getJdbcTypeName() == <span class="hljs-literal">null</span>) &#123;<br>              cs.registerOutParameter(i + <span class="hljs-number">1</span>, parameterMapping.getJdbcType().TYPE_CODE);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              cs.registerOutParameter(i + <span class="hljs-number">1</span>, parameterMapping.getJdbcType().TYPE_CODE, parameterMapping.getJdbcTypeName());<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="RoutingStatementHandler"><a href="#RoutingStatementHandler" class="headerlink" title="RoutingStatementHandler"></a>RoutingStatementHandler</h4><p>      路由选择语句处理器,有点像代理模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RoutingStatementHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">StatementHandler</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> StatementHandler delegate;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">RoutingStatementHandler</span><span class="hljs-params">(Executor executor, MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> &#123;<br><br>    <span class="hljs-comment">// 根据语句类型，委派到不同的语句处理器(STATEMENT|PREPARED|CALLABLE)</span><br>    <span class="hljs-keyword">switch</span> (ms.getStatementType()) &#123;<br>      <span class="hljs-keyword">case</span> STATEMENT:<br>        delegate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleStatementHandler</span>(executor, ms, parameter, rowBounds, resultHandler, boundSql);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> PREPARED:<br>        delegate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PreparedStatementHandler</span>(executor, ms, parameter, rowBounds, resultHandler, boundSql);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> CALLABLE:<br>        delegate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CallableStatementHandler</span>(executor, ms, parameter, rowBounds, resultHandler, boundSql);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Unknown statement type: &quot;</span> + ms.getStatementType());<br>    &#125;<br><br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Statement <span class="hljs-title function_">prepare</span><span class="hljs-params">(Connection connection)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">return</span> delegate.prepare(connection);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parameterize</span><span class="hljs-params">(Statement statement)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    delegate.parameterize(statement);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">batch</span><span class="hljs-params">(Statement statement)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    delegate.batch(statement);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Statement statement)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">return</span> delegate.update(statement);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">query</span><span class="hljs-params">(Statement statement, ResultHandler resultHandler)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">return</span> delegate.&lt;E&gt;query(statement, resultHandler);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> BoundSql <span class="hljs-title function_">getBoundSql</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> delegate.getBoundSql();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> ParameterHandler <span class="hljs-title function_">getParameterHandler</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> delegate.getParameterHandler();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h4><p>    执行器抽象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Executor</span> &#123;<br><br>  <span class="hljs-comment">// 不需要ResultHandler</span><br>  <span class="hljs-type">ResultHandler</span> <span class="hljs-variable">NO_RESULT_HANDLER</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-comment">// 更新</span><br>  <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(MappedStatement ms, Object parameter)</span> <span class="hljs-keyword">throws</span> SQLException;<br><br>  <span class="hljs-comment">// 查询，带分页，带缓存，BoundSql</span><br>  &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">query</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey cacheKey, BoundSql boundSql)</span> <span class="hljs-keyword">throws</span> SQLException;<br><br>  <span class="hljs-comment">// 查询，带分页</span><br>  &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">query</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler)</span> <span class="hljs-keyword">throws</span> SQLException;<br><br>  <span class="hljs-comment">// 刷新批处理语句</span><br>  List&lt;BatchResult&gt; <span class="hljs-title function_">flushStatements</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException;<br><br>  <span class="hljs-comment">// 提交和回滚，参数是是否要强制</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">(<span class="hljs-type">boolean</span> required)</span> <span class="hljs-keyword">throws</span> SQLException;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">(<span class="hljs-type">boolean</span> required)</span> <span class="hljs-keyword">throws</span> SQLException;<br><br>  <span class="hljs-comment">// 创建CacheKey</span><br>  CacheKey <span class="hljs-title function_">createCacheKey</span><span class="hljs-params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql)</span>;<br><br>  <span class="hljs-comment">// 判断是否缓存了</span><br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCached</span><span class="hljs-params">(MappedStatement ms, CacheKey key)</span>;<br><br>  <span class="hljs-comment">// 清理Session缓存</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearLocalCache</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">// 延迟加载</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">deferLoad</span><span class="hljs-params">(MappedStatement ms, MetaObject resultObject, String property, CacheKey key, Class&lt;?&gt; targetType)</span>;<br><br>  Transaction <span class="hljs-title function_">getTransaction</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(<span class="hljs-type">boolean</span> forceRollback)</span>;<br><br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">isClosed</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">setExecutorWrapper</span><span class="hljs-params">(Executor executor)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BaseExecutor"><a href="#BaseExecutor" class="headerlink" title="BaseExecutor"></a>BaseExecutor</h4><p>    执行器基类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseExecutor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Executor</span> &#123; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LogFactory.getLog(BaseExecutor.class);<br><br>  <span class="hljs-keyword">protected</span> Transaction transaction;<br>  <span class="hljs-keyword">protected</span> Executor wrapper;<br><br>  <span class="hljs-comment">// 延迟加载队列（线程安全）</span><br>  <span class="hljs-keyword">protected</span> ConcurrentLinkedQueue&lt;DeferredLoad&gt; deferredLoads;<br>  <span class="hljs-comment">// 本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询(一级缓存)</span><br>  <span class="hljs-comment">// 本地缓存</span><br>  <span class="hljs-keyword">protected</span> PerpetualCache localCache;<br>  <span class="hljs-comment">// 本地输出参数缓存</span><br>  <span class="hljs-keyword">protected</span> PerpetualCache localOutputParameterCache;<br>  <span class="hljs-keyword">protected</span> Configuration configuration;<br><br>  <span class="hljs-comment">// 查询堆栈</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-variable">queryStack</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> closed; <br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-title function_">BaseExecutor</span><span class="hljs-params">(Configuration configuration, Transaction transaction)</span> &#123;<br>    <span class="hljs-built_in">this</span>.transaction = transaction;<br>    <span class="hljs-built_in">this</span>.deferredLoads = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentLinkedQueue</span>&lt;DeferredLoad&gt;();<br>    <span class="hljs-built_in">this</span>.localCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PerpetualCache</span>(<span class="hljs-string">&quot;LocalCache&quot;</span>);<br>    <span class="hljs-built_in">this</span>.localOutputParameterCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PerpetualCache</span>(<span class="hljs-string">&quot;LocalOutputParameterCache&quot;</span>);<br>    <span class="hljs-built_in">this</span>.closed = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">this</span>.configuration = configuration;<br>    <span class="hljs-built_in">this</span>.wrapper = <span class="hljs-built_in">this</span>;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Transaction <span class="hljs-title function_">getTransaction</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (closed) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Executor was closed.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> transaction;<br>  &#125; <br><br>  <span class="hljs-comment">// 关闭执行器</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(<span class="hljs-type">boolean</span> forceRollback)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">try</span> &#123; <br>        <span class="hljs-comment">// 清除本地缓存，flush，回滚</span><br>        rollback(forceRollback);<br>      &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (transaction != <span class="hljs-literal">null</span>) &#123;<br>          transaction.close();<br>        &#125;<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>      <span class="hljs-comment">// Ignore.  There&#x27;s nothing that can be done at this point.</span><br>      log.warn(<span class="hljs-string">&quot;Unexpected exception on closing transaction.  Cause: &quot;</span> + e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      transaction = <span class="hljs-literal">null</span>;<br>      deferredLoads = <span class="hljs-literal">null</span>;<br>      localCache = <span class="hljs-literal">null</span>;<br>      localOutputParameterCache = <span class="hljs-literal">null</span>;<br>      closed = <span class="hljs-literal">true</span>;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">(<span class="hljs-type">boolean</span> required)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">if</span> (!closed) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        clearLocalCache();<br>        flushStatements(<span class="hljs-literal">true</span>);<br>      &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (required) &#123;<br>          transaction.rollback();<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearLocalCache</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (!closed) &#123;<br>      localCache.clear();<br>      localOutputParameterCache.clear();<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> List&lt;BatchResult&gt; <span class="hljs-title function_">flushStatements</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">return</span> flushStatements(<span class="hljs-literal">false</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// 刷新语句，Batch用</span><br>  <span class="hljs-keyword">public</span> List&lt;BatchResult&gt; <span class="hljs-title function_">flushStatements</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isRollBack)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">if</span> (closed) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Executor was closed.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> doFlushStatements(isRollBack);<br>  &#125; <br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> List&lt;BatchResult&gt; <span class="hljs-title function_">doFlushStatements</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isRollback)</span><br>      <span class="hljs-keyword">throws</span> SQLException; <br><br>  <span class="hljs-comment">// SqlSession.update/insert/delete会调用此方法</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(MappedStatement ms, Object parameter)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    ErrorContext.instance().resource(ms.getResource()).activity(<span class="hljs-string">&quot;executing an update&quot;</span>).object(ms.getId());<br>    <span class="hljs-keyword">if</span> (closed) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Executor was closed.&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 先清局部缓存，再更新，如何更新交由子类，模板方法模式</span><br>    clearLocalCache();<br>    <span class="hljs-keyword">return</span> doUpdate(ms, parameter);<br>  &#125; <br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">int</span> <span class="hljs-title function_">doUpdate</span><span class="hljs-params">(MappedStatement ms, Object parameter)</span><br>      <span class="hljs-keyword">throws</span> SQLException;  <br><br>  <span class="hljs-comment">// SqlSession.selectList会调用此方法</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">query</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">// 得到绑定sql</span><br>    <span class="hljs-type">BoundSql</span> <span class="hljs-variable">boundSql</span> <span class="hljs-operator">=</span> ms.getBoundSql(parameter);<br>    <span class="hljs-comment">// 创建缓存Key</span><br>    <span class="hljs-type">CacheKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> createCacheKey(ms, parameter, rowBounds, boundSql);<br>    <span class="hljs-comment">// 查询</span><br>    <span class="hljs-keyword">return</span> query(ms, parameter, rowBounds, resultHandler, key, boundSql);<br>  &#125; <br><br>  <span class="hljs-comment">// 创建缓存Key</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> CacheKey <span class="hljs-title function_">createCacheKey</span><span class="hljs-params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql)</span> &#123;<br>    <span class="hljs-keyword">if</span> (closed) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Executor was closed.&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">CacheKey</span> <span class="hljs-variable">cacheKey</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheKey</span>();<br>    <span class="hljs-comment">// MyBatis 对于其 Key 的生成采取规则为：[mappedStementId + offset + limit + SQL + queryParams + environment]生成一个哈希码</span><br>    cacheKey.update(ms.getId());<br>    cacheKey.update(Integer.valueOf(rowBounds.getOffset()));<br>    cacheKey.update(Integer.valueOf(rowBounds.getLimit()));<br>    cacheKey.update(boundSql.getSql());<br>    List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();<br>    <span class="hljs-type">TypeHandlerRegistry</span> <span class="hljs-variable">typeHandlerRegistry</span> <span class="hljs-operator">=</span> ms.getConfiguration().getTypeHandlerRegistry();<br>    <span class="hljs-comment">// mimic DefaultParameterHandler logic</span><br>    <span class="hljs-comment">// 模仿DefaultParameterHandler的逻辑,不再重复，请参考DefaultParameterHandler</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; parameterMappings.size(); i++) &#123;<br>      <span class="hljs-type">ParameterMapping</span> <span class="hljs-variable">parameterMapping</span> <span class="hljs-operator">=</span> parameterMappings.get(i);<br>      <span class="hljs-comment">// 输入型参数</span><br>      <span class="hljs-keyword">if</span> (parameterMapping.getMode() != ParameterMode.OUT) &#123;<br>        Object value;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">propertyName</span> <span class="hljs-operator">=</span> parameterMapping.getProperty();<br>        <span class="hljs-keyword">if</span> (boundSql.hasAdditionalParameter(propertyName)) &#123;<br>          value = boundSql.getAdditionalParameter(propertyName);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (parameterObject == <span class="hljs-literal">null</span>) &#123;<br>          value = <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) &#123;<br>          value = parameterObject;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaObject</span> <span class="hljs-operator">=</span> configuration.newMetaObject(parameterObject);<br>          value = metaObject.getValue(propertyName);<br>        &#125;<br>        cacheKey.update(value);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (configuration.getEnvironment() != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// issue #176</span><br>      cacheKey.update(configuration.getEnvironment().getId());<br>    &#125;<br>    <span class="hljs-keyword">return</span> cacheKey;<br>  &#125; <br><br>  <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">query</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    ErrorContext.instance().resource(ms.getResource()).activity(<span class="hljs-string">&quot;executing a query&quot;</span>).object(ms.getId());<br>    <span class="hljs-comment">// 如果已经关闭，报错</span><br>    <span class="hljs-keyword">if</span> (closed) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Executor was closed.&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 先清局部缓存，再查询.但仅查询堆栈为0，才清。为了处理递归调用</span><br>    <span class="hljs-keyword">if</span> (queryStack == <span class="hljs-number">0</span> &amp;&amp; ms.isFlushCacheRequired()) &#123;<br>      clearLocalCache();<br>    &#125;<br>    List&lt;E&gt; list;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 加一,这样递归调用到上面的时候就不会再清局部缓存了</span><br>      queryStack++;<br>      <span class="hljs-comment">// 先根据cachekey从localCache去查</span><br>      list = resultHandler == <span class="hljs-literal">null</span> ? (List&lt;E&gt;) localCache.getObject(key) : <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">if</span> (list != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 若查到localCache缓存，处理localOutputParameterCache</span><br>        handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 从数据库查</span><br>        list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);<br>      &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-comment">// 清空堆栈</span><br>      queryStack--;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (queryStack == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">// 加载延迟加载队列</span><br>      <span class="hljs-keyword">for</span> (DeferredLoad deferredLoad : deferredLoads) &#123;<br>        deferredLoad.load();<br>      &#125;<br>      <span class="hljs-comment">// issue #601</span><br>      <span class="hljs-comment">// 清空延迟加载队列</span><br>      deferredLoads.clear();<br>      <span class="hljs-keyword">if</span> (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) &#123;<br>        <span class="hljs-comment">// issue #482</span><br>    <span class="hljs-comment">// 如果LocalCacheScope是STATEMENT，清本地缓存</span><br>        clearLocalCache();<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleLocallyCachedOutputParameters</span><span class="hljs-params">(MappedStatement ms, CacheKey key, Object parameter, BoundSql boundSql)</span> &#123;<br>    <span class="hljs-comment">// 处理存储过程的OUT参数</span><br>    <span class="hljs-keyword">if</span> (ms.getStatementType() == StatementType.CALLABLE) &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">cachedParameter</span> <span class="hljs-operator">=</span> localOutputParameterCache.getObject(key);<br>      <span class="hljs-keyword">if</span> (cachedParameter != <span class="hljs-literal">null</span> &amp;&amp; parameter != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 将cachedParameter中属性赋值给parameter中对应的属性</span><br>        <span class="hljs-comment">// 属性由 ParameterMapping 指定</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaCachedParameter</span> <span class="hljs-operator">=</span> configuration.newMetaObject(cachedParameter);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaParameter</span> <span class="hljs-operator">=</span> configuration.newMetaObject(parameter);<br>        <span class="hljs-keyword">for</span> (ParameterMapping parameterMapping : boundSql.getParameterMappings()) &#123;<br>          <span class="hljs-keyword">if</span> (parameterMapping.getMode() != ParameterMode.IN) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">parameterName</span> <span class="hljs-operator">=</span> parameterMapping.getProperty();<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">cachedValue</span> <span class="hljs-operator">=</span> metaCachedParameter.getValue(parameterName);<br>            metaParameter.setValue(parameterName, cachedValue);<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 从数据库查</span><br>  <span class="hljs-keyword">private</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">queryFromDatabase</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    List&lt;E&gt; list;<br>    <span class="hljs-comment">// 先向缓存中放入占位符？？？</span><br>    localCache.putObject(key, EXECUTION_PLACEHOLDER);<br>    <span class="hljs-keyword">try</span> &#123;<br>      list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-comment">// 最后删除占位符</span><br>      localCache.removeObject(key);<br>    &#125;<br>    <span class="hljs-comment">// 加入缓存</span><br>    localCache.putObject(key, list);<br>    <span class="hljs-comment">// 如果是存储过程，OUT参数也加入缓存</span><br>    <span class="hljs-keyword">if</span> (ms.getStatementType() == StatementType.CALLABLE) &#123;<br>      localOutputParameterCache.putObject(key, parameter);<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>  &#125; <br><br>  <span class="hljs-comment">//query--&gt;queryFromDatabase--&gt;doQuery</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">doQuery</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span><br>      <span class="hljs-keyword">throws</span> SQLException; <br><br>  <span class="hljs-comment">// 延迟加载，DefaultResultSetHandler.getNestedQueryMappingValue调用.属于嵌套查询，比较高级.</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deferLoad</span><span class="hljs-params">(MappedStatement ms, MetaObject resultObject, String property, CacheKey key, Class&lt;?&gt; targetType)</span> &#123;<br>    <span class="hljs-keyword">if</span> (closed) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Executor was closed.&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">DeferredLoad</span> <span class="hljs-variable">deferredLoad</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeferredLoad</span>(resultObject, property, key, localCache, configuration, targetType);<br>    <span class="hljs-comment">// 如果能加载，则立刻加载，否则加入到延迟加载队列中</span><br>    <span class="hljs-keyword">if</span> (deferredLoad.canLoad()) &#123;<br>      deferredLoad.load();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 这里怎么又new了一个新的，性能有点问题</span><br>      deferredLoads.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DeferredLoad</span>(resultObject, property, key, localCache, configuration, targetType));<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCached</span><span class="hljs-params">(MappedStatement ms, CacheKey key)</span> &#123;<br>    <span class="hljs-keyword">return</span> localCache.getObject(key) != <span class="hljs-literal">null</span>;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">(<span class="hljs-type">boolean</span> required)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">if</span> (closed) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Cannot commit, transaction is already closed&quot;</span>);<br>    &#125;<br>    clearLocalCache();<br>    flushStatements();<br>    <span class="hljs-keyword">if</span> (required) &#123;<br>      transaction.commit();<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">closeStatement</span><span class="hljs-params">(Statement statement)</span> &#123;<br>    <span class="hljs-keyword">if</span> (statement != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        statement.close();<br>      &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        <span class="hljs-comment">// ignore</span><br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">protected</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">(Log statementLog)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> transaction.getConnection();<br>    <span class="hljs-keyword">if</span> (statementLog.isDebugEnabled()) &#123;<br>      <span class="hljs-comment">// 如果需要打印Connection的日志，返回一个ConnectionLogger(代理模式, AOP思想)</span><br>      <span class="hljs-keyword">return</span> ConnectionLogger.newInstance(connection, statementLog, queryStack);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> connection;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setExecutorWrapper</span><span class="hljs-params">(Executor wrapper)</span> &#123;<br>    <span class="hljs-built_in">this</span>.wrapper = wrapper;<br>  &#125; <br><br>  <span class="hljs-comment">// 延迟加载</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeferredLoad</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> MetaObject resultObject;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String property;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Class&lt;?&gt; targetType;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> CacheKey key;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> PerpetualCache localCache;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ObjectFactory objectFactory;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ResultExtractor resultExtractor;<br><br>    <span class="hljs-comment">// issue #781</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DeferredLoad</span><span class="hljs-params">(MetaObject resultObject,</span><br><span class="hljs-params">                        String property,</span><br><span class="hljs-params">                        CacheKey key,</span><br><span class="hljs-params">                        PerpetualCache localCache,</span><br><span class="hljs-params">                        Configuration configuration,</span><br><span class="hljs-params">                        Class&lt;?&gt; targetType)</span> &#123;<br>      <span class="hljs-built_in">this</span>.resultObject = resultObject;<br>      <span class="hljs-built_in">this</span>.property = property;<br>      <span class="hljs-built_in">this</span>.key = key;<br>      <span class="hljs-built_in">this</span>.localCache = localCache;<br>      <span class="hljs-built_in">this</span>.objectFactory = configuration.getObjectFactory();<br>      <span class="hljs-built_in">this</span>.resultExtractor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultExtractor</span>(configuration, objectFactory);<br>      <span class="hljs-built_in">this</span>.targetType = targetType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canLoad</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// 缓存中找到，且不为占位符，代表可以加载</span><br>      <span class="hljs-keyword">return</span> localCache.getObject(key) != <span class="hljs-literal">null</span> &amp;&amp; localCache.getObject(key) != EXECUTION_PLACEHOLDER;<br>    &#125;<br><br><span class="hljs-comment">// 加载</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">load</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-meta">@SuppressWarnings( &quot;unchecked&quot; )</span><br>      <span class="hljs-comment">// we suppose we get back a List</span><br>      List&lt;Object&gt; list = (List&lt;Object&gt;) localCache.getObject(key);<br>      <span class="hljs-comment">// 调用ResultExtractor.extractObjectFromList</span><br>      <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> resultExtractor.extractObjectFromList(list, targetType);<br>      resultObject.setValue(property, value);<br>    &#125;<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SimpleExecutor"><a href="#SimpleExecutor" class="headerlink" title="SimpleExecutor"></a>SimpleExecutor</h4><p>    简单执行器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleExecutor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseExecutor</span> &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">SimpleExecutor</span><span class="hljs-params">(Configuration configuration, Transaction transaction)</span> &#123;<br>    <span class="hljs-built_in">super</span>(configuration, transaction);<br>  &#125;<br><br>  <span class="hljs-comment">// update</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">doUpdate</span><span class="hljs-params">(MappedStatement ms, Object parameter)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">Configuration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> ms.getConfiguration();<br>      <span class="hljs-comment">// 新建一个StatementHandler</span><br>      <span class="hljs-comment">// 这里看到ResultHandler传入的是null</span><br>      <span class="hljs-type">StatementHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> configuration.newStatementHandler(<span class="hljs-built_in">this</span>, ms, parameter, RowBounds.DEFAULT, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>      <span class="hljs-comment">// 准备语句</span><br>      stmt = prepareStatement(handler, ms.getStatementLog());<br>      <span class="hljs-comment">// StatementHandler.update</span><br>      <span class="hljs-keyword">return</span> handler.update(stmt);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      closeStatement(stmt);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// select</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">doQuery</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">Configuration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> ms.getConfiguration();<br>      <span class="hljs-comment">// 新建一个StatementHandler</span><br>      <span class="hljs-comment">// 这里看到ResultHandler传入了</span><br>      <span class="hljs-type">StatementHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);<br>      <span class="hljs-comment">// 准备语句</span><br>      stmt = prepareStatement(handler, ms.getStatementLog());<br>      <span class="hljs-comment">// StatementHandler.query</span><br>      <span class="hljs-keyword">return</span> handler.&lt;E&gt;query(stmt, resultHandler);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      closeStatement(stmt);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> List&lt;BatchResult&gt; <span class="hljs-title function_">doFlushStatements</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isRollback)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><span class="hljs-comment">// doFlushStatements只是给batch用的，所以这里返回空</span><br>    <span class="hljs-keyword">return</span> Collections.emptyList();<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> Statement <span class="hljs-title function_">prepareStatement</span><span class="hljs-params">(StatementHandler handler, Log statementLog)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    Statement stmt;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> getConnection(statementLog);<br>    <span class="hljs-comment">// 调用StatementHandler.prepare</span><br>    stmt = handler.prepare(connection);<br>    <span class="hljs-comment">// 调用StatementHandler.parameterize</span><br>    handler.parameterize(stmt);<br>    <span class="hljs-keyword">return</span> stmt;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ReuseExecutor"><a href="#ReuseExecutor" class="headerlink" title="ReuseExecutor"></a>ReuseExecutor</h4><p>    可重用执行器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReuseExecutor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseExecutor</span> &#123; <br><br>  <span class="hljs-comment">// 可重用的执行器内部用了一个map，用来缓存SQL语句对应的Statement</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, Statement&gt; statementMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Statement&gt;();<br> <br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReuseExecutor</span><span class="hljs-params">(Configuration configuration, Transaction transaction)</span> &#123;<br>    <span class="hljs-built_in">super</span>(configuration, transaction);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">doUpdate</span><span class="hljs-params">(MappedStatement ms, Object parameter)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">Configuration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> ms.getConfiguration();<br>    <span class="hljs-comment">// 和SimpleExecutor一样，新建一个StatementHandler</span><br>    <span class="hljs-comment">// 这里看到ResultHandler传入的是null</span><br>    <span class="hljs-type">StatementHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> configuration.newStatementHandler(<span class="hljs-built_in">this</span>, ms, parameter, RowBounds.DEFAULT, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">// 准备语句</span><br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> prepareStatement(handler, ms.getStatementLog());<br>    <span class="hljs-keyword">return</span> handler.update(stmt);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">doQuery</span><span class="hljs-params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">Configuration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> ms.getConfiguration();<br>    <span class="hljs-type">StatementHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);<br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> prepareStatement(handler, ms.getStatementLog());<br>    <span class="hljs-keyword">return</span> handler.&lt;E&gt;query(stmt, resultHandler);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Statement <span class="hljs-title function_">prepareStatement</span><span class="hljs-params">(StatementHandler handler, Log statementLog)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    Statement stmt;<br>    <span class="hljs-comment">// 得到绑定的SQL语句</span><br>    <span class="hljs-type">BoundSql</span> <span class="hljs-variable">boundSql</span> <span class="hljs-operator">=</span> handler.getBoundSql();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> boundSql.getSql();<br>    <span class="hljs-comment">// 如果缓存中已经有了，直接得到Statement</span><br>    <span class="hljs-keyword">if</span> (hasStatementFor(sql)) &#123;<br>      stmt = getStatement(sql);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 如果缓存没有找到，则和SimpleExecutor处理完全一样，然后加入缓存</span><br>      <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> getConnection(statementLog);<br>      stmt = handler.prepare(connection);<br>      putStatement(sql, stmt);<br>    &#125;<br>    handler.parameterize(stmt);<br>    <span class="hljs-keyword">return</span> stmt;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasStatementFor</span><span class="hljs-params">(String sql)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> statementMap.keySet().contains(sql) &amp;&amp; !statementMap.get(sql).getConnection().isClosed();<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Statement <span class="hljs-title function_">getStatement</span><span class="hljs-params">(String s)</span> &#123;<br>    <span class="hljs-keyword">return</span> statementMap.get(s);<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putStatement</span><span class="hljs-params">(String sql, Statement stmt)</span> &#123;<br>    statementMap.put(sql, stmt);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> List&lt;BatchResult&gt; <span class="hljs-title function_">doFlushStatements</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isRollback)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">for</span> (Statement stmt : statementMap.values()) &#123;<br>      closeStatement(stmt);<br>    &#125;<br>    statementMap.clear();<br>    <span class="hljs-keyword">return</span> Collections.emptyList();<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BatchResult"><a href="#BatchResult" class="headerlink" title="BatchResult"></a>BatchResult</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BatchResult</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> MappedStatement mappedStatement;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String sql;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;Object&gt; parameterObjects;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] updateCounts;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">BatchResult</span><span class="hljs-params">(MappedStatement mappedStatement, String sql)</span> &#123;<br>    <span class="hljs-built_in">super</span>();<br>    <span class="hljs-built_in">this</span>.mappedStatement = mappedStatement;<br>    <span class="hljs-built_in">this</span>.sql = sql;<br>    <span class="hljs-built_in">this</span>.parameterObjects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">BatchResult</span><span class="hljs-params">(MappedStatement mappedStatement, String sql, Object parameterObject)</span> &#123;<br>    <span class="hljs-built_in">this</span>(mappedStatement, sql);<br>    addParameterObject(parameterObject);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> MappedStatement <span class="hljs-title function_">getMappedStatement</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> mappedStatement;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSql</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> sql;<br>  &#125;<br><br>  <span class="hljs-meta">@Deprecated</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getParameterObject</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> parameterObjects.get(<span class="hljs-number">0</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">getParameterObjects</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> parameterObjects;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] getUpdateCounts() &#123;<br>    <span class="hljs-keyword">return</span> updateCounts;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUpdateCounts</span><span class="hljs-params">(<span class="hljs-type">int</span>[] updateCounts)</span> &#123;<br>    <span class="hljs-built_in">this</span>.updateCounts = updateCounts;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addParameterObject</span><span class="hljs-params">(Object parameterObject)</span> &#123;<br>    <span class="hljs-built_in">this</span>.parameterObjects.add(parameterObject);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BatchExecutor"><a href="#BatchExecutor" class="headerlink" title="BatchExecutor"></a>BatchExecutor</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BatchExecutor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseExecutor</span> &#123; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">BATCH_UPDATE_RETURN_VALUE</span> <span class="hljs-operator">=</span> Integer.MIN_VALUE + <span class="hljs-number">1002</span>;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;Statement&gt; statementList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Statement&gt;();<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;BatchResult&gt; batchResultList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;BatchResult&gt;();<br>  <span class="hljs-keyword">private</span> String currentSql;<br>  <span class="hljs-keyword">private</span> MappedStatement currentStatement; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">BatchExecutor</span><span class="hljs-params">(Configuration configuration, Transaction transaction)</span> &#123;<br>    <span class="hljs-built_in">super</span>(configuration, transaction);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">doUpdate</span><span class="hljs-params">(MappedStatement ms, Object parameterObject)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Configuration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> ms.getConfiguration();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">StatementHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> configuration.newStatementHandler(<span class="hljs-built_in">this</span>, ms, parameterObject, RowBounds.DEFAULT, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">BoundSql</span> <span class="hljs-variable">boundSql</span> <span class="hljs-operator">=</span> handler.getBoundSql();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> boundSql.getSql();<br>    <span class="hljs-keyword">final</span> Statement stmt;<br>    <span class="hljs-comment">// 只设置参数</span><br>    <span class="hljs-keyword">if</span> (sql.equals(currentSql) &amp;&amp; ms.equals(currentStatement)) &#123;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> statementList.size() - <span class="hljs-number">1</span>;<br>      stmt = statementList.get(last);<br>      <span class="hljs-type">BatchResult</span> <span class="hljs-variable">batchResult</span> <span class="hljs-operator">=</span> batchResultList.get(last);<br>      batchResult.addParameterObject(parameterObject);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 添加要执行的语句和BatchResult</span><br>      <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> getConnection(ms.getStatementLog());<br>      stmt = handler.prepare(connection);<br>      currentSql = sql;<br>      currentStatement = ms;<br>      statementList.add(stmt);<br>      batchResultList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BatchResult</span>(ms, sql, parameterObject));<br>    &#125;<br>    handler.parameterize(stmt);<br>    handler.batch(stmt);<br>    <span class="hljs-keyword">return</span> BATCH_UPDATE_RETURN_VALUE;<br>  &#125; <br><br>  <span class="hljs-comment">// 查询和其他执行器差不多</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">doQuery</span><span class="hljs-params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span><br>      <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123; <br>      <span class="hljs-comment">// 不同的地方在于查询前先flush</span><br>      flushStatements();<br>      <span class="hljs-type">Configuration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> ms.getConfiguration();<br>      <span class="hljs-type">StatementHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> configuration.newStatementHandler(wrapper, ms, parameterObject, rowBounds, resultHandler, boundSql);<br>      <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> getConnection(ms.getStatementLog());<br>      stmt = handler.prepare(connection);<br>      handler.parameterize(stmt);<br>      <span class="hljs-keyword">return</span> handler.&lt;E&gt;query(stmt, resultHandler);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      closeStatement(stmt);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> List&lt;BatchResult&gt; <span class="hljs-title function_">doFlushStatements</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isRollback)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      List&lt;BatchResult&gt; results = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;BatchResult&gt;();<br>      <span class="hljs-keyword">if</span> (isRollback) &#123;<br>        <span class="hljs-keyword">return</span> Collections.emptyList();<br>      &#125;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, n = statementList.size(); i &lt; n; i++) &#123;<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> statementList.get(i);<br>        <span class="hljs-type">BatchResult</span> <span class="hljs-variable">batchResult</span> <span class="hljs-operator">=</span> batchResultList.get(i);<br>        <span class="hljs-keyword">try</span> &#123;<br>          batchResult.setUpdateCounts(stmt.executeBatch());<br>          <span class="hljs-type">MappedStatement</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> batchResult.getMappedStatement();<br>          List&lt;Object&gt; parameterObjects = batchResult.getParameterObjects();<br>          <span class="hljs-type">KeyGenerator</span> <span class="hljs-variable">keyGenerator</span> <span class="hljs-operator">=</span> ms.getKeyGenerator();<br>          <span class="hljs-keyword">if</span> (Jdbc3KeyGenerator.class.equals(keyGenerator.getClass())) &#123;<br>            <span class="hljs-type">Jdbc3KeyGenerator</span> <span class="hljs-variable">jdbc3KeyGenerator</span> <span class="hljs-operator">=</span> (Jdbc3KeyGenerator) keyGenerator;<br>            jdbc3KeyGenerator.processBatch(ms, stmt, parameterObjects);<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!NoKeyGenerator.class.equals(keyGenerator.getClass())) &#123; <span class="hljs-comment">//issue #141</span><br>            <span class="hljs-comment">// selectKeyGenerator</span><br>            <span class="hljs-keyword">for</span> (Object parameter : parameterObjects) &#123;<br>              keyGenerator.processAfter(<span class="hljs-built_in">this</span>, ms, stmt, parameter);<br>            &#125;<br>          &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (BatchUpdateException e) &#123;<br>          <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>          message.append(batchResult.getMappedStatement().getId())<br>              .append(<span class="hljs-string">&quot; (batch index #&quot;</span>)<br>              .append(i + <span class="hljs-number">1</span>)<br>              .append(<span class="hljs-string">&quot;)&quot;</span>)<br>              .append(<span class="hljs-string">&quot; failed.&quot;</span>);<br>          <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) &#123;<br>            message.append(<span class="hljs-string">&quot; &quot;</span>)<br>                .append(i)<br>                .append(<span class="hljs-string">&quot; prior sub executor(s) completed successfully, but will be rolled back.&quot;</span>);<br>          &#125;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BatchExecutorException</span>(message.toString(), e, results, batchResult);<br>        &#125;<br>        results.add(batchResult);<br>      &#125;<br>      <span class="hljs-keyword">return</span> results;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-keyword">for</span> (Statement stmt : statementList) &#123;<br>        closeStatement(stmt);<br>      &#125;<br>      currentSql = <span class="hljs-literal">null</span>;<br>      statementList.clear();<br>      batchResultList.clear();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="CachingExecutor"><a href="#CachingExecutor" class="headerlink" title="CachingExecutor"></a>CachingExecutor</h4><p>    二级缓存执行器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CachingExecutor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Executor</span> &#123; <br><br>  <span class="hljs-keyword">private</span> Executor delegate;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">TransactionalCacheManager</span> <span class="hljs-variable">tcm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransactionalCacheManager</span>(); <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">CachingExecutor</span><span class="hljs-params">(Executor delegate)</span> &#123;<br>    <span class="hljs-built_in">this</span>.delegate = delegate;<br>    delegate.setExecutorWrapper(<span class="hljs-built_in">this</span>);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Transaction <span class="hljs-title function_">getTransaction</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> delegate.getTransaction();<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(<span class="hljs-type">boolean</span> forceRollback)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">//issues #499, #524 and #573</span><br>      <span class="hljs-keyword">if</span> (forceRollback) &#123; <br>        tcm.rollback();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        tcm.commit();<br>      &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      delegate.close(forceRollback);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isClosed</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> delegate.isClosed();<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(MappedStatement ms, Object parameterObject)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><span class="hljs-comment">// 刷新完缓存再update</span><br>    flushCacheIfRequired(ms);<br>    <span class="hljs-keyword">return</span> delegate.update(ms, parameterObject);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flushCacheIfRequired</span><span class="hljs-params">(MappedStatement ms)</span> &#123;<br>    <span class="hljs-type">Cache</span> <span class="hljs-variable">cache</span> <span class="hljs-operator">=</span> ms.getCache();<br>    <span class="hljs-keyword">if</span> (cache != <span class="hljs-literal">null</span> &amp;&amp; ms.isFlushCacheRequired()) &#123;      <br>      tcm.clear(cache);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">query</span><span class="hljs-params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">BoundSql</span> <span class="hljs-variable">boundSql</span> <span class="hljs-operator">=</span> ms.getBoundSql(parameterObject);<br><span class="hljs-comment">// query时传入一个cachekey参数</span><br>    <span class="hljs-type">CacheKey</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> createCacheKey(ms, parameterObject, rowBounds, boundSql);<br>    <span class="hljs-keyword">return</span> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> CacheKey <span class="hljs-title function_">createCacheKey</span><span class="hljs-params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql)</span> &#123;<br>    <span class="hljs-keyword">return</span> delegate.createCacheKey(ms, parameterObject, rowBounds, boundSql);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">query</span><span class="hljs-params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span><br>      <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">Cache</span> <span class="hljs-variable">cache</span> <span class="hljs-operator">=</span> ms.getCache();<br>    <span class="hljs-comment">// 默认情况下是没有开启缓存的(二级缓存).要开启二级缓存,你需要在你的 SQL 映射文件中添加一行: &lt;cache/&gt;</span><br>    <span class="hljs-comment">// 简单的说，就是先查CacheKey，查不到再委托给实际的执行器去查</span><br>    <span class="hljs-keyword">if</span> (cache != <span class="hljs-literal">null</span>) &#123;<br>      flushCacheIfRequired(ms);<br>      <span class="hljs-keyword">if</span> (ms.isUseCache() &amp;&amp; resultHandler == <span class="hljs-literal">null</span>) &#123;<br>        ensureNoOutParams(ms, parameterObject, boundSql);<br>        <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>        List&lt;E&gt; list = (List&lt;E&gt;) tcm.getObject(cache, key);<br>        <span class="hljs-keyword">if</span> (list == <span class="hljs-literal">null</span>) &#123;<br>          list = delegate.&lt;E&gt; query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);<br>          tcm.putObject(cache, key, list); <span class="hljs-comment">// issue #578 and #116</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> delegate.&lt;E&gt; query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ensureNoOutParams</span><span class="hljs-params">(MappedStatement ms, Object parameter, BoundSql boundSql)</span> &#123;<br>    <span class="hljs-keyword">if</span> (ms.getStatementType() == StatementType.CALLABLE) &#123;<br>      <span class="hljs-keyword">for</span> (ParameterMapping parameterMapping : boundSql.getParameterMappings()) &#123;<br>        <span class="hljs-keyword">if</span> (parameterMapping.getMode() != ParameterMode.IN) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExecutorException</span>(<span class="hljs-string">&quot;Caching stored procedures with OUT params is not supported.  Please configure useCache=false in &quot;</span> + ms.getId() + <span class="hljs-string">&quot; statement.&quot;</span>);<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> List&lt;BatchResult&gt; <span class="hljs-title function_">flushStatements</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">return</span> delegate.flushStatements();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">(<span class="hljs-type">boolean</span> required)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    delegate.commit(required);<br>    tcm.commit();<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">(<span class="hljs-type">boolean</span> required)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      delegate.rollback(required);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-keyword">if</span> (required) &#123;<br>        tcm.rollback();<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCached</span><span class="hljs-params">(MappedStatement ms, CacheKey key)</span> &#123;<br>    <span class="hljs-keyword">return</span> delegate.isCached(ms, key);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deferLoad</span><span class="hljs-params">(MappedStatement ms, MetaObject resultObject, String property, CacheKey key, Class&lt;?&gt; targetType)</span> &#123;<br>    delegate.deferLoad(ms, resultObject, property, key, targetType);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setExecutorWrapper</span><span class="hljs-params">(Executor executor)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(<span class="hljs-string">&quot;This method should not be called&quot;</span>);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearLocalCache</span><span class="hljs-params">()</span> &#123;<br>    delegate.clearLocalCache();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>15-binding</title>
    <link href="/2023/08/27/15-binding/"/>
    <url>/2023/08/27/15-binding/</url>
    
    <content type="html"><![CDATA[<h4 id="MapperMethod"><a href="#MapperMethod" class="headerlink" title="MapperMethod"></a>MapperMethod</h4><p>    Mapper接口中方法的封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapperMethod</span> &#123; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SqlCommand command;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> MethodSignature method; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">MapperMethod</span><span class="hljs-params">(Class&lt;?&gt; mapperInterface, Method method, Configuration config)</span> &#123;<br>    <span class="hljs-built_in">this</span>.command = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlCommand</span>(config, mapperInterface, method);<br>    <span class="hljs-built_in">this</span>.method = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodSignature</span>(config, method);<br>  &#125; <br><br>  <span class="hljs-comment">// SQL命令，静态内部类</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SqlCommand</span> &#123; <br><br>    <span class="hljs-comment">// 分别对应 MappedStatement 的id和sql命令类型</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SqlCommandType type; <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SqlCommand</span><span class="hljs-params">(Configuration configuration, Class&lt;?&gt; mapperInterface, Method method)</span> &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">statementName</span> <span class="hljs-operator">=</span> mapperInterface.getName() + <span class="hljs-string">&quot;.&quot;</span> + method.getName();<br>      <span class="hljs-type">MappedStatement</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">if</span> (configuration.hasStatement(statementName)) &#123;<br>        ms = configuration.getMappedStatement(statementName);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!mapperInterface.getName().equals(method.getDeclaringClass().getName())) &#123; <span class="hljs-comment">// issue #35</span><br>        <span class="hljs-comment">// 如果不是这个mapper接口的方法，再去查父类</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">parentStatementName</span> <span class="hljs-operator">=</span> method.getDeclaringClass().getName() + <span class="hljs-string">&quot;.&quot;</span> + method.getName();<br>        <span class="hljs-keyword">if</span> (configuration.hasStatement(parentStatementName)) &#123;<br>          ms = configuration.getMappedStatement(parentStatementName);<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (ms == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindingException</span>(<span class="hljs-string">&quot;Invalid bound statement (not found): &quot;</span> + statementName);<br>      &#125;<br>      name = ms.getId();<br>      type = ms.getSqlCommandType();<br>      <span class="hljs-keyword">if</span> (type == SqlCommandType.UNKNOWN) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindingException</span>(<span class="hljs-string">&quot;Unknown execution method for: &quot;</span> + name);<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> SqlCommandType <span class="hljs-title function_">getType</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> type;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 方法签名，静态内部类</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodSignature</span> &#123; <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> returnsMany;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> returnsMap;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> returnsVoid;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Class&lt;?&gt; returnType;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String mapKey;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Integer resultHandlerIndex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Integer rowBoundsIndex;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SortedMap&lt;Integer, String&gt; params;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> hasNamedParameters; <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MethodSignature</span><span class="hljs-params">(Configuration configuration, Method method)</span> &#123;<br>      <span class="hljs-built_in">this</span>.returnType = method.getReturnType();<br>      <span class="hljs-built_in">this</span>.returnsVoid = <span class="hljs-keyword">void</span>.class.equals(<span class="hljs-built_in">this</span>.returnType);<br>      <span class="hljs-built_in">this</span>.returnsMany = (configuration.getObjectFactory().isCollection(<span class="hljs-built_in">this</span>.returnType) || <span class="hljs-built_in">this</span>.returnType.isArray());<br>      <span class="hljs-built_in">this</span>.mapKey = getMapKey(method);<br>      <span class="hljs-built_in">this</span>.returnsMap = (<span class="hljs-built_in">this</span>.mapKey != <span class="hljs-literal">null</span>);<br>      <span class="hljs-built_in">this</span>.hasNamedParameters = hasNamedParams(method);<br>      <span class="hljs-comment">// 以下重复循环2遍调用getUniqueParamIndex，是不是降低效率了</span><br>      <span class="hljs-comment">// 记下RowBounds是第几个参数</span><br>      <span class="hljs-built_in">this</span>.rowBoundsIndex = getUniqueParamIndex(method, RowBounds.class);<br>      <span class="hljs-comment">// 记下ResultHandler是第几个参数</span><br>      <span class="hljs-built_in">this</span>.resultHandlerIndex = getUniqueParamIndex(method, ResultHandler.class);<br>      <span class="hljs-built_in">this</span>.params = Collections.unmodifiableSortedMap(getParams(method, <span class="hljs-built_in">this</span>.hasNamedParameters));<br>    &#125; <br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getMapKey</span><span class="hljs-params">(Method method)</span> &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">mapKey</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">if</span> (Map.class.isAssignableFrom(method.getReturnType())) &#123;<br>        <span class="hljs-comment">// 如果返回类型是map类型的，查看该method是否有MapKey注解。如果有这个注解，将这个注解的值作为map的key</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">MapKey</span> <span class="hljs-variable">mapKeyAnnotation</span> <span class="hljs-operator">=</span> method.getAnnotation(MapKey.class);<br>        <span class="hljs-keyword">if</span> (mapKeyAnnotation != <span class="hljs-literal">null</span>) &#123;<br>          mapKey = mapKeyAnnotation.value();<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> mapKey;<br>    &#125; <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNamedParams</span><span class="hljs-params">(Method method)</span> &#123;<br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">hasNamedParams</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>      <span class="hljs-keyword">final</span> Object[][] paramAnnos = method.getParameterAnnotations();<br>      <span class="hljs-keyword">for</span> (Object[] paramAnno : paramAnnos) &#123;<br>        <span class="hljs-keyword">for</span> (Object aParamAnno : paramAnno) &#123;<br>          <span class="hljs-keyword">if</span> (aParamAnno <span class="hljs-keyword">instanceof</span> Param) &#123;<br>            <span class="hljs-comment">// 查找@Param注解</span><br>            hasNamedParams = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">break</span>;<br>          &#125;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> hasNamedParams;<br>    &#125; <br><br>    <span class="hljs-keyword">private</span> Integer <span class="hljs-title function_">getUniqueParamIndex</span><span class="hljs-params">(Method method, Class&lt;?&gt; paramType)</span> &#123;<br>      <span class="hljs-type">Integer</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">final</span> Class&lt;?&gt;[] argTypes = method.getParameterTypes();<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; argTypes.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (paramType.isAssignableFrom(argTypes[i])) &#123;<br>          <span class="hljs-keyword">if</span> (index == <span class="hljs-literal">null</span>) &#123;<br>            index = i;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindingException</span>(method.getName() + <span class="hljs-string">&quot; cannot have multiple &quot;</span> + paramType.getSimpleName() + <span class="hljs-string">&quot; parameters&quot;</span>);<br>          &#125;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> index;<br>    &#125; <br><br>    <span class="hljs-comment">// 得到所有参数</span><br>    <span class="hljs-keyword">private</span> SortedMap&lt;Integer, String&gt; <span class="hljs-title function_">getParams</span><span class="hljs-params">(Method method, <span class="hljs-type">boolean</span> hasNamedParameters)</span> &#123;<br>      <span class="hljs-comment">// 用一个TreeMap,这样就保证还是按参数的先后顺序</span><br>      <span class="hljs-keyword">final</span> SortedMap&lt;Integer, String&gt; params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;Integer, String&gt;();<br>      <span class="hljs-keyword">final</span> Class&lt;?&gt;[] argTypes = method.getParameterTypes();<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; argTypes.length; i++) &#123;<br>        <span class="hljs-comment">// 是否不是RowBounds/ResultHandler类型的参数</span><br>        <span class="hljs-keyword">if</span> (!RowBounds.class.isAssignableFrom(argTypes[i]) &amp;&amp; !ResultHandler.class.isAssignableFrom(argTypes[i])) &#123;<br>          <span class="hljs-comment">// 参数名字默认为0,1,2，这就是为什么xml里面可以用#&#123;1&#125;这样的写法来表示参数了</span><br>          <span class="hljs-type">String</span> <span class="hljs-variable">paramName</span> <span class="hljs-operator">=</span> String.valueOf(params.size());<br>          <span class="hljs-keyword">if</span> (hasNamedParameters) &#123;<br>            <span class="hljs-comment">// 还可以用注解@Param来重命名参数</span><br>            paramName = getParamNameFromAnnotation(method, i, paramName);<br>          &#125;<br>          params.put(i, paramName);<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> params;<br>    &#125; <br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getParamNameFromAnnotation</span><span class="hljs-params">(Method method, <span class="hljs-type">int</span> i, String paramName)</span> &#123;<br>      <span class="hljs-keyword">final</span> Object[] paramAnnos = method.getParameterAnnotations()[i];<br>      <span class="hljs-keyword">for</span> (Object paramAnno : paramAnnos) &#123;<br>        <span class="hljs-keyword">if</span> (paramAnno <span class="hljs-keyword">instanceof</span> Param) &#123;<br>          paramName = ((Param) paramAnno).value();<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> paramName;<br>    &#125; <br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">convertArgsToSqlCommandParam</span><span class="hljs-params">(Object[] args)</span> &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">paramCount</span> <span class="hljs-operator">=</span> params.size();<br>      <span class="hljs-keyword">if</span> (args == <span class="hljs-literal">null</span> || paramCount == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 如果没参数</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!hasNamedParameters &amp;&amp; paramCount == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 如果只有一个参数</span><br>        <span class="hljs-keyword">return</span> args[params.keySet().iterator().next().intValue()];<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 否则，返回一个ParamMap，修改参数名，参数名就是其位置</span><br>        <span class="hljs-keyword">final</span> Map&lt;String, Object&gt; param = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParamMap</span>&lt;Object&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : params.entrySet()) &#123;<br>          <span class="hljs-comment">// 1.先加一个#&#123;0&#125;,#&#123;1&#125;,#&#123;2&#125;...参数</span><br>          param.put(entry.getValue(), args[entry.getKey().intValue()]);<br>          <span class="hljs-comment">// issue #71, add param names as param1, param2...but ensure backward compatibility</span><br>          <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">genericParamName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;param&quot;</span> + String.valueOf(i + <span class="hljs-number">1</span>);<br>          <span class="hljs-keyword">if</span> (!param.containsKey(genericParamName)) &#123;<br>            <span class="hljs-comment">// 2.再加一个#&#123;param1&#125;,#&#123;param2&#125;...参数</span><br>            <span class="hljs-comment">// 你可以传递多个参数给一个映射器方法。如果你这样做了,</span><br>            <span class="hljs-comment">// 默认情况下它们将会以它们在参数列表中的位置来命名,比如:#&#123;param1&#125;,#&#123;param2&#125;等。</span><br>            <span class="hljs-comment">// 如果你想改变参数的名称(只在多参数情况下) ,那么你可以在参数上使用@Param(“paramName”)注解。</span><br>            param.put(genericParamName, args[entry.getKey()]);<br>          &#125;<br>          i++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> param;<br>      &#125;<br>    &#125; <br><br>    <span class="hljs-comment">// get方法略</span><br>  &#125; <br><br>  <span class="hljs-comment">// 参数map，静态内部类,更严格的get方法，如果没有相应的key，报错</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParamMap</span>&lt;V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashMap</span>&lt;String, V&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">2212268410512043556L</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">super</span>.containsKey(key)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindingException</span>(<span class="hljs-string">&quot;Parameter &#x27;&quot;</span> + key + <span class="hljs-string">&quot;&#x27; not found. Available parameters are &quot;</span> + keySet());<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.get(key);<br>    &#125;<br><br>  &#125; <br><br>  <span class="hljs-comment">// 执行</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">execute</span><span class="hljs-params">(SqlSession sqlSession, Object[] args)</span> &#123;<br>    Object result;<br>    <span class="hljs-comment">// 可以看到执行时就是4种情况，insert|update|delete|select，分别调用SqlSession的4大类方法</span><br>    <span class="hljs-keyword">if</span> (SqlCommandType.INSERT == command.getType()) &#123;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> method.convertArgsToSqlCommandParam(args);<br>      result = rowCountResult(sqlSession.insert(command.getName(), param));<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (SqlCommandType.UPDATE == command.getType()) &#123;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> method.convertArgsToSqlCommandParam(args);<br>      result = rowCountResult(sqlSession.update(command.getName(), param));<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (SqlCommandType.DELETE == command.getType()) &#123;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> method.convertArgsToSqlCommandParam(args);<br>      result = rowCountResult(sqlSession.delete(command.getName(), param));<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (SqlCommandType.SELECT == command.getType()) &#123;<br>      <span class="hljs-keyword">if</span> (method.returnsVoid() &amp;&amp; method.hasResultHandler()) &#123;<br>        <span class="hljs-comment">// 如果有结果处理器</span><br>        executeWithResultHandler(sqlSession, args);<br>        result = <span class="hljs-literal">null</span>;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.returnsMany()) &#123;<br>        <span class="hljs-comment">// 如果结果有多条记录</span><br>        result = executeForMany(sqlSession, args);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.returnsMap()) &#123;<br>        <span class="hljs-comment">// 如果结果是map</span><br>        result = executeForMap(sqlSession, args);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 否则就是一条记录</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> method.convertArgsToSqlCommandParam(args);<br>        result = sqlSession.selectOne(command.getName(), param);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindingException</span>(<span class="hljs-string">&quot;Unknown execution method for: &quot;</span> + command.getName());<br>    &#125;<br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span> &amp;&amp; method.getReturnType().isPrimitive() &amp;&amp; !method.returnsVoid()) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindingException</span>(<span class="hljs-string">&quot;Mapper method &#x27;&quot;</span> + command.getName() <br>          + <span class="hljs-string">&quot; attempted to return null from a method with a primitive return type (&quot;</span> + method.getReturnType() + <span class="hljs-string">&quot;).&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>  &#125; <br><br>  <span class="hljs-comment">// 这个方法对返回值的类型进行了一些检查，使得更安全</span><br>  <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">rowCountResult</span><span class="hljs-params">(<span class="hljs-type">int</span> rowCount)</span> &#123;<br>    <span class="hljs-keyword">final</span> Object result;<br>    <span class="hljs-keyword">if</span> (method.returnsVoid()) &#123;<br>      result = <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Integer.class.equals(method.getReturnType()) || Integer.TYPE.equals(method.getReturnType())) &#123;<br>      <span class="hljs-comment">// 如果返回值是大int或小int</span><br>      result = Integer.valueOf(rowCount);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Long.class.equals(method.getReturnType()) || Long.TYPE.equals(method.getReturnType())) &#123;<br>      <span class="hljs-comment">// 如果返回值是大long或小long</span><br>      result = Long.valueOf(rowCount);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Boolean.class.equals(method.getReturnType()) || Boolean.TYPE.equals(method.getReturnType())) &#123;<br>      <span class="hljs-comment">// 如果返回值是大boolean或小boolean</span><br>      result = Boolean.valueOf(rowCount &gt; <span class="hljs-number">0</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindingException</span>(<span class="hljs-string">&quot;Mapper method &#x27;&quot;</span> + command.getName() + <span class="hljs-string">&quot;&#x27; has an unsupported return type: &quot;</span> + method.getReturnType());<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>  &#125; <br><br>  <span class="hljs-comment">// 结果处理器</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">executeWithResultHandler</span><span class="hljs-params">(SqlSession sqlSession, Object[] args)</span> &#123;<br>    <span class="hljs-type">MappedStatement</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> sqlSession.getConfiguration().getMappedStatement(command.getName());<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">void</span>.class.equals(ms.getResultMaps().get(<span class="hljs-number">0</span>).getType())) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindingException</span>(<span class="hljs-string">&quot;method &quot;</span> + command.getName() <br>          + <span class="hljs-string">&quot; needs either a @ResultMap annotation, a @ResultType annotation,&quot;</span> <br>          + <span class="hljs-string">&quot; or a resultType attribute in XML so a ResultHandler can be used as a parameter.&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> method.convertArgsToSqlCommandParam(args);<br>    <span class="hljs-keyword">if</span> (method.hasRowBounds()) &#123;<br>      <span class="hljs-type">RowBounds</span> <span class="hljs-variable">rowBounds</span> <span class="hljs-operator">=</span> method.extractRowBounds(args);<br>      sqlSession.select(command.getName(), param, rowBounds, method.extractResultHandler(args));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      sqlSession.select(command.getName(), param, method.extractResultHandler(args));<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 多条记录</span><br>  <span class="hljs-keyword">private</span> &lt;E&gt; Object <span class="hljs-title function_">executeForMany</span><span class="hljs-params">(SqlSession sqlSession, Object[] args)</span> &#123;<br>    List&lt;E&gt; result;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> method.convertArgsToSqlCommandParam(args);<br>    <span class="hljs-comment">// 代入RowBounds</span><br>    <span class="hljs-keyword">if</span> (method.hasRowBounds()) &#123;<br>      <span class="hljs-type">RowBounds</span> <span class="hljs-variable">rowBounds</span> <span class="hljs-operator">=</span> method.extractRowBounds(args);<br>      result = sqlSession.&lt;E&gt;selectList(command.getName(), param, rowBounds);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      result = sqlSession.&lt;E&gt;selectList(command.getName(), param);<br>    &#125;<br>    <span class="hljs-comment">// issue #510 Collections &amp; arrays support</span><br>    <span class="hljs-keyword">if</span> (!method.getReturnType().isAssignableFrom(result.getClass())) &#123;<br>      <span class="hljs-keyword">if</span> (method.getReturnType().isArray()) &#123;<br>        <span class="hljs-keyword">return</span> convertToArray(result);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> convertToDeclaredCollection(sqlSession.getConfiguration(), result);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>  &#125; <br><br>  <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>  <span class="hljs-keyword">private</span> &lt;E&gt; E[] convertToArray(List&lt;E&gt; list) &#123;<br>    E[] array = (E[]) Array.newInstance(method.getReturnType().getComponentType(), list.size());<br>    array = list.toArray(array);<br>    <span class="hljs-keyword">return</span> array;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> &lt;E&gt; Object <span class="hljs-title function_">convertToDeclaredCollection</span><span class="hljs-params">(Configuration config, List&lt;E&gt; list)</span> &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">collection</span> <span class="hljs-operator">=</span> config.getObjectFactory().create(method.getReturnType());<br>    <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaObject</span> <span class="hljs-operator">=</span> config.newMetaObject(collection);<br>    metaObject.addAll(list);<br>    <span class="hljs-keyword">return</span> collection;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> &lt;K, V&gt; Map&lt;K, V&gt; <span class="hljs-title function_">executeForMap</span><span class="hljs-params">(SqlSession sqlSession, Object[] args)</span> &#123;<br>    Map&lt;K, V&gt; result;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> method.convertArgsToSqlCommandParam(args);<br>    <span class="hljs-keyword">if</span> (method.hasRowBounds()) &#123;<br>      <span class="hljs-type">RowBounds</span> <span class="hljs-variable">rowBounds</span> <span class="hljs-operator">=</span> method.extractRowBounds(args);<br>      result = sqlSession.&lt;K, V&gt;selectMap(command.getName(), param, method.getMapKey(), rowBounds);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      result = sqlSession.&lt;K, V&gt;selectMap(command.getName(), param, method.getMapKey());<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>  &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MapperProxy"><a href="#MapperProxy" class="headerlink" title="MapperProxy"></a>MapperProxy</h4><p>    映射器代理，代理模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapperProxy</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span>, Serializable &#123;<br> <br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">6424540398559729838L</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SqlSession sqlSession;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Class&lt;T&gt; mapperInterface;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;Method, MapperMethod&gt; methodCache;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">MapperProxy</span><span class="hljs-params">(SqlSession sqlSession, Class&lt;T&gt; mapperInterface, Map&lt;Method, MapperMethod&gt; methodCache)</span> &#123;<br>    <span class="hljs-built_in">this</span>.sqlSession = sqlSession;<br>    <span class="hljs-built_in">this</span>.mapperInterface = mapperInterface;<br>    <span class="hljs-built_in">this</span>.methodCache = methodCache;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-comment">// 代理以后，所有Mapper的方法调用时，都会调用这个invoke方法</span><br>    <span class="hljs-comment">// 并不是任何一个方法都需要执行调用代理对象进行执行，如果这个方法是Object中通用的方法（toString、hashCode等）无需执行</span><br>    <span class="hljs-keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> method.invoke(<span class="hljs-built_in">this</span>, args);<br>      &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>        <span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(t);<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// 这里优化了，去缓存中找MapperMethod</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">MapperMethod</span> <span class="hljs-variable">mapperMethod</span> <span class="hljs-operator">=</span> cachedMapperMethod(method);<br>    <span class="hljs-comment">// 执行</span><br>    <span class="hljs-keyword">return</span> mapperMethod.execute(sqlSession, args);<br>  &#125; <br><br>  <span class="hljs-comment">// 去缓存中找MapperMethod</span><br>  <span class="hljs-keyword">private</span> MapperMethod <span class="hljs-title function_">cachedMapperMethod</span><span class="hljs-params">(Method method)</span> &#123;<br>    <span class="hljs-type">MapperMethod</span> <span class="hljs-variable">mapperMethod</span> <span class="hljs-operator">=</span> methodCache.get(method);<br>    <span class="hljs-keyword">if</span> (mapperMethod == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 找不到才去new</span><br>      mapperMethod = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapperMethod</span>(mapperInterface, method, sqlSession.getConfiguration());<br>      methodCache.put(method, mapperMethod);<br>    &#125;<br>    <span class="hljs-keyword">return</span> mapperMethod;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MapperProxyFactory"><a href="#MapperProxyFactory" class="headerlink" title="MapperProxyFactory"></a>MapperProxyFactory</h4><p>    映射器代理工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapperProxyFactory</span>&lt;T&gt; &#123; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Class&lt;T&gt; mapperInterface;<br>  <span class="hljs-keyword">private</span> Map&lt;Method, MapperMethod&gt; methodCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;Method, MapperMethod&gt;();<br> <br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">MapperProxyFactory</span><span class="hljs-params">(Class&lt;T&gt; mapperInterface)</span> &#123;<br>    <span class="hljs-built_in">this</span>.mapperInterface = mapperInterface;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Class&lt;T&gt; <span class="hljs-title function_">getMapperInterface</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> mapperInterface;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Map&lt;Method, MapperMethod&gt; <span class="hljs-title function_">getMethodCache</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> methodCache;<br>  &#125; <br><br>  <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>  <span class="hljs-keyword">protected</span> T <span class="hljs-title function_">newInstance</span><span class="hljs-params">(MapperProxy&lt;T&gt; mapperProxy)</span> &#123;<br>    <span class="hljs-comment">// 用JDK自带的动态代理生成映射器</span><br>    <span class="hljs-keyword">return</span> (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; mapperInterface &#125;, mapperProxy);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">newInstance</span><span class="hljs-params">(SqlSession sqlSession)</span> &#123;<br>    <span class="hljs-keyword">final</span> MapperProxy&lt;T&gt; mapperProxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapperProxy</span>&lt;T&gt;(sqlSession, mapperInterface, methodCache);<br>    <span class="hljs-keyword">return</span> newInstance(mapperProxy);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MapperRegistry"><a href="#MapperRegistry" class="headerlink" title="MapperRegistry"></a>MapperRegistry</h4><p>    映射器注册机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapperRegistry</span> &#123; <br><br>  <span class="hljs-keyword">private</span> Configuration config;<br>  <span class="hljs-comment">// 将已经添加的映射都放入HashMap</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;Class&lt;?&gt;, MapperProxyFactory&lt;?&gt;&gt; knownMappers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Class&lt;?&gt;, MapperProxyFactory&lt;?&gt;&gt;();<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">MapperRegistry</span><span class="hljs-params">(Configuration config)</span> &#123;<br>    <span class="hljs-built_in">this</span>.config = config;<br>  &#125; <br><br>  <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>  <span class="hljs-comment">// 返回代理类 </span><br>  <span class="hljs-comment">// 在mybatis中只有Configuration类用到了这个方法</span><br>  <span class="hljs-comment">// 在mybatis-spring中应该会使用这个方法生成Mapper的代理类</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getMapper</span><span class="hljs-params">(Class&lt;T&gt; type, SqlSession sqlSession)</span> &#123;<br>    <span class="hljs-keyword">final</span> MapperProxyFactory&lt;T&gt; mapperProxyFactory = (MapperProxyFactory&lt;T&gt;) knownMappers.get(type);<br>    <span class="hljs-keyword">if</span> (mapperProxyFactory == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindingException</span>(<span class="hljs-string">&quot;Type &quot;</span> + type + <span class="hljs-string">&quot; is not known to the MapperRegistry.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> mapperProxyFactory.newInstance(sqlSession);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindingException</span>(<span class="hljs-string">&quot;Error getting mapper instance. Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasMapper</span><span class="hljs-params">(Class&lt;T&gt; type)</span> &#123;<br>    <span class="hljs-keyword">return</span> knownMappers.containsKey(type);<br>  &#125; <br><br>  <span class="hljs-comment">// 看一下如何添加一个映射</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMapper</span><span class="hljs-params">(Class&lt;T&gt; type)</span> &#123;<br>    <span class="hljs-comment">// mapper必须是接口！才会添加</span><br>    <span class="hljs-keyword">if</span> (type.isInterface()) &#123;<br>      <span class="hljs-keyword">if</span> (hasMapper(type)) &#123;<br>        <span class="hljs-comment">// 如果重复添加了，报错</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindingException</span>(<span class="hljs-string">&quot;Type &quot;</span> + type + <span class="hljs-string">&quot; is already known to the MapperRegistry.&quot;</span>);<br>      &#125;<br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">loadCompleted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>      <span class="hljs-keyword">try</span> &#123;<br>        knownMappers.put(type, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapperProxyFactory</span>&lt;T&gt;(type));<br>        <span class="hljs-comment">// It&#x27;s important that the type is added before the parser is run</span><br>        <span class="hljs-comment">// otherwise the binding may automatically be attempted by the</span><br>        <span class="hljs-comment">// mapper parser. If the type is already known, it won&#x27;t try.</span><br>        <span class="hljs-type">MapperAnnotationBuilder</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapperAnnotationBuilder</span>(config, type);<br>        parser.parse();<br>        loadCompleted = <span class="hljs-literal">true</span>;<br>      &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 如果加载过程中出现异常需要再将这个mapper从mybatis中删除,这种方式比较丑陋吧，难道是不得已而为之？</span><br>        <span class="hljs-keyword">if</span> (!loadCompleted) &#123;<br>          knownMappers.remove(type);<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@since</span> 3.2.2</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> Collection&lt;Class&lt;?&gt;&gt; getMappers() &#123;<br>    <span class="hljs-keyword">return</span> Collections.unmodifiableCollection(knownMappers.keySet());<br>  &#125; <br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@since</span> 3.2.2</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMappers</span><span class="hljs-params">(String packageName, Class&lt;?&gt; superType)</span> &#123;<br>    <span class="hljs-comment">// 查找包下所有是superType的类</span><br>    ResolverUtil&lt;Class&lt;?&gt;&gt; resolverUtil = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResolverUtil</span>&lt;Class&lt;?&gt;&gt;();<br>    resolverUtil.find(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ResolverUtil</span>.IsA(superType), packageName);<br>    Set&lt;Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Class</span>&lt;?&gt;&gt;&gt; mapperSet = resolverUtil.getClasses();<br>    <span class="hljs-keyword">for</span> (Class&lt;?&gt; mapperClass : mapperSet) &#123;<br>      addMapper(mapperClass);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@since</span> 3.2.2</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">//查找包下所有类</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMappers</span><span class="hljs-params">(String packageName)</span> &#123;<br>    addMappers(packageName, Object.class);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>14-builder</title>
    <link href="/2023/08/16/14-builder/"/>
    <url>/2023/08/16/14-builder/</url>
    
    <content type="html"><![CDATA[<h4 id="BaseBuilder"><a href="#BaseBuilder" class="headerlink" title="BaseBuilder"></a>BaseBuilder</h4><p>    构造器的基类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseBuilder</span> &#123; <br><br>  <span class="hljs-comment">// 需要配置，类型别名注册，类型处理器注册3个类</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Configuration configuration; <br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> TypeAliasRegistry typeAliasRegistry;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> TypeHandlerRegistry typeHandlerRegistry; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseBuilder</span><span class="hljs-params">(Configuration configuration)</span> &#123;<br>    <span class="hljs-built_in">this</span>.configuration = configuration;<br>    <span class="hljs-built_in">this</span>.typeAliasRegistry = <span class="hljs-built_in">this</span>.configuration.getTypeAliasRegistry();<br>    <span class="hljs-built_in">this</span>.typeHandlerRegistry = <span class="hljs-built_in">this</span>.configuration.getTypeHandlerRegistry();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Configuration <span class="hljs-title function_">getConfiguration</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> configuration;<br>  &#125; <br><br>  <span class="hljs-comment">// 下面的方法都支持默认值</span><br>  <span class="hljs-keyword">protected</span> Pattern <span class="hljs-title function_">parseExpression</span><span class="hljs-params">(String regex, String defaultValue)</span> &#123;<br>    <span class="hljs-keyword">return</span> Pattern.compile(regex == <span class="hljs-literal">null</span> ? defaultValue : regex);<br>  &#125; <br><br>  <span class="hljs-keyword">protected</span> Boolean <span class="hljs-title function_">booleanValueOf</span><span class="hljs-params">(String value, Boolean defaultValue)</span> &#123;<br>    <span class="hljs-keyword">return</span> value == <span class="hljs-literal">null</span> ? defaultValue : Boolean.valueOf(value);<br>  &#125;<br><br>  <span class="hljs-keyword">protected</span> Integer <span class="hljs-title function_">integerValueOf</span><span class="hljs-params">(String value, Integer defaultValue)</span> &#123;<br>    <span class="hljs-keyword">return</span> value == <span class="hljs-literal">null</span> ? defaultValue : Integer.valueOf(value);<br>  &#125; <br><br>  <span class="hljs-comment">// 把以逗号分割的一个字符串重新包装，返回一个Set</span><br>  <span class="hljs-keyword">protected</span> Set&lt;String&gt; <span class="hljs-title function_">stringSetValueOf</span><span class="hljs-params">(String value, String defaultValue)</span> &#123;<br>    value = (value == <span class="hljs-literal">null</span> ? defaultValue : value);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;String&gt;(Arrays.asList(value.split(<span class="hljs-string">&quot;,&quot;</span>)));<br>  &#125; <br><br>  <span class="hljs-comment">// 解析JdbcType</span><br>  <span class="hljs-keyword">protected</span> JdbcType <span class="hljs-title function_">resolveJdbcType</span><span class="hljs-params">(String alias)</span> &#123;<br>    <span class="hljs-keyword">if</span> (alias == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> JdbcType.valueOf(alias);<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Error resolving JdbcType. Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 解析ResultSetType</span><br>  <span class="hljs-keyword">protected</span> ResultSetType <span class="hljs-title function_">resolveResultSetType</span><span class="hljs-params">(String alias)</span> &#123;<br>    <span class="hljs-keyword">if</span> (alias == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> ResultSetType.valueOf(alias);<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Error resolving ResultSetType. Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 解析ParameterMode(SP的IN/OUT/INOUT)</span><br>  <span class="hljs-keyword">protected</span> ParameterMode <span class="hljs-title function_">resolveParameterMode</span><span class="hljs-params">(String alias)</span> &#123;<br>    <span class="hljs-keyword">if</span> (alias == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> ParameterMode.valueOf(alias);<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Error resolving ParameterMode. Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 根据别名解析Class，然后创建实例</span><br>  <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">createInstance</span><span class="hljs-params">(String alias)</span> &#123;<br>    Class&lt;?&gt; clazz = resolveClass(alias);<br>    <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> resolveClass(alias).newInstance();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Error creating instance. Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 根据别名解析Class,其实是去查看 类型别名注册/事务管理器别名</span><br>  <span class="hljs-keyword">protected</span> Class&lt;?&gt; resolveClass(String alias) &#123;<br>    <span class="hljs-keyword">if</span> (alias == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> resolveAlias(alias);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Error resolving class. Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">protected</span> Class&lt;?&gt; resolveAlias(String alias) &#123;<br>    <span class="hljs-keyword">return</span> typeAliasRegistry.resolveAlias(alias);<br>  &#125; <br><br>  <span class="hljs-comment">// 解析类型处理器</span><br>  <span class="hljs-keyword">protected</span> TypeHandler&lt;?&gt; resolveTypeHandler(Class&lt;?&gt; javaType, String typeHandlerAlias) &#123;<br>    <span class="hljs-keyword">if</span> (typeHandlerAlias == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">// 先取得别名所属的Class</span><br>    Class&lt;?&gt; type = resolveClass(typeHandlerAlias);<br>    <span class="hljs-comment">// 如果不是TypeHandler的子类,报错</span><br>    <span class="hljs-keyword">if</span> (type != <span class="hljs-literal">null</span> &amp;&amp; !TypeHandler.class.isAssignableFrom(type)) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Type &quot;</span> + type.getName() + <span class="hljs-string">&quot; is not a valid TypeHandler because it does not implement TypeHandler interface&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@SuppressWarnings( &quot;unchecked&quot; )</span> <span class="hljs-comment">// already verified it is a TypeHandler</span><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TypeHandler</span>&lt;?&gt;&gt; typeHandlerType = (Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TypeHandler</span>&lt;?&gt;&gt;) type;<br>    <span class="hljs-comment">// 再去调用另一个重载的方法</span><br>    <span class="hljs-keyword">return</span> resolveTypeHandler(javaType, typeHandlerType);<br>  &#125; <br><br>  <span class="hljs-keyword">protected</span> TypeHandler&lt;?&gt; resolveTypeHandler(Class&lt;?&gt; javaType, Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TypeHandler</span>&lt;?&gt;&gt; typeHandlerType) &#123;<br>    <span class="hljs-keyword">if</span> (typeHandlerType == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">// javaType ignored for injected handlers see issue #746 for full detail</span><br>    <span class="hljs-comment">// 去typeHandlerRegistry查询对应的TypeHandler</span><br>    TypeHandler&lt;?&gt; handler = typeHandlerRegistry.getMappingTypeHandler(typeHandlerType);<br>    <span class="hljs-keyword">if</span> (handler == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// not in registry, create a new one</span><br>      <span class="hljs-comment">// 如果没有在Registry找到，调用typeHandlerRegistry.getInstance来new一个TypeHandler返回</span><br>      handler = typeHandlerRegistry.getInstance(javaType, typeHandlerType);<br>    &#125;<br>    <span class="hljs-keyword">return</span> handler;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ParameterExpression"><a href="#ParameterExpression" class="headerlink" title="ParameterExpression"></a>ParameterExpression</h4><p>    参数表达式,继承自HashMap，可以参考ParameterExpressionTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParameterExpression</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt; &#123; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">2417552199605158680L</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">ParameterExpression</span><span class="hljs-params">(String expression)</span> &#123;<br>    parse(expression);<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parse</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-comment">// #&#123;property,javaType=int,jdbcType=NUMERIC&#125;</span><br>    <span class="hljs-comment">// 首先去除空白,返回的p是第一个不是空白的字符位置</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> skipWS(expression, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (expression.charAt(p) == <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>      <span class="hljs-comment">// 处理表达式</span><br>      expression(expression, p + <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 处理属性</span><br>      property(expression, p);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">skipWS</span><span class="hljs-params">(String expression, <span class="hljs-type">int</span> p)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> p; i &lt; expression.length(); i++) &#123;<br>      <span class="hljs-keyword">if</span> (expression.charAt(i) &gt; <span class="hljs-number">0x20</span>) &#123;<br>        <span class="hljs-keyword">return</span> i;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> expression.length();<br>  &#125; <br><br>  <span class="hljs-comment">// 表达式可能是3.2的新功能，可以先不管</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">expression</span><span class="hljs-params">(String expression, <span class="hljs-type">int</span> left)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">match</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> left + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (match &gt; <span class="hljs-number">0</span>) &#123; <br>      <span class="hljs-comment">// 这里主要是为了支持类似 ((xxx)) 有多个圆括号的表达式</span><br>      <span class="hljs-keyword">if</span> (expression.charAt(right) == <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>        match--;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (expression.charAt(right) == <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>        match++;<br>      &#125;<br>      right++;<br>    &#125;<br>    put(<span class="hljs-string">&quot;expression&quot;</span>, expression.substring(left, right - <span class="hljs-number">1</span>));<br>    jdbcTypeOpt(expression, right);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jdbcTypeOpt</span><span class="hljs-params">(String expression, <span class="hljs-type">int</span> p)</span> &#123;<br>    <span class="hljs-comment">// #&#123;property,javaType=int,jdbcType=NUMERIC&#125;</span><br>    <span class="hljs-comment">// property:VARCHAR</span><br>    <span class="hljs-comment">// 首先去除空白,返回的p是第一个不是空白的字符位置</span><br>    p = skipWS(expression, p);<br>    <span class="hljs-keyword">if</span> (p &lt; expression.length()) &#123;<br>      <span class="hljs-comment">// 第一个property解析完有两种情况，逗号和冒号</span><br>      <span class="hljs-keyword">if</span> (expression.charAt(p) == <span class="hljs-string">&#x27;:&#x27;</span>) &#123;<br>        jdbcType(expression, p + <span class="hljs-number">1</span>);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (expression.charAt(p) == <span class="hljs-string">&#x27;,&#x27;</span>) &#123;<br>        option(expression, p + <span class="hljs-number">1</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Parsing error in &#123;&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(expression) + <span class="hljs-string">&quot;&#125; in position &quot;</span> + p);<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jdbcType</span><span class="hljs-params">(String expression, <span class="hljs-type">int</span> p)</span> &#123;<br>    <span class="hljs-comment">// property:VARCHAR</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> skipWS(expression, p);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> skipUntil(expression, left, <span class="hljs-string">&quot;,&quot;</span>);<br>    <span class="hljs-keyword">if</span> (right &gt; left) &#123;<br>      put(<span class="hljs-string">&quot;jdbcType&quot;</span>, trimmedStr(expression, left, right));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Parsing error in &#123;&quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(expression) + <span class="hljs-string">&quot;&#125; in position &quot;</span> + p);<br>    &#125;<br>    option(expression, right + <span class="hljs-number">1</span>);<br>  &#125; <br><br>  <span class="hljs-comment">// 从expression的p处开始找，直到找到一个包含在endChars中的字符，</span><br>  <span class="hljs-comment">// 返回endChars的起始位置</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">skipUntil</span><span class="hljs-params">(String expression, <span class="hljs-type">int</span> p, <span class="hljs-keyword">final</span> String endChars)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> p; i &lt; expression.length(); i++) &#123;<br>      <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> expression.charAt(i);<br>      <span class="hljs-keyword">if</span> (endChars.indexOf(c) &gt; -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> i;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> expression.length();<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> String <span class="hljs-title function_">trimmedStr</span><span class="hljs-params">(String str, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>    <span class="hljs-keyword">while</span> (str.charAt(start) &lt;= <span class="hljs-number">0x20</span>) &#123;<br>      start++;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (str.charAt(end - <span class="hljs-number">1</span>) &lt;= <span class="hljs-number">0x20</span>) &#123;<br>      end--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> start &gt;= end ? <span class="hljs-string">&quot;&quot;</span> : str.substring(start, end);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">option</span><span class="hljs-params">(String expression, <span class="hljs-type">int</span> p)</span> &#123;<br>    <span class="hljs-comment">// #&#123;property,javaType=int,jdbcType=NUMERIC&#125;</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> skipWS(expression, p);<br>    <span class="hljs-keyword">if</span> (left &lt; expression.length()) &#123;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> skipUntil(expression, left, <span class="hljs-string">&quot;=&quot;</span>);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> trimmedStr(expression, left, right);<br>      left = right + <span class="hljs-number">1</span>;<br>      right = skipUntil(expression, left, <span class="hljs-string">&quot;,&quot;</span>);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> trimmedStr(expression, left, right);<br>      put(name, value);<br>      <span class="hljs-comment">// 递归调用option，进行逗号后面一个属性的解析</span><br>      option(expression, right + <span class="hljs-number">1</span>);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 处理属性和处理表达式类似</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">property</span><span class="hljs-params">(String expression, <span class="hljs-type">int</span> left)</span> &#123;<br>    <span class="hljs-comment">// #&#123;property,javaType=int,jdbcType=NUMERIC&#125;</span><br>    <span class="hljs-comment">// property:VARCHAR</span><br>    <span class="hljs-keyword">if</span> (left &lt; expression.length()) &#123;<br>      <span class="hljs-comment">// 首先，得到逗号或者冒号之前的字符串，加入到property</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> skipUntil(expression, left, <span class="hljs-string">&quot;,:&quot;</span>);<br>      put(<span class="hljs-string">&quot;property&quot;</span>, trimmedStr(expression, left, right));<br>      <span class="hljs-comment">// 第二，处理javaType，jdbcType</span><br>      jdbcTypeOpt(expression, right);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="StaticSqlSource"><a href="#StaticSqlSource" class="headerlink" title="StaticSqlSource"></a>StaticSqlSource</h4><p>    没啥好说的，感兴趣的自己看下吧</p><h4 id="MapperBuilderAssistant"><a href="#MapperBuilderAssistant" class="headerlink" title="MapperBuilderAssistant"></a>MapperBuilderAssistant</h4><p>      映射构建器助手，建造者模式,继承BaseBuilder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapperBuilderAssistant</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseBuilder</span> &#123; <br><br>  <span class="hljs-comment">// 每个助手都有1个namespace,resource,cache</span><br>  <span class="hljs-keyword">private</span> String currentNamespace;<br>  <span class="hljs-keyword">private</span> String resource;<br>  <span class="hljs-keyword">private</span> Cache currentCache;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> unresolvedCacheRef; <span class="hljs-comment">// issue #676 </span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">MapperBuilderAssistant</span><span class="hljs-params">(Configuration configuration, String resource)</span> &#123;<br>    <span class="hljs-built_in">super</span>(configuration);<br>    ErrorContext.instance().resource(resource);<br>    <span class="hljs-built_in">this</span>.resource = resource;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCurrentNamespace</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> currentNamespace;<br>  &#125; <br><br>  <span class="hljs-comment">// currentNamespace 只能赋值一次</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCurrentNamespace</span><span class="hljs-params">(String currentNamespace)</span> &#123;<br>    <span class="hljs-keyword">if</span> (currentNamespace == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;The mapper element requires a namespace attribute to be specified.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.currentNamespace != <span class="hljs-literal">null</span> &amp;&amp; !<span class="hljs-built_in">this</span>.currentNamespace.equals(currentNamespace)) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Wrong namespace. Expected &#x27;&quot;</span><br>          + <span class="hljs-built_in">this</span>.currentNamespace + <span class="hljs-string">&quot;&#x27; but found &#x27;&quot;</span> + currentNamespace + <span class="hljs-string">&quot;&#x27;.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">this</span>.currentNamespace = currentNamespace;<br>  &#125; <br><br>  <span class="hljs-comment">// 为id加上namespace前缀，如selectPerson--&gt;org.a.b.selectPerson</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">applyCurrentNamespace</span><span class="hljs-params">(String base, <span class="hljs-type">boolean</span> isReference)</span> &#123;<br>    <span class="hljs-keyword">if</span> (base == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (isReference) &#123;<br>      <span class="hljs-comment">// is it qualified with any namespace yet?</span><br>      <span class="hljs-keyword">if</span> (base.contains(<span class="hljs-string">&quot;.&quot;</span>)) &#123;<br>        <span class="hljs-keyword">return</span> base;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// is it qualified with this namespace yet?</span><br>      <span class="hljs-keyword">if</span> (base.startsWith(currentNamespace + <span class="hljs-string">&quot;.&quot;</span>)) &#123;<br>        <span class="hljs-keyword">return</span> base;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (base.contains(<span class="hljs-string">&quot;.&quot;</span>)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Dots are not allowed in element names, please remove it from &quot;</span> + base);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> currentNamespace + <span class="hljs-string">&quot;.&quot;</span> + base;<br>  &#125; <br><br>  <span class="hljs-comment">// 设置缓存</span><br>  <span class="hljs-keyword">public</span> Cache <span class="hljs-title function_">useCacheRef</span><span class="hljs-params">(String namespace)</span> &#123;<br>    <span class="hljs-keyword">if</span> (namespace == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;cache-ref element requires a namespace attribute.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>      unresolvedCacheRef = <span class="hljs-literal">true</span>;<br>      <span class="hljs-type">Cache</span> <span class="hljs-variable">cache</span> <span class="hljs-operator">=</span> configuration.getCache(namespace);<br>      <span class="hljs-keyword">if</span> (cache == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IncompleteElementException</span>(<span class="hljs-string">&quot;No cache for namespace &#x27;&quot;</span> + namespace + <span class="hljs-string">&quot;&#x27; could be found.&quot;</span>);<br>      &#125;<br>      currentCache = cache;<br>      unresolvedCacheRef = <span class="hljs-literal">false</span>;<br>      <span class="hljs-keyword">return</span> cache;<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IncompleteElementException</span>(<span class="hljs-string">&quot;No cache for namespace &#x27;&quot;</span> + namespace + <span class="hljs-string">&quot;&#x27; could be found.&quot;</span>, e);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 通过传入的参数构建并设置缓存</span><br>  <span class="hljs-keyword">public</span> Cache <span class="hljs-title function_">useNewCache</span><span class="hljs-params">(Class&lt;? extends Cache&gt; typeClass,</span><br><span class="hljs-params">      Class&lt;? extends Cache&gt; evictionClass,</span><br><span class="hljs-params">      Long flushInterval,</span><br><span class="hljs-params">      Integer size,</span><br><span class="hljs-params">      <span class="hljs-type">boolean</span> readWrite,</span><br><span class="hljs-params">      <span class="hljs-type">boolean</span> blocking,</span><br><span class="hljs-params">      Properties props)</span> &#123;<br>    <span class="hljs-comment">// 这里面又判断了一下是否为null就用默认值，有点和XMLMapperBuilder.cacheElement逻辑重复了</span><br>    typeClass = valueOrDefault(typeClass, PerpetualCache.class);<br>    evictionClass = valueOrDefault(evictionClass, LruCache.class);<br>    <span class="hljs-comment">// 调用CacheBuilder构建cache,id=currentNamespace</span><br>    <span class="hljs-type">Cache</span> <span class="hljs-variable">cache</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheBuilder</span>(currentNamespace)<br>        .implementation(typeClass)<br>        .addDecorator(evictionClass)<br>        .clearInterval(flushInterval)<br>        .size(size)<br>        .readWrite(readWrite)<br>        .blocking(blocking)<br>        .properties(props)<br>        .build();<br>    <span class="hljs-comment">// 加入缓存</span><br>    configuration.addCache(cache);<br>    <span class="hljs-comment">// 当前的缓存</span><br>    currentCache = cache;<br>    <span class="hljs-keyword">return</span> cache;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> &lt;T&gt; T <span class="hljs-title function_">valueOrDefault</span><span class="hljs-params">(T value, T defaultValue)</span> &#123;<br>    <span class="hljs-keyword">return</span> value == <span class="hljs-literal">null</span> ? defaultValue : value;<br>  &#125; <br><br>  <span class="hljs-comment">// 往configuration 中添加 ParameterMap </span><br>  <span class="hljs-keyword">public</span> ParameterMap <span class="hljs-title function_">addParameterMap</span><span class="hljs-params">(String id, Class&lt;?&gt; parameterClass, List&lt;ParameterMapping&gt; parameterMappings)</span> &#123;<br>    id = applyCurrentNamespace(id, <span class="hljs-literal">false</span>);<br>    ParameterMap.<span class="hljs-type">Builder</span> <span class="hljs-variable">parameterMapBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParameterMap</span>.Builder(configuration, id, parameterClass, parameterMappings);<br>    <span class="hljs-type">ParameterMap</span> <span class="hljs-variable">parameterMap</span> <span class="hljs-operator">=</span> parameterMapBuilder.build();<br>    configuration.addParameterMap(parameterMap);<br>    <span class="hljs-keyword">return</span> parameterMap;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> ParameterMapping <span class="hljs-title function_">buildParameterMapping</span><span class="hljs-params">(</span><br><span class="hljs-params">      Class&lt;?&gt; parameterType,</span><br><span class="hljs-params">      String property,</span><br><span class="hljs-params">      Class&lt;?&gt; javaType,</span><br><span class="hljs-params">      JdbcType jdbcType,</span><br><span class="hljs-params">      String resultMap,</span><br><span class="hljs-params">      ParameterMode parameterMode,</span><br><span class="hljs-params">      Class&lt;? extends TypeHandler&lt;?&gt;&gt; typeHandler,</span><br><span class="hljs-params">      Integer numericScale)</span> &#123;<br>    resultMap = applyCurrentNamespace(resultMap, <span class="hljs-literal">true</span>);<br><br>    <span class="hljs-comment">// Class parameterType = parameterMapBuilder.type();</span><br>    Class&lt;?&gt; javaTypeClass = resolveParameterJavaType(parameterType, property, javaType, jdbcType);<br>    TypeHandler&lt;?&gt; typeHandlerInstance = resolveTypeHandler(javaTypeClass, typeHandler);<br><br>    ParameterMapping.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParameterMapping</span>.Builder(configuration, property, javaTypeClass);<br>    builder.jdbcType(jdbcType);<br>    builder.resultMapId(resultMap);<br>    builder.mode(parameterMode);<br>    builder.numericScale(numericScale);<br>    builder.typeHandler(typeHandlerInstance);<br>    <span class="hljs-keyword">return</span> builder.build();<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Class&lt;?&gt; resolveParameterJavaType(Class&lt;?&gt; resultType, String property, Class&lt;?&gt; javaType, JdbcType jdbcType) &#123;<br>    <span class="hljs-keyword">if</span> (javaType == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">if</span> (JdbcType.CURSOR.equals(jdbcType)) &#123;<br>        javaType = java.sql.ResultSet.class;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Map.class.isAssignableFrom(resultType)) &#123;<br>        javaType = Object.class;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">MetaClass</span> <span class="hljs-variable">metaResultType</span> <span class="hljs-operator">=</span> MetaClass.forClass(resultType);<br>        javaType = metaResultType.getGetterType(property);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (javaType == <span class="hljs-literal">null</span>) &#123;<br>      javaType = Object.class;<br>    &#125;<br>    <span class="hljs-keyword">return</span> javaType;<br>  &#125; <br><br>  <span class="hljs-keyword">protected</span> TypeHandler&lt;?&gt; resolveTypeHandler(Class&lt;?&gt; javaType, Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TypeHandler</span>&lt;?&gt;&gt; typeHandlerType) &#123;<br>    <span class="hljs-keyword">if</span> (typeHandlerType == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">// javaType ignored for injected handlers see issue #746 for full detail</span><br>    <span class="hljs-comment">// 去typeHandlerRegistry查询对应的TypeHandler</span><br>    TypeHandler&lt;?&gt; handler = typeHandlerRegistry.getMappingTypeHandler(typeHandlerType);<br>    <span class="hljs-keyword">if</span> (handler == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// not in registry, create a new one</span><br>      <span class="hljs-comment">// 如果没有在Registry找到，调用typeHandlerRegistry.getInstance来new一个TypeHandler返回</span><br>      handler = typeHandlerRegistry.getInstance(javaType, typeHandlerType);<br>    &#125;<br>    <span class="hljs-keyword">return</span> handler;<br>  &#125; <br><br>  <span class="hljs-comment">// 增加ResultMap</span><br>  <span class="hljs-keyword">public</span> ResultMap <span class="hljs-title function_">addResultMap</span><span class="hljs-params">(</span><br><span class="hljs-params">      String id,</span><br><span class="hljs-params">      Class&lt;?&gt; type,</span><br><span class="hljs-params">      String extend,</span><br><span class="hljs-params">      Discriminator discriminator,</span><br><span class="hljs-params">      List&lt;ResultMapping&gt; resultMappings,</span><br><span class="hljs-params">      Boolean autoMapping)</span> &#123;<br>    id = applyCurrentNamespace(id, <span class="hljs-literal">false</span>);<br>    extend = applyCurrentNamespace(extend, <span class="hljs-literal">true</span>);<br><br>    <span class="hljs-comment">// 建造者模式</span><br>    ResultMap.<span class="hljs-type">Builder</span> <span class="hljs-variable">resultMapBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultMap</span>.Builder(configuration, id, type, resultMappings, autoMapping);<br>    <span class="hljs-keyword">if</span> (extend != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">if</span> (!configuration.hasResultMap(extend)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IncompleteElementException</span>(<span class="hljs-string">&quot;Could not find a parent resultmap with id &#x27;&quot;</span> + extend + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>      &#125;<br>      <span class="hljs-type">ResultMap</span> <span class="hljs-variable">resultMap</span> <span class="hljs-operator">=</span> configuration.getResultMap(extend);<br>      List&lt;ResultMapping&gt; extendedResultMappings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ResultMapping&gt;(resultMap.getResultMappings());<br>      extendedResultMappings.removeAll(resultMappings);<br>      <span class="hljs-comment">// Remove parent constructor if this resultMap declares a constructor.</span><br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">declaresConstructor</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>      <span class="hljs-keyword">for</span> (ResultMapping resultMapping : resultMappings) &#123;<br>        <span class="hljs-keyword">if</span> (resultMapping.getFlags().contains(ResultFlag.CONSTRUCTOR)) &#123;<br>          declaresConstructor = <span class="hljs-literal">true</span>;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (declaresConstructor) &#123;<br>        Iterator&lt;ResultMapping&gt; extendedResultMappingsIter = extendedResultMappings.iterator();<br>        <span class="hljs-keyword">while</span> (extendedResultMappingsIter.hasNext()) &#123;<br>          <span class="hljs-keyword">if</span> (extendedResultMappingsIter.next().getFlags().contains(ResultFlag.CONSTRUCTOR)) &#123;<br>            extendedResultMappingsIter.remove();<br>          &#125;<br>        &#125;<br>      &#125;<br>      resultMappings.addAll(extendedResultMappings);<br>    &#125;<br>    resultMapBuilder.discriminator(discriminator);<br>    <span class="hljs-type">ResultMap</span> <span class="hljs-variable">resultMap</span> <span class="hljs-operator">=</span> resultMapBuilder.build();<br>    configuration.addResultMap(resultMap);<br>    <span class="hljs-keyword">return</span> resultMap;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Discriminator <span class="hljs-title function_">buildDiscriminator</span><span class="hljs-params">(</span><br><span class="hljs-params">      Class&lt;?&gt; resultType,</span><br><span class="hljs-params">      String column,</span><br><span class="hljs-params">      Class&lt;?&gt; javaType,</span><br><span class="hljs-params">      JdbcType jdbcType,</span><br><span class="hljs-params">      Class&lt;? extends TypeHandler&lt;?&gt;&gt; typeHandler,</span><br><span class="hljs-params">      Map&lt;String, String&gt; discriminatorMap)</span> &#123;<br>    <span class="hljs-type">ResultMapping</span> <span class="hljs-variable">resultMapping</span> <span class="hljs-operator">=</span> buildResultMapping(<br>        resultType,<br>        <span class="hljs-literal">null</span>,<br>        column,<br>        javaType,<br>        jdbcType,<br>        <span class="hljs-literal">null</span>,<br>        <span class="hljs-literal">null</span>,<br>        <span class="hljs-literal">null</span>,<br>        <span class="hljs-literal">null</span>,<br>        typeHandler,<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ResultFlag&gt;(),<br>        <span class="hljs-literal">null</span>,<br>        <span class="hljs-literal">null</span>,<br>        <span class="hljs-literal">false</span>);<br>    Map&lt;String, String&gt; namespaceDiscriminatorMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;();<br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; e : discriminatorMap.entrySet()) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">resultMap</span> <span class="hljs-operator">=</span> e.getValue();<br>      resultMap = applyCurrentNamespace(resultMap, <span class="hljs-literal">true</span>);<br>      namespaceDiscriminatorMap.put(e.getKey(), resultMap);<br>    &#125;<br>    Discriminator.<span class="hljs-type">Builder</span> <span class="hljs-variable">discriminatorBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Discriminator</span>.Builder(configuration, resultMapping, namespaceDiscriminatorMap);<br>    <span class="hljs-keyword">return</span> discriminatorBuilder.build();<br>  &#125; <br><br>  <span class="hljs-comment">// 增加映射语句</span><br>  <span class="hljs-keyword">public</span> MappedStatement <span class="hljs-title function_">addMappedStatement</span><span class="hljs-params">(</span><br><span class="hljs-params">      String id,</span><br><span class="hljs-params">      SqlSource sqlSource,</span><br><span class="hljs-params">      StatementType statementType,</span><br><span class="hljs-params">      SqlCommandType sqlCommandType,</span><br><span class="hljs-params">      Integer fetchSize,</span><br><span class="hljs-params">      Integer timeout,</span><br><span class="hljs-params">      String parameterMap,</span><br><span class="hljs-params">      Class&lt;?&gt; parameterType,</span><br><span class="hljs-params">      String resultMap,</span><br><span class="hljs-params">      Class&lt;?&gt; resultType,</span><br><span class="hljs-params">      ResultSetType resultSetType,</span><br><span class="hljs-params">      <span class="hljs-type">boolean</span> flushCache,</span><br><span class="hljs-params">      <span class="hljs-type">boolean</span> useCache,</span><br><span class="hljs-params">      <span class="hljs-type">boolean</span> resultOrdered,</span><br><span class="hljs-params">      KeyGenerator keyGenerator,</span><br><span class="hljs-params">      String keyProperty,</span><br><span class="hljs-params">      String keyColumn,</span><br><span class="hljs-params">      String databaseId,</span><br><span class="hljs-params">      LanguageDriver lang,</span><br><span class="hljs-params">      String resultSets)</span> &#123;<br><br>    <span class="hljs-keyword">if</span> (unresolvedCacheRef) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IncompleteElementException</span>(<span class="hljs-string">&quot;Cache-ref not yet resolved&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 为id加上namespace前缀</span><br>    id = applyCurrentNamespace(id, <span class="hljs-literal">false</span>);<br>    <span class="hljs-comment">// 是否是select语句</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isSelect</span> <span class="hljs-operator">=</span> sqlCommandType == SqlCommandType.SELECT;<br><br>    <span class="hljs-comment">// 又是建造者模式</span><br>    MappedStatement.<span class="hljs-type">Builder</span> <span class="hljs-variable">statementBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MappedStatement</span>.Builder(configuration, id, sqlSource, sqlCommandType);<br>    statementBuilder.resource(resource);<br>    statementBuilder.fetchSize(fetchSize);<br>    statementBuilder.statementType(statementType);<br>    statementBuilder.keyGenerator(keyGenerator);<br>    statementBuilder.keyProperty(keyProperty);<br>    statementBuilder.keyColumn(keyColumn);<br>    statementBuilder.databaseId(databaseId);<br>    statementBuilder.lang(lang);<br>    statementBuilder.resultOrdered(resultOrdered);<br>    statementBuilder.resulSets(resultSets);<br>    setStatementTimeout(timeout, statementBuilder);<br><br>    <span class="hljs-comment">// 1.参数映射</span><br>    setStatementParameterMap(parameterMap, parameterType, statementBuilder);<br>    <span class="hljs-comment">// 2.结果映射</span><br>    setStatementResultMap(resultMap, resultType, resultSetType, statementBuilder);<br>    setStatementCache(isSelect, flushCache, useCache, currentCache, statementBuilder);<br><br>    <span class="hljs-type">MappedStatement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> statementBuilder.build();<br>    <span class="hljs-comment">// 建造好调用configuration.addMappedStatement</span><br>    configuration.addMappedStatement(statement);<br>    <span class="hljs-keyword">return</span> statement;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStatementTimeout</span><span class="hljs-params">(Integer timeout, MappedStatement.Builder statementBuilder)</span> &#123;<br>    <span class="hljs-keyword">if</span> (timeout == <span class="hljs-literal">null</span>) &#123;<br>      timeout = configuration.getDefaultStatementTimeout();<br>    &#125;<br>    statementBuilder.timeout(timeout);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStatementParameterMap</span><span class="hljs-params">(</span><br><span class="hljs-params">      String parameterMap,</span><br><span class="hljs-params">      Class&lt;?&gt; parameterTypeClass,</span><br><span class="hljs-params">      MappedStatement.Builder statementBuilder)</span> &#123;<br>    parameterMap = applyCurrentNamespace(parameterMap, <span class="hljs-literal">true</span>);<br><br>    <span class="hljs-keyword">if</span> (parameterMap != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        statementBuilder.parameterMap(configuration.getParameterMap(parameterMap));<br>      &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IncompleteElementException</span>(<span class="hljs-string">&quot;Could not find parameter map &quot;</span> + parameterMap, e);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (parameterTypeClass != <span class="hljs-literal">null</span>) &#123;<br>      List&lt;ParameterMapping&gt; parameterMappings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ParameterMapping&gt;();<br>      ParameterMap.<span class="hljs-type">Builder</span> <span class="hljs-variable">inlineParameterMapBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParameterMap</span>.Builder(<br>          configuration,<br>          statementBuilder.id() + <span class="hljs-string">&quot;-Inline&quot;</span>,<br>          parameterTypeClass,<br>          parameterMappings);<br>      statementBuilder.parameterMap(inlineParameterMapBuilder.build());<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 2.result map</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStatementResultMap</span><span class="hljs-params">(</span><br><span class="hljs-params">      String resultMap,</span><br><span class="hljs-params">      Class&lt;?&gt; resultType,</span><br><span class="hljs-params">      ResultSetType resultSetType,</span><br><span class="hljs-params">      MappedStatement.Builder statementBuilder)</span> &#123;<br>    resultMap = applyCurrentNamespace(resultMap, <span class="hljs-literal">true</span>);<br><br>    List&lt;ResultMap&gt; resultMaps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ResultMap&gt;();<br>    <span class="hljs-keyword">if</span> (resultMap != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 2.1 resultMap是高级功能</span><br>      String[] resultMapNames = resultMap.split(<span class="hljs-string">&quot;,&quot;</span>);<br>      <span class="hljs-keyword">for</span> (String resultMapName : resultMapNames) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          resultMaps.add(configuration.getResultMap(resultMapName.trim()));<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException e) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IncompleteElementException</span>(<span class="hljs-string">&quot;Could not find result map &quot;</span> + resultMapName, e);<br>        &#125;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (resultType != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 2.2 resultType,一般用这个足矣了</span><br>      <span class="hljs-comment">// &lt;select id=&quot;selectUsers&quot; resultType=&quot;User&quot;&gt;</span><br>      <span class="hljs-comment">// 这种情况下,MyBatis 会在幕后自动创建一个 ResultMap,基于属性名来映射列到 JavaBean 的属性上。</span><br>      <span class="hljs-comment">// 如果列名没有精确匹配,你可以在列名上使用 select 字句的别名来匹配标签。</span><br>      <span class="hljs-comment">// 创建一个inline result map, 把resultType设上就OK了，</span><br>      <span class="hljs-comment">// 然后后面被DefaultResultSetHandler.createResultObject()使用</span><br>      <span class="hljs-comment">// DefaultResultSetHandler.getRowValue()使用</span><br>      ResultMap.<span class="hljs-type">Builder</span> <span class="hljs-variable">inlineResultMapBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultMap</span>.Builder(<br>          configuration,<br>          statementBuilder.id() + <span class="hljs-string">&quot;-Inline&quot;</span>,<br>          resultType,<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ResultMapping&gt;(),<br>          <span class="hljs-literal">null</span>);<br>      resultMaps.add(inlineResultMapBuilder.build());<br>    &#125;<br>    statementBuilder.resultMaps(resultMaps);<br><br>    statementBuilder.resultSetType(resultSetType);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStatementCache</span><span class="hljs-params">(</span><br><span class="hljs-params">      <span class="hljs-type">boolean</span> isSelect,</span><br><span class="hljs-params">      <span class="hljs-type">boolean</span> flushCache,</span><br><span class="hljs-params">      <span class="hljs-type">boolean</span> useCache,</span><br><span class="hljs-params">      Cache cache,</span><br><span class="hljs-params">      MappedStatement.Builder statementBuilder)</span> &#123;<br>    flushCache = valueOrDefault(flushCache, !isSelect);<br>    useCache = valueOrDefault(useCache, isSelect);<br>    statementBuilder.flushCacheRequired(flushCache);<br>    statementBuilder.useCache(useCache);<br>    statementBuilder.cache(cache);<br>  &#125; <br><br>  <span class="hljs-comment">// 构建result mapping</span><br>  <span class="hljs-keyword">public</span> ResultMapping <span class="hljs-title function_">buildResultMapping</span><span class="hljs-params">(</span><br><span class="hljs-params">      Class&lt;?&gt; resultType,</span><br><span class="hljs-params">      String property,</span><br><span class="hljs-params">      String column,</span><br><span class="hljs-params">      Class&lt;?&gt; javaType,</span><br><span class="hljs-params">      JdbcType jdbcType,</span><br><span class="hljs-params">      String nestedSelect,</span><br><span class="hljs-params">      String nestedResultMap,</span><br><span class="hljs-params">      String notNullColumn,</span><br><span class="hljs-params">      String columnPrefix,</span><br><span class="hljs-params">      Class&lt;? extends TypeHandler&lt;?&gt;&gt; typeHandler,</span><br><span class="hljs-params">      List&lt;ResultFlag&gt; flags,</span><br><span class="hljs-params">      String resultSet,</span><br><span class="hljs-params">      String foreignColumn, </span><br><span class="hljs-params">      <span class="hljs-type">boolean</span> lazy)</span> &#123;<br>    Class&lt;?&gt; javaTypeClass = resolveResultJavaType(resultType, property, javaType);<br>    TypeHandler&lt;?&gt; typeHandlerInstance = resolveTypeHandler(javaTypeClass, typeHandler);<br>    <span class="hljs-comment">// 解析复合的列名,一般用不到，返回的是空</span><br>    List&lt;ResultMapping&gt; composites = parseCompositeColumnName(column);<br>    <span class="hljs-keyword">if</span> (composites.size() &gt; <span class="hljs-number">0</span>) &#123;<br>      column = <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">// 构建result mapping</span><br>    ResultMapping.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultMapping</span>.Builder(configuration, property, column, javaTypeClass);<br>    builder.jdbcType(jdbcType);<br>    builder.nestedQueryId(applyCurrentNamespace(nestedSelect, <span class="hljs-literal">true</span>));<br>    builder.nestedResultMapId(applyCurrentNamespace(nestedResultMap, <span class="hljs-literal">true</span>));<br>    builder.resultSet(resultSet);<br>    builder.typeHandler(typeHandlerInstance);<br>    builder.flags(flags == <span class="hljs-literal">null</span> ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ResultFlag&gt;() : flags);<br>    builder.composites(composites);<br>    builder.notNullColumns(parseMultipleColumnNames(notNullColumn));<br>    builder.columnPrefix(columnPrefix);<br>    builder.foreignColumn(foreignColumn);<br>    builder.lazy(lazy);<br>    <span class="hljs-keyword">return</span> builder.build();<br>  &#125; <br><br>  <span class="hljs-comment">// 解析复合列名，即列名由多个组成，可以先忽略</span><br>  <span class="hljs-keyword">private</span> List&lt;ResultMapping&gt; <span class="hljs-title function_">parseCompositeColumnName</span><span class="hljs-params">(String columnName)</span> &#123;<br>    List&lt;ResultMapping&gt; composites = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ResultMapping&gt;();<br>    <span class="hljs-keyword">if</span> (columnName != <span class="hljs-literal">null</span> &amp;&amp; (columnName.indexOf(<span class="hljs-string">&#x27;=&#x27;</span>) &gt; -<span class="hljs-number">1</span> || columnName.indexOf(<span class="hljs-string">&#x27;,&#x27;</span>) &gt; -<span class="hljs-number">1</span>)) &#123;<br>      <span class="hljs-type">StringTokenizer</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTokenizer</span>(columnName, <span class="hljs-string">&quot;&#123;&#125;=, &quot;</span>, <span class="hljs-literal">false</span>);<br>      <span class="hljs-keyword">while</span> (parser.hasMoreTokens()) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">property</span> <span class="hljs-operator">=</span> parser.nextToken();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">column</span> <span class="hljs-operator">=</span> parser.nextToken();<br>        ResultMapping.<span class="hljs-type">Builder</span> <span class="hljs-variable">complexBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultMapping</span>.Builder(configuration, property, column, configuration.getTypeHandlerRegistry().getUnknownTypeHandler());<br>        composites.add(complexBuilder.build());<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> composites;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Set&lt;String&gt; <span class="hljs-title function_">parseMultipleColumnNames</span><span class="hljs-params">(String columnName)</span> &#123;<br>    Set&lt;String&gt; columns = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;String&gt;();<br>    <span class="hljs-keyword">if</span> (columnName != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">if</span> (columnName.indexOf(<span class="hljs-string">&#x27;,&#x27;</span>) &gt; -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-type">StringTokenizer</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTokenizer</span>(columnName, <span class="hljs-string">&quot;&#123;&#125;, &quot;</span>, <span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">while</span> (parser.hasMoreTokens()) &#123;<br>          <span class="hljs-type">String</span> <span class="hljs-variable">column</span> <span class="hljs-operator">=</span> parser.nextToken();<br>          columns.add(column);<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        columns.add(columnName);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> columns;<br>  &#125; <br><br>  <span class="hljs-comment">/** Backward compatibility signature */</span><br>  <span class="hljs-comment">// 向后兼容方法</span><br>  <span class="hljs-keyword">public</span> ResultMapping <span class="hljs-title function_">buildResultMapping</span><span class="hljs-params">(</span><br><span class="hljs-params">      Class&lt;?&gt; resultType,</span><br><span class="hljs-params">      String property,</span><br><span class="hljs-params">      String column,</span><br><span class="hljs-params">      Class&lt;?&gt; javaType,</span><br><span class="hljs-params">      JdbcType jdbcType,</span><br><span class="hljs-params">      String nestedSelect,</span><br><span class="hljs-params">      String nestedResultMap,</span><br><span class="hljs-params">      String notNullColumn,</span><br><span class="hljs-params">      String columnPrefix,</span><br><span class="hljs-params">      Class&lt;? extends TypeHandler&lt;?&gt;&gt; typeHandler,</span><br><span class="hljs-params">      List&lt;ResultFlag&gt; flags)</span> &#123;<br>      <span class="hljs-keyword">return</span> buildResultMapping(<br>        resultType, property, column, javaType, jdbcType, nestedSelect, <br>        nestedResultMap, notNullColumn, columnPrefix, typeHandler, flags, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, configuration.isLazyLoadingEnabled());<br>  &#125;   <br><br>  <span class="hljs-comment">// 取得语言驱动</span><br>  <span class="hljs-keyword">public</span> LanguageDriver <span class="hljs-title function_">getLanguageDriver</span><span class="hljs-params">(Class&lt;?&gt; langClass)</span> &#123;<br>    <span class="hljs-keyword">if</span> (langClass != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 注册语言驱动</span><br>      configuration.getLanguageRegistry().register(langClass);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 如果为null，则取得默认驱动（mybatis3.2以前大家一直用的方法）</span><br>      langClass = configuration.getLanguageRegistry().getDefaultDriverClass();<br>    &#125;<br>    <span class="hljs-comment">// 再去调configuration</span><br>    <span class="hljs-keyword">return</span> configuration.getLanguageRegistry().getDriver(langClass);<br>  &#125; <br><br>  <span class="hljs-comment">/** Backward compatibility signature */</span><br>  <span class="hljs-comment">// 向后兼容方法</span><br>  <span class="hljs-keyword">public</span> MappedStatement <span class="hljs-title function_">addMappedStatement</span><span class="hljs-params">(</span><br><span class="hljs-params">    String id,</span><br><span class="hljs-params">    SqlSource sqlSource,</span><br><span class="hljs-params">    StatementType statementType,</span><br><span class="hljs-params">    SqlCommandType sqlCommandType,</span><br><span class="hljs-params">    Integer fetchSize,</span><br><span class="hljs-params">    Integer timeout,</span><br><span class="hljs-params">    String parameterMap,</span><br><span class="hljs-params">    Class&lt;?&gt; parameterType,</span><br><span class="hljs-params">    String resultMap,</span><br><span class="hljs-params">    Class&lt;?&gt; resultType,</span><br><span class="hljs-params">    ResultSetType resultSetType,</span><br><span class="hljs-params">    <span class="hljs-type">boolean</span> flushCache,</span><br><span class="hljs-params">    <span class="hljs-type">boolean</span> useCache,</span><br><span class="hljs-params">    <span class="hljs-type">boolean</span> resultOrdered,</span><br><span class="hljs-params">    KeyGenerator keyGenerator,</span><br><span class="hljs-params">    String keyProperty,</span><br><span class="hljs-params">    String keyColumn,</span><br><span class="hljs-params">    String databaseId,</span><br><span class="hljs-params">    LanguageDriver lang)</span> &#123;<br>    <span class="hljs-keyword">return</span> addMappedStatement(<br>      id, sqlSource, statementType, sqlCommandType, fetchSize, timeout, <br>      parameterMap, parameterType, resultMap, resultType, resultSetType, <br>      flushCache, useCache, resultOrdered, keyGenerator, keyProperty, <br>      keyColumn, databaseId, lang, <span class="hljs-literal">null</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="CacheRefResolver"><a href="#CacheRefResolver" class="headerlink" title="CacheRefResolver"></a>CacheRefResolver</h4><p>    缓存引用解析器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheRefResolver</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> MapperBuilderAssistant assistant;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String cacheRefNamespace;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">CacheRefResolver</span><span class="hljs-params">(MapperBuilderAssistant assistant, String cacheRefNamespace)</span> &#123;<br>    <span class="hljs-built_in">this</span>.assistant = assistant;<br>    <span class="hljs-built_in">this</span>.cacheRefNamespace = cacheRefNamespace;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Cache <span class="hljs-title function_">resolveCacheRef</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 反调MapperBuilderAssistant解析</span><br>    <span class="hljs-keyword">return</span> assistant.useCacheRef(cacheRefNamespace);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ResultMapResolver"><a href="#ResultMapResolver" class="headerlink" title="ResultMapResolver"></a>ResultMapResolver</h4><p>      结果映射解析器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultMapResolver</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> MapperBuilderAssistant assistant;<br>  <span class="hljs-keyword">private</span> String id;<br>  <span class="hljs-keyword">private</span> Class&lt;?&gt; type;<br>  <span class="hljs-keyword">private</span> String extend;<br>  <span class="hljs-keyword">private</span> Discriminator discriminator;<br>  <span class="hljs-keyword">private</span> List&lt;ResultMapping&gt; resultMappings;<br>  <span class="hljs-keyword">private</span> Boolean autoMapping;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">ResultMapResolver</span><span class="hljs-params">(MapperBuilderAssistant assistant, String id, Class&lt;?&gt; type, String extend, Discriminator discriminator, List&lt;ResultMapping&gt; resultMappings, Boolean autoMapping)</span> &#123;<br>    <span class="hljs-built_in">this</span>.assistant = assistant;<br>    <span class="hljs-built_in">this</span>.id = id;<br>    <span class="hljs-built_in">this</span>.type = type;<br>    <span class="hljs-built_in">this</span>.extend = extend;<br>    <span class="hljs-built_in">this</span>.discriminator = discriminator;<br>    <span class="hljs-built_in">this</span>.resultMappings = resultMappings;<br>    <span class="hljs-built_in">this</span>.autoMapping = autoMapping;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> ResultMap <span class="hljs-title function_">resolve</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 解析又去调用MapperBuilderAssistant.addResultMap</span><br>    <span class="hljs-keyword">return</span> assistant.addResultMap(<span class="hljs-built_in">this</span>.id, <span class="hljs-built_in">this</span>.type, <span class="hljs-built_in">this</span>.extend, <span class="hljs-built_in">this</span>.discriminator, <span class="hljs-built_in">this</span>.resultMappings, <span class="hljs-built_in">this</span>.autoMapping);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="XMLIncludeTransformer"><a href="#XMLIncludeTransformer" class="headerlink" title="XMLIncludeTransformer"></a>XMLIncludeTransformer</h4><p>    XML include 转换器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XMLIncludeTransformer</span> &#123; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Configuration configuration;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> MapperBuilderAssistant builderAssistant; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XMLIncludeTransformer</span><span class="hljs-params">(Configuration configuration, MapperBuilderAssistant builderAssistant)</span> &#123;<br>    <span class="hljs-built_in">this</span>.configuration = configuration;<br>    <span class="hljs-built_in">this</span>.builderAssistant = builderAssistant;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">applyIncludes</span><span class="hljs-params">(Node source)</span> &#123;<br>    <span class="hljs-keyword">if</span> (source.getNodeName().equals(<span class="hljs-string">&quot;include&quot;</span>)) &#123;<br>      <span class="hljs-comment">// 走到这里，单独解析&lt;include refid=&quot;userColumns&quot;/&gt;</span><br>      <span class="hljs-comment">// 拿到SQL片段</span><br>      <span class="hljs-type">Node</span> <span class="hljs-variable">toInclude</span> <span class="hljs-operator">=</span> findSqlFragment(getStringAttribute(source, <span class="hljs-string">&quot;refid&quot;</span>));<br>      <span class="hljs-comment">// 递归调用--处理toInclude Node里的 include 标签</span><br>      applyIncludes(toInclude);<br>      <span class="hljs-comment">// 如果要导入的sql片段toInclude Node和source Node不属于同一个Document，</span><br>      <span class="hljs-comment">// 需要将toInclude Node导入到source Node所在的Document中</span><br>      <span class="hljs-keyword">if</span> (toInclude.getOwnerDocument() != source.getOwnerDocument()) &#123;<br>        toInclude = source.getOwnerDocument().importNode(toInclude, <span class="hljs-literal">true</span>);<br>      &#125; <br>      <span class="hljs-comment">// 将source Node替换成toInclude Node</span><br>      source.getParentNode().replaceChild(toInclude, source);<br>      <span class="hljs-comment">// 将toInclude Node的孩子节点放到toInclude Node之前</span><br>      <span class="hljs-comment">// 文本内容也是 childNode</span><br>      <span class="hljs-keyword">while</span> (toInclude.hasChildNodes()) &#123;<br>        toInclude.getParentNode().insertBefore(toInclude.getFirstChild(), toInclude);<br>      &#125; <br>      <span class="hljs-comment">// 删除toInclude Node</span><br>      toInclude.getParentNode().removeChild(toInclude);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (source.getNodeType() == Node.ELEMENT_NODE) &#123;<br>      <span class="hljs-comment">// 一开始会走这段，取得所有儿子</span><br>      <span class="hljs-type">NodeList</span> <span class="hljs-variable">children</span> <span class="hljs-operator">=</span> source.getChildNodes();<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;children.getLength(); i++) &#123;<br>        <span class="hljs-comment">// 递归调用自己</span><br>        applyIncludes(children.item(i));<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">findSqlFragment</span><span class="hljs-params">(String refid)</span> &#123;<br>    refid = PropertyParser.parse(refid, configuration.getVariables());<br>    refid = builderAssistant.applyCurrentNamespace(refid, <span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 去之前存到内存map的SQL片段中寻找</span><br>      <span class="hljs-type">XNode</span> <span class="hljs-variable">nodeToInclude</span> <span class="hljs-operator">=</span> configuration.getSqlFragments().get(refid);<br>      <span class="hljs-comment">// clone一下，以防改写？</span><br>      <span class="hljs-keyword">return</span> nodeToInclude.getNode().cloneNode(<span class="hljs-literal">true</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IncompleteElementException</span>(<span class="hljs-string">&quot;Could not find SQL statement to include with refid &#x27;&quot;</span> + refid + <span class="hljs-string">&quot;&#x27;&quot;</span>, e);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getStringAttribute</span><span class="hljs-params">(Node node, String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> node.getAttributes().getNamedItem(name).getNodeValue();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="XMLMapperEntityResolver"><a href="#XMLMapperEntityResolver" class="headerlink" title="XMLMapperEntityResolver"></a>XMLMapperEntityResolver</h4><p>    Offline entity resolver for the MyBatis DTDs  </p><p>    目的是未联网的情况下也能做DTD验证，实现原理就是将DTD搞到本地，然后用org.xml.sax.EntityResolver，最后调用DocumentBuilder.setEntityResolver来达到脱机验证  </p><p>    EntityResolver  </p><p>    public InputSource resolveEntity (String publicId, String systemId)  </p><p>    应用程序可以使用此接口将系统标识符重定向到本地 URI  </p><p>    但是用DTD是比较过时的做法，新的都改用xsd了  </p><p>    这个类的名字并不准确，因为它被两个类都用到（XMLConfigBuilder,XMLMapperBuilder）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XMLMapperEntityResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">EntityResolver</span> &#123; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, String&gt; doctypeMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;();<br><br>  <span class="hljs-comment">// &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br>  <span class="hljs-comment">// &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br>  <span class="hljs-comment">// 常量定义</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">IBATIS_CONFIG_PUBLIC</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;-//ibatis.apache.org//DTD Config 3.0//EN&quot;</span>.toUpperCase(Locale.ENGLISH);<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">IBATIS_CONFIG_SYSTEM</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://ibatis.apache.org/dtd/ibatis-3-config.dtd&quot;</span>.toUpperCase(Locale.ENGLISH);<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">IBATIS_MAPPER_PUBLIC</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;-//ibatis.apache.org//DTD Mapper 3.0//EN&quot;</span>.toUpperCase(Locale.ENGLISH);<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">IBATIS_MAPPER_SYSTEM</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd&quot;</span>.toUpperCase(Locale.ENGLISH);<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MYBATIS_CONFIG_PUBLIC</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>.toUpperCase(Locale.ENGLISH);<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MYBATIS_CONFIG_SYSTEM</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>.toUpperCase(Locale.ENGLISH);<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MYBATIS_MAPPER_PUBLIC</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>.toUpperCase(Locale.ENGLISH);<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MYBATIS_MAPPER_SYSTEM</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>.toUpperCase(Locale.ENGLISH);<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MYBATIS_CONFIG_DTD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;org/apache/ibatis/builder/xml/mybatis-3-config.dtd&quot;</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MYBATIS_MAPPER_DTD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;org/apache/ibatis/builder/xml/mybatis-3-mapper.dtd&quot;</span>;<br><br>  <span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-comment">// 将DOCTYPE和URL都映射到本地类路径下的DTD</span><br>    doctypeMap.put(IBATIS_CONFIG_SYSTEM, MYBATIS_CONFIG_DTD);<br>    doctypeMap.put(IBATIS_CONFIG_PUBLIC, MYBATIS_CONFIG_DTD);<br><br>    doctypeMap.put(IBATIS_MAPPER_SYSTEM, MYBATIS_MAPPER_DTD);<br>    doctypeMap.put(IBATIS_MAPPER_PUBLIC, MYBATIS_MAPPER_DTD);<br><br>    doctypeMap.put(MYBATIS_CONFIG_SYSTEM, MYBATIS_CONFIG_DTD);<br>    doctypeMap.put(MYBATIS_CONFIG_PUBLIC, MYBATIS_CONFIG_DTD);<br><br>    doctypeMap.put(MYBATIS_MAPPER_SYSTEM, MYBATIS_MAPPER_DTD);<br>    doctypeMap.put(MYBATIS_MAPPER_PUBLIC, MYBATIS_MAPPER_DTD);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> InputSource <span class="hljs-title function_">resolveEntity</span><span class="hljs-params">(String publicId, String systemId)</span> <span class="hljs-keyword">throws</span> SAXException &#123;<br><br>    <span class="hljs-keyword">if</span> (publicId != <span class="hljs-literal">null</span>) &#123;<br>      publicId = publicId.toUpperCase(Locale.ENGLISH);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (systemId != <span class="hljs-literal">null</span>) &#123;<br>      systemId = systemId.toUpperCase(Locale.ENGLISH);<br>    &#125;<br><br>    <span class="hljs-type">InputSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 先找publicId，找不到再找systemId，貌似不可能找不到</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> doctypeMap.get(publicId);<br>      source = getInputSource(path, source);<br>      <span class="hljs-keyword">if</span> (source == <span class="hljs-literal">null</span>) &#123;<br>        path = doctypeMap.get(systemId);<br>        source = getInputSource(path, source);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SAXException</span>(e.toString());<br>    &#125;<br>    <span class="hljs-keyword">return</span> source;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> InputSource <span class="hljs-title function_">getInputSource</span><span class="hljs-params">(String path, InputSource source)</span> &#123;<br>    <span class="hljs-keyword">if</span> (path != <span class="hljs-literal">null</span>) &#123;<br>      InputStream in;<br>      <span class="hljs-keyword">try</span> &#123;<br>        in = Resources.getResourceAsStream(path);<br>        source = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(in);<br>      &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-comment">// ignore, null is ok</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> source;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="XMLConfigBuilder"><a href="#XMLConfigBuilder" class="headerlink" title="XMLConfigBuilder"></a>XMLConfigBuilder</h4><p>    XML 配置构建器，建造者模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XMLConfigBuilder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseBuilder</span> &#123; <br><br>  <span class="hljs-comment">// 是否已解析，XPath解析器,环境</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> parsed;<br>  <span class="hljs-keyword">private</span> XPathParser parser;<br>  <span class="hljs-keyword">private</span> String environment; <br><br>  <span class="hljs-comment">// 以下3个一组</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XMLConfigBuilder</span><span class="hljs-params">(Reader reader)</span> &#123;<br>    <span class="hljs-built_in">this</span>(reader, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XMLConfigBuilder</span><span class="hljs-params">(Reader reader, String environment)</span> &#123;<br>    <span class="hljs-built_in">this</span>(reader, environment, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// 构造函数，转换成XPathParser再去调用构造函数</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XMLConfigBuilder</span><span class="hljs-params">(Reader reader, String environment, Properties props)</span> &#123;<br>    <span class="hljs-comment">//构造一个需要验证，XMLMapperEntityResolver的XPathParser</span><br>    <span class="hljs-built_in">this</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">XPathParser</span>(reader, <span class="hljs-literal">true</span>, props, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLMapperEntityResolver</span>()), environment, props);<br>  &#125; <br><br>  <span class="hljs-comment">// 以下3个一组</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XMLConfigBuilder</span><span class="hljs-params">(InputStream inputStream)</span> &#123;<br>    <span class="hljs-built_in">this</span>(inputStream, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XMLConfigBuilder</span><span class="hljs-params">(InputStream inputStream, String environment)</span> &#123;<br>    <span class="hljs-built_in">this</span>(inputStream, environment, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XMLConfigBuilder</span><span class="hljs-params">(InputStream inputStream, String environment, Properties props)</span> &#123;<br>    <span class="hljs-built_in">this</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">XPathParser</span>(inputStream, <span class="hljs-literal">true</span>, props, <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLMapperEntityResolver</span>()), environment, props);<br>  &#125; <br><br>  <span class="hljs-comment">// 上面6个构造函数最后都合流到这个函数，传入XPathParser</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">XMLConfigBuilder</span><span class="hljs-params">(XPathParser parser, String environment, Properties props)</span> &#123;<br>    <span class="hljs-comment">// 首先调用父类初始化Configuration</span><br>    <span class="hljs-built_in">super</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>());<br>    <span class="hljs-comment">// 错误上下文设置成SQL Mapper Configuration(XML文件配置),以便后面出错了报错用吧</span><br>    ErrorContext.instance().resource(<span class="hljs-string">&quot;SQL Mapper Configuration&quot;</span>);<br>    <span class="hljs-comment">// 将Properties全部设置到Configuration里面去</span><br>    <span class="hljs-built_in">this</span>.configuration.setVariables(props);<br>    <span class="hljs-built_in">this</span>.parsed = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">this</span>.environment = environment;<br>    <span class="hljs-built_in">this</span>.parser = parser;<br>  &#125; <br><br>  <span class="hljs-comment">// 解析配置</span><br>  <span class="hljs-keyword">public</span> Configuration <span class="hljs-title function_">parse</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 如果已经解析过了，报错</span><br>    <span class="hljs-keyword">if</span> (parsed) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Each XMLConfigBuilder can only be used once.&quot;</span>);<br>    &#125;<br>    parsed = <span class="hljs-literal">true</span>;<br><span class="hljs-comment">//  &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; </span><br><span class="hljs-comment">//  &lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; </span><br><span class="hljs-comment">//  &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt; </span><br><span class="hljs-comment">//  &lt;configuration&gt; </span><br><span class="hljs-comment">//  &lt;environments default=&quot;development&quot;&gt; </span><br><span class="hljs-comment">//  &lt;environment id=&quot;development&quot;&gt; </span><br><span class="hljs-comment">//  &lt;transactionManager type=&quot;JDBC&quot;/&gt; </span><br><span class="hljs-comment">//  &lt;dataSource type=&quot;POOLED&quot;&gt; </span><br><span class="hljs-comment">//  &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt; </span><br><span class="hljs-comment">//  &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt; </span><br><span class="hljs-comment">//  &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt; </span><br><span class="hljs-comment">//  &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt; </span><br><span class="hljs-comment">//  &lt;/dataSource&gt; </span><br><span class="hljs-comment">//  &lt;/environment&gt; </span><br><span class="hljs-comment">//  &lt;/environments&gt;</span><br><span class="hljs-comment">//  &lt;mappers&gt; </span><br><span class="hljs-comment">//  &lt;mapper resource=&quot;org/mybatis/example/BlogMapper.xml&quot;/&gt; </span><br><span class="hljs-comment">//  &lt;/mappers&gt; </span><br><span class="hljs-comment">//  &lt;/configuration&gt;</span><br><br>    <span class="hljs-comment">// 根节点是configuration</span><br>    parseConfiguration(parser.evalNode(<span class="hljs-string">&quot;/configuration&quot;</span>));<br>    <span class="hljs-keyword">return</span> configuration;<br>  &#125; <br><br>  <span class="hljs-comment">// 解析配置</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseConfiguration</span><span class="hljs-params">(XNode root)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 分步骤解析</span><br>      <span class="hljs-comment">// issue #117 read properties first</span><br>      <span class="hljs-comment">// 1.properties</span><br>      propertiesElement(root.evalNode(<span class="hljs-string">&quot;properties&quot;</span>));<br>      <span class="hljs-comment">// 2.类型别名</span><br>      typeAliasesElement(root.evalNode(<span class="hljs-string">&quot;typeAliases&quot;</span>));<br>      <span class="hljs-comment">// 3.插件</span><br>      pluginElement(root.evalNode(<span class="hljs-string">&quot;plugins&quot;</span>));<br>      <span class="hljs-comment">// 4.对象工厂</span><br>      objectFactoryElement(root.evalNode(<span class="hljs-string">&quot;objectFactory&quot;</span>));<br>      <span class="hljs-comment">// 5.对象包装工厂</span><br>      objectWrapperFactoryElement(root.evalNode(<span class="hljs-string">&quot;objectWrapperFactory&quot;</span>));<br>      <span class="hljs-comment">// 6.设置</span><br>      settingsElement(root.evalNode(<span class="hljs-string">&quot;settings&quot;</span>));<br>      <span class="hljs-comment">// read it after objectFactory and objectWrapperFactory issue #631</span><br>      <span class="hljs-comment">// 7.环境</span><br>      environmentsElement(root.evalNode(<span class="hljs-string">&quot;environments&quot;</span>));<br>      <span class="hljs-comment">// 8.databaseIdProvider</span><br>      databaseIdProviderElement(root.evalNode(<span class="hljs-string">&quot;databaseIdProvider&quot;</span>));<br>      <span class="hljs-comment">// 9.类型处理器</span><br>      typeHandlerElement(root.evalNode(<span class="hljs-string">&quot;typeHandlers&quot;</span>));<br>      <span class="hljs-comment">// 10.映射器</span><br>      mapperElement(root.evalNode(<span class="hljs-string">&quot;mappers&quot;</span>));<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Error parsing SQL Mapper Configuration. Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">//1.properties</span><br>  <span class="hljs-comment">//&lt;properties resource=&quot;org/mybatis/example/config.properties&quot;&gt;</span><br>  <span class="hljs-comment">//    &lt;property name=&quot;username&quot; value=&quot;dev_user&quot;/&gt;</span><br>  <span class="hljs-comment">//    &lt;property name=&quot;password&quot; value=&quot;F2Fa3!33TYyg&quot;/&gt;</span><br>  <span class="hljs-comment">//&lt;/properties&gt;</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">propertiesElement</span><span class="hljs-params">(XNode context)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">if</span> (context != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 如果在这些地方,属性多于一个的话,MyBatis 按照如下的顺序加载它们:</span><br><br>      <span class="hljs-comment">// 1.在 properties 元素体内指定的属性首先被读取。</span><br>      <span class="hljs-comment">// 2.从类路径下资源或 properties 元素的 url 属性中加载的属性第二被读取,它会覆盖已经存在的完全一样的属性。</span><br>      <span class="hljs-comment">// 3.作为方法参数传递的属性最后被读取, 它也会覆盖任一已经存在的完全一样的属性,这些属性可能是从 properties 元素体内和资源/url 属性中加载的。</span><br>      <span class="hljs-comment">// 传入方式是调用构造函数时传入，public XMLConfigBuilder(Reader reader, String environment, Properties props)</span><br><br>      <span class="hljs-comment">// 1.XNode.getChildrenAsProperties函数方便得到孩子所有Properties</span><br>      <span class="hljs-type">Properties</span> <span class="hljs-variable">defaults</span> <span class="hljs-operator">=</span> context.getChildrenAsProperties();<br>      <span class="hljs-comment">// 2.然后查找resource或者url,加入前面的Properties</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;resource&quot;</span>);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;url&quot;</span>);<br>      <span class="hljs-keyword">if</span> (resource != <span class="hljs-literal">null</span> &amp;&amp; url != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;The properties element cannot specify both a URL and a resource based property file reference.  Please specify one or the other.&quot;</span>);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (resource != <span class="hljs-literal">null</span>) &#123;<br>        defaults.putAll(Resources.getResourceAsProperties(resource));<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url != <span class="hljs-literal">null</span>) &#123;<br>        defaults.putAll(Resources.getUrlAsProperties(url));<br>      &#125;<br>      <span class="hljs-comment">// 3.Variables也全部加入Properties</span><br>      <span class="hljs-type">Properties</span> <span class="hljs-variable">vars</span> <span class="hljs-operator">=</span> configuration.getVariables();<br>      <span class="hljs-keyword">if</span> (vars != <span class="hljs-literal">null</span>) &#123;<br>        defaults.putAll(vars);<br>      &#125;<br>      parser.setVariables(defaults);<br>      configuration.setVariables(defaults);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">//2.类型别名</span><br>  <span class="hljs-comment">//&lt;typeAliases&gt;</span><br>  <span class="hljs-comment">//  &lt;typeAlias alias=&quot;Author&quot; type=&quot;domain.blog.Author&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;typeAlias alias=&quot;Blog&quot; type=&quot;domain.blog.Blog&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;typeAlias alias=&quot;Comment&quot; type=&quot;domain.blog.Comment&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;typeAlias alias=&quot;Post&quot; type=&quot;domain.blog.Post&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;typeAlias alias=&quot;Section&quot; type=&quot;domain.blog.Section&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;typeAlias alias=&quot;Tag&quot; type=&quot;domain.blog.Tag&quot;/&gt;</span><br>  <span class="hljs-comment">//&lt;/typeAliases&gt;</span><br>  <span class="hljs-comment">//or    </span><br>  <span class="hljs-comment">//&lt;typeAliases&gt;</span><br>  <span class="hljs-comment">//  &lt;package name=&quot;domain.blog&quot;/&gt;</span><br>  <span class="hljs-comment">//&lt;/typeAliases&gt;  </span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">typeAliasesElement</span><span class="hljs-params">(XNode parent)</span> &#123;<br>    <span class="hljs-keyword">if</span> (parent != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">for</span> (XNode child : parent.getChildren()) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;package&quot;</span>.equals(child.getName())) &#123;<br>          <span class="hljs-comment">// 如果是package</span><br>          <span class="hljs-type">String</span> <span class="hljs-variable">typeAliasPackage</span> <span class="hljs-operator">=</span> child.getStringAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br>          <span class="hljs-comment">//（一）调用TypeAliasRegistry.registerAliases，去包下找所有类,然后注册别名(有@Alias注解则用，没有则取类的simpleName)</span><br>          configuration.getTypeAliasRegistry().registerAliases(typeAliasPackage);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// 如果是typeAlias</span><br>          <span class="hljs-type">String</span> <span class="hljs-variable">alias</span> <span class="hljs-operator">=</span> child.getStringAttribute(<span class="hljs-string">&quot;alias&quot;</span>);<br>          <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> child.getStringAttribute(<span class="hljs-string">&quot;type&quot;</span>);<br>          <span class="hljs-keyword">try</span> &#123;<br>            Class&lt;?&gt; clazz = Resources.classForName(type);<br>            <span class="hljs-comment">// 根据Class名字来注册类型别名</span><br>            <span class="hljs-comment">//（二）调用TypeAliasRegistry.registerAlias</span><br>            <span class="hljs-keyword">if</span> (alias == <span class="hljs-literal">null</span>) &#123;<br>              <span class="hljs-comment">// alias可以省略</span><br>              typeAliasRegistry.registerAlias(clazz);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              typeAliasRegistry.registerAlias(alias, clazz);<br>            &#125;<br>          &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Error registering typeAlias for &#x27;&quot;</span> + alias + <span class="hljs-string">&quot;&#x27;. Cause: &quot;</span> + e, e);<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">//3.插件</span><br>  <span class="hljs-comment">//MyBatis 允许你在某一点拦截已映射语句执行的调用。默认情况下,MyBatis 允许使用插件来拦截方法调用</span><br>  <span class="hljs-comment">//&lt;plugins&gt;</span><br>  <span class="hljs-comment">//  &lt;plugin interceptor=&quot;org.mybatis.example.ExamplePlugin&quot;&gt;</span><br>  <span class="hljs-comment">//    &lt;property name=&quot;someProperty&quot; value=&quot;100&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;/plugin&gt;</span><br>  <span class="hljs-comment">//&lt;/plugins&gt;  </span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pluginElement</span><span class="hljs-params">(XNode parent)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">if</span> (parent != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">for</span> (XNode child : parent.getChildren()) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">interceptor</span> <span class="hljs-operator">=</span> child.getStringAttribute(<span class="hljs-string">&quot;interceptor&quot;</span>);<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> child.getChildrenAsProperties();<br>        <span class="hljs-type">Interceptor</span> <span class="hljs-variable">interceptorInstance</span> <span class="hljs-operator">=</span> (Interceptor) resolveClass(interceptor).newInstance();<br>        interceptorInstance.setProperties(properties);<br>        <span class="hljs-comment">// 调用InterceptorChain.addInterceptor</span><br>        configuration.addInterceptor(interceptorInstance);<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">//4.对象工厂,可以自定义对象创建的方式,比如用对象池？</span><br>  <span class="hljs-comment">//&lt;objectFactory type=&quot;org.mybatis.example.ExampleObjectFactory&quot;&gt;</span><br>  <span class="hljs-comment">//  &lt;property name=&quot;someProperty&quot; value=&quot;100&quot;/&gt;</span><br>  <span class="hljs-comment">//&lt;/objectFactory&gt;</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">objectFactoryElement</span><span class="hljs-params">(XNode context)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">if</span> (context != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;type&quot;</span>);<br>      <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> context.getChildrenAsProperties();<br>      <span class="hljs-type">ObjectFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> (ObjectFactory) resolveClass(type).newInstance();<br>      factory.setProperties(properties);<br>      configuration.setObjectFactory(factory);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 5.对象包装工厂</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">objectWrapperFactoryElement</span><span class="hljs-params">(XNode context)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">if</span> (context != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;type&quot;</span>);<br>      <span class="hljs-type">ObjectWrapperFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> (ObjectWrapperFactory) resolveClass(type).newInstance();<br>      configuration.setObjectWrapperFactory(factory);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">//6.设置</span><br>  <span class="hljs-comment">//这些是极其重要的调整, 它们会修改 MyBatis 在运行时的行为方式</span><br>  <span class="hljs-comment">//&lt;settings&gt;</span><br>  <span class="hljs-comment">//  &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;setting name=&quot;multipleResultSetsEnabled&quot; value=&quot;true&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;setting name=&quot;useColumnLabel&quot; value=&quot;true&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;false&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;setting name=&quot;enhancementEnabled&quot; value=&quot;false&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;setting name=&quot;defaultExecutorType&quot; value=&quot;SIMPLE&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;setting name=&quot;defaultStatementTimeout&quot; value=&quot;25000&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;setting name=&quot;safeRowBoundsEnabled&quot; value=&quot;false&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;false&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;setting name=&quot;localCacheScope&quot; value=&quot;SESSION&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;OTHER&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;setting name=&quot;lazyLoadTriggerMethods&quot; value=&quot;equals,clone,hashCode,toString&quot;/&gt;</span><br>  <span class="hljs-comment">//&lt;/settings&gt;</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">settingsElement</span><span class="hljs-params">(XNode context)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">if</span> (context != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">Properties</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> context.getChildrenAsProperties();<br>      <span class="hljs-comment">// Check that all settings are known to the configuration class</span><br>      <span class="hljs-comment">// 检查下是否在Configuration类里都有相应的setter方法（没有拼写错误）</span><br>      <span class="hljs-type">MetaClass</span> <span class="hljs-variable">metaConfig</span> <span class="hljs-operator">=</span> MetaClass.forClass(Configuration.class);<br>      <span class="hljs-keyword">for</span> (Object key : props.keySet()) &#123;<br>        <span class="hljs-keyword">if</span> (!metaConfig.hasSetter(String.valueOf(key))) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;The setting &quot;</span> + key + <span class="hljs-string">&quot; is not known.  Make sure you spelled it correctly (case sensitive).&quot;</span>);<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-comment">// 下面非常简单，一个个设置属性</span><br>      <span class="hljs-comment">// 如何自动映射列到字段/ 属性</span><br>      configuration.setAutoMappingBehavior(AutoMappingBehavior.valueOf(props.getProperty(<span class="hljs-string">&quot;autoMappingBehavior&quot;</span>, <span class="hljs-string">&quot;PARTIAL&quot;</span>)));<br>      <span class="hljs-comment">// 缓存</span><br>      configuration.setCacheEnabled(booleanValueOf(props.getProperty(<span class="hljs-string">&quot;cacheEnabled&quot;</span>), <span class="hljs-literal">true</span>));<br>      <span class="hljs-comment">// proxyFactory (CGLIB | JAVASSIST)</span><br>      <span class="hljs-comment">// 延迟加载的核心技术就是用代理模式，CGLIB/JAVASSIST两者选一</span><br>      configuration.setProxyFactory((ProxyFactory) createInstance(props.getProperty(<span class="hljs-string">&quot;proxyFactory&quot;</span>)));<br>      <span class="hljs-comment">// 延迟加载</span><br>      configuration.setLazyLoadingEnabled(booleanValueOf(props.getProperty(<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span>), <span class="hljs-literal">false</span>));<br>      <span class="hljs-comment">// 延迟加载时，每种属性是否还要按需加载</span><br>      configuration.setAggressiveLazyLoading(booleanValueOf(props.getProperty(<span class="hljs-string">&quot;aggressiveLazyLoading&quot;</span>), <span class="hljs-literal">true</span>));<br>      <span class="hljs-comment">// 允不允许多种结果集从一个单独 的语句中返回</span><br>      configuration.setMultipleResultSetsEnabled(booleanValueOf(props.getProperty(<span class="hljs-string">&quot;multipleResultSetsEnabled&quot;</span>), <span class="hljs-literal">true</span>));<br>      <span class="hljs-comment">// 使用列标签代替列名</span><br>      configuration.setUseColumnLabel(booleanValueOf(props.getProperty(<span class="hljs-string">&quot;useColumnLabel&quot;</span>), <span class="hljs-literal">true</span>));<br>      <span class="hljs-comment">// 允许 JDBC 支持生成的键</span><br>      configuration.setUseGeneratedKeys(booleanValueOf(props.getProperty(<span class="hljs-string">&quot;useGeneratedKeys&quot;</span>), <span class="hljs-literal">false</span>));<br>      <span class="hljs-comment">// 配置默认的执行器</span><br>      configuration.setDefaultExecutorType(ExecutorType.valueOf(props.getProperty(<span class="hljs-string">&quot;defaultExecutorType&quot;</span>, <span class="hljs-string">&quot;SIMPLE&quot;</span>)));<br>      <span class="hljs-comment">// 超时时间</span><br>      configuration.setDefaultStatementTimeout(integerValueOf(props.getProperty(<span class="hljs-string">&quot;defaultStatementTimeout&quot;</span>), <span class="hljs-literal">null</span>));<br>      <span class="hljs-comment">// 是否将DB字段自动映射到驼峰式Java属性（A_COLUMN--&gt;aColumn）</span><br>      configuration.setMapUnderscoreToCamelCase(booleanValueOf(props.getProperty(<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span>), <span class="hljs-literal">false</span>));<br>      <span class="hljs-comment">// 嵌套语句上使用RowBounds</span><br>      configuration.setSafeRowBoundsEnabled(booleanValueOf(props.getProperty(<span class="hljs-string">&quot;safeRowBoundsEnabled&quot;</span>), <span class="hljs-literal">false</span>));<br>      <span class="hljs-comment">// 默认用session级别的缓存</span><br>      configuration.setLocalCacheScope(LocalCacheScope.valueOf(props.getProperty(<span class="hljs-string">&quot;localCacheScope&quot;</span>, <span class="hljs-string">&quot;SESSION&quot;</span>)));<br>      <span class="hljs-comment">// 为null值设置jdbctype</span><br>      configuration.setJdbcTypeForNull(JdbcType.valueOf(props.getProperty(<span class="hljs-string">&quot;jdbcTypeForNull&quot;</span>, <span class="hljs-string">&quot;OTHER&quot;</span>)));<br>      <span class="hljs-comment">// Object的哪些方法将触发延迟加载</span><br>      configuration.setLazyLoadTriggerMethods(stringSetValueOf(props.getProperty(<span class="hljs-string">&quot;lazyLoadTriggerMethods&quot;</span>), <span class="hljs-string">&quot;equals,clone,hashCode,toString&quot;</span>));<br>      <span class="hljs-comment">// 使用安全的ResultHandler</span><br>      configuration.setSafeResultHandlerEnabled(booleanValueOf(props.getProperty(<span class="hljs-string">&quot;safeResultHandlerEnabled&quot;</span>), <span class="hljs-literal">true</span>));<br>      <span class="hljs-comment">// 动态SQL生成语言所使用的脚本语言</span><br>      configuration.setDefaultScriptingLanguage(resolveClass(props.getProperty(<span class="hljs-string">&quot;defaultScriptingLanguage&quot;</span>)));<br>      <span class="hljs-comment">// 当结果集中含有Null值时是否执行映射对象的setter或者Map对象的put方法。此设置对于原始类型如int,boolean等无效。 </span><br>      configuration.setCallSettersOnNulls(booleanValueOf(props.getProperty(<span class="hljs-string">&quot;callSettersOnNulls&quot;</span>), <span class="hljs-literal">false</span>));<br>      <span class="hljs-comment">// logger名字的前缀</span><br>      configuration.setLogPrefix(props.getProperty(<span class="hljs-string">&quot;logPrefix&quot;</span>));<br>      <span class="hljs-comment">// 显式定义用什么log框架，不定义则用默认的自动发现jar包机制</span><br>      configuration.setLogImpl(resolveClass(props.getProperty(<span class="hljs-string">&quot;logImpl&quot;</span>)));<br>      <span class="hljs-comment">// 配置工厂</span><br>      configuration.setConfigurationFactory(resolveClass(props.getProperty(<span class="hljs-string">&quot;configurationFactory&quot;</span>)));<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">//7.环境</span><br>  <span class="hljs-comment">//    &lt;environments default=&quot;development&quot;&gt;</span><br>  <span class="hljs-comment">//      &lt;environment id=&quot;development&quot;&gt;</span><br>  <span class="hljs-comment">//        &lt;transactionManager type=&quot;JDBC&quot;&gt;</span><br>  <span class="hljs-comment">//          &lt;property name=&quot;...&quot; value=&quot;...&quot;/&gt;</span><br>  <span class="hljs-comment">//        &lt;/transactionManager&gt;</span><br>  <span class="hljs-comment">//        &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br>  <span class="hljs-comment">//          &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;</span><br>  <span class="hljs-comment">//          &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;</span><br>  <span class="hljs-comment">//          &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt;</span><br>  <span class="hljs-comment">//          &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;</span><br>  <span class="hljs-comment">//        &lt;/dataSource&gt;</span><br>  <span class="hljs-comment">//      &lt;/environment&gt;</span><br>  <span class="hljs-comment">//    &lt;/environments&gt;</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">environmentsElement</span><span class="hljs-params">(XNode context)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">if</span> (context != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">if</span> (environment == <span class="hljs-literal">null</span>) &#123;<br>        environment = context.getStringAttribute(<span class="hljs-string">&quot;default&quot;</span>);<br>      &#125;<br>      <span class="hljs-keyword">for</span> (XNode child : context.getChildren()) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> child.getStringAttribute(<span class="hljs-string">&quot;id&quot;</span>);<br>        <span class="hljs-comment">// 循环比较id是否就是指定的environment</span><br>        <span class="hljs-keyword">if</span> (isSpecifiedEnvironment(id)) &#123;<br>          <span class="hljs-comment">// 7.1事务管理器</span><br>          <span class="hljs-type">TransactionFactory</span> <span class="hljs-variable">txFactory</span> <span class="hljs-operator">=</span> transactionManagerElement(child.evalNode(<span class="hljs-string">&quot;transactionManager&quot;</span>));<br>          <span class="hljs-comment">// 7.2数据源</span><br>          <span class="hljs-type">DataSourceFactory</span> <span class="hljs-variable">dsFactory</span> <span class="hljs-operator">=</span> dataSourceElement(child.evalNode(<span class="hljs-string">&quot;dataSource&quot;</span>));<br>          <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> dsFactory.getDataSource();<br>          Environment.<span class="hljs-type">Builder</span> <span class="hljs-variable">environmentBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Environment</span>.Builder(id)<br>              .transactionFactory(txFactory)<br>              .dataSource(dataSource);<br>          configuration.setEnvironment(environmentBuilder.build());<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 比较id和environment是否相等</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSpecifiedEnvironment</span><span class="hljs-params">(String id)</span> &#123;<br>    <span class="hljs-keyword">if</span> (environment == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;No environment specified.&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (id == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Environment requires an id attribute.&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (environment.equals(id)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125; <br><br>  <span class="hljs-comment">//7.1事务管理器</span><br>  <span class="hljs-comment">//&lt;transactionManager type=&quot;JDBC&quot;&gt;</span><br>  <span class="hljs-comment">//  &lt;property name=&quot;...&quot; value=&quot;...&quot;/&gt;</span><br>  <span class="hljs-comment">//&lt;/transactionManager&gt;</span><br>  <span class="hljs-keyword">private</span> TransactionFactory <span class="hljs-title function_">transactionManagerElement</span><span class="hljs-params">(XNode context)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">if</span> (context != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;type&quot;</span>);<br>      <span class="hljs-type">Properties</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> context.getChildrenAsProperties();<br>      <span class="hljs-comment">// 根据type=&quot;JDBC&quot;解析返回适当的TransactionFactory</span><br>      <span class="hljs-comment">// JDBC 是在 Configuration类中注册的</span><br>      <span class="hljs-type">TransactionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> (TransactionFactory) resolveClass(type).newInstance();<br>      factory.setProperties(props);<br>      <span class="hljs-keyword">return</span> factory;<br>    &#125;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Environment declaration requires a TransactionFactory.&quot;</span>);<br>  &#125; <br><br>  <span class="hljs-comment">//7.2数据源</span><br>  <span class="hljs-comment">//&lt;dataSource type=&quot;POOLED&quot;&gt;</span><br>  <span class="hljs-comment">//  &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;</span><br>  <span class="hljs-comment">//&lt;/dataSource&gt;</span><br>  <span class="hljs-keyword">private</span> DataSourceFactory <span class="hljs-title function_">dataSourceElement</span><span class="hljs-params">(XNode context)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">if</span> (context != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;type&quot;</span>);<br>      <span class="hljs-type">Properties</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> context.getChildrenAsProperties();<br>      <span class="hljs-comment">// 根据type=&quot;POOLED&quot;解析返回适当的DataSourceFactory</span><br>      <span class="hljs-type">DataSourceFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> (DataSourceFactory) resolveClass(type).newInstance();<br>      factory.setProperties(props);<br>      <span class="hljs-keyword">return</span> factory;<br>    &#125;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Environment declaration requires a DataSourceFactory.&quot;</span>);<br>  &#125; <br><br>  <span class="hljs-comment">//8.databaseIdProvider</span><br>  <span class="hljs-comment">//可以根据不同数据库执行不同的SQL，sql要加databaseId属性</span><br>  <span class="hljs-comment">//这个功能感觉不是很实用，真要多数据库支持，那SQL工作量将会成倍增长，用mybatis以后一般就绑死在一个数据库上了。但也是一个不得已的方法吧</span><br>  <span class="hljs-comment">//可以参考org.apache.ibatis.submitted.multidb包里的测试用例</span><br>  <span class="hljs-comment">//    &lt;databaseIdProvider type=&quot;VENDOR&quot;&gt;</span><br>  <span class="hljs-comment">//      &lt;property name=&quot;SQL Server&quot; value=&quot;sqlserver&quot;/&gt;</span><br>  <span class="hljs-comment">//      &lt;property name=&quot;DB2&quot; value=&quot;db2&quot;/&gt;        </span><br>  <span class="hljs-comment">//      &lt;property name=&quot;Oracle&quot; value=&quot;oracle&quot; /&gt;</span><br>  <span class="hljs-comment">//    &lt;/databaseIdProvider&gt;</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">databaseIdProviderElement</span><span class="hljs-params">(XNode context)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">DatabaseIdProvider</span> <span class="hljs-variable">databaseIdProvider</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (context != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;type&quot;</span>);<br>      <span class="hljs-comment">// awful patch to keep backward compatibility</span><br>      <span class="hljs-comment">// 与老版本兼容</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;VENDOR&quot;</span>.equals(type)) &#123;<br>          type = <span class="hljs-string">&quot;DB_VENDOR&quot;</span>;<br>      &#125;<br>      <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> context.getChildrenAsProperties();<br>      <span class="hljs-comment">// &quot;DB_VENDOR&quot;--&gt;VendorDatabaseIdProvider</span><br>      databaseIdProvider = (DatabaseIdProvider) resolveClass(type).newInstance();<br>      databaseIdProvider.setProperties(properties);<br>    &#125;<br>    <span class="hljs-type">Environment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> configuration.getEnvironment();<br>    <span class="hljs-keyword">if</span> (environment != <span class="hljs-literal">null</span> &amp;&amp; databaseIdProvider != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 得到当前的databaseId，可以调用DatabaseMetaData.getDatabaseProductName()得到诸如&quot;Oracle (DataDirect)&quot;的字符串，</span><br>      <span class="hljs-comment">// 然后和预定义的property比较,得出目前究竟用的是什么数据库</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">databaseId</span> <span class="hljs-operator">=</span> databaseIdProvider.getDatabaseId(environment.getDataSource());<br>      configuration.setDatabaseId(databaseId);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">//9.类型处理器</span><br>  <span class="hljs-comment">//    &lt;typeHandlers&gt;</span><br>  <span class="hljs-comment">//      &lt;typeHandler handler=&quot;org.mybatis.example.ExampleTypeHandler&quot;/&gt;</span><br>  <span class="hljs-comment">//    &lt;/typeHandlers&gt;</span><br>  <span class="hljs-comment">//or</span><br>  <span class="hljs-comment">//    &lt;typeHandlers&gt;</span><br>  <span class="hljs-comment">//      &lt;package name=&quot;org.mybatis.example&quot;/&gt;</span><br>  <span class="hljs-comment">//    &lt;/typeHandlers&gt;</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">typeHandlerElement</span><span class="hljs-params">(XNode parent)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">if</span> (parent != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">for</span> (XNode child : parent.getChildren()) &#123;<br>        <span class="hljs-comment">// 如果是package</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;package&quot;</span>.equals(child.getName())) &#123;<br>          <span class="hljs-type">String</span> <span class="hljs-variable">typeHandlerPackage</span> <span class="hljs-operator">=</span> child.getStringAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br>          <span class="hljs-comment">//（一）调用TypeHandlerRegistry.register，去包下找所有类</span><br>          typeHandlerRegistry.register(typeHandlerPackage);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// 如果是typeHandler</span><br>          <span class="hljs-type">String</span> <span class="hljs-variable">javaTypeName</span> <span class="hljs-operator">=</span> child.getStringAttribute(<span class="hljs-string">&quot;javaType&quot;</span>);<br>          <span class="hljs-type">String</span> <span class="hljs-variable">jdbcTypeName</span> <span class="hljs-operator">=</span> child.getStringAttribute(<span class="hljs-string">&quot;jdbcType&quot;</span>);<br>          <span class="hljs-type">String</span> <span class="hljs-variable">handlerTypeName</span> <span class="hljs-operator">=</span> child.getStringAttribute(<span class="hljs-string">&quot;handler&quot;</span>);<br>          Class&lt;?&gt; javaTypeClass = resolveClass(javaTypeName);<br>          <span class="hljs-type">JdbcType</span> <span class="hljs-variable">jdbcType</span> <span class="hljs-operator">=</span> resolveJdbcType(jdbcTypeName);<br>          Class&lt;?&gt; typeHandlerClass = resolveClass(handlerTypeName);<br>          <span class="hljs-comment">//（二）调用TypeHandlerRegistry.register(以下是3种不同的参数形式)</span><br>          <span class="hljs-keyword">if</span> (javaTypeClass != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (jdbcType == <span class="hljs-literal">null</span>) &#123;<br>              typeHandlerRegistry.register(javaTypeClass, typeHandlerClass);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              typeHandlerRegistry.register(javaTypeClass, jdbcType, typeHandlerClass);<br>            &#125;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            typeHandlerRegistry.register(typeHandlerClass);<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">//10.映射器</span><br>  <span class="hljs-comment">//    10.1使用类路径</span><br>  <span class="hljs-comment">//    &lt;mappers&gt;</span><br>  <span class="hljs-comment">//      &lt;mapper resource=&quot;org/mybatis/builder/AuthorMapper.xml&quot;/&gt;</span><br>  <span class="hljs-comment">//      &lt;mapper resource=&quot;org/mybatis/builder/BlogMapper.xml&quot;/&gt;</span><br>  <span class="hljs-comment">//      &lt;mapper resource=&quot;org/mybatis/builder/PostMapper.xml&quot;/&gt;</span><br>  <span class="hljs-comment">//    &lt;/mappers&gt;</span><br>  <span class="hljs-comment">//</span><br>  <span class="hljs-comment">//    10.2使用绝对url路径</span><br>  <span class="hljs-comment">//    &lt;mappers&gt;</span><br>  <span class="hljs-comment">//      &lt;mapper url=&quot;file:///var/mappers/AuthorMapper.xml&quot;/&gt;</span><br>  <span class="hljs-comment">//      &lt;mapper url=&quot;file:///var/mappers/BlogMapper.xml&quot;/&gt;</span><br>  <span class="hljs-comment">//      &lt;mapper url=&quot;file:///var/mappers/PostMapper.xml&quot;/&gt;</span><br>  <span class="hljs-comment">//    &lt;/mappers&gt;</span><br>  <span class="hljs-comment">//</span><br>  <span class="hljs-comment">//    10.3使用java类名</span><br>  <span class="hljs-comment">//    &lt;mappers&gt;</span><br>  <span class="hljs-comment">//      &lt;mapper class=&quot;org.mybatis.builder.AuthorMapper&quot;/&gt;</span><br>  <span class="hljs-comment">//      &lt;mapper class=&quot;org.mybatis.builder.BlogMapper&quot;/&gt;</span><br>  <span class="hljs-comment">//      &lt;mapper class=&quot;org.mybatis.builder.PostMapper&quot;/&gt;</span><br>  <span class="hljs-comment">//    &lt;/mappers&gt;</span><br>  <span class="hljs-comment">//</span><br>  <span class="hljs-comment">//    10.4自动扫描包下所有映射器</span><br>  <span class="hljs-comment">//    &lt;mappers&gt;</span><br>  <span class="hljs-comment">//      &lt;package name=&quot;org.mybatis.builder&quot;/&gt;</span><br>  <span class="hljs-comment">//    &lt;/mappers&gt;</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mapperElement</span><span class="hljs-params">(XNode parent)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">if</span> (parent != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">for</span> (XNode child : parent.getChildren()) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;package&quot;</span>.equals(child.getName())) &#123;<br>          <span class="hljs-comment">//10.4自动扫描包下所有映射器</span><br>          <span class="hljs-type">String</span> <span class="hljs-variable">mapperPackage</span> <span class="hljs-operator">=</span> child.getStringAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br>          configuration.addMappers(mapperPackage);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> child.getStringAttribute(<span class="hljs-string">&quot;resource&quot;</span>);<br>          <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> child.getStringAttribute(<span class="hljs-string">&quot;url&quot;</span>);<br>          <span class="hljs-type">String</span> <span class="hljs-variable">mapperClass</span> <span class="hljs-operator">=</span> child.getStringAttribute(<span class="hljs-string">&quot;class&quot;</span>);<br>          <span class="hljs-keyword">if</span> (resource != <span class="hljs-literal">null</span> &amp;&amp; url == <span class="hljs-literal">null</span> &amp;&amp; mapperClass == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 10.1使用类路径</span><br>            ErrorContext.instance().resource(resource);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>            <span class="hljs-comment">// 映射器比较复杂，调用XMLMapperBuilder</span><br>            <span class="hljs-comment">// 注意在for循环里每个mapper都重新new一个XMLMapperBuilder，来解析</span><br>            <span class="hljs-type">XMLMapperBuilder</span> <span class="hljs-variable">mapperParser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLMapperBuilder</span>(inputStream, configuration, resource, configuration.getSqlFragments());<br>            mapperParser.parse();<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (resource == <span class="hljs-literal">null</span> &amp;&amp; url != <span class="hljs-literal">null</span> &amp;&amp; mapperClass == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 10.2使用绝对url路径</span><br>            ErrorContext.instance().resource(url);<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getUrlAsStream(url);<br>            <span class="hljs-comment">// 映射器比较复杂，调用XMLMapperBuilder</span><br>            <span class="hljs-type">XMLMapperBuilder</span> <span class="hljs-variable">mapperParser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLMapperBuilder</span>(inputStream, configuration, url, configuration.getSqlFragments());<br>            mapperParser.parse();<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (resource == <span class="hljs-literal">null</span> &amp;&amp; url == <span class="hljs-literal">null</span> &amp;&amp; mapperClass != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 10.3使用java类名</span><br>            Class&lt;?&gt; mapperInterface = Resources.classForName(mapperClass);<br>            <span class="hljs-comment">// 直接把这个映射加入配置</span><br>            configuration.addMapper(mapperInterface);<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;A mapper element may only specify a url, resource or class, but not more than one.&quot;</span>);<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="XMLStatementBuilder"><a href="#XMLStatementBuilder" class="headerlink" title="XMLStatementBuilder"></a>XMLStatementBuilder</h4><p>    XML语句构建器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XMLStatementBuilder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseBuilder</span> &#123; <br><br>  <span class="hljs-keyword">private</span> MapperBuilderAssistant builderAssistant;<br>  <span class="hljs-keyword">private</span> XNode context;<br>  <span class="hljs-keyword">private</span> String requiredDatabaseId; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XMLStatementBuilder</span><span class="hljs-params">(Configuration configuration, MapperBuilderAssistant builderAssistant, XNode context)</span> &#123;<br>    <span class="hljs-built_in">this</span>(configuration, builderAssistant, context, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XMLStatementBuilder</span><span class="hljs-params">(Configuration configuration, MapperBuilderAssistant builderAssistant, XNode context, String databaseId)</span> &#123;<br>    <span class="hljs-built_in">super</span>(configuration);<br>    <span class="hljs-built_in">this</span>.builderAssistant = builderAssistant;<br>    <span class="hljs-built_in">this</span>.context = context;<br>    <span class="hljs-built_in">this</span>.requiredDatabaseId = databaseId;<br>  &#125; <br><br>  <span class="hljs-comment">//解析语句(select|insert|update|delete)</span><br>  <span class="hljs-comment">//&lt;select</span><br>  <span class="hljs-comment">//  id=&quot;selectPerson&quot;</span><br>  <span class="hljs-comment">//  parameterType=&quot;int&quot;</span><br>  <span class="hljs-comment">//  parameterMap=&quot;deprecated&quot;</span><br>  <span class="hljs-comment">//  resultType=&quot;hashmap&quot;</span><br>  <span class="hljs-comment">//  resultMap=&quot;personResultMap&quot;</span><br>  <span class="hljs-comment">//  flushCache=&quot;false&quot;</span><br>  <span class="hljs-comment">//  useCache=&quot;true&quot;</span><br>  <span class="hljs-comment">//  timeout=&quot;10000&quot;</span><br>  <span class="hljs-comment">//  fetchSize=&quot;256&quot;</span><br>  <span class="hljs-comment">//  statementType=&quot;PREPARED&quot;</span><br>  <span class="hljs-comment">//  resultSetType=&quot;FORWARD_ONLY&quot;&gt;</span><br>  <span class="hljs-comment">//  SELECT * FROM PERSON WHERE ID = #&#123;id&#125;</span><br>  <span class="hljs-comment">//&lt;/select&gt;</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseStatementNode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;id&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">databaseId</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;databaseId&quot;</span>);<br><br>    <span class="hljs-comment">// 如果databaseId不匹配，退出</span><br>    <span class="hljs-keyword">if</span> (!databaseIdMatchesCurrent(id, databaseId, <span class="hljs-built_in">this</span>.requiredDatabaseId)) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 暗示驱动程序每次批量返回的结果行数</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">fetchSize</span> <span class="hljs-operator">=</span> context.getIntAttribute(<span class="hljs-string">&quot;fetchSize&quot;</span>);<br>    <span class="hljs-comment">// 超时时间</span><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">timeout</span> <span class="hljs-operator">=</span> context.getIntAttribute(<span class="hljs-string">&quot;timeout&quot;</span>);<br>    <span class="hljs-comment">// 引用外部 parameterMap,已废弃</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">parameterMap</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;parameterMap&quot;</span>);<br>    <span class="hljs-comment">// 参数类型</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">parameterType</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;parameterType&quot;</span>);<br>    Class&lt;?&gt; parameterTypeClass = resolveClass(parameterType);<br>    <span class="hljs-comment">// 引用外部的 resultMap(高级功能)</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">resultMap</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;resultMap&quot;</span>);<br>    <span class="hljs-comment">// 结果类型</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">resultType</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;resultType&quot;</span>);<br>    <span class="hljs-comment">// 脚本语言,mybatis3.2的新功能</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">lang</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;lang&quot;</span>);<br>    <span class="hljs-comment">// 得到语言驱动</span><br>    <span class="hljs-type">LanguageDriver</span> <span class="hljs-variable">langDriver</span> <span class="hljs-operator">=</span> getLanguageDriver(lang);<br><br>    Class&lt;?&gt; resultTypeClass = resolveClass(resultType);<br>    <span class="hljs-comment">// 结果集类型，FORWARD_ONLY|SCROLL_SENSITIVE|SCROLL_INSENSITIVE 中的一种</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">resultSetType</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;resultSetType&quot;</span>);<br>    <span class="hljs-comment">// 语句类型, STATEMENT|PREPARED|CALLABLE 的一种</span><br>    <span class="hljs-type">StatementType</span> <span class="hljs-variable">statementType</span> <span class="hljs-operator">=</span> StatementType.valueOf(context.getStringAttribute(<span class="hljs-string">&quot;statementType&quot;</span>, StatementType.PREPARED.toString()));<br>    <span class="hljs-type">ResultSetType</span> <span class="hljs-variable">resultSetTypeEnum</span> <span class="hljs-operator">=</span> resolveResultSetType(resultSetType);<br><br>    <span class="hljs-comment">// 获取命令类型(select|insert|update|delete)</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">nodeName</span> <span class="hljs-operator">=</span> context.getNode().getNodeName();<br>    <span class="hljs-type">SqlCommandType</span> <span class="hljs-variable">sqlCommandType</span> <span class="hljs-operator">=</span> SqlCommandType.valueOf(nodeName.toUpperCase(Locale.ENGLISH));<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isSelect</span> <span class="hljs-operator">=</span> sqlCommandType == SqlCommandType.SELECT;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">flushCache</span> <span class="hljs-operator">=</span> context.getBooleanAttribute(<span class="hljs-string">&quot;flushCache&quot;</span>, !isSelect);<br>    <span class="hljs-comment">// 是否要缓存select结果,默认缓存</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">useCache</span> <span class="hljs-operator">=</span> context.getBooleanAttribute(<span class="hljs-string">&quot;useCache&quot;</span>, isSelect);<br>    <span class="hljs-comment">// 仅针对嵌套结果 select 语句适用：如果为 true，就是假设包含了嵌套结果集或是分组了，这样的话当返回一个主结果行的时候，就不会发生有对前面结果集的引用的情况。</span><br>    <span class="hljs-comment">// 这就使得在获取嵌套的结果集的时候不至于导致内存不够用。默认值：false。</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">resultOrdered</span> <span class="hljs-operator">=</span> context.getBooleanAttribute(<span class="hljs-string">&quot;resultOrdered&quot;</span>, <span class="hljs-literal">false</span>);<br><br>    <span class="hljs-comment">// Include Fragments before parsing</span><br>    <span class="hljs-comment">// 解析之前先解析&lt;include&gt;SQL片段</span><br>    <span class="hljs-type">XMLIncludeTransformer</span> <span class="hljs-variable">includeParser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLIncludeTransformer</span>(configuration, builderAssistant);<br>    includeParser.applyIncludes(context.getNode());<br><br>    <span class="hljs-comment">// Parse selectKey after includes and remove them.</span><br>    <span class="hljs-comment">// 解析之前先解析&lt;selectKey&gt;</span><br>    processSelectKeyNodes(id, parameterTypeClass, langDriver);<br><br>    <span class="hljs-comment">// Parse the SQL (pre: &lt;selectKey&gt; and &lt;include&gt; were parsed and removed)</span><br>    <span class="hljs-comment">// 解析成SqlSource，一般是DynamicSqlSource</span><br>    <span class="hljs-type">SqlSource</span> <span class="hljs-variable">sqlSource</span> <span class="hljs-operator">=</span> langDriver.createSqlSource(configuration, context, parameterTypeClass);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">resultSets</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;resultSets&quot;</span>);<br>    <span class="hljs-comment">// (仅对 insert 有用) 标记一个属性, MyBatis 会通过 getGeneratedKeys 或者通过 insert 语句的 selectKey 子元素设置它的值</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">keyProperty</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;keyProperty&quot;</span>);<br>    <span class="hljs-comment">// (仅对 insert 有用) 标记一个属性, MyBatis 会通过 getGeneratedKeys 或者通过 insert 语句的 selectKey 子元素设置它的值</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">keyColumn</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;keyColumn&quot;</span>);<br>    KeyGenerator keyGenerator;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">keyStatementId</span> <span class="hljs-operator">=</span> id + SelectKeyGenerator.SELECT_KEY_SUFFIX;<br>    keyStatementId = builderAssistant.applyCurrentNamespace(keyStatementId, <span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">if</span> (configuration.hasKeyGenerator(keyStatementId)) &#123;<br>      keyGenerator = configuration.getKeyGenerator(keyStatementId);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      keyGenerator = context.getBooleanAttribute(<span class="hljs-string">&quot;useGeneratedKeys&quot;</span>,<br>          configuration.isUseGeneratedKeys() &amp;&amp; SqlCommandType.INSERT.equals(sqlCommandType))<br>          ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jdbc3KeyGenerator</span>() : <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoKeyGenerator</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 又去调助手类</span><br>    builderAssistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,<br>        fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,<br>        resultSetTypeEnum, flushCache, useCache, resultOrdered, <br>        keyGenerator, keyProperty, keyColumn, databaseId, langDriver, resultSets);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">databaseIdMatchesCurrent</span><span class="hljs-params">(String id, String databaseId, String requiredDatabaseId)</span> &#123;<br>    <span class="hljs-keyword">if</span> (requiredDatabaseId != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">if</span> (!requiredDatabaseId.equals(databaseId)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (databaseId != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>      <span class="hljs-comment">// skip this statement if there is a previous one with a not null databaseId</span><br>      id = builderAssistant.applyCurrentNamespace(id, <span class="hljs-literal">false</span>);<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.configuration.hasStatement(id, <span class="hljs-literal">false</span>)) &#123;<br>        <span class="hljs-type">MappedStatement</span> <span class="hljs-variable">previous</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.configuration.getMappedStatement(id, <span class="hljs-literal">false</span>); <span class="hljs-comment">// issue #2</span><br>        <span class="hljs-keyword">if</span> (previous.getDatabaseId() != <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125; <br><br>  <span class="hljs-comment">// 取得语言驱动</span><br>  <span class="hljs-keyword">private</span> LanguageDriver <span class="hljs-title function_">getLanguageDriver</span><span class="hljs-params">(String lang)</span> &#123;<br>    Class&lt;?&gt; langClass = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (lang != <span class="hljs-literal">null</span>) &#123;<br>      langClass = resolveClass(lang);<br>    &#125;<br>    <span class="hljs-comment">// 调用builderAssistant</span><br>    <span class="hljs-keyword">return</span> builderAssistant.getLanguageDriver(langClass);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processSelectKeyNodes</span><span class="hljs-params">(String id, Class&lt;?&gt; parameterTypeClass, LanguageDriver langDriver)</span> &#123;<br>    List&lt;XNode&gt; selectKeyNodes = context.evalNodes(<span class="hljs-string">&quot;selectKey&quot;</span>);<br>    <span class="hljs-keyword">if</span> (configuration.getDatabaseId() != <span class="hljs-literal">null</span>) &#123;<br>      parseSelectKeyNodes(id, selectKeyNodes, parameterTypeClass, langDriver, configuration.getDatabaseId());<br>    &#125;<br>    parseSelectKeyNodes(id, selectKeyNodes, parameterTypeClass, langDriver, <span class="hljs-literal">null</span>);<br>    removeSelectKeyNodes(selectKeyNodes);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseSelectKeyNodes</span><span class="hljs-params">(String parentId, List&lt;XNode&gt; list, Class&lt;?&gt; parameterTypeClass, LanguageDriver langDriver, String skRequiredDatabaseId)</span> &#123;<br>    <span class="hljs-keyword">for</span> (XNode nodeToHandle : list) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> parentId + SelectKeyGenerator.SELECT_KEY_SUFFIX;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">databaseId</span> <span class="hljs-operator">=</span> nodeToHandle.getStringAttribute(<span class="hljs-string">&quot;databaseId&quot;</span>);<br>      <span class="hljs-keyword">if</span> (databaseIdMatchesCurrent(id, databaseId, skRequiredDatabaseId)) &#123;<br>        parseSelectKeyNode(id, nodeToHandle, parameterTypeClass, langDriver, databaseId);<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseSelectKeyNode</span><span class="hljs-params">(String id, XNode nodeToHandle, Class&lt;?&gt; parameterTypeClass, LanguageDriver langDriver, String databaseId)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">resultType</span> <span class="hljs-operator">=</span> nodeToHandle.getStringAttribute(<span class="hljs-string">&quot;resultType&quot;</span>);<br>    Class&lt;?&gt; resultTypeClass = resolveClass(resultType);<br>    <span class="hljs-type">StatementType</span> <span class="hljs-variable">statementType</span> <span class="hljs-operator">=</span> StatementType.valueOf(nodeToHandle.getStringAttribute(<span class="hljs-string">&quot;statementType&quot;</span>, StatementType.PREPARED.toString()));<br>    <span class="hljs-type">String</span> <span class="hljs-variable">keyProperty</span> <span class="hljs-operator">=</span> nodeToHandle.getStringAttribute(<span class="hljs-string">&quot;keyProperty&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">keyColumn</span> <span class="hljs-operator">=</span> nodeToHandle.getStringAttribute(<span class="hljs-string">&quot;keyColumn&quot;</span>);<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">executeBefore</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;BEFORE&quot;</span>.equals(nodeToHandle.getStringAttribute(<span class="hljs-string">&quot;order&quot;</span>, <span class="hljs-string">&quot;AFTER&quot;</span>));<br><br>    <span class="hljs-comment">// defaults</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">useCache</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">resultOrdered</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">KeyGenerator</span> <span class="hljs-variable">keyGenerator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoKeyGenerator</span>();<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">fetchSize</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">timeout</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">flushCache</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">parameterMap</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">resultMap</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">ResultSetType</span> <span class="hljs-variable">resultSetTypeEnum</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-type">SqlSource</span> <span class="hljs-variable">sqlSource</span> <span class="hljs-operator">=</span> langDriver.createSqlSource(configuration, nodeToHandle, parameterTypeClass);<br>    <span class="hljs-type">SqlCommandType</span> <span class="hljs-variable">sqlCommandType</span> <span class="hljs-operator">=</span> SqlCommandType.SELECT;<br><br>    <span class="hljs-comment">// 这里生成的MappedStatement用于设置 KeyGenerator</span><br>    builderAssistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType,<br>        fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass,<br>        resultSetTypeEnum, flushCache, useCache, resultOrdered,<br>        keyGenerator, keyProperty, keyColumn, databaseId, langDriver, <span class="hljs-literal">null</span>);<br><br>    id = builderAssistant.applyCurrentNamespace(id, <span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">MappedStatement</span> <span class="hljs-variable">keyStatement</span> <span class="hljs-operator">=</span> configuration.getMappedStatement(id, <span class="hljs-literal">false</span>);<br>    configuration.addKeyGenerator(id, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SelectKeyGenerator</span>(keyStatement, executeBefore));<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeSelectKeyNodes</span><span class="hljs-params">(List&lt;XNode&gt; selectKeyNodes)</span> &#123;<br>    <span class="hljs-keyword">for</span> (XNode nodeToHandle : selectKeyNodes) &#123;<br>      nodeToHandle.getParent().getNode().removeChild(nodeToHandle.getNode());<br>    &#125;<br>  &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="XMLMapperBuilder"><a href="#XMLMapperBuilder" class="headerlink" title="XMLMapperBuilder"></a>XMLMapperBuilder</h4><p>    XML映射构建器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XMLMapperBuilder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseBuilder</span> &#123; <br><br>  <span class="hljs-keyword">private</span> XPathParser parser;<br>  <span class="hljs-comment">// 映射器构建助手</span><br>  <span class="hljs-keyword">private</span> MapperBuilderAssistant builderAssistant;<br>  <span class="hljs-comment">// 用来存放sql片段的哈希表</span><br>  <span class="hljs-keyword">private</span> Map&lt;String, XNode&gt; sqlFragments;<br>  <span class="hljs-keyword">private</span> String resource; <br><br>  <span class="hljs-meta">@Deprecated</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XMLMapperBuilder</span><span class="hljs-params">(Reader reader, Configuration configuration, String resource, Map&lt;String, XNode&gt; sqlFragments, String namespace)</span> &#123;<br>    <span class="hljs-built_in">this</span>(reader, configuration, resource, sqlFragments);<br>    <span class="hljs-built_in">this</span>.builderAssistant.setCurrentNamespace(namespace);<br>  &#125;<br><br>  <span class="hljs-meta">@Deprecated</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XMLMapperBuilder</span><span class="hljs-params">(Reader reader, Configuration configuration, String resource, Map&lt;String, XNode&gt; sqlFragments)</span> &#123;<br>    <span class="hljs-built_in">this</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">XPathParser</span>(reader, <span class="hljs-literal">true</span>, configuration.getVariables(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLMapperEntityResolver</span>()),<br>        configuration, resource, sqlFragments);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XMLMapperBuilder</span><span class="hljs-params">(InputStream inputStream, Configuration configuration, String resource, Map&lt;String, XNode&gt; sqlFragments, String namespace)</span> &#123;<br>    <span class="hljs-built_in">this</span>(inputStream, configuration, resource, sqlFragments);<br>    <span class="hljs-built_in">this</span>.builderAssistant.setCurrentNamespace(namespace);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XMLMapperBuilder</span><span class="hljs-params">(InputStream inputStream, Configuration configuration, String resource, Map&lt;String, XNode&gt; sqlFragments)</span> &#123;<br>    <span class="hljs-built_in">this</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">XPathParser</span>(inputStream, <span class="hljs-literal">true</span>, configuration.getVariables(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLMapperEntityResolver</span>()),<br>        configuration, resource, sqlFragments);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">XMLMapperBuilder</span><span class="hljs-params">(XPathParser parser, Configuration configuration, String resource, Map&lt;String, XNode&gt; sqlFragments)</span> &#123;<br>    <span class="hljs-built_in">super</span>(configuration);<br>    <span class="hljs-built_in">this</span>.builderAssistant = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapperBuilderAssistant</span>(configuration, resource);<br>    <span class="hljs-built_in">this</span>.parser = parser;<br>    <span class="hljs-built_in">this</span>.sqlFragments = sqlFragments;<br>    <span class="hljs-built_in">this</span>.resource = resource;<br>  &#125; <br><br>  <span class="hljs-comment">// 解析</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parse</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 如果没有加载过再加载，防止重复加载</span><br>    <span class="hljs-keyword">if</span> (!configuration.isResourceLoaded(resource)) &#123;<br>      <span class="hljs-comment">// 配置mapper</span><br>      configurationElement(parser.evalNode(<span class="hljs-string">&quot;/mapper&quot;</span>));<br>      <span class="hljs-comment">// 标记一下，已经加载过了</span><br>      configuration.addLoadedResource(resource);<br>      <span class="hljs-comment">// 绑定映射器到namespace</span><br>      bindMapperForNamespace();<br>    &#125;<br><br>    <span class="hljs-comment">// 还有没解析完的东东这里接着解析？  </span><br>    parsePendingResultMaps();<br>    parsePendingChacheRefs();<br>    parsePendingStatements();<br>  &#125; <br><br>  <span class="hljs-comment">// 配置mapper元素</span><br>  <span class="hljs-comment">//    &lt;mapper namespace=&quot;org.mybatis.example.BlogMapper&quot;&gt;</span><br>  <span class="hljs-comment">//      &lt;select id=&quot;selectBlog&quot; parameterType=&quot;int&quot; resultType=&quot;Blog&quot;&gt;</span><br>  <span class="hljs-comment">//        select * from Blog where id = #&#123;id&#125;</span><br>  <span class="hljs-comment">//      &lt;/select&gt;</span><br>  <span class="hljs-comment">//    &lt;/mapper&gt;</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configurationElement</span><span class="hljs-params">(XNode context)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 1.配置namespace</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">namespace</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;namespace&quot;</span>);<br>      <span class="hljs-keyword">if</span> (namespace.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Mapper&#x27;s namespace cannot be empty&quot;</span>);<br>      &#125;<br>      builderAssistant.setCurrentNamespace(namespace);<br>      <span class="hljs-comment">// 2.配置cache-ref</span><br>      cacheRefElement(context.evalNode(<span class="hljs-string">&quot;cache-ref&quot;</span>));<br>      <span class="hljs-comment">// 3.配置cache</span><br>      cacheElement(context.evalNode(<span class="hljs-string">&quot;cache&quot;</span>));<br>      <span class="hljs-comment">// 4.配置parameterMap(已经废弃,老式风格的参数映射)</span><br>      parameterMapElement(context.evalNodes(<span class="hljs-string">&quot;/mapper/parameterMap&quot;</span>));<br>      <span class="hljs-comment">// 5.配置resultMap(高级功能)</span><br>      resultMapElements(context.evalNodes(<span class="hljs-string">&quot;/mapper/resultMap&quot;</span>));<br>      <span class="hljs-comment">// 6.配置sql(定义可重用的 SQL 代码段)</span><br>      sqlElement(context.evalNodes(<span class="hljs-string">&quot;/mapper/sql&quot;</span>));<br>      <span class="hljs-comment">// 7.配置select|insert|update|delete TODO</span><br>      buildStatementFromContext(context.evalNodes(<span class="hljs-string">&quot;select|insert|update|delete&quot;</span>));<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Error parsing Mapper XML. Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">//2.配置cache-ref,在这样的 情况下你可以使用 cache-ref 元素来引用另外一个缓存。 </span><br>  <span class="hljs-comment">//&lt;cache-ref namespace=&quot;com.someone.application.data.SomeMapper&quot;/&gt;</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cacheRefElement</span><span class="hljs-params">(XNode context)</span> &#123;<br>    <span class="hljs-keyword">if</span> (context != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 增加cache-ref</span><br>      configuration.addCacheRef(builderAssistant.getCurrentNamespace(), context.getStringAttribute(<span class="hljs-string">&quot;namespace&quot;</span>));<br>      <span class="hljs-type">CacheRefResolver</span> <span class="hljs-variable">cacheRefResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheRefResolver</span>(builderAssistant, context.getStringAttribute(<span class="hljs-string">&quot;namespace&quot;</span>));<br>      <span class="hljs-keyword">try</span> &#123;<br>        cacheRefResolver.resolveCacheRef();<br>      &#125; <span class="hljs-keyword">catch</span> (IncompleteElementException e) &#123;<br>        configuration.addIncompleteCacheRef(cacheRefResolver);<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">//3.配置cache</span><br>  <span class="hljs-comment">//  &lt;cache</span><br>  <span class="hljs-comment">//  eviction=&quot;FIFO&quot;</span><br>  <span class="hljs-comment">//  flushInterval=&quot;60000&quot;</span><br>  <span class="hljs-comment">//  size=&quot;512&quot;</span><br>  <span class="hljs-comment">//  readOnly=&quot;true&quot;/&gt;</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cacheElement</span><span class="hljs-params">(XNode context)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">if</span> (context != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;PERPETUAL&quot;</span>);<br>      Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Cache</span>&gt; typeClass = typeAliasRegistry.resolveAlias(type);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">eviction</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;eviction&quot;</span>, <span class="hljs-string">&quot;LRU&quot;</span>);<br>      Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Cache</span>&gt; evictionClass = typeAliasRegistry.resolveAlias(eviction);<br>      <span class="hljs-type">Long</span> <span class="hljs-variable">flushInterval</span> <span class="hljs-operator">=</span> context.getLongAttribute(<span class="hljs-string">&quot;flushInterval&quot;</span>);<br>      <span class="hljs-type">Integer</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> context.getIntAttribute(<span class="hljs-string">&quot;size&quot;</span>);<br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">readWrite</span> <span class="hljs-operator">=</span> !context.getBooleanAttribute(<span class="hljs-string">&quot;readOnly&quot;</span>, <span class="hljs-literal">false</span>);<br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">blocking</span> <span class="hljs-operator">=</span> context.getBooleanAttribute(<span class="hljs-string">&quot;blocking&quot;</span>, <span class="hljs-literal">false</span>);<br>      <span class="hljs-comment">// 读入额外的配置信息，易于第三方的缓存扩展,例:</span><br><span class="hljs-comment">//    &lt;cache type=&quot;com.domain.something.MyCustomCache&quot;&gt;</span><br><span class="hljs-comment">//      &lt;property name=&quot;cacheFile&quot; value=&quot;/tmp/my-custom-cache.tmp&quot;/&gt;</span><br><span class="hljs-comment">//    &lt;/cache&gt;</span><br>      <span class="hljs-type">Properties</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> context.getChildrenAsProperties();<br>      <span class="hljs-comment">// 调用builderAssistant.useNewCache</span><br>      builderAssistant.useNewCache(typeClass, evictionClass, flushInterval, size, readWrite, blocking, props);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">//4.配置parameterMap</span><br>  <span class="hljs-comment">//已经被废弃了!老式风格的参数映射。可以忽略</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parameterMapElement</span><span class="hljs-params">(List&lt;XNode&gt; list)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">for</span> (XNode parameterMapNode : list) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> parameterMapNode.getStringAttribute(<span class="hljs-string">&quot;id&quot;</span>);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> parameterMapNode.getStringAttribute(<span class="hljs-string">&quot;type&quot;</span>);<br>      Class&lt;?&gt; parameterClass = resolveClass(type);<br>      List&lt;XNode&gt; parameterNodes = parameterMapNode.evalNodes(<span class="hljs-string">&quot;parameter&quot;</span>);<br>      List&lt;ParameterMapping&gt; parameterMappings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ParameterMapping&gt;();<br>      <span class="hljs-keyword">for</span> (XNode parameterNode : parameterNodes) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">property</span> <span class="hljs-operator">=</span> parameterNode.getStringAttribute(<span class="hljs-string">&quot;property&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">javaType</span> <span class="hljs-operator">=</span> parameterNode.getStringAttribute(<span class="hljs-string">&quot;javaType&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jdbcType</span> <span class="hljs-operator">=</span> parameterNode.getStringAttribute(<span class="hljs-string">&quot;jdbcType&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">resultMap</span> <span class="hljs-operator">=</span> parameterNode.getStringAttribute(<span class="hljs-string">&quot;resultMap&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">mode</span> <span class="hljs-operator">=</span> parameterNode.getStringAttribute(<span class="hljs-string">&quot;mode&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">typeHandler</span> <span class="hljs-operator">=</span> parameterNode.getStringAttribute(<span class="hljs-string">&quot;typeHandler&quot;</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">numericScale</span> <span class="hljs-operator">=</span> parameterNode.getIntAttribute(<span class="hljs-string">&quot;numericScale&quot;</span>);<br>        <span class="hljs-type">ParameterMode</span> <span class="hljs-variable">modeEnum</span> <span class="hljs-operator">=</span> resolveParameterMode(mode);<br>        Class&lt;?&gt; javaTypeClass = resolveClass(javaType);<br>        <span class="hljs-type">JdbcType</span> <span class="hljs-variable">jdbcTypeEnum</span> <span class="hljs-operator">=</span> resolveJdbcType(jdbcType);<br>        <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TypeHandler</span>&lt;?&gt;&gt; typeHandlerClass = (Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TypeHandler</span>&lt;?&gt;&gt;) resolveClass(typeHandler);<br>        <span class="hljs-type">ParameterMapping</span> <span class="hljs-variable">parameterMapping</span> <span class="hljs-operator">=</span> builderAssistant.buildParameterMapping(parameterClass, property, javaTypeClass, jdbcTypeEnum, resultMap, modeEnum, typeHandlerClass, numericScale);<br>        parameterMappings.add(parameterMapping);<br>      &#125;<br>      builderAssistant.addParameterMap(id, parameterClass, parameterMappings);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">//5.配置resultMap,高级功能</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resultMapElements</span><span class="hljs-params">(List&lt;XNode&gt; list)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 基本上就是循环把resultMap加入到Configuration里去,保持2份，一份缩略，一分全名</span><br>    <span class="hljs-keyword">for</span> (XNode resultMapNode : list) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 循环调resultMapElement</span><br>        resultMapElement(resultMapNode);<br>      &#125; <span class="hljs-keyword">catch</span> (IncompleteElementException e) &#123;<br>        <span class="hljs-comment">// ignore, it will be retried</span><br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">//5.1 配置resultMap</span><br>  <span class="hljs-keyword">private</span> ResultMap <span class="hljs-title function_">resultMapElement</span><span class="hljs-params">(XNode resultMapNode)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">return</span> resultMapElement(resultMapNode, Collections.&lt;ResultMapping&gt; emptyList());<br>  &#125; <br><br>  <span class="hljs-comment">//5.1 配置resultMap</span><br>  <span class="hljs-keyword">private</span> ResultMap <span class="hljs-title function_">resultMapElement</span><span class="hljs-params">(XNode resultMapNode, List&lt;ResultMapping&gt; additionalResultMappings)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">//错误上下文</span><br>    <span class="hljs-comment">//取得标示符   (&quot;resultMap[userResultMap]&quot;)</span><br>    <span class="hljs-comment">//    &lt;resultMap id=&quot;userResultMap&quot; type=&quot;User&quot;&gt;</span><br>    <span class="hljs-comment">//      &lt;id property=&quot;id&quot; column=&quot;user_id&quot; /&gt;</span><br>    <span class="hljs-comment">//      &lt;result property=&quot;username&quot; column=&quot;username&quot;/&gt;</span><br>    <span class="hljs-comment">//      &lt;result property=&quot;password&quot; column=&quot;password&quot;/&gt;</span><br>    <span class="hljs-comment">//    &lt;/resultMap&gt;</span><br>    ErrorContext.instance().activity(<span class="hljs-string">&quot;processing &quot;</span> + resultMapNode.getValueBasedIdentifier());<br>    <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> resultMapNode.getStringAttribute(<span class="hljs-string">&quot;id&quot;</span>,<br>        resultMapNode.getValueBasedIdentifier());<br>    <span class="hljs-comment">//一般拿type就可以了，后面3个应该是是兼容老的代码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> resultMapNode.getStringAttribute(<span class="hljs-string">&quot;type&quot;</span>,<br>        resultMapNode.getStringAttribute(<span class="hljs-string">&quot;ofType&quot;</span>,<br>            resultMapNode.getStringAttribute(<span class="hljs-string">&quot;resultType&quot;</span>,<br>                resultMapNode.getStringAttribute(<span class="hljs-string">&quot;javaType&quot;</span>))));<br>    <span class="hljs-comment">//高级功能，还支持继承?</span><br>    <span class="hljs-comment">//  &lt;resultMap id=&quot;carResult&quot; type=&quot;Car&quot; extends=&quot;vehicleResult&quot;&gt;</span><br>    <span class="hljs-comment">//    &lt;result property=&quot;doorCount&quot; column=&quot;door_count&quot; /&gt;</span><br>    <span class="hljs-comment">//  &lt;/resultMap&gt;</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">extend</span> <span class="hljs-operator">=</span> resultMapNode.getStringAttribute(<span class="hljs-string">&quot;extends&quot;</span>);<br>    <span class="hljs-comment">//autoMapping</span><br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">autoMapping</span> <span class="hljs-operator">=</span> resultMapNode.getBooleanAttribute(<span class="hljs-string">&quot;autoMapping&quot;</span>);<br>    Class&lt;?&gt; typeClass = resolveClass(type);<br>    <span class="hljs-type">Discriminator</span> <span class="hljs-variable">discriminator</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    List&lt;ResultMapping&gt; resultMappings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ResultMapping&gt;();<br>    resultMappings.addAll(additionalResultMappings);<br>    List&lt;XNode&gt; resultChildren = resultMapNode.getChildren();<br>    <span class="hljs-keyword">for</span> (XNode resultChild : resultChildren) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;constructor&quot;</span>.equals(resultChild.getName())) &#123;<br>        <span class="hljs-comment">// 解析result map的constructor</span><br>        processConstructorElement(resultChild, typeClass, resultMappings);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;discriminator&quot;</span>.equals(resultChild.getName())) &#123;<br>        <span class="hljs-comment">// 解析result map的discriminator</span><br>        discriminator = processDiscriminatorElement(resultChild, typeClass, resultMappings);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        List&lt;ResultFlag&gt; flags = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ResultFlag&gt;();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;id&quot;</span>.equals(resultChild.getName())) &#123;<br>          flags.add(ResultFlag.ID);<br>        &#125;<br>        <span class="hljs-comment">// 调5.1.1 buildResultMappingFromContext,得到ResultMapping</span><br>        resultMappings.add(buildResultMappingFromContext(resultChild, typeClass, flags));<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">//最后再调ResultMapResolver得到ResultMap</span><br>    <span class="hljs-type">ResultMapResolver</span> <span class="hljs-variable">resultMapResolver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultMapResolver</span>(builderAssistant, id, typeClass, extend, discriminator, resultMappings, autoMapping);<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> resultMapResolver.resolve();<br>    &#125; <span class="hljs-keyword">catch</span> (IncompleteElementException  e) &#123;<br>      configuration.addIncompleteResultMap(resultMapResolver);<br>      <span class="hljs-keyword">throw</span> e;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">//解析result map的constructor</span><br>  <span class="hljs-comment">//&lt;constructor&gt;</span><br>  <span class="hljs-comment">//  &lt;idArg column=&quot;blog_id&quot; javaType=&quot;int&quot;/&gt;</span><br>  <span class="hljs-comment">//&lt;/constructor&gt;</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processConstructorElement</span><span class="hljs-params">(XNode resultChild, Class&lt;?&gt; resultType, List&lt;ResultMapping&gt; resultMappings)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    List&lt;XNode&gt; argChildren = resultChild.getChildren();<br>    <span class="hljs-keyword">for</span> (XNode argChild : argChildren) &#123;<br>      List&lt;ResultFlag&gt; flags = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ResultFlag&gt;();<br>      <span class="hljs-comment">// 结果标志加上ID和CONSTRUCTOR</span><br>      flags.add(ResultFlag.CONSTRUCTOR);<br>      <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;idArg&quot;</span>.equals(argChild.getName())) &#123;<br>        flags.add(ResultFlag.ID);<br>      &#125;<br>      resultMappings.add(buildResultMappingFromContext(argChild, resultType, flags));<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 5.1.1 构建resultMap</span><br>  <span class="hljs-keyword">private</span> ResultMapping <span class="hljs-title function_">buildResultMappingFromContext</span><span class="hljs-params">(XNode context, Class&lt;?&gt; resultType, List&lt;ResultFlag&gt; flags)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// &lt;id property=&quot;id&quot; column=&quot;author_id&quot;/&gt;</span><br>    <span class="hljs-comment">// &lt;result property=&quot;username&quot; column=&quot;author_username&quot;/&gt;</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">property</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;property&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">column</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;column&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">javaType</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;javaType&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">jdbcType</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;jdbcType&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">nestedSelect</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;select&quot;</span>);<br>    <span class="hljs-comment">// 处理嵌套的result map</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">nestedResultMap</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;resultMap&quot;</span>,<br>        processNestedResultMappings(context, Collections.&lt;ResultMapping&gt; emptyList()));<br>    <span class="hljs-type">String</span> <span class="hljs-variable">notNullColumn</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;notNullColumn&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">columnPrefix</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;columnPrefix&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">typeHandler</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;typeHandler&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">resulSet</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;resultSet&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">foreignColumn</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;foreignColumn&quot;</span>);<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">lazy</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lazy&quot;</span>.equals(context.getStringAttribute(<span class="hljs-string">&quot;fetchType&quot;</span>, configuration.isLazyLoadingEnabled() ? <span class="hljs-string">&quot;lazy&quot;</span> : <span class="hljs-string">&quot;eager&quot;</span>));<br>    Class&lt;?&gt; javaTypeClass = resolveClass(javaType);<br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TypeHandler</span>&lt;?&gt;&gt; typeHandlerClass = (Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TypeHandler</span>&lt;?&gt;&gt;) resolveClass(typeHandler);<br>    <span class="hljs-type">JdbcType</span> <span class="hljs-variable">jdbcTypeEnum</span> <span class="hljs-operator">=</span> resolveJdbcType(jdbcType);<br>    <span class="hljs-comment">// 又去调builderAssistant.buildResultMapping</span><br>    <span class="hljs-keyword">return</span> builderAssistant.buildResultMapping(resultType, property, column, javaTypeClass, jdbcTypeEnum, nestedSelect, nestedResultMap, notNullColumn, columnPrefix, typeHandlerClass, flags, resulSet, foreignColumn, lazy);<br>  &#125; <br><br>  <span class="hljs-comment">//5.1.1.1 处理嵌套的result map</span><br>  <span class="hljs-keyword">private</span> String <span class="hljs-title function_">processNestedResultMappings</span><span class="hljs-params">(XNode context, List&lt;ResultMapping&gt; resultMappings)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-comment">// 处理association|collection|case</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;association&quot;</span>.equals(context.getName())<br>        || <span class="hljs-string">&quot;collection&quot;</span>.equals(context.getName())<br>        || <span class="hljs-string">&quot;case&quot;</span>.equals(context.getName())) &#123;<br><br>      <span class="hljs-comment">//   &lt;resultMap id=&quot;blogResult&quot; type=&quot;Blog&quot;&gt;</span><br>      <span class="hljs-comment">//      &lt;association property=&quot;author&quot; column=&quot;author_id&quot; javaType=&quot;Author&quot; select=&quot;selectAuthor&quot;/&gt;</span><br>      <span class="hljs-comment">//   &lt;/resultMap&gt;</span><br>      <span class="hljs-comment">//如果不是嵌套查询</span><br>      <span class="hljs-keyword">if</span> (context.getStringAttribute(<span class="hljs-string">&quot;select&quot;</span>) == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">//则递归调用5.1 resultMapElement</span><br>        <span class="hljs-type">ResultMap</span> <span class="hljs-variable">resultMap</span> <span class="hljs-operator">=</span> resultMapElement(context, resultMappings);<br>        <span class="hljs-keyword">return</span> resultMap.getId();<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125; <br><br>  <span class="hljs-comment">//解析result map的discriminator</span><br>  <span class="hljs-comment">//&lt;discriminator javaType=&quot;int&quot; column=&quot;draft&quot;&gt;</span><br>  <span class="hljs-comment">//  &lt;case value=&quot;1&quot; resultType=&quot;DraftPost&quot;/&gt;</span><br>  <span class="hljs-comment">//&lt;/discriminator&gt;</span><br>  <span class="hljs-keyword">private</span> Discriminator <span class="hljs-title function_">processDiscriminatorElement</span><span class="hljs-params">(XNode context, Class&lt;?&gt; resultType, List&lt;ResultMapping&gt; resultMappings)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">column</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;column&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">javaType</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;javaType&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">jdbcType</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;jdbcType&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">typeHandler</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;typeHandler&quot;</span>);<br>    Class&lt;?&gt; javaTypeClass = resolveClass(javaType);<br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TypeHandler</span>&lt;?&gt;&gt; typeHandlerClass = (Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TypeHandler</span>&lt;?&gt;&gt;) resolveClass(typeHandler);<br>    <span class="hljs-type">JdbcType</span> <span class="hljs-variable">jdbcTypeEnum</span> <span class="hljs-operator">=</span> resolveJdbcType(jdbcType);<br>    Map&lt;String, String&gt; discriminatorMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;();<br>    <span class="hljs-keyword">for</span> (XNode caseChild : context.getChildren()) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> caseChild.getStringAttribute(<span class="hljs-string">&quot;value&quot;</span>);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">resultMap</span> <span class="hljs-operator">=</span> caseChild.getStringAttribute(<span class="hljs-string">&quot;resultMap&quot;</span>, processNestedResultMappings(caseChild, resultMappings));<br>      discriminatorMap.put(value, resultMap);<br>    &#125;<br>    <span class="hljs-keyword">return</span> builderAssistant.buildDiscriminator(resultType, column, javaTypeClass, jdbcTypeEnum, typeHandlerClass, discriminatorMap);<br>  &#125; <br><br>  <span class="hljs-comment">//6 配置sql(定义可重用的 SQL 代码段)</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sqlElement</span><span class="hljs-params">(List&lt;XNode&gt; list)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">if</span> (configuration.getDatabaseId() != <span class="hljs-literal">null</span>) &#123;<br>      sqlElement(list, configuration.getDatabaseId());<br>    &#125;<br>    sqlElement(list, <span class="hljs-literal">null</span>);<br>  &#125; <br><br>  <span class="hljs-comment">//6.1 配置sql</span><br>  <span class="hljs-comment">//&lt;sql id=&quot;userColumns&quot;&gt; id,username,password &lt;/sql&gt;</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sqlElement</span><span class="hljs-params">(List&lt;XNode&gt; list, String requiredDatabaseId)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">for</span> (XNode context : list) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">databaseId</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;databaseId&quot;</span>);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> context.getStringAttribute(<span class="hljs-string">&quot;id&quot;</span>);<br>      id = builderAssistant.applyCurrentNamespace(id, <span class="hljs-literal">false</span>);<br>      <span class="hljs-comment">//比较简单，就是将sql片段放入hashmap,不过此时还没有解析sql片段</span><br>      <span class="hljs-keyword">if</span> (databaseIdMatchesCurrent(id, databaseId, requiredDatabaseId)) &#123;<br>        sqlFragments.put(id, context);<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">databaseIdMatchesCurrent</span><span class="hljs-params">(String id, String databaseId, String requiredDatabaseId)</span> &#123;<br>    <span class="hljs-keyword">if</span> (requiredDatabaseId != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">if</span> (!requiredDatabaseId.equals(databaseId)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (databaseId != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>      <span class="hljs-comment">// skip this fragment if there is a previous one with a not null databaseId</span><br>      <span class="hljs-comment">// 如果有重名的id了</span><br>      <span class="hljs-comment">// &lt;sql id=&quot;userColumns&quot;&gt; id,username,password &lt;/sql&gt;</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.sqlFragments.containsKey(id)) &#123;<br>        <span class="hljs-type">XNode</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.sqlFragments.get(id);<br>        <span class="hljs-comment">// 如果之前那个重名的sql id有databaseId，则false，否则难道true？这样新的sql覆盖老的sql？？？</span><br>        <span class="hljs-keyword">if</span> (context.getStringAttribute(<span class="hljs-string">&quot;databaseId&quot;</span>) != <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125; <br><br>  <span class="hljs-comment">// 7.配置select|insert|update|delete</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildStatementFromContext</span><span class="hljs-params">(List&lt;XNode&gt; list)</span> &#123;<br>    <span class="hljs-comment">// 调用7.1构建语句</span><br>    <span class="hljs-keyword">if</span> (configuration.getDatabaseId() != <span class="hljs-literal">null</span>) &#123;<br>      buildStatementFromContext(list, configuration.getDatabaseId());<br>    &#125;<br>    buildStatementFromContext(list, <span class="hljs-literal">null</span>);<br>  &#125; <br><br>  <span class="hljs-comment">// 7.1构建语句</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildStatementFromContext</span><span class="hljs-params">(List&lt;XNode&gt; list, String requiredDatabaseId)</span> &#123;<br>    <span class="hljs-keyword">for</span> (XNode context : list) &#123;<br>      <span class="hljs-comment">// 构建所有语句,一个mapper下可以有很多select</span><br>      <span class="hljs-comment">// 语句比较复杂，核心都在这里面，所以调用XMLStatementBuilder</span><br>      <span class="hljs-keyword">final</span> <span class="hljs-type">XMLStatementBuilder</span> <span class="hljs-variable">statementParser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLStatementBuilder</span>(configuration, builderAssistant, context, requiredDatabaseId);<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 核心XMLStatementBuilder.parseStatementNode</span><br>        statementParser.parseStatementNode();<br>      &#125; <span class="hljs-keyword">catch</span> (IncompleteElementException e) &#123;<br>        <span class="hljs-comment">// 如果出现SQL语句不完整，把它记下来，塞到configuration去</span><br>        configuration.addIncompleteStatement(statementParser);<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 7.1构建语句</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildStatementFromContext</span><span class="hljs-params">(List&lt;XNode&gt; list, String requiredDatabaseId)</span> &#123;<br>    <span class="hljs-keyword">for</span> (XNode context : list) &#123;<br>      <span class="hljs-comment">// 构建所有语句,一个mapper下可以有很多select</span><br>      <span class="hljs-comment">// 语句比较复杂，核心都在这里面，所以调用XMLStatementBuilder</span><br>      <span class="hljs-keyword">final</span> <span class="hljs-type">XMLStatementBuilder</span> <span class="hljs-variable">statementParser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLStatementBuilder</span>(configuration, builderAssistant, context, requiredDatabaseId);<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 核心XMLStatementBuilder.parseStatementNode</span><br>        statementParser.parseStatementNode();<br>      &#125; <span class="hljs-keyword">catch</span> (IncompleteElementException e) &#123;<br>        <span class="hljs-comment">// 如果出现SQL语句不完整，把它记下来，塞到configuration去</span><br>        configuration.addIncompleteStatement(statementParser);<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bindMapperForNamespace</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">namespace</span> <span class="hljs-operator">=</span> builderAssistant.getCurrentNamespace();<br>    <span class="hljs-keyword">if</span> (namespace != <span class="hljs-literal">null</span>) &#123;<br>      Class&lt;?&gt; boundType = <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">try</span> &#123;<br>        boundType = Resources.classForName(namespace);<br>      &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>        <span class="hljs-comment">//ignore, bound type is not required</span><br>      &#125;<br>      <span class="hljs-keyword">if</span> (boundType != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!configuration.hasMapper(boundType)) &#123;<br>          <span class="hljs-comment">// Spring may not know the real resource name so we set a flag</span><br>          <span class="hljs-comment">// to prevent loading again this resource from the mapper interface</span><br>          <span class="hljs-comment">// look at MapperAnnotationBuilder#loadXmlResource</span><br>          configuration.addLoadedResource(<span class="hljs-string">&quot;namespace:&quot;</span> + namespace);<br>          configuration.addMapper(boundType);<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parsePendingResultMaps</span><span class="hljs-params">()</span> &#123;<br>    Collection&lt;ResultMapResolver&gt; incompleteResultMaps = configuration.getIncompleteResultMaps();<br>    <span class="hljs-keyword">synchronized</span> (incompleteResultMaps) &#123;<br>      Iterator&lt;ResultMapResolver&gt; iter = incompleteResultMaps.iterator();<br>      <span class="hljs-keyword">while</span> (iter.hasNext()) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          iter.next().resolve();<br>          iter.remove();<br>        &#125; <span class="hljs-keyword">catch</span> (IncompleteElementException e) &#123;<br>          <span class="hljs-comment">// ResultMap is still missing a resource...</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parsePendingChacheRefs</span><span class="hljs-params">()</span> &#123;<br>    Collection&lt;CacheRefResolver&gt; incompleteCacheRefs = configuration.getIncompleteCacheRefs();<br>    <span class="hljs-keyword">synchronized</span> (incompleteCacheRefs) &#123;<br>      Iterator&lt;CacheRefResolver&gt; iter = incompleteCacheRefs.iterator();<br>      <span class="hljs-keyword">while</span> (iter.hasNext()) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          iter.next().resolveCacheRef();<br>          iter.remove();<br>        &#125; <span class="hljs-keyword">catch</span> (IncompleteElementException e) &#123;<br>          <span class="hljs-comment">// Cache ref is still missing a resource...</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parsePendingStatements</span><span class="hljs-params">()</span> &#123;<br>    Collection&lt;XMLStatementBuilder&gt; incompleteStatements = configuration.getIncompleteStatements();<br>    <span class="hljs-keyword">synchronized</span> (incompleteStatements) &#123;<br>      Iterator&lt;XMLStatementBuilder&gt; iter = incompleteStatements.iterator();<br>      <span class="hljs-keyword">while</span> (iter.hasNext()) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          iter.next().parseStatementNode();<br>          iter.remove();<br>        &#125; <span class="hljs-keyword">catch</span> (IncompleteElementException e) &#123;<br>          <span class="hljs-comment">// Statement is still missing a resource...</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ProviderSqlSource"><a href="#ProviderSqlSource" class="headerlink" title="ProviderSqlSource"></a>ProviderSqlSource</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProviderSqlSource</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SqlSource</span> &#123; <br><br>  <span class="hljs-keyword">private</span> SqlSourceBuilder sqlSourceParser;<br>  <span class="hljs-keyword">private</span> Class&lt;?&gt; providerType;<br>  <span class="hljs-keyword">private</span> Method providerMethod;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> providerTakesParameterObject; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProviderSqlSource</span><span class="hljs-params">(Configuration config, Object provider)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">providerMethodName</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-built_in">this</span>.sqlSourceParser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSourceBuilder</span>(config); <br>      <span class="hljs-comment">// sql源码提供类</span><br>      <span class="hljs-built_in">this</span>.providerType = (Class&lt;?&gt;) provider.getClass().getMethod(<span class="hljs-string">&quot;type&quot;</span>).invoke(provider);<br>      <span class="hljs-comment">// sql源码提供类具体提供sql源码的函数名</span><br>      providerMethodName = (String) provider.getClass().getMethod(<span class="hljs-string">&quot;method&quot;</span>).invoke(provider);<br><br>      <span class="hljs-keyword">for</span> (Method m : <span class="hljs-built_in">this</span>.providerType.getMethods()) &#123;<br>        <span class="hljs-keyword">if</span> (providerMethodName.equals(m.getName())) &#123;<br>          <span class="hljs-keyword">if</span> (m.getParameterTypes().length &lt; <span class="hljs-number">2</span><br>              &amp;&amp; m.getReturnType() == String.class) &#123;<br>            <span class="hljs-built_in">this</span>.providerMethod = m;<br>            <span class="hljs-built_in">this</span>.providerTakesParameterObject = m.getParameterTypes().length == <span class="hljs-number">1</span>;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Error creating SqlSource for SqlProvider.  Cause: &quot;</span> + e, e);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.providerMethod == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Error creating SqlSource for SqlProvider. Method &#x27;&quot;</span><br>          + providerMethodName + <span class="hljs-string">&quot;&#x27; not found in SqlProvider &#x27;&quot;</span> + <span class="hljs-built_in">this</span>.providerType.getName() + <span class="hljs-string">&quot;&#x27;.&quot;</span>);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> BoundSql <span class="hljs-title function_">getBoundSql</span><span class="hljs-params">(Object parameterObject)</span> &#123;<br>    <span class="hljs-type">SqlSource</span> <span class="hljs-variable">sqlSource</span> <span class="hljs-operator">=</span> createSqlSource(parameterObject);<br>    <span class="hljs-keyword">return</span> sqlSource.getBoundSql(parameterObject);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> SqlSource <span class="hljs-title function_">createSqlSource</span><span class="hljs-params">(Object parameterObject)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      String sql;<br>      <span class="hljs-keyword">if</span> (providerTakesParameterObject) &#123;<br>        sql = (String) providerMethod.invoke(providerType.newInstance(), parameterObject);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        sql = (String) providerMethod.invoke(providerType.newInstance());<br>      &#125;<br>      Class&lt;?&gt; parameterType = parameterObject == <span class="hljs-literal">null</span> ? Object.class : parameterObject.getClass();<br>      <span class="hljs-keyword">return</span> sqlSourceParser.parse(sql, parameterType, <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;());<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Error invoking SqlProvider method (&quot;</span><br>          + providerType.getName() + <span class="hljs-string">&quot;.&quot;</span> + providerMethod.getName()<br>          + <span class="hljs-string">&quot;).  Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MapperAnnotationBuilder"><a href="#MapperAnnotationBuilder" class="headerlink" title="MapperAnnotationBuilder"></a>MapperAnnotationBuilder</h4><p>    注解方式构建mapper，一般不用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapperAnnotationBuilder</span> &#123; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Set&lt;Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt;&gt; sqlAnnotationTypes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt;&gt;();<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Set&lt;Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt;&gt; sqlProviderAnnotationTypes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt;&gt;(); <br><br>  <span class="hljs-keyword">private</span> Configuration configuration;<br>  <span class="hljs-keyword">private</span> MapperBuilderAssistant assistant;<br>  <span class="hljs-keyword">private</span> Class&lt;?&gt; type; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">MapperAnnotationBuilder</span><span class="hljs-params">(Configuration configuration, Class&lt;?&gt; type)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> type.getName().replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-string">&quot;.java (best guess)&quot;</span>;<br>    <span class="hljs-built_in">this</span>.assistant = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapperBuilderAssistant</span>(configuration, resource);<br>    <span class="hljs-built_in">this</span>.configuration = configuration;<br>    <span class="hljs-built_in">this</span>.type = type;<br><br>    sqlAnnotationTypes.add(Select.class);<br>    sqlAnnotationTypes.add(Insert.class);<br>    sqlAnnotationTypes.add(Update.class);<br>    sqlAnnotationTypes.add(Delete.class);<br><br>    sqlProviderAnnotationTypes.add(SelectProvider.class);<br>    sqlProviderAnnotationTypes.add(InsertProvider.class);<br>    sqlProviderAnnotationTypes.add(UpdateProvider.class);<br>    sqlProviderAnnotationTypes.add(DeleteProvider.class);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parse</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> type.toString();<br>    <span class="hljs-keyword">if</span> (!configuration.isResourceLoaded(resource)) &#123; <br>      <span class="hljs-comment">// 加载对应的xml文件</span><br>      loadXmlResource();<br>      configuration.addLoadedResource(resource);<br>      assistant.setCurrentNamespace(type.getName());<br>      parseCache();<br>      parseCacheRef();<br>      Method[] methods = type.getMethods();<br>      <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-comment">// issue #237</span><br>          <span class="hljs-keyword">if</span> (!method.isBridge()) &#123;<br>            parseStatement(method);<br>          &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IncompleteElementException e) &#123;<br>          configuration.addIncompleteMethod(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodResolver</span>(<span class="hljs-built_in">this</span>, method));<br>        &#125;<br>      &#125;<br>    &#125;<br>    parsePendingMethods();<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadXmlResource</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// Spring may not know the real resource name so we check a flag</span><br>    <span class="hljs-comment">// to prevent loading again a resource twice</span><br>    <span class="hljs-comment">// this flag is set at XMLMapperBuilder#bindMapperForNamespace</span><br>    <span class="hljs-keyword">if</span> (!configuration.isResourceLoaded(<span class="hljs-string">&quot;namespace:&quot;</span> + type.getName())) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">xmlResource</span> <span class="hljs-operator">=</span> type.getName().replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-string">&quot;.xml&quot;</span>;<br>      <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">try</span> &#123;<br>        inputStream = Resources.getResourceAsStream(type.getClassLoader(), xmlResource);<br>      &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-comment">// ignore, resource is not required</span><br>      &#125;<br>      <span class="hljs-keyword">if</span> (inputStream != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">XMLMapperBuilder</span> <span class="hljs-variable">xmlParser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLMapperBuilder</span>(inputStream, assistant.getConfiguration(), xmlResource, configuration.getSqlFragments(), type.getName());<br>        xmlParser.parse();<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// CacheNamespace 定义的操作会覆盖xml文件中的相同操作</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseCache</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">CacheNamespace</span> <span class="hljs-variable">cacheDomain</span> <span class="hljs-operator">=</span> type.getAnnotation(CacheNamespace.class);<br>    <span class="hljs-keyword">if</span> (cacheDomain != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">Integer</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> cacheDomain.size() == <span class="hljs-number">0</span> ? <span class="hljs-literal">null</span> : cacheDomain.size();<br>      <span class="hljs-type">Long</span> <span class="hljs-variable">flushInterval</span> <span class="hljs-operator">=</span> cacheDomain.flushInterval() == <span class="hljs-number">0</span> ? <span class="hljs-literal">null</span> : cacheDomain.flushInterval();<br>      assistant.useNewCache(cacheDomain.implementation(), cacheDomain.eviction(), flushInterval, size, cacheDomain.readWrite(), cacheDomain.blocking(), <span class="hljs-literal">null</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseCacheRef</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">CacheNamespaceRef</span> <span class="hljs-variable">cacheDomainRef</span> <span class="hljs-operator">=</span> type.getAnnotation(CacheNamespaceRef.class);<br>    <span class="hljs-keyword">if</span> (cacheDomainRef != <span class="hljs-literal">null</span>) &#123;<br>      assistant.useCacheRef(cacheDomainRef.value().getName());<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">parseStatement</span><span class="hljs-params">(Method method)</span> &#123;<br>    Class&lt;?&gt; parameterTypeClass = getParameterType(method);<br>    <span class="hljs-type">LanguageDriver</span> <span class="hljs-variable">languageDriver</span> <span class="hljs-operator">=</span> getLanguageDriver(method);<br>    <span class="hljs-type">SqlSource</span> <span class="hljs-variable">sqlSource</span> <span class="hljs-operator">=</span> getSqlSourceFromAnnotations(method, parameterTypeClass, languageDriver);<br>    <span class="hljs-keyword">if</span> (sqlSource != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">Options</span> <span class="hljs-variable">options</span> <span class="hljs-operator">=</span> method.getAnnotation(Options.class);<br>      <span class="hljs-comment">// mappedStatementId 由 类名.方法名 组成</span><br>      <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">mappedStatementId</span> <span class="hljs-operator">=</span> type.getName() + <span class="hljs-string">&quot;.&quot;</span> + method.getName();<br>      <span class="hljs-type">Integer</span> <span class="hljs-variable">fetchSize</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-type">Integer</span> <span class="hljs-variable">timeout</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-type">StatementType</span> <span class="hljs-variable">statementType</span> <span class="hljs-operator">=</span> StatementType.PREPARED;<br>      <span class="hljs-type">ResultSetType</span> <span class="hljs-variable">resultSetType</span> <span class="hljs-operator">=</span> ResultSetType.FORWARD_ONLY;<br>      <span class="hljs-comment">// 获取 sql 类型</span><br>      <span class="hljs-type">SqlCommandType</span> <span class="hljs-variable">sqlCommandType</span> <span class="hljs-operator">=</span> getSqlCommandType(method);<br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">isSelect</span> <span class="hljs-operator">=</span> sqlCommandType == SqlCommandType.SELECT;<br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">flushCache</span> <span class="hljs-operator">=</span> !isSelect;<br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">useCache</span> <span class="hljs-operator">=</span> isSelect;<br><br>      KeyGenerator keyGenerator;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">keyProperty</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;id&quot;</span>;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">keyColumn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; <br>      <span class="hljs-comment">// INSERT 或者 UPDATE 方法需要考虑是否指定了keyGenerator</span><br>      <span class="hljs-keyword">if</span> (SqlCommandType.INSERT.equals(sqlCommandType) || SqlCommandType.UPDATE.equals(sqlCommandType)) &#123;<br>        <span class="hljs-comment">// first check for SelectKey annotation - that overrides everything else</span><br>        <span class="hljs-type">SelectKey</span> <span class="hljs-variable">selectKey</span> <span class="hljs-operator">=</span> method.getAnnotation(SelectKey.class);<br>        <span class="hljs-keyword">if</span> (selectKey != <span class="hljs-literal">null</span>) &#123;<br>          keyGenerator = handleSelectKeyAnnotation(selectKey, mappedStatementId, getParameterType(method), languageDriver);<br>          keyProperty = selectKey.keyProperty();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (options == <span class="hljs-literal">null</span>) &#123;<br>          keyGenerator = configuration.isUseGeneratedKeys() ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jdbc3KeyGenerator</span>() : <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoKeyGenerator</span>();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          keyGenerator = options.useGeneratedKeys() ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jdbc3KeyGenerator</span>() : <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoKeyGenerator</span>();<br>          keyProperty = options.keyProperty();<br>          keyColumn = options.keyColumn();<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        keyGenerator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoKeyGenerator</span>();<br>      &#125;<br><br>      <span class="hljs-comment">// 一些额外选项</span><br>      <span class="hljs-keyword">if</span> (options != <span class="hljs-literal">null</span>) &#123;<br>        flushCache = options.flushCache();<br>        useCache = options.useCache();<br>        fetchSize = options.fetchSize() &gt; -<span class="hljs-number">1</span> || options.fetchSize() == Integer.MIN_VALUE ? options.fetchSize() : <span class="hljs-literal">null</span>; <span class="hljs-comment">//issue #348</span><br>        timeout = options.timeout() &gt; -<span class="hljs-number">1</span> ? options.timeout() : <span class="hljs-literal">null</span>;<br>        statementType = options.statementType();<br>        resultSetType = options.resultSetType();<br>      &#125;<br><br>      <span class="hljs-type">String</span> <span class="hljs-variable">resultMapId</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-type">ResultMap</span> <span class="hljs-variable">resultMapAnnotation</span> <span class="hljs-operator">=</span> method.getAnnotation(ResultMap.class);<br>      <span class="hljs-keyword">if</span> (resultMapAnnotation != <span class="hljs-literal">null</span>) &#123;<br>        String[] resultMaps = resultMapAnnotation.value();<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (String resultMap : resultMaps) &#123;<br>          <span class="hljs-keyword">if</span> (sb.length() &gt; <span class="hljs-number">0</span>) &#123;<br>            sb.append(<span class="hljs-string">&quot;,&quot;</span>);<br>          &#125;<br>          sb.append(resultMap);<br>        &#125;<br>        resultMapId = sb.toString();<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isSelect) &#123;<br>        resultMapId = parseResultMap(method);<br>      &#125;<br><br>      assistant.addMappedStatement(<br>          mappedStatementId,<br>          sqlSource,<br>          statementType,<br>          sqlCommandType,<br>          fetchSize,<br>          timeout,<br>          <span class="hljs-comment">// ParameterMapID</span><br>          <span class="hljs-literal">null</span>,<br>          parameterTypeClass,<br>          resultMapId,<br>          getReturnType(method),<br>          resultSetType,<br>          flushCache,<br>          useCache,<br>          <span class="hljs-comment">// TODO issue #577</span><br>          <span class="hljs-literal">false</span>,<br>          keyGenerator,<br>          keyProperty,<br>          keyColumn,<br>          <span class="hljs-comment">// DatabaseID</span><br>          <span class="hljs-literal">null</span>,<br>          languageDriver,<br>          <span class="hljs-comment">// ResultSets</span><br>          <span class="hljs-literal">null</span>);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Class&lt;?&gt; getParameterType(Method method) &#123;<br>    Class&lt;?&gt; parameterType = <span class="hljs-literal">null</span>;<br>    Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; parameterTypes.length; i++) &#123;<br>      <span class="hljs-keyword">if</span> (!RowBounds.class.isAssignableFrom(parameterTypes[i]) &amp;&amp; !ResultHandler.class.isAssignableFrom(parameterTypes[i])) &#123;<br>        <span class="hljs-keyword">if</span> (parameterType == <span class="hljs-literal">null</span>) &#123;<br>          parameterType = parameterTypes[i];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// issue #135</span><br>          <span class="hljs-comment">// 存在多个参数的话，设置为 ParamMap</span><br>          parameterType = ParamMap.class;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> parameterType;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> LanguageDriver <span class="hljs-title function_">getLanguageDriver</span><span class="hljs-params">(Method method)</span> &#123;<br>    <span class="hljs-type">Lang</span> <span class="hljs-variable">lang</span> <span class="hljs-operator">=</span> method.getAnnotation(Lang.class);<br>    Class&lt;?&gt; langClass = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (lang != <span class="hljs-literal">null</span>) &#123;<br>      langClass = lang.value();<br>    &#125;<br>    <span class="hljs-keyword">return</span> assistant.getLanguageDriver(langClass);<br>  &#125; <br><br>  <span class="hljs-comment">// 将注解的内容转换为 SqlSource</span><br>  <span class="hljs-keyword">private</span> SqlSource <span class="hljs-title function_">getSqlSourceFromAnnotations</span><span class="hljs-params">(Method method, Class&lt;?&gt; parameterType, LanguageDriver languageDriver)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; sqlAnnotationType = getSqlAnnotationType(method);<br>      Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; sqlProviderAnnotationType = getSqlProviderAnnotationType(method);<br>      <span class="hljs-comment">// Select | Insert | Update | Delete 和</span><br>      <span class="hljs-comment">// SelectProvider | InsertProvider | UpdateProvider | DeleteProvider不能共存</span><br>      <span class="hljs-keyword">if</span> (sqlAnnotationType != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (sqlProviderAnnotationType != <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindingException</span>(<span class="hljs-string">&quot;You cannot supply both a static SQL and SqlProvider to method named &quot;</span> + method.getName());<br>        &#125;<br>        <span class="hljs-type">Annotation</span> <span class="hljs-variable">sqlAnnotation</span> <span class="hljs-operator">=</span> method.getAnnotation(sqlAnnotationType);<br>        <span class="hljs-keyword">final</span> String[] strings = (String[]) sqlAnnotation.getClass().getMethod(<span class="hljs-string">&quot;value&quot;</span>).invoke(sqlAnnotation);<br>        <span class="hljs-keyword">return</span> buildSqlSourceFromStrings(strings, parameterType, languageDriver);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sqlProviderAnnotationType != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">Annotation</span> <span class="hljs-variable">sqlProviderAnnotation</span> <span class="hljs-operator">=</span> method.getAnnotation(sqlProviderAnnotationType);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProviderSqlSource</span>(assistant.getConfiguration(), sqlProviderAnnotation);<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Could not find value method on SQL annotation.  Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; getSqlAnnotationType(Method method) &#123;<br>    <span class="hljs-keyword">return</span> chooseAnnotationType(method, sqlAnnotationTypes);<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; getSqlProviderAnnotationType(Method method) &#123;<br>    <span class="hljs-keyword">return</span> chooseAnnotationType(method, sqlProviderAnnotationTypes);                    <br>  &#125;<br>  <span class="hljs-comment">// 就是一个一个注解找</span><br>  <span class="hljs-keyword">private</span> Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; chooseAnnotationType(Method method, Set&lt;Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt;&gt; types) &#123;<br>    <span class="hljs-keyword">for</span> (Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Annotation</span>&gt; type : types) &#123;<br>      <span class="hljs-type">Annotation</span> <span class="hljs-variable">annotation</span> <span class="hljs-operator">=</span> method.getAnnotation(type);<br>      <span class="hljs-keyword">if</span> (annotation != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> type;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;  <br><br>  <span class="hljs-keyword">private</span> SqlSource <span class="hljs-title function_">buildSqlSourceFromStrings</span><span class="hljs-params">(String[] strings, Class&lt;?&gt; parameterTypeClass, LanguageDriver languageDriver)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-keyword">for</span> (String fragment : strings) &#123;<br>      sql.append(fragment);<br>      sql.append(<span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> languageDriver.createSqlSource(configuration, sql.toString(), parameterTypeClass);<br>  &#125; <br><br>  <span class="hljs-comment">// 往configuration 添加了 id-&gt;SelectKeyGenerator 的映射</span><br>  <span class="hljs-keyword">private</span> KeyGenerator <span class="hljs-title function_">handleSelectKeyAnnotation</span><span class="hljs-params">(SelectKey selectKeyAnnotation, String baseStatementId, Class&lt;?&gt; parameterTypeClass, LanguageDriver languageDriver)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> baseStatementId + SelectKeyGenerator.SELECT_KEY_SUFFIX;<br>    Class&lt;?&gt; resultTypeClass = selectKeyAnnotation.resultType();<br>    <span class="hljs-type">StatementType</span> <span class="hljs-variable">statementType</span> <span class="hljs-operator">=</span> selectKeyAnnotation.statementType();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">keyProperty</span> <span class="hljs-operator">=</span> selectKeyAnnotation.keyProperty();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">keyColumn</span> <span class="hljs-operator">=</span> selectKeyAnnotation.keyColumn();<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">executeBefore</span> <span class="hljs-operator">=</span> selectKeyAnnotation.before();<br><br>    <span class="hljs-comment">// defaults</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">useCache</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">KeyGenerator</span> <span class="hljs-variable">keyGenerator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoKeyGenerator</span>();<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">fetchSize</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">timeout</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">flushCache</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">parameterMap</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">resultMap</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">ResultSetType</span> <span class="hljs-variable">resultSetTypeEnum</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-type">SqlSource</span> <span class="hljs-variable">sqlSource</span> <span class="hljs-operator">=</span> buildSqlSourceFromStrings(selectKeyAnnotation.statement(), parameterTypeClass, languageDriver);<br>    <span class="hljs-type">SqlCommandType</span> <span class="hljs-variable">sqlCommandType</span> <span class="hljs-operator">=</span> SqlCommandType.SELECT;<br><br>    assistant.addMappedStatement(id, sqlSource, statementType, sqlCommandType, fetchSize, timeout, parameterMap, parameterTypeClass, resultMap, resultTypeClass, resultSetTypeEnum,<br>        flushCache, useCache, <span class="hljs-literal">false</span>,<br>        keyGenerator, keyProperty, keyColumn, <span class="hljs-literal">null</span>, languageDriver, <span class="hljs-literal">null</span>);<br><br>    id = assistant.applyCurrentNamespace(id, <span class="hljs-literal">false</span>);<br><br>    <span class="hljs-type">MappedStatement</span> <span class="hljs-variable">keyStatement</span> <span class="hljs-operator">=</span> configuration.getMappedStatement(id, <span class="hljs-literal">false</span>);<br>    <span class="hljs-type">SelectKeyGenerator</span> <span class="hljs-variable">answer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SelectKeyGenerator</span>(keyStatement, executeBefore);<br>    configuration.addKeyGenerator(id, answer);<br>    <span class="hljs-keyword">return</span> answer;<br>  &#125; <br><br>  <span class="hljs-comment">// 方法没有@ResultMap注解时根据其他注解获取ResultMap信息</span><br>  <span class="hljs-keyword">private</span> String <span class="hljs-title function_">parseResultMap</span><span class="hljs-params">(Method method)</span> &#123;<br>    Class&lt;?&gt; returnType = getReturnType(method);<br>    <span class="hljs-type">ConstructorArgs</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> method.getAnnotation(ConstructorArgs.class);<br>    <span class="hljs-type">Results</span> <span class="hljs-variable">results</span> <span class="hljs-operator">=</span> method.getAnnotation(Results.class);<br>    <span class="hljs-type">TypeDiscriminator</span> <span class="hljs-variable">typeDiscriminator</span> <span class="hljs-operator">=</span> method.getAnnotation(TypeDiscriminator.class);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">resultMapId</span> <span class="hljs-operator">=</span> generateResultMapName(method);<br>    applyResultMap(resultMapId, returnType, argsIf(args), resultsIf(results), typeDiscriminator);<br>    <span class="hljs-keyword">return</span> resultMapId;<br>  &#125; <br><br>  <span class="hljs-comment">// 获取方法对应的sql语句的返回值类型</span><br>  <span class="hljs-keyword">private</span> Class&lt;?&gt; getReturnType(Method method) &#123;<br>    Class&lt;?&gt; returnType = method.getReturnType();<br>    <span class="hljs-comment">// issue #508</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">void</span>.class.equals(returnType)) &#123;<br>      <span class="hljs-type">ResultType</span> <span class="hljs-variable">rt</span> <span class="hljs-operator">=</span> method.getAnnotation(ResultType.class);<br>      <span class="hljs-keyword">if</span> (rt != <span class="hljs-literal">null</span>) &#123;<br>        returnType = rt.value();<br>      &#125; <br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Collection.class.isAssignableFrom(returnType)) &#123;<br>      <span class="hljs-type">Type</span> <span class="hljs-variable">returnTypeParameter</span> <span class="hljs-operator">=</span> method.getGenericReturnType();<br>      <span class="hljs-keyword">if</span> (returnTypeParameter <span class="hljs-keyword">instanceof</span> ParameterizedType) &#123;<br>        Type[] actualTypeArguments = ((ParameterizedType) returnTypeParameter).getActualTypeArguments();<br>        <span class="hljs-keyword">if</span> (actualTypeArguments != <span class="hljs-literal">null</span> &amp;&amp; actualTypeArguments.length == <span class="hljs-number">1</span>) &#123;<br>          returnTypeParameter = actualTypeArguments[<span class="hljs-number">0</span>];<br>          <span class="hljs-keyword">if</span> (returnTypeParameter <span class="hljs-keyword">instanceof</span> Class) &#123;<br>            returnType = (Class&lt;?&gt;) returnTypeParameter;<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (returnTypeParameter <span class="hljs-keyword">instanceof</span> ParameterizedType) &#123;<br>            <span class="hljs-comment">// (issue #443) actual type can be a also a parameterized type</span><br>            returnType = (Class&lt;?&gt;) ((ParameterizedType) returnTypeParameter).getRawType();<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (returnTypeParameter <span class="hljs-keyword">instanceof</span> GenericArrayType) &#123;<br>            Class&lt;?&gt; componentType = (Class&lt;?&gt;) ((GenericArrayType) returnTypeParameter).getGenericComponentType();<br>            <span class="hljs-comment">// (issue #525) support List&lt;byte[]&gt;</span><br>            returnType = Array.newInstance(componentType, <span class="hljs-number">0</span>).getClass();<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (method.isAnnotationPresent(MapKey.class) &amp;&amp; Map.class.isAssignableFrom(returnType)) &#123;<br>      <span class="hljs-comment">// (issue 504) Do not look into Maps if there is not MapKey annotation</span><br>      <span class="hljs-type">Type</span> <span class="hljs-variable">returnTypeParameter</span> <span class="hljs-operator">=</span> method.getGenericReturnType();<br>      <span class="hljs-keyword">if</span> (returnTypeParameter <span class="hljs-keyword">instanceof</span> ParameterizedType) &#123;<br>        Type[] actualTypeArguments = ((ParameterizedType) returnTypeParameter).getActualTypeArguments();<br>        <span class="hljs-keyword">if</span> (actualTypeArguments != <span class="hljs-literal">null</span> &amp;&amp; actualTypeArguments.length == <span class="hljs-number">2</span>) &#123;<br>          returnTypeParameter = actualTypeArguments[<span class="hljs-number">1</span>];<br>          <span class="hljs-keyword">if</span> (returnTypeParameter <span class="hljs-keyword">instanceof</span> Class) &#123;<br>            returnType = (Class&lt;?&gt;) returnTypeParameter;<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (returnTypeParameter <span class="hljs-keyword">instanceof</span> ParameterizedType) &#123;<br>            <span class="hljs-comment">// (issue 443) actual type can be a also a parameterized type</span><br>            returnType = (Class&lt;?&gt;) ((ParameterizedType) returnTypeParameter).getRawType();<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> returnType;<br>  &#125; <br><br>  <span class="hljs-comment">// resultMapName形如</span><br>  <span class="hljs-comment">// 类名.方法名-void(-参数1类型-参数2类型-...)</span><br>  <span class="hljs-keyword">private</span> String <span class="hljs-title function_">generateResultMapName</span><span class="hljs-params">(Method method)</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">suffix</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-keyword">for</span> (Class&lt;?&gt; c : method.getParameterTypes()) &#123;<br>      suffix.append(<span class="hljs-string">&quot;-&quot;</span>);<br>      suffix.append(c.getSimpleName());<br>    &#125;<br>    <span class="hljs-keyword">if</span> (suffix.length() &lt; <span class="hljs-number">1</span>) &#123;<br>      suffix.append(<span class="hljs-string">&quot;-void&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> type.getName() + <span class="hljs-string">&quot;.&quot;</span> + method.getName() + suffix;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Arg[] argsIf(ConstructorArgs args) &#123;<br>    <span class="hljs-keyword">return</span> args == <span class="hljs-literal">null</span> ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">Arg</span>[<span class="hljs-number">0</span>] : args.value();<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Result[] resultsIf(Results results) &#123;<br>    <span class="hljs-keyword">return</span> results == <span class="hljs-literal">null</span> ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>[<span class="hljs-number">0</span>] : results.value();<br>  &#125; <br><br>  <span class="hljs-comment">// @Arg 用于描述构造方法参数的映射关系，</span><br>  <span class="hljs-comment">// 而 @Result 用于描述 JavaBean 属性与数据库列之间的映射关系</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">applyResultMap</span><span class="hljs-params">(String resultMapId, Class&lt;?&gt; returnType, Arg[] args, Result[] results, TypeDiscriminator discriminator)</span> &#123;<br>    List&lt;ResultMapping&gt; resultMappings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ResultMapping&gt;();<br>    applyConstructorArgs(args, returnType, resultMappings);<br>    applyResults(results, returnType, resultMappings);<br>    <span class="hljs-type">Discriminator</span> <span class="hljs-variable">disc</span> <span class="hljs-operator">=</span> applyDiscriminator(resultMapId, returnType, discriminator);<br>    <span class="hljs-comment">// TODO add AutoMappingBehaviour</span><br>    assistant.addResultMap(resultMapId, returnType, <span class="hljs-literal">null</span>, disc, resultMappings, <span class="hljs-literal">null</span>);<br>    createDiscriminatorResultMaps(resultMapId, returnType, discriminator);<br>  &#125; <br><br>  <span class="hljs-comment">// 通过 @Arg 注解的内容构造 ResultMapping</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">applyConstructorArgs</span><span class="hljs-params">(Arg[] args, Class&lt;?&gt; resultType, List&lt;ResultMapping&gt; resultMappings)</span> &#123;<br>    <span class="hljs-keyword">for</span> (Arg arg : args) &#123;<br>      List&lt;ResultFlag&gt; flags = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ResultFlag&gt;();<br>      flags.add(ResultFlag.CONSTRUCTOR);<br>      <span class="hljs-keyword">if</span> (arg.id()) &#123;<br>        flags.add(ResultFlag.ID);<br>      &#125;<br>      <span class="hljs-type">ResultMapping</span> <span class="hljs-variable">resultMapping</span> <span class="hljs-operator">=</span> assistant.buildResultMapping(<br>          resultType,<br>          <span class="hljs-literal">null</span>,<br>          nullOrEmpty(arg.column()),<br>          arg.javaType() == <span class="hljs-keyword">void</span>.class ? <span class="hljs-literal">null</span> : arg.javaType(),<br>          arg.jdbcType() == JdbcType.UNDEFINED ? <span class="hljs-literal">null</span> : arg.jdbcType(),<br>          nullOrEmpty(arg.select()),<br>          nullOrEmpty(arg.resultMap()),<br>          <span class="hljs-literal">null</span>,<br>          <span class="hljs-literal">null</span>,<br>          arg.typeHandler() == UnknownTypeHandler.class ? <span class="hljs-literal">null</span> : arg.typeHandler(),<br>          flags,<br>          <span class="hljs-literal">null</span>,<br>          <span class="hljs-literal">null</span>,<br>          <span class="hljs-literal">false</span>);<br>      resultMappings.add(resultMapping);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 与 applyConstructorArgs 类似</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">applyResults</span><span class="hljs-params">(Result[] results, Class&lt;?&gt; resultType, List&lt;ResultMapping&gt; resultMappings)</span> &#123;<br>    <span class="hljs-keyword">for</span> (Result result : results) &#123;<br>      List&lt;ResultFlag&gt; flags = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ResultFlag&gt;();<br>      <span class="hljs-keyword">if</span> (result.id()) &#123;<br>        flags.add(ResultFlag.ID);<br>      &#125;<br>      <span class="hljs-type">ResultMapping</span> <span class="hljs-variable">resultMapping</span> <span class="hljs-operator">=</span> assistant.buildResultMapping(<br>          resultType,<br>          nullOrEmpty(result.property()),<br>          nullOrEmpty(result.column()),<br>          result.javaType() == <span class="hljs-keyword">void</span>.class ? <span class="hljs-literal">null</span> : result.javaType(),<br>          result.jdbcType() == JdbcType.UNDEFINED ? <span class="hljs-literal">null</span> : result.jdbcType(),<br>          hasNestedSelect(result) ? nestedSelectId(result) : <span class="hljs-literal">null</span>,<br>          <span class="hljs-literal">null</span>,<br>          <span class="hljs-literal">null</span>,<br>          <span class="hljs-literal">null</span>,<br>          result.typeHandler() == UnknownTypeHandler.class ? <span class="hljs-literal">null</span> : result.typeHandler(),<br>          flags,<br>          <span class="hljs-literal">null</span>,<br>          <span class="hljs-literal">null</span>,<br>          isLazy(result));<br>      resultMappings.add(resultMapping);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNestedSelect</span><span class="hljs-params">(Result result)</span> &#123;<br>    <span class="hljs-keyword">if</span> (result.one().select().length() &gt; <span class="hljs-number">0</span> &amp;&amp; result.many().select().length() &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Cannot use both @One and @Many annotations in the same @Result&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result.one().select().length() &gt; <span class="hljs-number">0</span> || result.many().select().length() &gt; <span class="hljs-number">0</span>;  <br>  &#125;  <br><br>  <span class="hljs-keyword">private</span> String <span class="hljs-title function_">nestedSelectId</span><span class="hljs-params">(Result result)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">nestedSelect</span> <span class="hljs-operator">=</span> result.one().select();<br>    <span class="hljs-keyword">if</span> (nestedSelect.length() &lt; <span class="hljs-number">1</span>) &#123;<br>      nestedSelect = result.many().select();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!nestedSelect.contains(<span class="hljs-string">&quot;.&quot;</span>)) &#123;<br>      nestedSelect = type.getName() + <span class="hljs-string">&quot;.&quot;</span> + nestedSelect;<br>    &#125;<br>    <span class="hljs-keyword">return</span> nestedSelect;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLazy</span><span class="hljs-params">(Result result)</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isLazy</span> <span class="hljs-operator">=</span> configuration.isLazyLoadingEnabled();<br>    <span class="hljs-keyword">if</span> (result.one().select().length() &gt; <span class="hljs-number">0</span> &amp;&amp; FetchType.DEFAULT != result.one().fetchType()) &#123;<br>      isLazy = (result.one().fetchType() == FetchType.LAZY);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (result.many().select().length() &gt; <span class="hljs-number">0</span> &amp;&amp; FetchType.DEFAULT != result.many().fetchType()) &#123;<br>      isLazy = (result.many().fetchType() == FetchType.LAZY);<br>    &#125;<br>    <span class="hljs-keyword">return</span> isLazy;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> Discriminator <span class="hljs-title function_">applyDiscriminator</span><span class="hljs-params">(String resultMapId, Class&lt;?&gt; resultType, TypeDiscriminator discriminator)</span> &#123;<br>    <span class="hljs-keyword">if</span> (discriminator != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">column</span> <span class="hljs-operator">=</span> discriminator.column();<br>      Class&lt;?&gt; javaType = discriminator.javaType() == <span class="hljs-keyword">void</span>.class ? String.class : discriminator.javaType();<br>      <span class="hljs-type">JdbcType</span> <span class="hljs-variable">jdbcType</span> <span class="hljs-operator">=</span> discriminator.jdbcType() == JdbcType.UNDEFINED ? <span class="hljs-literal">null</span> : discriminator.jdbcType();<br>      Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TypeHandler</span>&lt;?&gt;&gt; typeHandler = discriminator.typeHandler() == UnknownTypeHandler.class ? <span class="hljs-literal">null</span> : discriminator.typeHandler();<br>      Case[] cases = discriminator.cases();<br>      Map&lt;String, String&gt; discriminatorMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;();<br>      <span class="hljs-keyword">for</span> (Case c : cases) &#123; <br>        <span class="hljs-comment">// case为value时对应的 resultMapId</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> c.value();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">caseResultMapId</span> <span class="hljs-operator">=</span> resultMapId + <span class="hljs-string">&quot;-&quot;</span> + value;<br>        discriminatorMap.put(value, caseResultMapId);<br>      &#125;<br>      <span class="hljs-keyword">return</span> assistant.buildDiscriminator(resultType, column, javaType, jdbcType, typeHandler, discriminatorMap);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125; <br><br>  <span class="hljs-comment">// 根据@Case 注解 添加ResultMap</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createDiscriminatorResultMaps</span><span class="hljs-params">(String resultMapId, Class&lt;?&gt; resultType, TypeDiscriminator discriminator)</span> &#123;<br>    <span class="hljs-keyword">if</span> (discriminator != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">for</span> (Case c : discriminator.cases()) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">caseResultMapId</span> <span class="hljs-operator">=</span> resultMapId + <span class="hljs-string">&quot;-&quot;</span> + c.value();<br>        List&lt;ResultMapping&gt; resultMappings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ResultMapping&gt;();<br>        <span class="hljs-comment">// issue #136</span><br>        applyConstructorArgs(c.constructArgs(), resultType, resultMappings);<br>        applyResults(c.results(), resultType, resultMappings);<br>        <span class="hljs-comment">// TODO add AutoMappingBehaviour</span><br>        assistant.addResultMap(caseResultMapId, c.type(), resultMapId, <span class="hljs-literal">null</span>, resultMappings, <span class="hljs-literal">null</span>);<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parsePendingMethods</span><span class="hljs-params">()</span> &#123;<br>    Collection&lt;MethodResolver&gt; incompleteMethods = configuration.getIncompleteMethods();<br>    <span class="hljs-keyword">synchronized</span> (incompleteMethods) &#123;<br>      Iterator&lt;MethodResolver&gt; iter = incompleteMethods.iterator();<br>      <span class="hljs-keyword">while</span> (iter.hasNext()) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          iter.next().resolve();<br>          iter.remove();<br>        &#125; <span class="hljs-keyword">catch</span> (IncompleteElementException e) &#123;<br>          <span class="hljs-comment">// This method is still missing a resource</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MethodResolver"><a href="#MethodResolver" class="headerlink" title="MethodResolver"></a>MethodResolver</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodResolver</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> MapperAnnotationBuilder annotationBuilder;<br>  <span class="hljs-keyword">private</span> Method method;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">MethodResolver</span><span class="hljs-params">(MapperAnnotationBuilder annotationBuilder, Method method)</span> &#123;<br>    <span class="hljs-built_in">this</span>.annotationBuilder = annotationBuilder;<br>    <span class="hljs-built_in">this</span>.method = method;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resolve</span><span class="hljs-params">()</span> &#123;<br>    annotationBuilder.parseStatement(method);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><p>    annotations模块略过，感兴趣的同学可以自行查阅相关注解的用法</p>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>13-scripting</title>
    <link href="/2023/08/05/13-scripting/"/>
    <url>/2023/08/05/13-scripting/</url>
    
    <content type="html"><![CDATA[<h4 id="LanguageDriver"><a href="#LanguageDriver" class="headerlink" title="LanguageDriver"></a>LanguageDriver</h4><p>    主要用于构造<code>SqlSource</code>和<code>ParameterHandler</code>其中XMLLanguageDriver为XML语言驱动，通过解析XML标签实现了动态sql功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">LanguageDriver</span> &#123;<br>    <br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Creates a &#123;<span class="hljs-doctag">@link</span> ParameterHandler&#125; that passes the actual parameters to the the JDBC statement.</span><br><span class="hljs-comment">   * </span><br><span class="hljs-comment">   * <span class="hljs-doctag">@author</span> Frank D. Martinez [mnesarco]</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@see</span> DefaultParameterHandler</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> mappedStatement The mapped statement that is being executed</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> parameterObject The input parameter object (can be null) </span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> boundSql The resulting SQL once the dynamic language has been executed.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 创建参数处理器</span><br>  ParameterHandler <span class="hljs-title function_">createParameterHandler</span><span class="hljs-params">(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql)</span>; <br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Creates an &#123;<span class="hljs-doctag">@link</span> SqlSource&#125; that will hold the statement read from a mapper xml file. </span><br><span class="hljs-comment">   * It is called during startup, when the mapped statement is read from a class or an xml file.</span><br><span class="hljs-comment">   * </span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> configuration The MyBatis configuration</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> script XNode parsed from a XML file</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> parameterType input parameter type got from a mapper method or specified in the parameterType xml attribute. Can be null.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 创建SQL源码(mapper xml方式)</span><br>  SqlSource <span class="hljs-title function_">createSqlSource</span><span class="hljs-params">(Configuration configuration, XNode script, Class&lt;?&gt; parameterType)</span>; <br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Creates an &#123;<span class="hljs-doctag">@link</span> SqlSource&#125; that will hold the statement read from an annotation.</span><br><span class="hljs-comment">   * It is called during startup, when the mapped statement is read from a class or an xml file.</span><br><span class="hljs-comment">   * </span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> configuration The MyBatis configuration</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> script The content of the annotation</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> parameterType input parameter type got from a mapper method or specified in the parameterType xml attribute. Can be null.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> </span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 创建SQL源码(注解方式)</span><br>  SqlSource <span class="hljs-title function_">createSqlSource</span><span class="hljs-params">(Configuration configuration, String script, Class&lt;?&gt; paramet</span><br><span class="hljs-params">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="DynamicContext"><a href="#DynamicContext" class="headerlink" title="DynamicContext"></a>DynamicContext</h4><p>    动态上下文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicContext</span> &#123; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PARAMETER_OBJECT_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;_parameter&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DATABASE_ID_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;_databaseId&quot;</span>; <br><br>  <span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-comment">// TODO OgnlRuntime</span><br>    <span class="hljs-comment">// 定义属性-&gt;getter方法映射，ContextMap到ContextAccessor的映射，注册到ognl运行时</span><br><span class="hljs-comment">// 参考http://commons.apache.org/proper/commons-ognl/developer-guide.html</span><br>    OgnlRuntime.setPropertyAccessor(ContextMap.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContextAccessor</span>());<br>    <span class="hljs-comment">// 将传入的参数对象统一封装为ContextMap对象（继承了HashMap对象），</span><br>    <span class="hljs-comment">// 然后Ognl运行时环境在动态计算sql语句时，</span><br>    <span class="hljs-comment">// 会按照ContextAccessor中描述的Map接口的方式来访问和读取ContextMap对象，获取计算过程中需要的参数。</span><br>    <span class="hljs-comment">// ContextMap对象内部可能封装了一个普通的POJO对象，也可以是直接传递的Map对象，当然从外部是看不出来的，因为都是使用Map的接口来读取数据。</span><br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ContextMap bindings;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sqlBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">uniqueNumber</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <br><br>  <span class="hljs-comment">// 在DynamicContext的构造函数中，根据传入的参数对象是否为Map类型，有两个不同构造ContextMap的方式。</span><br>  <span class="hljs-comment">// 而ContextMap作为一个继承了HashMap的对象，作用就是用于统一参数的访问方式：用Map接口方法来访问数据。</span><br>  <span class="hljs-comment">// 具体来说，当传入的参数对象不是Map类型时，Mybatis会将传入的POJO对象用MetaObject对象来封装，</span><br>  <span class="hljs-comment">// 当动态计算sql过程需要获取数据时，用Map接口的get方法包装 MetaObject对象的取值过程。</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">DynamicContext</span><span class="hljs-params">(Configuration configuration, Object parameterObject)</span> &#123;<br><span class="hljs-comment">// 绝大多数调用的地方parameterObject为null</span><br>    <span class="hljs-comment">// parameterObject 作为可选项来通过传入对象来传入自定义参数</span><br>    <span class="hljs-keyword">if</span> (parameterObject != <span class="hljs-literal">null</span> &amp;&amp; !(parameterObject <span class="hljs-keyword">instanceof</span> Map)) &#123;<br>      <span class="hljs-comment">// 如果不是map型</span><br>      <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaObject</span> <span class="hljs-operator">=</span> configuration.newMetaObject(parameterObject);<br>      bindings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContextMap</span>(metaObject);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      bindings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContextMap</span>(<span class="hljs-literal">null</span>);<br>    &#125;<br>    bindings.put(PARAMETER_OBJECT_KEY, parameterObject);<br>    bindings.put(DATABASE_ID_KEY, configuration.getDatabaseId());<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getBindings</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> bindings;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bind</span><span class="hljs-params">(String name, Object value)</span> &#123;<br>    bindings.put(name, value);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">appendSql</span><span class="hljs-params">(String sql)</span> &#123;<br>    sqlBuilder.append(sql);<br>    sqlBuilder.append(<span class="hljs-string">&quot; &quot;</span>);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSql</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlBuilder.toString().trim();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getUniqueNumber</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> uniqueNumber++;<br>  &#125; <br><br>  <span class="hljs-comment">// 上下文map，静态内部类</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ContextMap</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">2977601501966151582L</span>;<br><br>    <span class="hljs-keyword">private</span> MetaObject parameterMetaObject;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ContextMap</span><span class="hljs-params">(MetaObject parameterMetaObject)</span> &#123;<br>      <span class="hljs-built_in">this</span>.parameterMetaObject = parameterMetaObject;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">strKey</span> <span class="hljs-operator">=</span> (String) key;<br>      <span class="hljs-comment">// 先去map里找</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">super</span>.containsKey(strKey)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.get(strKey);<br>      &#125;<br><br>      <span class="hljs-comment">// 如果没找到，再用ognl表达式去取值</span><br>      <span class="hljs-comment">// 如person[0].birthdate.year</span><br>      <span class="hljs-keyword">if</span> (parameterMetaObject != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// issue #61 do not modify the context when reading</span><br>        <span class="hljs-keyword">return</span> parameterMetaObject.getValue(strKey);<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 上下文访问器，静态内部类,实现OGNL的PropertyAccessor</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ContextAccessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">PropertyAccessor</span> &#123; <br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProperty</span><span class="hljs-params">(Map context, Object target, Object name)</span><br>        <span class="hljs-keyword">throws</span> OgnlException &#123;<br>      <span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> (Map) target;<br><br>      <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> map.get(name);<br>      <span class="hljs-keyword">if</span> (result != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> result;<br>      &#125;<br><br>      <span class="hljs-type">Object</span> <span class="hljs-variable">parameterObject</span> <span class="hljs-operator">=</span> map.get(PARAMETER_OBJECT_KEY);<br>      <span class="hljs-keyword">if</span> (parameterObject <span class="hljs-keyword">instanceof</span> Map) &#123;<br>        <span class="hljs-keyword">return</span> ((Map)parameterObject).get(name);<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperty</span><span class="hljs-params">(Map context, Object target, Object name, Object value)</span><br>        <span class="hljs-keyword">throws</span> OgnlException &#123;<br>      Map&lt;Object, Object&gt; map = (Map&lt;Object, Object&gt;) target;<br>      map.put(name, value);<br>    &#125; <br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSourceAccessor</span><span class="hljs-params">(OgnlContext arg0, Object arg1, Object arg2)</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSourceSetter</span><span class="hljs-params">(OgnlContext arg0, Object arg1, Object arg2)</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="OgnlClassResolver"><a href="#OgnlClassResolver" class="headerlink" title="OgnlClassResolver"></a>OgnlClassResolver</h4><p>    自定义的<code>ognl ClassResolver</code>，和<code>ognl</code>的<code>DefaultClassResolver</code>表现相近。不同的是自定义的<code>ClassResolver</code>使用<code>Resources</code>工具类而不是<code>Class.forName(String)</code>来找目标类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OgnlClassResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClassResolver</span> &#123; <br><br>  <span class="hljs-comment">// 还加了个缓存</span><br>  <span class="hljs-keyword">private</span> Map&lt;String, Class&lt;?&gt;&gt; classes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Class&lt;?&gt;&gt;(<span class="hljs-number">101</span>);<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Class <span class="hljs-title function_">classForName</span><span class="hljs-params">(String className, Map context)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>    Class&lt;?&gt; result = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> ((result = classes.get(className)) == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        result = Resources.classForName(className);<br>      &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e1) &#123;  <br>        <span class="hljs-comment">// 找不到的话去java.lang包再找一下</span><br>        <span class="hljs-keyword">if</span> (className.indexOf(<span class="hljs-string">&#x27;.&#x27;</span>) == -<span class="hljs-number">1</span>) &#123;<br>          result = Resources.classForName(<span class="hljs-string">&quot;java.lang.&quot;</span> + className);<br>          classes.put(<span class="hljs-string">&quot;java.lang.&quot;</span> + className, result);<br>        &#125;<br>      &#125;<br>      classes.put(className, result);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="OgnlCache"><a href="#OgnlCache" class="headerlink" title="OgnlCache"></a>OgnlCache</h4><p>    根据mybatis的说法，ognl有性能问题，所以加了个缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OgnlCache</span> &#123; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, Object&gt; expressionCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;String, Object&gt;();<br> <br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">OgnlCache</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// Prevent Instantiation of Static Class</span><br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getValue</span><span class="hljs-params">(String expression, Object root)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      Map&lt;Object, OgnlClassResolver&gt; context = Ognl.createDefaultContext(root, <span class="hljs-keyword">new</span> <span class="hljs-title class_">OgnlClassResolver</span>());<br>      <span class="hljs-keyword">return</span> Ognl.getValue(parseExpression(expression), context, root);<br>    &#125; <span class="hljs-keyword">catch</span> (OgnlException e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Error evaluating expression &#x27;&quot;</span> + expression + <span class="hljs-string">&quot;&#x27;. Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">parseExpression</span><span class="hljs-params">(String expression)</span> <span class="hljs-keyword">throws</span> OgnlException &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> expressionCache.get(expression);<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 大致意思就是OgnlParser.topLevelExpression很慢，所以加个缓存，放到ConcurrentHashMap里面</span><br>      node = Ognl.parseExpression(expression);<br>      expressionCache.put(expression, node);<br>    &#125;<br>    <span class="hljs-keyword">return</span> node;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ExpressionEvaluator"><a href="#ExpressionEvaluator" class="headerlink" title="ExpressionEvaluator"></a>ExpressionEvaluator</h4><p>    表达式求值器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExpressionEvaluator</span> &#123; <br><br>  <span class="hljs-comment">// 表达式求布尔值，比如username == &#x27;cbegin&#x27;</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">evaluateBoolean</span><span class="hljs-params">(String expression, Object parameterObject)</span> &#123;<br><span class="hljs-comment">// 非常简单，就是调用ognl</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> OgnlCache.getValue(expression, parameterObject);<br>    <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> Boolean) &#123;<br>        <span class="hljs-comment">// 如果是Boolean</span><br>        <span class="hljs-keyword">return</span> (Boolean) value;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> Number) &#123;<br>        <span class="hljs-comment">// 如果是Number，判断不为0</span><br>        <span class="hljs-keyword">return</span> !<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(String.valueOf(value)).equals(BigDecimal.ZERO);<br>    &#125;<br>    <span class="hljs-comment">// 3 否则判断不为null</span><br>    <span class="hljs-keyword">return</span> value != <span class="hljs-literal">null</span>;<br>  &#125; <br><br>  <span class="hljs-comment">// 解析表达式到一个Iterable,核心是ognl</span><br>  <span class="hljs-keyword">public</span> Iterable&lt;?&gt; evaluateIterable(String expression, Object parameterObject) &#123;<br><span class="hljs-comment">// 原生的ognl很强大，OgnlCache.getValue直接就可以返回一个Iterable型或数组型或Map型了</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> OgnlCache.getValue(expression, parameterObject);<br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;The expression &#x27;&quot;</span> + expression + <span class="hljs-string">&quot;&#x27; evaluated to a null value.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> Iterable) &#123;<br>      <span class="hljs-keyword">return</span> (Iterable&lt;?&gt;) value;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (value.getClass().isArray()) &#123;<br>    <span class="hljs-comment">// 如果是array，则把他变成一个List&lt;Object&gt;</span><br>    <span class="hljs-comment">// 注释下面提到了，不能用Arrays.asList()，因为array可能是基本型，这样会出ClassCastException，</span><br>    <span class="hljs-comment">// 见https://code.google.com/p/mybatis/issues/detail?id=209</span><br>        <span class="hljs-comment">// the array may be primitive, so Arrays.asList() may throw</span><br>        <span class="hljs-comment">// a ClassCastException (issue 209).  Do the work manually</span><br>        <span class="hljs-comment">// Curse primitives! :) (JGB)</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> Array.getLength(value);<br>        List&lt;Object&gt; answer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> Array.get(value, i);<br>            answer.add(o);<br>        &#125;<br>        <span class="hljs-keyword">return</span> answer;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (value <span class="hljs-keyword">instanceof</span> Map) &#123;<br>      <span class="hljs-keyword">return</span> ((Map) value).entrySet();<br>    &#125;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Error evaluating expression &#x27;&quot;</span> + expression + <span class="hljs-string">&quot;&#x27;.  Return value (&quot;</span> + value + <span class="hljs-string">&quot;) was not iterable.&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SqlNode"><a href="#SqlNode" class="headerlink" title="SqlNode"></a>SqlNode</h4><p>    SQL节点抽象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SqlNode</span> &#123;<br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(DynamicContext context)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>#### StaticTextSqlNode<br><br>    静态文本SQL节点<br><br>```java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticTextSqlNode</span> implements SqlNode &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> text;<br><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">StaticTextSqlNode</span><span class="hljs-params">(<span class="hljs-type">String</span> text)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.text = text;<br>  &#125;<br><br>  @<span class="hljs-function">Override</span><br><span class="hljs-function">  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title">apply</span><span class="hljs-params">(DynamicContext context)</span> </span>&#123;<br><span class="hljs-comment">// 将文本加入context</span><br>    context.<span class="hljs-built_in">appendSql</span>(text);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="TextSqlNode"><a href="#TextSqlNode" class="headerlink" title="TextSqlNode"></a>TextSqlNode</h4><p>    文本SQL节点（CDATA|TEXT）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TextSqlNode</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SqlNode</span> &#123; <br><br>  <span class="hljs-keyword">private</span> String text;<br>  <span class="hljs-keyword">private</span> Pattern injectionFilter; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">TextSqlNode</span><span class="hljs-params">(String text)</span> &#123;<br>    <span class="hljs-built_in">this</span>(text, <span class="hljs-literal">null</span>);<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">TextSqlNode</span><span class="hljs-params">(String text, Pattern injectionFilter)</span> &#123;<br>    <span class="hljs-built_in">this</span>.text = text;<br>    <span class="hljs-built_in">this</span>.injectionFilter = injectionFilter;<br>  &#125; <br><br>  <span class="hljs-comment">// 判断是否是动态sql</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isDynamic</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">DynamicCheckerTokenParser</span> <span class="hljs-variable">checker</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DynamicCheckerTokenParser</span>();<br>    <span class="hljs-comment">// 实际上是看text 中有没有类似 $&#123;?&#125;的数据，如果有，就是动态的</span><br>    <span class="hljs-type">GenericTokenParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> createParser(checker);<br>    parser.parse(text);<br>    <span class="hljs-keyword">return</span> checker.isDynamic();<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(DynamicContext context)</span> &#123;<br>    <span class="hljs-type">GenericTokenParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> createParser(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BindingTokenParser</span>(context, injectionFilter));<br>    context.appendSql(parser.parse(text));<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> GenericTokenParser <span class="hljs-title function_">createParser</span><span class="hljs-params">(TokenHandler handler)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericTokenParser</span>(<span class="hljs-string">&quot;$&#123;&quot;</span>, <span class="hljs-string">&quot;&#125;&quot;</span>, handler);<br>  &#125; <br><br>  <span class="hljs-comment">// 绑定记号解析器</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BindingTokenParser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TokenHandler</span> &#123;<br><br>    <span class="hljs-keyword">private</span> DynamicContext context;<br>    <span class="hljs-keyword">private</span> Pattern injectionFilter;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BindingTokenParser</span><span class="hljs-params">(DynamicContext context, Pattern injectionFilter)</span> &#123;<br>      <span class="hljs-built_in">this</span>.context = context;<br>      <span class="hljs-built_in">this</span>.injectionFilter = injectionFilter;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handleToken</span><span class="hljs-params">(String content)</span> &#123;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">parameter</span> <span class="hljs-operator">=</span> context.getBindings().get(<span class="hljs-string">&quot;_parameter&quot;</span>);<br>      <span class="hljs-keyword">if</span> (parameter == <span class="hljs-literal">null</span>) &#123;<br>        context.getBindings().put(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-literal">null</span>);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (SimpleTypeRegistry.isSimpleType(parameter.getClass())) &#123;<br>        context.getBindings().put(<span class="hljs-string">&quot;value&quot;</span>, parameter);<br>      &#125;<br>      <span class="hljs-comment">// 从缓存里取得值</span><br>      <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> OgnlCache.getValue(content, context.getBindings());<br>      <span class="hljs-type">String</span> <span class="hljs-variable">srtValue</span> <span class="hljs-operator">=</span> (value == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;&quot;</span> : String.valueOf(value)); <span class="hljs-comment">// issue #274 return &quot;&quot; instead of &quot;null&quot;</span><br>      checkInjection(srtValue);<br>      <span class="hljs-keyword">return</span> srtValue;<br>    &#125;<br><br>    <span class="hljs-comment">// 检查是否匹配正则表达式</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkInjection</span><span class="hljs-params">(String value)</span> &#123;<br>      <span class="hljs-keyword">if</span> (injectionFilter != <span class="hljs-literal">null</span> &amp;&amp; !injectionFilter.matcher(value).matches()) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScriptingException</span>(<span class="hljs-string">&quot;Invalid input. Please conform to regex&quot;</span> + injectionFilter.pattern());<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 动态SQL检查器</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicCheckerTokenParser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TokenHandler</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isDynamic;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DynamicCheckerTokenParser</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// Prevent Synthetic Access</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isDynamic</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> isDynamic;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handleToken</span><span class="hljs-params">(String content)</span> &#123;<br>      <span class="hljs-comment">// 灰常简单，设置isDynamic为true，即调用了这个类就必定是动态sql</span><br>      <span class="hljs-built_in">this</span>.isDynamic = <span class="hljs-literal">true</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="VarDeclSqlNode"><a href="#VarDeclSqlNode" class="headerlink" title="VarDeclSqlNode"></a>VarDeclSqlNode</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VarDeclSqlNode</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SqlNode</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String name;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String expression;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">VarDeclSqlNode</span><span class="hljs-params">(String <span class="hljs-keyword">var</span>, String exp)</span> &#123;<br>    name = <span class="hljs-keyword">var</span>;<br>    expression = exp;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(DynamicContext context)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> OgnlCache.getValue(expression, context.getBindings());<br>    context.bind(name, value);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="IfSqlNode"><a href="#IfSqlNode" class="headerlink" title="IfSqlNode"></a>IfSqlNode</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfSqlNode</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SqlNode</span> &#123;<br>  <span class="hljs-keyword">private</span> ExpressionEvaluator evaluator;<br>  <span class="hljs-keyword">private</span> String test;<br>  <span class="hljs-keyword">private</span> SqlNode contents;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">IfSqlNode</span><span class="hljs-params">(SqlNode contents, String test)</span> &#123;<br>    <span class="hljs-built_in">this</span>.test = test;<br>    <span class="hljs-built_in">this</span>.contents = contents;<br>    <span class="hljs-built_in">this</span>.evaluator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExpressionEvaluator</span>();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(DynamicContext context)</span> &#123;<br>    <span class="hljs-comment">// 如果满足条件，则apply，并返回true</span><br>    <span class="hljs-keyword">if</span> (evaluator.evaluateBoolean(test, context.getBindings())) &#123;<br>      contents.apply(context);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ChooseSqlNode"><a href="#ChooseSqlNode" class="headerlink" title="ChooseSqlNode"></a>ChooseSqlNode</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChooseSqlNode</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SqlNode</span> &#123;<br>  <span class="hljs-keyword">private</span> SqlNode defaultSqlNode;<br>  <span class="hljs-keyword">private</span> List&lt;SqlNode&gt; ifSqlNodes;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">ChooseSqlNode</span><span class="hljs-params">(List&lt;SqlNode&gt; ifSqlNodes, SqlNode defaultSqlNode)</span> &#123;<br>    <span class="hljs-built_in">this</span>.ifSqlNodes = ifSqlNodes;<br>    <span class="hljs-built_in">this</span>.defaultSqlNode = defaultSqlNode;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(DynamicContext context)</span> &#123;<br>    <span class="hljs-comment">// 循环判断if，只要有1个为true了，返回true</span><br>    <span class="hljs-keyword">for</span> (SqlNode sqlNode : ifSqlNodes) &#123;<br>      <span class="hljs-keyword">if</span> (sqlNode.apply(context)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// if都不为true，那就看otherwise</span><br>    <span class="hljs-keyword">if</span> (defaultSqlNode != <span class="hljs-literal">null</span>) &#123;<br>      defaultSqlNode.apply(context);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-comment">// 如果连otherwise都没有，返回false</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ForEachSqlNode"><a href="#ForEachSqlNode" class="headerlink" title="ForEachSqlNode"></a>ForEachSqlNode</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForEachSqlNode</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SqlNode</span> &#123; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ITEM_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;__frch_&quot;</span>; <br><br>  <span class="hljs-keyword">private</span> ExpressionEvaluator evaluator;<br>  <span class="hljs-keyword">private</span> String collectionExpression;<br>  <span class="hljs-keyword">private</span> SqlNode contents;<br>  <span class="hljs-keyword">private</span> String open;<br>  <span class="hljs-keyword">private</span> String close;<br>  <span class="hljs-keyword">private</span> String separator;<br>  <span class="hljs-keyword">private</span> String item;<br>  <span class="hljs-keyword">private</span> String index;<br>  <span class="hljs-keyword">private</span> Configuration configuration; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">ForEachSqlNode</span><span class="hljs-params">(Configuration configuration, SqlNode contents, String collectionExpression, String index, String item, String open, String close, String separator)</span> &#123;<br>    <span class="hljs-built_in">this</span>.evaluator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExpressionEvaluator</span>();<br>    <span class="hljs-built_in">this</span>.collectionExpression = collectionExpression;<br>    <span class="hljs-built_in">this</span>.contents = contents;<br>    <span class="hljs-built_in">this</span>.open = open;<br>    <span class="hljs-built_in">this</span>.close = close;<br>    <span class="hljs-built_in">this</span>.separator = separator;<br>    <span class="hljs-built_in">this</span>.index = index;<br>    <span class="hljs-built_in">this</span>.item = item;<br>    <span class="hljs-built_in">this</span>.configuration = configuration;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(DynamicContext context)</span> &#123;<br>    Map&lt;String, Object&gt; bindings = context.getBindings();<br><span class="hljs-comment">// 解析collectionExpression-&gt;iterable,核心用的ognl</span><br>    <span class="hljs-keyword">final</span> Iterable&lt;?&gt; iterable = evaluator.evaluateIterable(collectionExpression, bindings);<br>    <span class="hljs-keyword">if</span> (!iterable.iterator().hasNext()) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-comment">// 加上(</span><br>    applyOpen(context);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (Object o : iterable) &#123;<br>      <span class="hljs-type">DynamicContext</span> <span class="hljs-variable">oldContext</span> <span class="hljs-operator">=</span> context;<br>      <span class="hljs-keyword">if</span> (first) &#123;<br>        context = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrefixedContext</span>(context, <span class="hljs-string">&quot;&quot;</span>);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (separator != <span class="hljs-literal">null</span>) &#123;<br>        context = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrefixedContext</span>(context, separator);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        context = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrefixedContext</span>(context, <span class="hljs-string">&quot;&quot;</span>);<br>      &#125;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">uniqueNumber</span> <span class="hljs-operator">=</span> context.getUniqueNumber();<br>      <span class="hljs-comment">// Issue #709 </span><br>      <span class="hljs-keyword">if</span> (o <span class="hljs-keyword">instanceof</span> Map.Entry) &#123;<br>        <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span> <br>        Map.Entry&lt;Object, Object&gt; mapEntry = (Map.Entry&lt;Object, Object&gt;) o;<br>        applyIndex(context, mapEntry.getKey(), uniqueNumber);<br>        applyItem(context, mapEntry.getValue(), uniqueNumber);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// 索引</span><br>        applyIndex(context, i, uniqueNumber);<br><span class="hljs-comment">// 加上一个元素</span><br>        applyItem(context, o, uniqueNumber);<br>      &#125;<br>      contents.apply(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FilteredDynamicContext</span>(configuration, context, index, item, uniqueNumber));<br>      <span class="hljs-keyword">if</span> (first) &#123;<br>        first = !((PrefixedContext) context).isPrefixApplied();<br>      &#125;<br>      context = oldContext;<br>      i++;<br>    &#125;<br><span class="hljs-comment">// 加上)</span><br>    applyClose(context);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">applyIndex</span><span class="hljs-params">(DynamicContext context, Object o, <span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index != <span class="hljs-literal">null</span>) &#123;<br>      context.bind(index, o);<br>      context.bind(itemizeItem(index, i), o);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">applyItem</span><span class="hljs-params">(DynamicContext context, Object o, <span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-keyword">if</span> (item != <span class="hljs-literal">null</span>) &#123;<br>      context.bind(item, o);<br>      context.bind(itemizeItem(item, i), o);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">applyOpen</span><span class="hljs-params">(DynamicContext context)</span> &#123;<br>    <span class="hljs-keyword">if</span> (open != <span class="hljs-literal">null</span>) &#123;<br>      context.appendSql(open);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">applyClose</span><span class="hljs-params">(DynamicContext context)</span> &#123;<br>    <span class="hljs-keyword">if</span> (close != <span class="hljs-literal">null</span>) &#123;<br>      context.appendSql(close);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">itemizeItem</span><span class="hljs-params">(String item, <span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(ITEM_PREFIX).append(item).append(<span class="hljs-string">&quot;_&quot;</span>).append(i).toString();<br>  &#125; <br><br>  <span class="hljs-comment">// 被过滤的动态上下文</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilteredDynamicContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DynamicContext</span> &#123;<br>    <span class="hljs-keyword">private</span> DynamicContext delegate;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> index;<br>    <span class="hljs-keyword">private</span> String itemIndex;<br>    <span class="hljs-keyword">private</span> String item;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FilteredDynamicContext</span><span class="hljs-params">(Configuration configuration,DynamicContext delegate, String itemIndex, String item, <span class="hljs-type">int</span> i)</span> &#123;<br>      <span class="hljs-built_in">super</span>(configuration, <span class="hljs-literal">null</span>);<br>      <span class="hljs-built_in">this</span>.delegate = delegate;<br>      <span class="hljs-built_in">this</span>.index = i;<br>      <span class="hljs-built_in">this</span>.itemIndex = itemIndex;<br>      <span class="hljs-built_in">this</span>.item = item;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getBindings</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> delegate.getBindings();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bind</span><span class="hljs-params">(String name, Object value)</span> &#123;<br>      delegate.bind(name, value);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSql</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> delegate.getSql();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">appendSql</span><span class="hljs-params">(String sql)</span> &#123;<br>      <span class="hljs-type">GenericTokenParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericTokenParser</span>(<span class="hljs-string">&quot;#&#123;&quot;</span>, <span class="hljs-string">&quot;&#125;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TokenHandler</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handleToken</span><span class="hljs-params">(String content)</span> &#123; <br>          <span class="hljs-comment">// 匹配content中第一个以空白字符开头，并且后面跟着(.|,|:|空白字符)的item</span><br>          <span class="hljs-comment">// 并且将其替换成处理后的item（加了前缀和序号）</span><br>          <span class="hljs-type">String</span> <span class="hljs-variable">newContent</span> <span class="hljs-operator">=</span> content.replaceFirst(<span class="hljs-string">&quot;^\\s*&quot;</span> + item + <span class="hljs-string">&quot;(?![^.,:\\s])&quot;</span>, itemizeItem(item, index));<br>          <span class="hljs-keyword">if</span> (itemIndex != <span class="hljs-literal">null</span> &amp;&amp; newContent.equals(content)) &#123;<br>            newContent = content.replaceFirst(<span class="hljs-string">&quot;^\\s*&quot;</span> + itemIndex + <span class="hljs-string">&quot;(?![^.,:\\s])&quot;</span>, itemizeItem(itemIndex, index));<br>          &#125;<br>          <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;#&#123;&quot;</span>).append(newContent).append(<span class="hljs-string">&quot;&#125;&quot;</span>).toString();<br>        &#125;<br>      &#125;);<br><br>      <span class="hljs-comment">// 这里委托给下面的 PrefixedContext，拼接sql语句时加上前缀</span><br>      delegate.appendSql(parser.parse(sql));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getUniqueNumber</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> delegate.getUniqueNumber();<br>    &#125;<br><br>  &#125; <br><br>  <span class="hljs-comment">// 前缀上下文</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrefixedContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DynamicContext</span> &#123;<br>    <span class="hljs-keyword">private</span> DynamicContext delegate;<br>    <span class="hljs-keyword">private</span> String prefix;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> prefixApplied;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PrefixedContext</span><span class="hljs-params">(DynamicContext delegate, String prefix)</span> &#123;<br>      <span class="hljs-built_in">super</span>(configuration, <span class="hljs-literal">null</span>);<br>      <span class="hljs-built_in">this</span>.delegate = delegate;<br>      <span class="hljs-built_in">this</span>.prefix = prefix;<br>      <span class="hljs-built_in">this</span>.prefixApplied = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPrefixApplied</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> prefixApplied;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getBindings</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> delegate.getBindings();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bind</span><span class="hljs-params">(String name, Object value)</span> &#123;<br>      delegate.bind(name, value);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">appendSql</span><span class="hljs-params">(String sql)</span> &#123;<br>      <span class="hljs-keyword">if</span> (!prefixApplied &amp;&amp; sql != <span class="hljs-literal">null</span> &amp;&amp; sql.trim().length() &gt; <span class="hljs-number">0</span>) &#123;<br>        delegate.appendSql(prefix);<br>        prefixApplied = <span class="hljs-literal">true</span>;<br>      &#125;<br>      delegate.appendSql(sql);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSql</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> delegate.getSql();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getUniqueNumber</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> delegate.getUniqueNumber();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="TrimSqlNode"><a href="#TrimSqlNode" class="headerlink" title="TrimSqlNode"></a>TrimSqlNode</h4><p>    可用于处理sql语句中不想要的前缀或者后缀，并且加上自定义的前缀</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TrimSqlNode</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SqlNode</span> &#123; <br><br>  <span class="hljs-keyword">private</span> SqlNode contents;<br>  <span class="hljs-keyword">private</span> String prefix;<br>  <span class="hljs-keyword">private</span> String suffix;<br>  <span class="hljs-keyword">private</span> List&lt;String&gt; prefixesToOverride;<br>  <span class="hljs-keyword">private</span> List&lt;String&gt; suffixesToOverride;<br>  <span class="hljs-keyword">private</span> Configuration configuration; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">TrimSqlNode</span><span class="hljs-params">(Configuration configuration, SqlNode contents, String prefix, String prefixesToOverride, String suffix, String suffixesToOverride)</span> &#123;<br>    <span class="hljs-built_in">this</span>(configuration, contents, prefix, parseOverrides(prefixesToOverride), suffix, parseOverrides(suffixesToOverride));<br>  &#125;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-title function_">TrimSqlNode</span><span class="hljs-params">(Configuration configuration, SqlNode contents, String prefix, List&lt;String&gt; prefixesToOverride, String suffix, List&lt;String&gt; suffixesToOverride)</span> &#123;<br>    <span class="hljs-built_in">this</span>.contents = contents;<br>    <span class="hljs-built_in">this</span>.prefix = prefix;<br>    <span class="hljs-built_in">this</span>.prefixesToOverride = prefixesToOverride;<br>    <span class="hljs-built_in">this</span>.suffix = suffix;<br>    <span class="hljs-built_in">this</span>.suffixesToOverride = suffixesToOverride;<br>    <span class="hljs-built_in">this</span>.configuration = configuration;<br>  &#125; <br><br>  <span class="hljs-comment">// 处理以|分隔的string</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">parseOverrides</span><span class="hljs-params">(String overrides)</span> &#123;<br>    <span class="hljs-keyword">if</span> (overrides != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">StringTokenizer</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTokenizer</span>(overrides, <span class="hljs-string">&quot;|&quot;</span>, <span class="hljs-literal">false</span>);<br>      <span class="hljs-keyword">final</span> List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;(parser.countTokens());<br>      <span class="hljs-keyword">while</span> (parser.hasMoreTokens()) &#123;<br>        list.add(parser.nextToken().toUpperCase(Locale.ENGLISH));<br>      &#125;<br>      <span class="hljs-keyword">return</span> list;<br>    &#125;<br>    <span class="hljs-keyword">return</span> Collections.emptyList();<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(DynamicContext context)</span> &#123;<br>    <span class="hljs-type">FilteredDynamicContext</span> <span class="hljs-variable">filteredDynamicContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilteredDynamicContext</span>(context);<br>    <span class="hljs-comment">// 先调用sqlnode的apply方法添加sql语句</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> contents.apply(filteredDynamicContext); <br>    <span class="hljs-comment">// 处理sql语句中前缀或后缀</span><br>    filteredDynamicContext.applyAll();<br>    <span class="hljs-keyword">return</span> result;<br>  &#125; <br><br>  <span class="hljs-comment">// 替换前缀和后缀，重写了 DynamicContext 的appendSql和getSql方法</span><br>  <span class="hljs-comment">// 先appendSql，然后调用applyAll进行处理，最后调用getSql</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilteredDynamicContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DynamicContext</span> &#123;<br>    <span class="hljs-keyword">private</span> DynamicContext delegate;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> prefixApplied;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> suffixApplied;<br>    <span class="hljs-keyword">private</span> StringBuilder sqlBuffer;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">FilteredDynamicContext</span><span class="hljs-params">(DynamicContext delegate)</span> &#123;<br>      <span class="hljs-built_in">super</span>(configuration, <span class="hljs-literal">null</span>);<br>      <span class="hljs-built_in">this</span>.delegate = delegate;<br>      <span class="hljs-built_in">this</span>.prefixApplied = <span class="hljs-literal">false</span>;<br>      <span class="hljs-built_in">this</span>.suffixApplied = <span class="hljs-literal">false</span>;<br>      <span class="hljs-built_in">this</span>.sqlBuffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">applyAll</span><span class="hljs-params">()</span> &#123;<br>      sqlBuffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(sqlBuffer.toString().trim());<br>      <span class="hljs-type">String</span> <span class="hljs-variable">trimmedUppercaseSql</span> <span class="hljs-operator">=</span> sqlBuffer.toString().toUpperCase(Locale.ENGLISH);<br>      <span class="hljs-keyword">if</span> (trimmedUppercaseSql.length() &gt; <span class="hljs-number">0</span>) &#123;<br>        applyPrefix(sqlBuffer, trimmedUppercaseSql);<br>        applySuffix(sqlBuffer, trimmedUppercaseSql);<br>      &#125;<br>      delegate.appendSql(sqlBuffer.toString());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getBindings</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> delegate.getBindings();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bind</span><span class="hljs-params">(String name, Object value)</span> &#123;<br>      delegate.bind(name, value);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getUniqueNumber</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> delegate.getUniqueNumber();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">appendSql</span><span class="hljs-params">(String sql)</span> &#123;<br>      sqlBuffer.append(sql);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSql</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> delegate.getSql();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">applyPrefix</span><span class="hljs-params">(StringBuilder sql, String trimmedUppercaseSql)</span> &#123;<br>      <span class="hljs-keyword">if</span> (!prefixApplied) &#123;<br>        prefixApplied = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (prefixesToOverride != <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">for</span> (String toRemove : prefixesToOverride) &#123;<br>            <span class="hljs-keyword">if</span> (trimmedUppercaseSql.startsWith(toRemove)) &#123;<br>              sql.delete(<span class="hljs-number">0</span>, toRemove.trim().length());<br>              <span class="hljs-keyword">break</span>;<br>            &#125;<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (prefix != <span class="hljs-literal">null</span>) &#123;<br>          sql.insert(<span class="hljs-number">0</span>, <span class="hljs-string">&quot; &quot;</span>);<br>          sql.insert(<span class="hljs-number">0</span>, prefix);<br>        &#125;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">applySuffix</span><span class="hljs-params">(StringBuilder sql, String trimmedUppercaseSql)</span> &#123;<br>      <span class="hljs-keyword">if</span> (!suffixApplied) &#123;<br>        suffixApplied = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (suffixesToOverride != <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">for</span> (String toRemove : suffixesToOverride) &#123;<br>            <span class="hljs-keyword">if</span> (trimmedUppercaseSql.endsWith(toRemove) || trimmedUppercaseSql.endsWith(toRemove.trim())) &#123;<br>              <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> sql.length() - toRemove.trim().length();<br>              <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> sql.length();<br>              sql.delete(start, end);<br>              <span class="hljs-keyword">break</span>;<br>            &#125;<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (suffix != <span class="hljs-literal">null</span>) &#123;<br>          sql.append(<span class="hljs-string">&quot; &quot;</span>);<br>          sql.append(suffix);<br>        &#125;<br>      &#125;<br>    &#125;<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SetSqlNode"><a href="#SetSqlNode" class="headerlink" title="SetSqlNode"></a>SetSqlNode</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetSqlNode</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TrimSqlNode</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;String&gt; suffixList = Arrays.asList(<span class="hljs-string">&quot;,&quot;</span>);<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">SetSqlNode</span><span class="hljs-params">(Configuration configuration,SqlNode contents)</span> &#123; <br>    <span class="hljs-comment">// set语句，前缀为set，不要语句最后的,</span><br>    <span class="hljs-built_in">super</span>(configuration, contents, <span class="hljs-string">&quot;SET&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, suffixList);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="WhereSqlNode"><a href="#WhereSqlNode" class="headerlink" title="WhereSqlNode"></a>WhereSqlNode</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WhereSqlNode</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TrimSqlNode</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;String&gt; prefixList = Arrays.asList(<span class="hljs-string">&quot;AND &quot;</span>,<span class="hljs-string">&quot;OR &quot;</span>,<span class="hljs-string">&quot;AND\n&quot;</span>, <span class="hljs-string">&quot;OR\n&quot;</span>, <span class="hljs-string">&quot;AND\r&quot;</span>, <span class="hljs-string">&quot;OR\r&quot;</span>, <span class="hljs-string">&quot;AND\t&quot;</span>, <span class="hljs-string">&quot;OR\t&quot;</span>);<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">WhereSqlNode</span><span class="hljs-params">(Configuration configuration, SqlNode contents)</span> &#123; <br>    <span class="hljs-comment">// where语句，前缀为where，不要语句之前的and、or</span><br>    <span class="hljs-built_in">super</span>(configuration, contents, <span class="hljs-string">&quot;WHERE&quot;</span>, prefixList, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MixedSqlNode"><a href="#MixedSqlNode" class="headerlink" title="MixedSqlNode"></a>MixedSqlNode</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MixedSqlNode</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SqlNode</span> &#123;<br>  <span class="hljs-comment">// 组合模式，拥有一个SqlNode的List</span><br>  <span class="hljs-keyword">private</span> List&lt;SqlNode&gt; contents;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">MixedSqlNode</span><span class="hljs-params">(List&lt;SqlNode&gt; contents)</span> &#123;<br>    <span class="hljs-built_in">this</span>.contents = contents;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(DynamicContext context)</span> &#123;<br>    <span class="hljs-comment">// 依次调用list里每个元素的apply</span><br>    <span class="hljs-keyword">for</span> (SqlNode sqlNode : contents) &#123;<br>      sqlNode.apply(context);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SqlSource"><a href="#SqlSource" class="headerlink" title="SqlSource"></a>SqlSource</h4><p>    SQL源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SqlSource</span> &#123;<br><br>  BoundSql <span class="hljs-title function_">getBoundSql</span><span class="hljs-params">(Object parameterObject)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SqlSourceBuilder"><a href="#SqlSourceBuilder" class="headerlink" title="SqlSourceBuilder"></a>SqlSourceBuilder</h4><p>    SQL源码构建器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SqlSourceBuilder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseBuilder</span> &#123; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">parameterProperties</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;javaType,jdbcType,mode,numericScale,resultMap,typeHandler,jdbcTypeName&quot;</span>;<br> <br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">SqlSourceBuilder</span><span class="hljs-params">(Configuration configuration)</span> &#123;<br>    <span class="hljs-built_in">super</span>(configuration);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> SqlSource <span class="hljs-title function_">parse</span><span class="hljs-params">(String originalSql, Class&lt;?&gt; parameterType, Map&lt;String, Object&gt; additionalParameters)</span> &#123;<br>    <span class="hljs-type">ParameterMappingTokenHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParameterMappingTokenHandler</span>(configuration, parameterType, additionalParameters);<br>    <span class="hljs-comment">// 替换#&#123;&#125;中间的部分,如何替换，逻辑在ParameterMappingTokenHandler </span><br>    <span class="hljs-comment">// 就是替换成?,然后将替换后的值塞到 parameterMappings 中</span><br>    <span class="hljs-type">GenericTokenParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericTokenParser</span>(<span class="hljs-string">&quot;#&#123;&quot;</span>, <span class="hljs-string">&quot;&#125;&quot;</span>, handler);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> parser.parse(originalSql);<br>    <span class="hljs-comment">// 返回静态SQL源码</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StaticSqlSource</span>(configuration, sql, handler.getParameterMappings());<br>  &#125; <br><br>  <span class="hljs-comment">// 参数映射记号处理器，静态内部类</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParameterMappingTokenHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseBuilder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TokenHandler</span> &#123; <br><br>    <span class="hljs-keyword">private</span> List&lt;ParameterMapping&gt; parameterMappings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ParameterMapping&gt;();<br>    <span class="hljs-keyword">private</span> Class&lt;?&gt; parameterType;<br>    <span class="hljs-keyword">private</span> MetaObject metaParameters; <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ParameterMappingTokenHandler</span><span class="hljs-params">(Configuration configuration, Class&lt;?&gt; parameterType, Map&lt;String, Object&gt; additionalParameters)</span> &#123;<br>      <span class="hljs-built_in">super</span>(configuration);<br>      <span class="hljs-built_in">this</span>.parameterType = parameterType;<br>      <span class="hljs-built_in">this</span>.metaParameters = configuration.newMetaObject(additionalParameters);<br>    &#125; <br><br>    <span class="hljs-keyword">public</span> List&lt;ParameterMapping&gt; <span class="hljs-title function_">getParameterMappings</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> parameterMappings;<br>    &#125; <br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handleToken</span><span class="hljs-params">(String content)</span> &#123;<br>      <span class="hljs-comment">// 先构建参数映射</span><br>      parameterMappings.add(buildParameterMapping(content));<br>      <span class="hljs-comment">// 如何替换很简单，永远是一个问号，但是参数的信息要记录在parameterMappings里面供后续使用</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;?&quot;</span>;<br>    &#125; <br><br>    <span class="hljs-comment">// 构建参数映射</span><br>    <span class="hljs-keyword">private</span> ParameterMapping <span class="hljs-title function_">buildParameterMapping</span><span class="hljs-params">(String content)</span> &#123;<br>      <span class="hljs-comment">// #&#123;favouriteSection,jdbcType=VARCHAR&#125;</span><br>      <span class="hljs-comment">// 先解析参数映射,就是转化成一个hashmap</span><br>      Map&lt;String, String&gt; propertiesMap = parseParameterMapping(content);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">property</span> <span class="hljs-operator">=</span> propertiesMap.get(<span class="hljs-string">&quot;property&quot;</span>);<br>      Class&lt;?&gt; propertyType;<br>      <span class="hljs-comment">// 这里分支比较多，需要逐个理解 </span><br>      <span class="hljs-comment">// 先推断参数的java类型</span><br>      <span class="hljs-keyword">if</span> (metaParameters.hasGetter(property)) &#123; <span class="hljs-comment">// issue #448 get type from additional params</span><br>        propertyType = metaParameters.getGetterType(property);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterType)) &#123;<br>        propertyType = parameterType;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (JdbcType.CURSOR.name().equals(propertiesMap.get(<span class="hljs-string">&quot;jdbcType&quot;</span>))) &#123;<br>        propertyType = java.sql.ResultSet.class;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (property != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">MetaClass</span> <span class="hljs-variable">metaClass</span> <span class="hljs-operator">=</span> MetaClass.forClass(parameterType);<br>        <span class="hljs-keyword">if</span> (metaClass.hasGetter(property)) &#123;<br>          propertyType = metaClass.getGetterType(property);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          propertyType = Object.class;<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        propertyType = Object.class;<br>      &#125;<br>      ParameterMapping.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParameterMapping</span>.Builder(configuration, property, propertyType);<br>      Class&lt;?&gt; javaType = propertyType;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">typeHandlerAlias</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String&gt; entry : propertiesMap.entrySet()) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> entry.getKey();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> entry.getValue(); <br>        <span class="hljs-comment">// 用户指定了java类型，覆盖推断的java类型</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;javaType&quot;</span>.equals(name)) &#123;<br>          javaType = resolveClass(value);<br>          builder.javaType(javaType);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;jdbcType&quot;</span>.equals(name)) &#123;<br>          builder.jdbcType(resolveJdbcType(value));<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;mode&quot;</span>.equals(name)) &#123;<br>          builder.mode(resolveParameterMode(value));<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;numericScale&quot;</span>.equals(name)) &#123;<br>          builder.numericScale(Integer.valueOf(value));<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;resultMap&quot;</span>.equals(name)) &#123;<br>          builder.resultMapId(value);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;typeHandler&quot;</span>.equals(name)) &#123;<br>          typeHandlerAlias = value;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;jdbcTypeName&quot;</span>.equals(name)) &#123;<br>          builder.jdbcTypeName(value);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;property&quot;</span>.equals(name)) &#123;<br>          <span class="hljs-comment">// Do Nothing</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;expression&quot;</span>.equals(name)) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Expression based parameters are not supported yet&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;An invalid property &#x27;&quot;</span> + name + <span class="hljs-string">&quot;&#x27; was found in mapping #&#123;&quot;</span> + content + <span class="hljs-string">&quot;&#125;.  Valid properties are &quot;</span> + parameterProperties);<br>        &#125;<br>      &#125;<br>      <span class="hljs-comment">// #&#123;age,javaType=int,jdbcType=NUMERIC,typeHandler=MyTypeHandler&#125;</span><br>      <span class="hljs-keyword">if</span> (typeHandlerAlias != <span class="hljs-literal">null</span>) &#123;<br>        builder.typeHandler(resolveTypeHandler(javaType, typeHandlerAlias));<br>      &#125;<br>      <span class="hljs-keyword">return</span> builder.build();<br>    &#125; <br><br>    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; <span class="hljs-title function_">parseParameterMapping</span><span class="hljs-params">(String content)</span> &#123;<br>      <span class="hljs-keyword">try</span> &#123; <br>        <span class="hljs-comment">// 将类似 #&#123;property,javaType=int,jdbcType=NUMERIC&#125;的表达式解析成map</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParameterExpression</span>(content);<br>      &#125; <span class="hljs-keyword">catch</span> (BuilderException ex) &#123;<br>        <span class="hljs-keyword">throw</span> ex;<br>      &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Parsing error was found in mapping #&#123;&quot;</span> + content + <span class="hljs-string">&quot;&#125;.  Check syntax #&#123;property|(expression), var1=value1, var2=value2, ...&#125; &quot;</span>, ex);<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="DynamicSqlSource"><a href="#DynamicSqlSource" class="headerlink" title="DynamicSqlSource"></a>DynamicSqlSource</h4><p>    动态SQL源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicSqlSource</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SqlSource</span> &#123;<br><br>  <span class="hljs-keyword">private</span> Configuration configuration;<br>  <span class="hljs-keyword">private</span> SqlNode rootSqlNode;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">DynamicSqlSource</span><span class="hljs-params">(Configuration configuration, SqlNode rootSqlNode)</span> &#123;<br>    <span class="hljs-built_in">this</span>.configuration = configuration;<br>    <span class="hljs-built_in">this</span>.rootSqlNode = rootSqlNode;<br>  &#125;<br><br>  <span class="hljs-comment">// 得到绑定的SQL</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> BoundSql <span class="hljs-title function_">getBoundSql</span><span class="hljs-params">(Object parameterObject)</span> &#123;<br>    <span class="hljs-comment">// 生成一个动态上下文</span><br>    <span class="hljs-type">DynamicContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DynamicContext</span>(configuration, parameterObject);<br><span class="hljs-comment">// 这里SqlNode.apply只是将$&#123;&#125;这种参数替换掉，并没有替换#&#123;&#125;这种参数</span><br>    rootSqlNode.apply(context);<br><span class="hljs-comment">// 调用SqlSourceBuilder</span><br>    <span class="hljs-type">SqlSourceBuilder</span> <span class="hljs-variable">sqlSourceParser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSourceBuilder</span>(configuration);<br>    Class&lt;?&gt; parameterType = parameterObject == <span class="hljs-literal">null</span> ? Object.class : parameterObject.getClass();<br><span class="hljs-comment">// SqlSourceBuilder.parse,注意这里返回的是StaticSqlSource,解析完了就把那些参数都替换成?了，也就是最基本的JDBC的SQL写法</span><br>    <span class="hljs-type">SqlSource</span> <span class="hljs-variable">sqlSource</span> <span class="hljs-operator">=</span> sqlSourceParser.parse(context.getSql(), parameterType, context.getBindings());<br><span class="hljs-comment">// 看似是又去递归调用SqlSource.getBoundSql，其实因为是StaticSqlSource，所以没问题，不是递归调用</span><br>    <span class="hljs-type">BoundSql</span> <span class="hljs-variable">boundSql</span> <span class="hljs-operator">=</span> sqlSource.getBoundSql(parameterObject);<br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : context.getBindings().entrySet()) &#123;<br>      boundSql.setAdditionalParameter(entry.getKey(), entry.getValue());<br>    &#125;<br>    <span class="hljs-keyword">return</span> boundSql;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="XMLScriptBuilder"><a href="#XMLScriptBuilder" class="headerlink" title="XMLScriptBuilder"></a>XMLScriptBuilder</h4><p>    XML脚本构建器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XMLScriptBuilder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseBuilder</span> &#123; <br><br>  <span class="hljs-keyword">private</span> XNode context;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isDynamic;<br>  <span class="hljs-keyword">private</span> Class&lt;?&gt; parameterType; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XMLScriptBuilder</span><span class="hljs-params">(Configuration configuration, XNode context)</span> &#123;<br>    <span class="hljs-built_in">this</span>(configuration, context, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XMLScriptBuilder</span><span class="hljs-params">(Configuration configuration, XNode context, Class&lt;?&gt; parameterType)</span> &#123;<br>    <span class="hljs-built_in">super</span>(configuration);<br>    <span class="hljs-built_in">this</span>.context = context;<br>    <span class="hljs-built_in">this</span>.parameterType = parameterType;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> SqlSource <span class="hljs-title function_">parseScriptNode</span><span class="hljs-params">()</span> &#123;<br>    List&lt;SqlNode&gt; contents = parseDynamicTags(context);<br>    <span class="hljs-type">MixedSqlNode</span> <span class="hljs-variable">rootSqlNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MixedSqlNode</span>(contents);<br>    <span class="hljs-type">SqlSource</span> <span class="hljs-variable">sqlSource</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (isDynamic) &#123;<br>      sqlSource = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DynamicSqlSource</span>(configuration, rootSqlNode);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      sqlSource = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RawSqlSource</span>(configuration, rootSqlNode, parameterType);<br>    &#125;<br>    <span class="hljs-keyword">return</span> sqlSource;<br>  &#125; <br><br>  <span class="hljs-comment">// 解析XNode为SqlNode</span><br>  List&lt;SqlNode&gt; <span class="hljs-title function_">parseDynamicTags</span><span class="hljs-params">(XNode node)</span> &#123;<br>    List&lt;SqlNode&gt; contents = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;SqlNode&gt;();<br>    <span class="hljs-type">NodeList</span> <span class="hljs-variable">children</span> <span class="hljs-operator">=</span> node.getNode().getChildNodes();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; children.getLength(); i++) &#123;<br>      <span class="hljs-type">XNode</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> node.newXNode(children.item(i)); <br>      <span class="hljs-comment">// TEXT_NODE 或者 CDATA_SECTION_NODE 转换成 TextSqlNode</span><br>      <span class="hljs-keyword">if</span> (child.getNode().getNodeType() == Node.CDATA_SECTION_NODE || child.getNode().getNodeType() == Node.TEXT_NODE) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> child.getStringBody(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-type">TextSqlNode</span> <span class="hljs-variable">textSqlNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextSqlNode</span>(data);<br>        <span class="hljs-keyword">if</span> (textSqlNode.isDynamic()) &#123;<br>          contents.add(textSqlNode);<br>          isDynamic = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          contents.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StaticTextSqlNode</span>(data));<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (child.getNode().getNodeType() == Node.ELEMENT_NODE) &#123; <span class="hljs-comment">// issue #628</span><br>        <span class="hljs-comment">// ELEMENT_NODE 根据名称转换成对应的SqlNode</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">nodeName</span> <span class="hljs-operator">=</span> child.getNode().getNodeName();<br>        <span class="hljs-type">NodeHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> nodeHandlers(nodeName);<br>        <span class="hljs-keyword">if</span> (handler == <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Unknown element &lt;&quot;</span> + nodeName + <span class="hljs-string">&quot;&gt; in SQL statement.&quot;</span>);<br>        &#125;<br>        handler.handleNode(child, contents);<br>        isDynamic = <span class="hljs-literal">true</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> contents;<br>  &#125; <br><br>  <span class="hljs-comment">// 根据名称获取 SqlNode 对应的 NodeHandler</span><br>  NodeHandler <span class="hljs-title function_">nodeHandlers</span><span class="hljs-params">(String nodeName)</span> &#123;<br>    Map&lt;String, NodeHandler&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, NodeHandler&gt;();<br>    map.put(<span class="hljs-string">&quot;trim&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrimHandler</span>());<br>    map.put(<span class="hljs-string">&quot;where&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">WhereHandler</span>());<br>    map.put(<span class="hljs-string">&quot;set&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SetHandler</span>());<br>    map.put(<span class="hljs-string">&quot;foreach&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForEachHandler</span>());<br>    map.put(<span class="hljs-string">&quot;if&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">IfHandler</span>());<br>    map.put(<span class="hljs-string">&quot;choose&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChooseHandler</span>());<br>    map.put(<span class="hljs-string">&quot;when&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">IfHandler</span>());<br>    map.put(<span class="hljs-string">&quot;otherwise&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">OtherwiseHandler</span>());<br>    map.put(<span class="hljs-string">&quot;bind&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindHandler</span>());<br>    <span class="hljs-keyword">return</span> map.get(nodeName);<br>  &#125; <br><br>  <span class="hljs-comment">// NodeHandler基本上都是获取需要的值，然后组装成对应的SqlNode，塞到targetContents中</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">NodeHandler</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleNode</span><span class="hljs-params">(XNode nodeToHandle, List&lt;SqlNode&gt; targetContents)</span>;<br>  &#125; <br><br>  <span class="hljs-comment">// 对应VarDeclSqlNode</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BindHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NodeHandler</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BindHandler</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// Prevent Synthetic Access</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleNode</span><span class="hljs-params">(XNode nodeToHandle, List&lt;SqlNode&gt; targetContents)</span> &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> nodeToHandle.getStringAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> nodeToHandle.getStringAttribute(<span class="hljs-string">&quot;value&quot;</span>);<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">VarDeclSqlNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VarDeclSqlNode</span>(name, expression);<br>      targetContents.add(node);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TrimHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NodeHandler</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TrimHandler</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// Prevent Synthetic Access</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleNode</span><span class="hljs-params">(XNode nodeToHandle, List&lt;SqlNode&gt; targetContents)</span> &#123;<br>      <span class="hljs-comment">// 处理 TrimSqlNode 的子node</span><br>      List&lt;SqlNode&gt; contents = parseDynamicTags(nodeToHandle); <br>      <span class="hljs-type">MixedSqlNode</span> <span class="hljs-variable">mixedSqlNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MixedSqlNode</span>(contents);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">prefix</span> <span class="hljs-operator">=</span> nodeToHandle.getStringAttribute(<span class="hljs-string">&quot;prefix&quot;</span>);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">prefixOverrides</span> <span class="hljs-operator">=</span> nodeToHandle.getStringAttribute(<span class="hljs-string">&quot;prefixOverrides&quot;</span>);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">suffix</span> <span class="hljs-operator">=</span> nodeToHandle.getStringAttribute(<span class="hljs-string">&quot;suffix&quot;</span>);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">suffixOverrides</span> <span class="hljs-operator">=</span> nodeToHandle.getStringAttribute(<span class="hljs-string">&quot;suffixOverrides&quot;</span>);<br>      <span class="hljs-type">TrimSqlNode</span> <span class="hljs-variable">trim</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrimSqlNode</span>(configuration, mixedSqlNode, prefix, prefixOverrides, suffix, suffixOverrides);<br>      targetContents.add(trim);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WhereHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NodeHandler</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WhereHandler</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// Prevent Synthetic Access</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleNode</span><span class="hljs-params">(XNode nodeToHandle, List&lt;SqlNode&gt; targetContents)</span> &#123;<br>      List&lt;SqlNode&gt; contents = parseDynamicTags(nodeToHandle);<br>      <span class="hljs-type">MixedSqlNode</span> <span class="hljs-variable">mixedSqlNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MixedSqlNode</span>(contents);<br>      <span class="hljs-type">WhereSqlNode</span> <span class="hljs-variable">where</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WhereSqlNode</span>(configuration, mixedSqlNode);<br>      targetContents.add(where);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NodeHandler</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SetHandler</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// Prevent Synthetic Access</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleNode</span><span class="hljs-params">(XNode nodeToHandle, List&lt;SqlNode&gt; targetContents)</span> &#123;<br>      List&lt;SqlNode&gt; contents = parseDynamicTags(nodeToHandle);<br>      <span class="hljs-type">MixedSqlNode</span> <span class="hljs-variable">mixedSqlNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MixedSqlNode</span>(contents);<br>      <span class="hljs-type">SetSqlNode</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SetSqlNode</span>(configuration, mixedSqlNode);<br>      targetContents.add(set);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForEachHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NodeHandler</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ForEachHandler</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// Prevent Synthetic Access</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleNode</span><span class="hljs-params">(XNode nodeToHandle, List&lt;SqlNode&gt; targetContents)</span> &#123;<br>      List&lt;SqlNode&gt; contents = parseDynamicTags(nodeToHandle);<br>      <span class="hljs-type">MixedSqlNode</span> <span class="hljs-variable">mixedSqlNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MixedSqlNode</span>(contents);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">collection</span> <span class="hljs-operator">=</span> nodeToHandle.getStringAttribute(<span class="hljs-string">&quot;collection&quot;</span>);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> nodeToHandle.getStringAttribute(<span class="hljs-string">&quot;item&quot;</span>);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> nodeToHandle.getStringAttribute(<span class="hljs-string">&quot;index&quot;</span>);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">open</span> <span class="hljs-operator">=</span> nodeToHandle.getStringAttribute(<span class="hljs-string">&quot;open&quot;</span>);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">close</span> <span class="hljs-operator">=</span> nodeToHandle.getStringAttribute(<span class="hljs-string">&quot;close&quot;</span>);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">separator</span> <span class="hljs-operator">=</span> nodeToHandle.getStringAttribute(<span class="hljs-string">&quot;separator&quot;</span>);<br>      <span class="hljs-type">ForEachSqlNode</span> <span class="hljs-variable">forEachSqlNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForEachSqlNode</span>(configuration, mixedSqlNode, collection, index, item, open, close, separator);<br>      targetContents.add(forEachSqlNode);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NodeHandler</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">IfHandler</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// Prevent Synthetic Access</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleNode</span><span class="hljs-params">(XNode nodeToHandle, List&lt;SqlNode&gt; targetContents)</span> &#123;<br>      List&lt;SqlNode&gt; contents = parseDynamicTags(nodeToHandle);<br>      <span class="hljs-type">MixedSqlNode</span> <span class="hljs-variable">mixedSqlNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MixedSqlNode</span>(contents);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> nodeToHandle.getStringAttribute(<span class="hljs-string">&quot;test&quot;</span>);<br>      <span class="hljs-type">IfSqlNode</span> <span class="hljs-variable">ifSqlNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IfSqlNode</span>(mixedSqlNode, test);<br>      targetContents.add(ifSqlNode);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OtherwiseHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NodeHandler</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">OtherwiseHandler</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// Prevent Synthetic Access</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleNode</span><span class="hljs-params">(XNode nodeToHandle, List&lt;SqlNode&gt; targetContents)</span> &#123;<br>      List&lt;SqlNode&gt; contents = parseDynamicTags(nodeToHandle);<br>      <span class="hljs-type">MixedSqlNode</span> <span class="hljs-variable">mixedSqlNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MixedSqlNode</span>(contents);<br>      targetContents.add(mixedSqlNode);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChooseHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">NodeHandler</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ChooseHandler</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// Prevent Synthetic Access</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleNode</span><span class="hljs-params">(XNode nodeToHandle, List&lt;SqlNode&gt; targetContents)</span> &#123;<br>      List&lt;SqlNode&gt; whenSqlNodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;SqlNode&gt;();<br>      List&lt;SqlNode&gt; otherwiseSqlNodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;SqlNode&gt;();<br>      handleWhenOtherwiseNodes(nodeToHandle, whenSqlNodes, otherwiseSqlNodes);<br>      <span class="hljs-type">SqlNode</span> <span class="hljs-variable">defaultSqlNode</span> <span class="hljs-operator">=</span> getDefaultSqlNode(otherwiseSqlNodes);<br>      <span class="hljs-type">ChooseSqlNode</span> <span class="hljs-variable">chooseSqlNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChooseSqlNode</span>(whenSqlNodes, defaultSqlNode);<br>      targetContents.add(chooseSqlNode);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleWhenOtherwiseNodes</span><span class="hljs-params">(XNode chooseSqlNode, List&lt;SqlNode&gt; ifSqlNodes, List&lt;SqlNode&gt; defaultSqlNodes)</span> &#123;<br>      List&lt;XNode&gt; children = chooseSqlNode.getChildren();<br>      <span class="hljs-keyword">for</span> (XNode child : children) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">nodeName</span> <span class="hljs-operator">=</span> child.getNode().getNodeName();<br>        <span class="hljs-type">NodeHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> nodeHandlers(nodeName);<br>        <span class="hljs-keyword">if</span> (handler <span class="hljs-keyword">instanceof</span> IfHandler) &#123;<br>          handler.handleNode(child, ifSqlNodes);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (handler <span class="hljs-keyword">instanceof</span> OtherwiseHandler) &#123;<br>          handler.handleNode(child, defaultSqlNodes);<br>        &#125;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> SqlNode <span class="hljs-title function_">getDefaultSqlNode</span><span class="hljs-params">(List&lt;SqlNode&gt; defaultSqlNodes)</span> &#123;<br>      <span class="hljs-type">SqlNode</span> <span class="hljs-variable">defaultSqlNode</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">if</span> (defaultSqlNodes.size() == <span class="hljs-number">1</span>) &#123;<br>        defaultSqlNode = defaultSqlNodes.get(<span class="hljs-number">0</span>);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (defaultSqlNodes.size() &gt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Too many default (otherwise) elements in choose statement.&quot;</span>);<br>      &#125;<br>      <span class="hljs-keyword">return</span> defaultSqlNode;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="XMLLanguageDriver"><a href="#XMLLanguageDriver" class="headerlink" title="XMLLanguageDriver"></a>XMLLanguageDriver</h4><p>    XML语言驱动，从XML文件构建SqlSource</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XMLLanguageDriver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">LanguageDriver</span> &#123; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> ParameterHandler <span class="hljs-title function_">createParameterHandler</span><span class="hljs-params">(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql)</span> &#123;<br>    <span class="hljs-comment">// 返回默认的参数处理器</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultParameterHandler</span>(mappedStatement, parameterObject, boundSql);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> SqlSource <span class="hljs-title function_">createSqlSource</span><span class="hljs-params">(Configuration configuration, XNode script, Class&lt;?&gt; parameterType)</span> &#123;<br><span class="hljs-comment">// 用XML脚本构建器解析</span><br>    <span class="hljs-type">XMLScriptBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLScriptBuilder</span>(configuration, script, parameterType);<br>    <span class="hljs-keyword">return</span> builder.parseScriptNode();<br>  &#125; <br><br>  <span class="hljs-comment">// 注解方式构建mapper，一般不用，可以暂时忽略</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> SqlSource <span class="hljs-title function_">createSqlSource</span><span class="hljs-params">(Configuration configuration, String script, Class&lt;?&gt; parameterType)</span> &#123;<br>    <span class="hljs-comment">// issue #3 </span><br>    <span class="hljs-comment">// 在注解中写xml脚本，狠人一个</span><br>    <span class="hljs-keyword">if</span> (script.startsWith(<span class="hljs-string">&quot;&lt;script&gt;&quot;</span>)) &#123;<br>      <span class="hljs-type">XPathParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XPathParser</span>(script, <span class="hljs-literal">false</span>, configuration.getVariables(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLMapperEntityResolver</span>());<br>      <span class="hljs-keyword">return</span> createSqlSource(configuration, parser.evalNode(<span class="hljs-string">&quot;/script&quot;</span>), parameterType);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// issue #127</span><br>      script = PropertyParser.parse(script, configuration.getVariables());<br>      <span class="hljs-type">TextSqlNode</span> <span class="hljs-variable">textSqlNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TextSqlNode</span>(script);<br>      <span class="hljs-comment">// 一种是动态，一种是原始</span><br>      <span class="hljs-keyword">if</span> (textSqlNode.isDynamic()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DynamicSqlSource</span>(configuration, textSqlNode);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RawSqlSource</span>(configuration, script, parameterType);<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="RawLanguageDriver"><a href="#RawLanguageDriver" class="headerlink" title="RawLanguageDriver"></a>RawLanguageDriver</h4><p>      从3.2.4开始默认的XML语言能识别静态语句并且创建<code>RawSqlSource</code>，所以除非你想要确认没有任何动态标签，否则不需要使用<code>RawLanguageDriver</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RawLanguageDriver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">XMLLanguageDriver</span> &#123; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> SqlSource <span class="hljs-title function_">createSqlSource</span><span class="hljs-params">(Configuration configuration, XNode script, Class&lt;?&gt; parameterType)</span> &#123;<br>    <span class="hljs-type">SqlSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.createSqlSource(configuration, script, parameterType);<br>    checkIsNotDynamic(source);<br>    <span class="hljs-keyword">return</span> source;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> SqlSource <span class="hljs-title function_">createSqlSource</span><span class="hljs-params">(Configuration configuration, String script, Class&lt;?&gt; parameterType)</span> &#123;<br>    <span class="hljs-type">SqlSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.createSqlSource(configuration, script, parameterType);<br>    checkIsNotDynamic(source);<br>    <span class="hljs-keyword">return</span> source;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkIsNotDynamic</span><span class="hljs-params">(SqlSource source)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!RawSqlSource.class.equals(source.getClass())) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Dynamic content is not allowed when using RAW language&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="RawSqlSource"><a href="#RawSqlSource" class="headerlink" title="RawSqlSource"></a>RawSqlSource</h4><p>    原始SQL源码，比DynamicSqlSource快</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RawSqlSource</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SqlSource</span> &#123; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">RawSqlSource</span><span class="hljs-params">(Configuration configuration, SqlNode rootSqlNode, Class&lt;?&gt; parameterType)</span> &#123;<br>    <span class="hljs-built_in">this</span>(configuration, getSql(configuration, rootSqlNode), parameterType);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">RawSqlSource</span><span class="hljs-params">(Configuration configuration, String sql, Class&lt;?&gt; parameterType)</span> &#123;<br>    <span class="hljs-type">SqlSourceBuilder</span> <span class="hljs-variable">sqlSourceParser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSourceBuilder</span>(configuration);<br>    Class&lt;?&gt; clazz = parameterType == <span class="hljs-literal">null</span> ? Object.class : parameterType;<br>    sqlSource = sqlSourceParser.parse(sql, clazz, <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;());<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getSql</span><span class="hljs-params">(Configuration configuration, SqlNode rootSqlNode)</span> &#123;<br>    <span class="hljs-type">DynamicContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DynamicContext</span>(configuration, <span class="hljs-literal">null</span>);<br>    rootSqlNode.apply(context);<br>    <span class="hljs-keyword">return</span> context.getSql();<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> BoundSql <span class="hljs-title function_">getBoundSql</span><span class="hljs-params">(Object parameterObject)</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSource.getBoundSql(parameterObject);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12-mapping</title>
    <link href="/2023/07/18/12-mapping/"/>
    <url>/2023/07/18/12-mapping/</url>
    
    <content type="html"><![CDATA[<h4 id="DatabaseIdProvider"><a href="#DatabaseIdProvider" class="headerlink" title="DatabaseIdProvider"></a>DatabaseIdProvider</h4><p>​ 应该返回一个id来标识该数据库的类型。该id可以在以后用于为每种数据库类型构建不同的查询。这种机制支持多个供应商或版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DatabaseIdProvider</span> &#123;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties p)</span>;<br><br>  <span class="hljs-comment">// 根据数据源来得到一个DB id</span><br>  String <span class="hljs-title function_">getDatabaseId</span><span class="hljs-params">(DataSource dataSource)</span> <span class="hljs-keyword">throws</span> SQLException;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="VendorDatabaseIdProvider"><a href="#VendorDatabaseIdProvider" class="headerlink" title="VendorDatabaseIdProvider"></a>VendorDatabaseIdProvider</h4><p>​ 厂商数据库Id提供者。<code>DefaultDatabaseIdProvider</code>继承此类，但是已标记为废弃</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VendorDatabaseIdProvider</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DatabaseIdProvider</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LogFactory.getLog(BaseExecutor.class);<br><br>  <span class="hljs-keyword">private</span> Properties properties;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties p)</span> &#123;<br>    <span class="hljs-built_in">this</span>.properties = p;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDatabaseId</span><span class="hljs-params">(DataSource dataSource)</span> &#123;<br>    <span class="hljs-keyword">if</span> (dataSource == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">&quot;dataSource cannot be null&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 根据dataSource得到数据库名字</span><br>      <span class="hljs-keyword">return</span> getDatabaseName(dataSource);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      log.error(<span class="hljs-string">&quot;Could not get a databaseId from dataSource&quot;</span>, e);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getDatabaseName</span><span class="hljs-params">(DataSource dataSource)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">// 先得到productName</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">productName</span> <span class="hljs-operator">=</span> getDatabaseProductName(dataSource);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.properties != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 如果设置了缩写properties，则一个个比较返回匹配的缩写</span><br>      <span class="hljs-keyword">for</span> (Map.Entry&lt;Object, Object&gt; property : properties.entrySet()) &#123;<br>        <span class="hljs-keyword">if</span> (productName.contains((String) property.getKey())) &#123;<br>          <span class="hljs-keyword">return</span> (String) property.getValue();<br>        &#125;<br>      &#125;<br>      <span class="hljs-comment">// no match, return null</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> productName;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getDatabaseProductName</span><span class="hljs-params">(DataSource dataSource)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      con = dataSource.getConnection();<br>      <span class="hljs-comment">// 核心就是DatabaseMetaData.getDatabaseProductName()得到数据库产品名字</span><br>      <span class="hljs-type">DatabaseMetaData</span> <span class="hljs-variable">metaData</span> <span class="hljs-operator">=</span> con.getMetaData();<br>      <span class="hljs-keyword">return</span> metaData.getDatabaseProductName();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-keyword">if</span> (con != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          con.close();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>          <span class="hljs-comment">// ignored</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h4><p>​ 环境。决定加载哪种环境（开发环境&#x2F;生产环境）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Environment</span> &#123; <br><br>  <span class="hljs-comment">// 环境id</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String id;<br>  <span class="hljs-comment">// 事务工厂</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> TransactionFactory transactionFactory;<br>  <span class="hljs-comment">// 数据源</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> DataSource dataSource; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Environment</span><span class="hljs-params">(String id, TransactionFactory transactionFactory, DataSource dataSource)</span> &#123;<br>    <span class="hljs-keyword">if</span> (id == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Parameter &#x27;id&#x27; must not be null&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (transactionFactory == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Parameter &#x27;transactionFactory&#x27; must not be null&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">this</span>.id = id;<br>    <span class="hljs-keyword">if</span> (dataSource == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Parameter &#x27;dataSource&#x27; must not be null&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">this</span>.transactionFactory = transactionFactory;<br>    <span class="hljs-built_in">this</span>.dataSource = dataSource;<br>  &#125;<br><br>  <span class="hljs-comment">// 一个静态内部类Builder</span><br>  <span class="hljs-comment">// 建造模式</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span> &#123;<br>      <span class="hljs-keyword">private</span> String id;<br>      <span class="hljs-keyword">private</span> TransactionFactory transactionFactory;<br>      <span class="hljs-keyword">private</span> DataSource dataSource;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Builder</span><span class="hljs-params">(String id)</span> &#123;<br>      <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">transactionFactory</span><span class="hljs-params">(TransactionFactory transactionFactory)</span> &#123;<br>      <span class="hljs-built_in">this</span>.transactionFactory = transactionFactory;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">dataSource</span><span class="hljs-params">(DataSource dataSource)</span> &#123;<br>      <span class="hljs-built_in">this</span>.dataSource = dataSource;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">id</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Environment <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Environment</span>(<span class="hljs-built_in">this</span>.id, <span class="hljs-built_in">this</span>.transactionFactory, <span class="hljs-built_in">this</span>.dataSource);<br>    &#125;<br><br>  &#125;<br><br>  <span class="hljs-comment">// 剩下的get方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="FetchType"><a href="#FetchType" class="headerlink" title="FetchType"></a>FetchType</h4><p>​ 在MyBatis中，fetch type有三种类型：DEFAULT, EAGER和LAZY(<a href="https://stackoverflow.com/questions/2990799/difference-between-fetchtype-lazy-and-eager-in-java-persistence-api)%E3%80%82%E8%BF%99%E4%B8%89%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8C%BA%E5%88%AB%E5%9C%A8%E4%BA%8E%E5%AE%83%E4%BB%AC%E6%8E%A7%E5%88%B6MyBatis%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E3%80%82">https://stackoverflow.com/questions/2990799/difference-between-fetchtype-lazy-and-eager-in-java-persistence-api)。这三种类型的区别在于它们控制MyBatis如何获取数据。</a></p><ul><li><strong>DEFAULT</strong>：这是默认的fetch type，它会根据MyBatis的全局配置来决定是使用EAGER还是LAZY。</li><li><strong>EAGER</strong>：这种fetch type会立即加载所有相关数据。当您获取一个对象时，与该对象相关联的所有数据都会被立即加载。</li><li><strong>LAZY</strong>：这种fetch type会延迟加载相关数据。当您获取一个对象时，与该对象相关联的数据不会被立即加载，而是在您访问这些数据时才会被加载。</li></ul><p>​ 以上解释来自bing chat</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">FetchType</span> &#123;<br>  LAZY, EAGER, DEFAULT<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ParameterMode"><a href="#ParameterMode" class="headerlink" title="ParameterMode"></a>ParameterMode</h4><p>​ ParameterMode用来控制MyBatis如何处理存储过程的参数。</p><ul><li><strong>IN</strong>：表示输入参数，用于传递给存储过程。</li><li><strong>OUT</strong>：表示输出参数，用于从存储过程返回值。</li><li><strong>INOUT</strong>：表示输入&#x2F;输出参数，既可以传递给存储过程，也可以从存储过程返回值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ParameterMode</span> &#123;<br>  IN, OUT, INOUT<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ParameterMapping"><a href="#ParameterMapping" class="headerlink" title="ParameterMapping"></a>ParameterMapping</h4><p>​ 参数映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParameterMapping</span> &#123; <br><br>  <span class="hljs-keyword">private</span> Configuration configuration;<br><br>  <span class="hljs-comment">// 例子：#&#123;property,javaType=int,jdbcType=NUMERIC&#125;</span><br><br>  <span class="hljs-comment">// property</span><br>  <span class="hljs-keyword">private</span> String property;<br>  <span class="hljs-comment">// mode</span><br>  <span class="hljs-keyword">private</span> ParameterMode mode;<br>  <span class="hljs-comment">// javaType=int</span><br>  <span class="hljs-keyword">private</span> Class&lt;?&gt; javaType = Object.class;<br>  <span class="hljs-comment">// jdbcType=NUMERIC</span><br>  <span class="hljs-keyword">private</span> JdbcType jdbcType;<br>  <span class="hljs-comment">// numericScale</span><br>  <span class="hljs-keyword">private</span> Integer numericScale;<br>  <span class="hljs-keyword">private</span> TypeHandler&lt;?&gt; typeHandler;<br>  <span class="hljs-keyword">private</span> String resultMapId;<br>  <span class="hljs-comment">// jdbcType=NUMERIC</span><br>  <span class="hljs-keyword">private</span> String jdbcTypeName;<br>  <span class="hljs-keyword">private</span> String expression;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">ParameterMapping</span><span class="hljs-params">()</span> &#123;<br>  &#125;<br><br>  <span class="hljs-comment">// 静态内部类，建造者模式</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ParameterMapping</span> <span class="hljs-variable">parameterMapping</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParameterMapping</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Builder</span><span class="hljs-params">(Configuration configuration, String property, TypeHandler&lt;?&gt; typeHandler)</span> &#123;<br>      parameterMapping.configuration = configuration;<br>      parameterMapping.property = property;<br>      parameterMapping.typeHandler = typeHandler;<br>      parameterMapping.mode = ParameterMode.IN;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Builder</span><span class="hljs-params">(Configuration configuration, String property, Class&lt;?&gt; javaType)</span> &#123;<br>      parameterMapping.configuration = configuration;<br>      parameterMapping.property = property;<br>      parameterMapping.javaType = javaType;<br>      parameterMapping.mode = ParameterMode.IN;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">mode</span><span class="hljs-params">(ParameterMode mode)</span> &#123;<br>      parameterMapping.mode = mode;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">javaType</span><span class="hljs-params">(Class&lt;?&gt; javaType)</span> &#123;<br>      parameterMapping.javaType = javaType;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">jdbcType</span><span class="hljs-params">(JdbcType jdbcType)</span> &#123;<br>      parameterMapping.jdbcType = jdbcType;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">numericScale</span><span class="hljs-params">(Integer numericScale)</span> &#123;<br>      parameterMapping.numericScale = numericScale;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">resultMapId</span><span class="hljs-params">(String resultMapId)</span> &#123;<br>      parameterMapping.resultMapId = resultMapId;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">typeHandler</span><span class="hljs-params">(TypeHandler&lt;?&gt; typeHandler)</span> &#123;<br>      parameterMapping.typeHandler = typeHandler;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">jdbcTypeName</span><span class="hljs-params">(String jdbcTypeName)</span> &#123;<br>      parameterMapping.jdbcTypeName = jdbcTypeName;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">expression</span><span class="hljs-params">(String expression)</span> &#123;<br>      parameterMapping.expression = expression;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ParameterMapping <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>      resolveTypeHandler();<br>      validate();<br>      <span class="hljs-keyword">return</span> parameterMapping;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resolveTypeHandler</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// 如果没有指定特殊的typeHandler，则根据javaType，jdbcType来查表确定一个默认的typeHandler</span><br>      <span class="hljs-keyword">if</span> (parameterMapping.typeHandler == <span class="hljs-literal">null</span> &amp;&amp; parameterMapping.javaType != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> parameterMapping.configuration;<br>        <span class="hljs-type">TypeHandlerRegistry</span> <span class="hljs-variable">typeHandlerRegistry</span> <span class="hljs-operator">=</span> configuration.getTypeHandlerRegistry();<br>        parameterMapping.typeHandler = typeHandlerRegistry.getTypeHandler(parameterMapping.javaType, parameterMapping.jdbcType);<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 构造前做下校验</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">validate</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">if</span> (ResultSet.class.equals(parameterMapping.javaType)) &#123;<br>        <span class="hljs-keyword">if</span> (parameterMapping.resultMapId == <span class="hljs-literal">null</span>) &#123; <br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Missing resultmap in property &#x27;&quot;</span>  <br>              + parameterMapping.property + <span class="hljs-string">&quot;&#x27;.  &quot;</span> <br>              + <span class="hljs-string">&quot;Parameters of type java.sql.ResultSet require a resultmap.&quot;</span>);<br>        &#125;            <br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (parameterMapping.typeHandler == <span class="hljs-literal">null</span>) &#123; <br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Type handler was null on parameter mapping for property &#x27;&quot;</span>  <br>              + parameterMapping.property + <span class="hljs-string">&quot;&#x27;.  &quot;</span> <br>              + <span class="hljs-string">&quot;It was either not specified and/or could not be found for the javaType / jdbcType combination specified.&quot;</span>);<br>        &#125;<br>      &#125;<br>    &#125;<br><br>  &#125;<br><br>  <span class="hljs-comment">// 剩下的get方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ParameterMap"><a href="#ParameterMap" class="headerlink" title="ParameterMap"></a>ParameterMap</h4><p>​ 参数映射集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParameterMap</span> &#123; <br><br>  <span class="hljs-keyword">private</span> String id;<br>  <span class="hljs-keyword">private</span> Class&lt;?&gt; type;<br>  <span class="hljs-keyword">private</span> List&lt;ParameterMapping&gt; parameterMappings;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">ParameterMap</span><span class="hljs-params">()</span> &#123;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ParameterMap</span> <span class="hljs-variable">parameterMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParameterMap</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Builder</span><span class="hljs-params">(Configuration configuration, String id, Class&lt;?&gt; type, List&lt;ParameterMapping&gt; parameterMappings)</span> &#123;<br>      parameterMap.id = id;<br>      parameterMap.type = type;<br>      parameterMap.parameterMappings = parameterMappings;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; type() &#123;<br>      <span class="hljs-keyword">return</span> parameterMap.type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ParameterMap <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">//lock down collections</span><br>      parameterMap.parameterMappings = Collections.unmodifiableList(parameterMap.parameterMappings);<br>      <span class="hljs-keyword">return</span> parameterMap;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 剩下的get方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ResultFlag"><a href="#ResultFlag" class="headerlink" title="ResultFlag"></a>ResultFlag</h4><p>​ 用来控制mybatis如何处理结果映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ResultFlag</span> &#123;<br>  ID, CONSTRUCTOR<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ResultMapping"><a href="#ResultMapping" class="headerlink" title="ResultMapping"></a>ResultMapping</h4><p>​ 结果映射,属性的映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultMapping</span> &#123; <br><br>  <span class="hljs-keyword">private</span> Configuration configuration; <br>  <span class="hljs-comment">// java属性</span><br>  <span class="hljs-keyword">private</span> String property;<br>  <span class="hljs-comment">// 列名</span><br>  <span class="hljs-keyword">private</span> String column; <br>  <span class="hljs-comment">// java属性类型</span><br>  <span class="hljs-keyword">private</span> Class&lt;?&gt; javaType;<br>  <span class="hljs-comment">// 列对应的jdbc类型</span><br>  <span class="hljs-keyword">private</span> JdbcType jdbcType; <br>  <span class="hljs-comment">// java类型和jdbc类型转换的类型处理器</span><br>  <span class="hljs-keyword">private</span> TypeHandler&lt;?&gt; typeHandler;<br>  <span class="hljs-keyword">private</span> String nestedResultMapId;<br>  <span class="hljs-keyword">private</span> String nestedQueryId;<br>  <span class="hljs-keyword">private</span> Set&lt;String&gt; notNullColumns;<br>  <span class="hljs-keyword">private</span> String columnPrefix;<br>  <span class="hljs-keyword">private</span> List&lt;ResultFlag&gt; flags;<br>  <span class="hljs-keyword">private</span> List&lt;ResultMapping&gt; composites;<br>  <span class="hljs-keyword">private</span> String resultSet;<br>  <span class="hljs-keyword">private</span> String foreignColumn;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> lazy; <br><br>  ResultMapping() &#123;<br>  &#125; <br><br>  <span class="hljs-comment">// 静态内部类，建造者模式</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span> &#123; <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ResultMapping</span> <span class="hljs-variable">resultMapping</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultMapping</span>(); <br><br>    <span class="hljs-comment">// 传列名和类型处理器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Builder</span><span class="hljs-params">(Configuration configuration, String property, String column, TypeHandler&lt;?&gt; typeHandler)</span> &#123;<br>      <span class="hljs-built_in">this</span>(configuration, property);<br>      resultMapping.column = column;<br>      resultMapping.typeHandler = typeHandler;<br>    &#125;<br><br>    <span class="hljs-comment">// 传列名和对应的java类型</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Builder</span><span class="hljs-params">(Configuration configuration, String property, String column, Class&lt;?&gt; javaType)</span> &#123;<br>      <span class="hljs-built_in">this</span>(configuration, property);<br>      resultMapping.column = column;<br>      resultMapping.javaType = javaType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Builder</span><span class="hljs-params">(Configuration configuration, String property)</span> &#123;<br>      resultMapping.configuration = configuration;<br>      resultMapping.property = property;<br>      resultMapping.flags = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ResultFlag&gt;();<br>      resultMapping.composites = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ResultMapping&gt;();<br>      resultMapping.lazy = configuration.isLazyLoadingEnabled();<br>    &#125; <br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">javaType</span><span class="hljs-params">(Class&lt;?&gt; javaType)</span> &#123;<br>      resultMapping.javaType = javaType;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">jdbcType</span><span class="hljs-params">(JdbcType jdbcType)</span> &#123;<br>      resultMapping.jdbcType = jdbcType;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">nestedResultMapId</span><span class="hljs-params">(String nestedResultMapId)</span> &#123;<br>      resultMapping.nestedResultMapId = nestedResultMapId;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">nestedQueryId</span><span class="hljs-params">(String nestedQueryId)</span> &#123;<br>      resultMapping.nestedQueryId = nestedQueryId;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">resultSet</span><span class="hljs-params">(String resultSet)</span> &#123;<br>      resultMapping.resultSet = resultSet;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">foreignColumn</span><span class="hljs-params">(String foreignColumn)</span> &#123;<br>      resultMapping.foreignColumn = foreignColumn;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">notNullColumns</span><span class="hljs-params">(Set&lt;String&gt; notNullColumns)</span> &#123;<br>      resultMapping.notNullColumns = notNullColumns;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">columnPrefix</span><span class="hljs-params">(String columnPrefix)</span> &#123;<br>      resultMapping.columnPrefix = columnPrefix;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">flags</span><span class="hljs-params">(List&lt;ResultFlag&gt; flags)</span> &#123;<br>      resultMapping.flags = flags;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">typeHandler</span><span class="hljs-params">(TypeHandler&lt;?&gt; typeHandler)</span> &#123;<br>      resultMapping.typeHandler = typeHandler;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">composites</span><span class="hljs-params">(List&lt;ResultMapping&gt; composites)</span> &#123;<br>      resultMapping.composites = composites;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">lazy</span><span class="hljs-params">(<span class="hljs-type">boolean</span> lazy)</span> &#123;<br>      resultMapping.lazy = lazy;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125; <br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">column</span><span class="hljs-params">(String column)</span> &#123;<br>      resultMapping.column = column;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> ResultMapping <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// lock down collections</span><br>      resultMapping.flags = Collections.unmodifiableList(resultMapping.flags);<br>      resultMapping.composites = Collections.unmodifiableList(resultMapping.composites);<br>      resolveTypeHandler();<br>      validate();<br>      <span class="hljs-keyword">return</span> resultMapping;<br>    &#125;  <br><br>    <span class="hljs-comment">// 条件允许的话，找到并设置类型处理器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resolveTypeHandler</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">if</span> (resultMapping.typeHandler == <span class="hljs-literal">null</span> &amp;&amp; resultMapping.javaType != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> resultMapping.configuration;<br>        <span class="hljs-type">TypeHandlerRegistry</span> <span class="hljs-variable">typeHandlerRegistry</span> <span class="hljs-operator">=</span> configuration.getTypeHandlerRegistry();<br>        resultMapping.typeHandler = typeHandlerRegistry.getTypeHandler(resultMapping.javaType, resultMapping.jdbcType);<br>      &#125;<br>    &#125; <br><br>    <span class="hljs-comment">// 一些验证逻辑,验证result map有没有写错</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">validate</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// Issue #697: cannot define both nestedQueryId and nestedResultMapId</span><br>      <span class="hljs-keyword">if</span> (resultMapping.nestedQueryId != <span class="hljs-literal">null</span> &amp;&amp; resultMapping.nestedResultMapId != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Cannot define both nestedQueryId and nestedResultMapId in property &quot;</span> + resultMapping.property);<br>      &#125;<br>      <span class="hljs-comment">// Issue #5: there should be no mappings without typehandler</span><br>      <span class="hljs-keyword">if</span> (resultMapping.nestedQueryId == <span class="hljs-literal">null</span> &amp;&amp; resultMapping.nestedResultMapId == <span class="hljs-literal">null</span> &amp;&amp; resultMapping.typeHandler == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;No typehandler found for property &quot;</span> + resultMapping.property);<br>      &#125;<br>      <span class="hljs-comment">// Issue #4 and GH #39: column is optional only in nested resultmaps but not in the rest</span><br>      <span class="hljs-keyword">if</span> (resultMapping.nestedResultMapId == <span class="hljs-literal">null</span> &amp;&amp; resultMapping.column == <span class="hljs-literal">null</span> &amp;&amp; resultMapping.composites.isEmpty()) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Mapping is missing column attribute for property &quot;</span> + resultMapping.property);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (resultMapping.getResultSet() != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">numColums</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (resultMapping.column != <span class="hljs-literal">null</span>) &#123;<br>          numColums = resultMapping.column.split(<span class="hljs-string">&quot;,&quot;</span>).length;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">numForeignColumns</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (resultMapping.foreignColumn != <span class="hljs-literal">null</span>) &#123;<br>          numForeignColumns = resultMapping.foreignColumn.split(<span class="hljs-string">&quot;,&quot;</span>).length;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (numColums != numForeignColumns) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;There should be the same number of columns and foreignColumns in property &quot;</span> + resultMapping.property);<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// get、set方法略</span><br><br>  <span class="hljs-meta">@Override</span> <br>  <span class="hljs-comment">// equals方法最后比较的是 java类属性名称</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-type">ResultMapping</span> <span class="hljs-variable">that</span> <span class="hljs-operator">=</span> (ResultMapping) o;<br><br>    <span class="hljs-keyword">if</span> (property == <span class="hljs-literal">null</span> || !property.equals(that.property)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (property != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> property.hashCode();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (column != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> column.hashCode();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Discriminator"><a href="#Discriminator" class="headerlink" title="Discriminator"></a>Discriminator</h4><p>鉴别器 。有时一个查询也许返回很多不同数据类型的结果集。鉴别器的表现很像 Java 语言中的 switch 语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Discriminator</span> &#123;<br><br>  <span class="hljs-keyword">private</span> ResultMapping resultMapping;<br>  <span class="hljs-keyword">private</span> Map&lt;String, String&gt; discriminatorMap;<br><br>  Discriminator() &#123;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Discriminator</span> <span class="hljs-variable">discriminator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Discriminator</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Builder</span><span class="hljs-params">(Configuration configuration, ResultMapping resultMapping, Map&lt;String, String&gt; discriminatorMap)</span> &#123;<br>      discriminator.resultMapping = resultMapping;<br>      discriminator.discriminatorMap = discriminatorMap;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Discriminator <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">assert</span> discriminator.resultMapping != <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">assert</span> discriminator.discriminatorMap != <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">assert</span> !discriminator.discriminatorMap.isEmpty();<br>      <span class="hljs-comment">//lock down map</span><br>      discriminator.discriminatorMap = Collections.unmodifiableMap(discriminator.discriminatorMap);<br>      <span class="hljs-keyword">return</span> discriminator;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// get方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ResultMap"><a href="#ResultMap" class="headerlink" title="ResultMap"></a>ResultMap</h4><p>结果映射，类的映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultMap</span> &#123; <br><br>  <span class="hljs-keyword">private</span> String id;<br>  <span class="hljs-keyword">private</span> Class&lt;?&gt; type;<br>  <span class="hljs-keyword">private</span> List&lt;ResultMapping&gt; resultMappings;<br>  <span class="hljs-keyword">private</span> List&lt;ResultMapping&gt; idResultMappings;<br>  <span class="hljs-keyword">private</span> List&lt;ResultMapping&gt; constructorResultMappings;<br>  <span class="hljs-keyword">private</span> List&lt;ResultMapping&gt; propertyResultMappings;<br>  <span class="hljs-keyword">private</span> Set&lt;String&gt; mappedColumns;<br>  <span class="hljs-keyword">private</span> Discriminator discriminator;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> hasNestedResultMaps;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> hasNestedQueries;<br>  <span class="hljs-keyword">private</span> Boolean autoMapping; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">ResultMap</span><span class="hljs-params">()</span> &#123;<br>  &#125; <br><br>  <span class="hljs-comment">// 静态内部类，建造者模式</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span> &#123; <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ResultMap</span> <span class="hljs-variable">resultMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultMap</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Builder</span><span class="hljs-params">(Configuration configuration, String id, Class&lt;?&gt; type, List&lt;ResultMapping&gt; resultMappings)</span> &#123;<br>      <span class="hljs-built_in">this</span>(configuration, id, type, resultMappings, <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Builder</span><span class="hljs-params">(Configuration configuration, String id, Class&lt;?&gt; type, List&lt;ResultMapping&gt; resultMappings, Boolean autoMapping)</span> &#123;<br>      resultMap.id = id;<br>      resultMap.type = type;<br>      resultMap.resultMappings = resultMappings;<br>      resultMap.autoMapping = autoMapping;<br>    &#125; <br><br>    <span class="hljs-keyword">public</span> Builder <span class="hljs-title function_">discriminator</span><span class="hljs-params">(Discriminator discriminator)</span> &#123;<br>      resultMap.discriminator = discriminator;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; type() &#123;<br>      <span class="hljs-keyword">return</span> resultMap.type;<br>    &#125; <br><br>    <span class="hljs-keyword">public</span> ResultMap <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">if</span> (resultMap.id == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;ResultMaps must have an id&quot;</span>);<br>      &#125;<br>      resultMap.mappedColumns = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;String&gt;();<br>      resultMap.idResultMappings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ResultMapping&gt;();<br>      resultMap.constructorResultMappings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ResultMapping&gt;();<br>      resultMap.propertyResultMappings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ResultMapping&gt;();<br>      <span class="hljs-keyword">for</span> (ResultMapping resultMapping : resultMap.resultMappings) &#123;<br>        resultMap.hasNestedQueries = resultMap.hasNestedQueries || resultMapping.getNestedQueryId() != <span class="hljs-literal">null</span>;<br>        resultMap.hasNestedResultMaps = resultMap.hasNestedResultMaps || (resultMapping.getNestedResultMapId() != <span class="hljs-literal">null</span> &amp;&amp; resultMapping.getResultSet() == <span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">column</span> <span class="hljs-operator">=</span> resultMapping.getColumn();<br>        <span class="hljs-keyword">if</span> (column != <span class="hljs-literal">null</span>) &#123;<br>          resultMap.mappedColumns.add(column.toUpperCase(Locale.ENGLISH));<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (resultMapping.isCompositeResult()) &#123;<br>          <span class="hljs-keyword">for</span> (ResultMapping compositeResultMapping : resultMapping.getComposites()) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">compositeColumn</span> <span class="hljs-operator">=</span> compositeResultMapping.getColumn();<br>            <span class="hljs-keyword">if</span> (compositeColumn != <span class="hljs-literal">null</span>) &#123;<br>              resultMap.mappedColumns.add(compositeColumn.toUpperCase(Locale.ENGLISH));<br>            &#125;<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (resultMapping.getFlags().contains(ResultFlag.CONSTRUCTOR)) &#123;<br>          resultMap.constructorResultMappings.add(resultMapping);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          resultMap.propertyResultMappings.add(resultMapping);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (resultMapping.getFlags().contains(ResultFlag.ID)) &#123;<br>          resultMap.idResultMappings.add(resultMapping);<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (resultMap.idResultMappings.isEmpty()) &#123;<br>        resultMap.idResultMappings.addAll(resultMap.resultMappings);<br>      &#125;<br>      <span class="hljs-comment">// lock down collections</span><br>      resultMap.resultMappings = Collections.unmodifiableList(resultMap.resultMappings);<br>      resultMap.idResultMappings = Collections.unmodifiableList(resultMap.idResultMappings);<br>      resultMap.constructorResultMappings = Collections.unmodifiableList(resultMap.constructorResultMappings);<br>      resultMap.propertyResultMappings = Collections.unmodifiableList(resultMap.propertyResultMappings);<br>      resultMap.mappedColumns = Collections.unmodifiableSet(resultMap.mappedColumns);<br>      <span class="hljs-keyword">return</span> resultMap;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// get方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ResultSetType"><a href="#ResultSetType" class="headerlink" title="ResultSetType"></a>ResultSetType</h4><p>结果集类型。</p><p><code>FORWARD_ONLY</code>和<code>SCROLL_SENSITIVE</code>的区别在于能否在结果集中自有移动</p><p><code>SCROLL_SENSITIVE</code>和<code>SCROLL_INSENSITIVE</code>的区别在于结果集对底层数据源的更改是否敏感。它包含满足查询条件的行，无论是在执行查询时还是在检索行时。而使用 <code>TYPE_SCROLL_SENSITIVE</code> 时，结果集会反映对底层数据源的更改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ResultSetType</span> &#123;<br>  FORWARD_ONLY(ResultSet.TYPE_FORWARD_ONLY),<br>  SCROLL_INSENSITIVE(ResultSet.TYPE_SCROLL_INSENSITIVE),<br>  SCROLL_SENSITIVE(ResultSet.TYPE_SCROLL_SENSITIVE);<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> value;<br><br>  ResultSetType(<span class="hljs-type">int</span> value) &#123;<br>    <span class="hljs-built_in">this</span>.value = value;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> value;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SqlCommandType"><a href="#SqlCommandType" class="headerlink" title="SqlCommandType"></a>SqlCommandType</h4><p>sql命令的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">SqlCommandType</span> &#123;<br>  UNKNOWN, INSERT, UPDATE, DELETE, SELECT;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="StatementType"><a href="#StatementType" class="headerlink" title="StatementType"></a>StatementType</h4><p><code>STATEMENT</code>表示直接操作SQL，不进行预编译</p><p><code>PREPARED</code>表示预处理参数并进行预编译（默认值）</p><p><code>CALLABLE</code>表示执行存储过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">StatementType</span> &#123;<br>  STATEMENT, PREPARED, CALLABLE<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="CacheBuilder"><a href="#CacheBuilder" class="headerlink" title="CacheBuilder"></a>CacheBuilder</h4><p>缓存构建器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheBuilder</span> &#123; <br><br>  <span class="hljs-keyword">private</span> String id;<br>  <span class="hljs-keyword">private</span> Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Cache</span>&gt; implementation;<br>  <span class="hljs-keyword">private</span> List&lt;Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Cache</span>&gt;&gt; decorators;<br>  <span class="hljs-keyword">private</span> Integer size;<br>  <span class="hljs-keyword">private</span> Long clearInterval;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> readWrite;<br>  <span class="hljs-keyword">private</span> Properties properties;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> blocking; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">CacheBuilder</span><span class="hljs-params">(String id)</span> &#123;<br>    <span class="hljs-built_in">this</span>.id = id;<br>    <span class="hljs-built_in">this</span>.decorators = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Cache</span>&gt;&gt;();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> CacheBuilder <span class="hljs-title function_">implementation</span><span class="hljs-params">(Class&lt;? extends Cache&gt; implementation)</span> &#123;<br>    <span class="hljs-built_in">this</span>.implementation = implementation;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> CacheBuilder <span class="hljs-title function_">addDecorator</span><span class="hljs-params">(Class&lt;? extends Cache&gt; decorator)</span> &#123;<br>    <span class="hljs-keyword">if</span> (decorator != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-built_in">this</span>.decorators.add(decorator);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> CacheBuilder <span class="hljs-title function_">size</span><span class="hljs-params">(Integer size)</span> &#123;<br>    <span class="hljs-built_in">this</span>.size = size;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> CacheBuilder <span class="hljs-title function_">clearInterval</span><span class="hljs-params">(Long clearInterval)</span> &#123;<br>    <span class="hljs-built_in">this</span>.clearInterval = clearInterval;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> CacheBuilder <span class="hljs-title function_">readWrite</span><span class="hljs-params">(<span class="hljs-type">boolean</span> readWrite)</span> &#123;<br>    <span class="hljs-built_in">this</span>.readWrite = readWrite;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> CacheBuilder <span class="hljs-title function_">blocking</span><span class="hljs-params">(<span class="hljs-type">boolean</span> blocking)</span> &#123;<br>    <span class="hljs-built_in">this</span>.blocking = blocking;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>  &#125;<br>  <br>  <span class="hljs-keyword">public</span> CacheBuilder <span class="hljs-title function_">properties</span><span class="hljs-params">(Properties properties)</span> &#123;<br>    <span class="hljs-built_in">this</span>.properties = properties;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Cache <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>    setDefaultImplementations();<br>    <span class="hljs-comment">// 先new一个base的cache(PerpetualCache)</span><br>    <span class="hljs-type">Cache</span> <span class="hljs-variable">cache</span> <span class="hljs-operator">=</span> newBaseCacheInstance(implementation, id);<br>    <span class="hljs-comment">// 设额外属性</span><br>    setCacheProperties(cache);<br>    <span class="hljs-comment">// issue #352, do not apply decorators to custom caches</span><br>    <span class="hljs-keyword">if</span> (PerpetualCache.class.equals(cache.getClass())) &#123;<br>      <span class="hljs-keyword">for</span> (Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Cache</span>&gt; decorator : decorators) &#123;<br>        <span class="hljs-comment">// 装饰者模式一个个包装cache</span><br>        cache = newCacheDecoratorInstance(decorator, cache);<br>        <span class="hljs-comment">// 又要来一遍设额外属性</span><br>        setCacheProperties(cache);<br>      &#125;<br>      <span class="hljs-comment">// 最后附加上标准的装饰者</span><br>      cache = setStandardDecorators(cache);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!LoggingCache.class.isAssignableFrom(cache.getClass())) &#123;<br>      <span class="hljs-comment">// 用户实现的缓存，且不是日志，要加日志</span><br>      cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingCache</span>(cache);<br>    &#125;<br>    <span class="hljs-keyword">return</span> cache;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDefaultImplementations</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 又是一重保险，如果为null则设默认值,和XMLMapperBuilder.cacheElement以及MapperBuilderAssistant.useNewCache逻辑重复了</span><br>    <span class="hljs-keyword">if</span> (implementation == <span class="hljs-literal">null</span>) &#123;<br>      implementation = PerpetualCache.class;<br>      <span class="hljs-keyword">if</span> (decorators.isEmpty()) &#123;<br>        decorators.add(LruCache.class);<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> Cache <span class="hljs-title function_">newBaseCacheInstance</span><span class="hljs-params">(Class&lt;? extends Cache&gt; cacheClass, String id)</span> &#123;<br>    Constructor&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Cache</span>&gt; cacheConstructor = getBaseCacheConstructor(cacheClass);<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> cacheConstructor.newInstance(id);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Could not instantiate cache implementation (&quot;</span> + cacheClass + <span class="hljs-string">&quot;). Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Constructor&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Cache</span>&gt; getBaseCacheConstructor(Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Cache</span>&gt; cacheClass) &#123;<br>    <span class="hljs-keyword">try</span> &#123; <br>      <span class="hljs-comment">// 只有PerpetualCache有参数为String的构造函数</span><br>      <span class="hljs-keyword">return</span> cacheClass.getConstructor(String.class);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Invalid base cache implementation (&quot;</span> + cacheClass + <span class="hljs-string">&quot;).  &quot;</span> +<br>          <span class="hljs-string">&quot;Base cache implementations must have a constructor that takes a String id as a parameter.  Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCacheProperties</span><span class="hljs-params">(Cache cache)</span> &#123;<br>    <span class="hljs-keyword">if</span> (properties != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaCache</span> <span class="hljs-operator">=</span> SystemMetaObject.forObject(cache);<br>      <span class="hljs-comment">// 用反射设置额外的property属性</span><br>      <span class="hljs-keyword">for</span> (Map.Entry&lt;Object, Object&gt; entry : properties.entrySet()) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String) entry.getKey();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (String) entry.getValue();<br>        <span class="hljs-keyword">if</span> (metaCache.hasSetter(name)) &#123;<br>          Class&lt;?&gt; type = metaCache.getSetterType(name);<br>          <span class="hljs-comment">// 下面就是各种基本类型的判断了，似乎只支持一些基本类型</span><br>          <span class="hljs-keyword">if</span> (String.class == type) &#123;<br>            metaCache.setValue(name, value);<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-type">int</span>.class == type<br>              || Integer.class == type) &#123;<br>            metaCache.setValue(name, Integer.valueOf(value));<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-type">long</span>.class == type<br>              || Long.class == type) &#123;<br>            metaCache.setValue(name, Long.valueOf(value));<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-type">short</span>.class == type<br>              || Short.class == type) &#123;<br>            metaCache.setValue(name, Short.valueOf(value));<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-type">byte</span>.class == type<br>              || Byte.class == type) &#123;<br>            metaCache.setValue(name, Byte.valueOf(value));<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-type">float</span>.class == type<br>              || Float.class == type) &#123;<br>            metaCache.setValue(name, Float.valueOf(value));<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-type">boolean</span>.class == type<br>              || Boolean.class == type) &#123;<br>            metaCache.setValue(name, Boolean.valueOf(value));<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-type">double</span>.class == type<br>              || Double.class == type) &#123;<br>            metaCache.setValue(name, Double.valueOf(value));<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Unsupported property type for cache: &#x27;&quot;</span> + name + <span class="hljs-string">&quot;&#x27; of type &quot;</span> + type);<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Cache <span class="hljs-title function_">newCacheDecoratorInstance</span><span class="hljs-params">(Class&lt;? extends Cache&gt; cacheClass, Cache base)</span> &#123;<br>    Constructor&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Cache</span>&gt; cacheConstructor = getCacheDecoratorConstructor(cacheClass);<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> cacheConstructor.newInstance(base);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Could not instantiate cache decorator (&quot;</span> + cacheClass + <span class="hljs-string">&quot;). Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> Constructor&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Cache</span>&gt; getCacheDecoratorConstructor(Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Cache</span>&gt; cacheClass) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> cacheClass.getConstructor(Cache.class);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Invalid cache decorator (&quot;</span> + cacheClass + <span class="hljs-string">&quot;).  &quot;</span> +<br>          <span class="hljs-string">&quot;Cache decorators must have a constructor that takes a Cache instance as a parameter.  Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 最后附加上标准的装饰者</span><br>  <span class="hljs-keyword">private</span> Cache <span class="hljs-title function_">setStandardDecorators</span><span class="hljs-params">(Cache cache)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaCache</span> <span class="hljs-operator">=</span> SystemMetaObject.forObject(cache);<br>      <span class="hljs-keyword">if</span> (size != <span class="hljs-literal">null</span> &amp;&amp; metaCache.hasSetter(<span class="hljs-string">&quot;size&quot;</span>)) &#123;<br>        metaCache.setValue(<span class="hljs-string">&quot;size&quot;</span>, size);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (clearInterval != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 刷新缓存间隔,怎么刷新呢，用ScheduledCache来刷，还是装饰者模式，漂亮！</span><br>        cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScheduledCache</span>(cache);<br>        ((ScheduledCache) cache).setClearInterval(clearInterval);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (readWrite) &#123;<br>        <span class="hljs-comment">// 如果readOnly=false,可读写的缓存 会返回缓存对象的拷贝(通过序列化) 。这会慢一些,但是安全,因此默认是 false。</span><br>        cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SerializedCache</span>(cache);<br>      &#125;<br>      <span class="hljs-comment">// 日志缓存</span><br>      cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoggingCache</span>(cache);<br>      <span class="hljs-comment">// 同步缓存, 3.2.6以后这个类已经没用了，考虑到Hazelcast, EhCache已经有锁机制了，所以这个锁就画蛇添足了。</span><br>      cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronizedCache</span>(cache);<br>      <span class="hljs-keyword">if</span> (blocking) &#123;<br>        cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockingCache</span>(cache);<br>      &#125;<br>      <span class="hljs-keyword">return</span> cache;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Error building standard cache decorators.  Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BoundSql"><a href="#BoundSql" class="headerlink" title="BoundSql"></a>BoundSql</h4><p>绑定的SQL,是从SqlSource而来，将动态内容都处理完成得到的SQL语句字符串，其中包括?,还有绑定的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BoundSql</span> &#123; <br><br>  <span class="hljs-keyword">private</span> String sql;<br>  <span class="hljs-keyword">private</span> List&lt;ParameterMapping&gt; parameterMappings;<br>  <span class="hljs-keyword">private</span> Object parameterObject;<br>  <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; additionalParameters;<br>  <span class="hljs-keyword">private</span> MetaObject metaParameters; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">BoundSql</span><span class="hljs-params">(Configuration configuration, String sql, List&lt;ParameterMapping&gt; parameterMappings, Object parameterObject)</span> &#123;<br>    <span class="hljs-built_in">this</span>.sql = sql;<br>    <span class="hljs-built_in">this</span>.parameterMappings = parameterMappings;<br>    <span class="hljs-built_in">this</span>.parameterObject = parameterObject;<br>    <span class="hljs-built_in">this</span>.additionalParameters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>    <span class="hljs-built_in">this</span>.metaParameters = configuration.newMetaObject(additionalParameters);<br>  &#125; <br><br>  <span class="hljs-comment">// get 方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MappedStatement"><a href="#MappedStatement" class="headerlink" title="MappedStatement"></a>MappedStatement</h4><p>映射的语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MappedStatement</span> &#123; <br><br>  <span class="hljs-keyword">private</span> String resource;<br>  <span class="hljs-keyword">private</span> Configuration configuration;<br>  <span class="hljs-keyword">private</span> String id;<br>  <span class="hljs-keyword">private</span> Integer fetchSize;<br>  <span class="hljs-keyword">private</span> Integer timeout;<br>  <span class="hljs-keyword">private</span> StatementType statementType;<br>  <span class="hljs-keyword">private</span> ResultSetType resultSetType;<br>  <span class="hljs-comment">// SQL源码</span><br>  <span class="hljs-keyword">private</span> SqlSource sqlSource;<br>  <span class="hljs-keyword">private</span> Cache cache;<br>  <span class="hljs-keyword">private</span> ParameterMap parameterMap;<br>  <span class="hljs-keyword">private</span> List&lt;ResultMap&gt; resultMaps;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> flushCacheRequired;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> useCache;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> resultOrdered;<br>  <span class="hljs-keyword">private</span> SqlCommandType sqlCommandType;<br>  <span class="hljs-keyword">private</span> KeyGenerator keyGenerator;<br>  <span class="hljs-keyword">private</span> String[] keyProperties;<br>  <span class="hljs-keyword">private</span> String[] keyColumns;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> hasNestedResultMaps;<br>  <span class="hljs-keyword">private</span> String databaseId;<br>  <span class="hljs-keyword">private</span> Log statementLog;<br>  <span class="hljs-keyword">private</span> LanguageDriver lang;<br>  <span class="hljs-keyword">private</span> String[] resultSets; <br><br>  MappedStatement() &#123;<br>    <span class="hljs-comment">// constructor disabled</span><br>  &#125; <br><br>  <span class="hljs-comment">// 静态内部类，建造者模式</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Builder</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">MappedStatement</span> <span class="hljs-variable">mappedStatement</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MappedStatement</span>(); <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Builder</span><span class="hljs-params">(Configuration configuration, String id, SqlSource sqlSource, SqlCommandType sqlCommandType)</span> &#123;<br>      mappedStatement.configuration = configuration;<br>      mappedStatement.id = id;<br>      mappedStatement.sqlSource = sqlSource; <br>      <span class="hljs-comment">// 默认的 StatementType 为 PREPARED</span><br>      mappedStatement.statementType = StatementType.PREPARED;<br>      mappedStatement.parameterMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParameterMap</span>.Builder(configuration, <span class="hljs-string">&quot;defaultParameterMap&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ParameterMapping&gt;()).build();<br>      mappedStatement.resultMaps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ResultMap&gt;();<br>      mappedStatement.timeout = configuration.getDefaultStatementTimeout();<br>      mappedStatement.sqlCommandType = sqlCommandType; <br>      <span class="hljs-comment">// useGeneratedKeys为true并且是插入语句，才会通过Jdbc3KeyGenerator开启keyGenerator功能</span><br>      mappedStatement.keyGenerator = configuration.isUseGeneratedKeys() &amp;&amp; SqlCommandType.INSERT.equals(sqlCommandType) ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jdbc3KeyGenerator</span>() : <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoKeyGenerator</span>();<br>      <span class="hljs-type">String</span> <span class="hljs-variable">logId</span> <span class="hljs-operator">=</span> id;<br>      <span class="hljs-keyword">if</span> (configuration.getLogPrefix() != <span class="hljs-literal">null</span>) &#123;<br>        logId = configuration.getLogPrefix() + id;<br>      &#125;<br>      mappedStatement.statementLog = LogFactory.getLog(logId);<br>      mappedStatement.lang = configuration.getDefaultScriptingLanuageInstance();<br>    &#125; <br><br>    <span class="hljs-comment">// build方法略</span><br><br>    <span class="hljs-keyword">public</span> MappedStatement <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">assert</span> mappedStatement.configuration != <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">assert</span> mappedStatement.id != <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">assert</span> mappedStatement.sqlSource != <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">assert</span> mappedStatement.lang != <span class="hljs-literal">null</span>;<br>      mappedStatement.resultMaps = Collections.unmodifiableList(mappedStatement.resultMaps);<br>      <span class="hljs-keyword">return</span> mappedStatement;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// get 方法略</span><br><br>  <span class="hljs-keyword">public</span> BoundSql <span class="hljs-title function_">getBoundSql</span><span class="hljs-params">(Object parameterObject)</span> &#123;<br><span class="hljs-comment">// 其实就是调用sqlSource.getBoundSql</span><br>    <span class="hljs-type">BoundSql</span> <span class="hljs-variable">boundSql</span> <span class="hljs-operator">=</span> sqlSource.getBoundSql(parameterObject);<br>    <span class="hljs-comment">// 剩下的可以暂时忽略</span><br>    List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings(); <br>    <span class="hljs-comment">// 如果获取到的boundSql的参数映射为空，则使用本类的parameterMap</span><br>    <span class="hljs-comment">// 和parameterObject构造新的boundSql</span><br>    <span class="hljs-keyword">if</span> (parameterMappings == <span class="hljs-literal">null</span> || parameterMappings.isEmpty()) &#123;<br>      boundSql = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BoundSql</span>(configuration, boundSql.getSql(), parameterMap.getParameterMappings(), parameterObject);<br>    &#125;<br><br>    <span class="hljs-comment">// check for nested result maps in parameter mappings (issue #30)</span><br>    <span class="hljs-keyword">for</span> (ParameterMapping pm : boundSql.getParameterMappings()) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">rmId</span> <span class="hljs-operator">=</span> pm.getResultMapId();<br>      <span class="hljs-keyword">if</span> (rmId != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">ResultMap</span> <span class="hljs-variable">rm</span> <span class="hljs-operator">=</span> configuration.getResultMap(rmId);<br>        <span class="hljs-keyword">if</span> (rm != <span class="hljs-literal">null</span>) &#123;<br>          hasNestedResultMaps |= rm.hasNestedResultMaps();<br>        &#125;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> boundSql;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11-jdbc</title>
    <link href="/2023/07/16/11-jdbc/"/>
    <url>/2023/07/16/11-jdbc/</url>
    
    <content type="html"><![CDATA[<h4 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h4><p>    保存TypeHandler和JdbcType映射关系的枚举类。只有本模块的SqlRunner和相关的测试类用到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Null</span> &#123;<br>  BOOLEAN(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BooleanTypeHandler</span>(), JdbcType.BOOLEAN),<br><br>  BYTE(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteTypeHandler</span>(), JdbcType.TINYINT),<br>  SHORT(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ShortTypeHandler</span>(), JdbcType.SMALLINT),<br>  INTEGER(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IntegerTypeHandler</span>(), JdbcType.INTEGER),<br>  LONG(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LongTypeHandler</span>(), JdbcType.BIGINT),<br>  FLOAT(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FloatTypeHandler</span>(), JdbcType.FLOAT),<br>  DOUBLE(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DoubleTypeHandler</span>(), JdbcType.DOUBLE),<br>  BIGDECIMAL(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimalTypeHandler</span>(), JdbcType.DECIMAL),<br><br>  STRING(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTypeHandler</span>(), JdbcType.VARCHAR),<br>  CLOB(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClobTypeHandler</span>(), JdbcType.CLOB),<br>  LONGVARCHAR(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClobTypeHandler</span>(), JdbcType.LONGVARCHAR),<br><br>  BYTEARRAY(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayTypeHandler</span>(), JdbcType.LONGVARBINARY),<br>  BLOB(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BlobTypeHandler</span>(), JdbcType.BLOB),<br>  LONGVARBINARY(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BlobTypeHandler</span>(), JdbcType.LONGVARBINARY),<br><br>  OBJECT(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectTypeHandler</span>(), JdbcType.OTHER),<br>  OTHER(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectTypeHandler</span>(), JdbcType.OTHER),<br>  TIMESTAMP(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTypeHandler</span>(), JdbcType.TIMESTAMP),<br>  DATE(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DateOnlyTypeHandler</span>(), JdbcType.DATE),<br>  TIME(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimeOnlyTypeHandler</span>(), JdbcType.TIME),<br>  SQLTIMESTAMP(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlTimestampTypeHandler</span>(), JdbcType.TIMESTAMP),<br>  SQLDATE(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlDateTypeHandler</span>(), JdbcType.DATE),<br>  SQLTIME(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlTimeTypeHandler</span>(), JdbcType.TIME);<br><br>  <span class="hljs-keyword">private</span> TypeHandler&lt;?&gt; typeHandler;<br>  <span class="hljs-keyword">private</span> JdbcType jdbcType;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">Null</span><span class="hljs-params">(TypeHandler&lt;?&gt; typeHandler, JdbcType jdbcType)</span> &#123;<br>    <span class="hljs-built_in">this</span>.typeHandler = typeHandler;<br>    <span class="hljs-built_in">this</span>.jdbcType = jdbcType;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> TypeHandler&lt;?&gt; getTypeHandler() &#123;<br>    <span class="hljs-keyword">return</span> typeHandler;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> JdbcType <span class="hljs-title function_">getJdbcType</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> jdbcType;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="AbstractSQL"><a href="#AbstractSQL" class="headerlink" title="AbstractSQL"></a>AbstractSQL</h4><p>    AbstractSQL, Statement Builder的核心,参见mybatis文档Statement Builders一章  </p><p>建造者模式 ,可以参考SQLTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractSQL</span>&lt;T&gt; &#123; <br><br>  <span class="hljs-comment">// 静态内部类，SQL语句</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SQLStatement</span> &#123; <br><br>    <span class="hljs-comment">// 4种语句类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">StatementType</span> &#123;<br>      DELETE, INSERT, SELECT, UPDATE<br>    &#125; <br><br>    StatementType statementType;<br><br>    List&lt;String&gt; sets = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    List&lt;String&gt; select = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    List&lt;String&gt; tables = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    List&lt;String&gt; join = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    List&lt;String&gt; innerJoin = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    List&lt;String&gt; outerJoin = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    List&lt;String&gt; leftOuterJoin = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    List&lt;String&gt; rightOuterJoin = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    List&lt;String&gt; where = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    List&lt;String&gt; having = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    List&lt;String&gt; groupBy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    List&lt;String&gt; orderBy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    <span class="hljs-comment">// 标记最后一个list</span><br>    List&lt;String&gt; lastList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    List&lt;String&gt; columns = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    List&lt;String&gt; values = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;(); <br><br>    <span class="hljs-type">boolean</span> distinct; <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SQLStatement</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// Prevent Synthetic Access</span><br>    &#125; <br><br>    <span class="hljs-comment">// SafeAppendable 相比 Appendable 多了个 empty的标识</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sqlClause</span><span class="hljs-params">(SafeAppendable builder, String keyword, List&lt;String&gt; parts, String open, String close,</span><br><span class="hljs-params">                           String conjunction)</span> &#123;<br>      <span class="hljs-keyword">if</span> (!parts.isEmpty()) &#123;<br>        <span class="hljs-keyword">if</span> (!builder.isEmpty()) &#123;<br>          <span class="hljs-comment">// 如果前面有东西，另起一行</span><br>          builder.append(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>        builder.append(keyword);<br>        builder.append(<span class="hljs-string">&quot; &quot;</span>);<br>        builder.append(open);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;________&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, n = parts.size(); i &lt; n; i++) &#123;<br>          <span class="hljs-type">String</span> <span class="hljs-variable">part</span> <span class="hljs-operator">=</span> parts.get(i); <br>          <span class="hljs-comment">// 如果当前part和上一个part都不是 and 或 or，添加分隔符</span><br>          <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; !part.equals(AND) &amp;&amp; !part.equals(OR) &amp;&amp; !last.equals(AND) &amp;&amp; !last.equals(OR)) &#123;<br>          builder.append(conjunction);<br>          &#125;<br>          builder.append(part);<br>          last = part;<br>        &#125;<br>        builder.append(close);<br>      &#125;<br>    &#125; <br><br>    <span class="hljs-comment">// 拼装select语句,可以看到都是调用sqlClause，很强</span><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">selectSQL</span><span class="hljs-params">(SafeAppendable builder)</span> &#123;<br>      <span class="hljs-keyword">if</span> (distinct) &#123;<br>        sqlClause(builder, <span class="hljs-string">&quot;SELECT DISTINCT&quot;</span>, select, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;, &quot;</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        sqlClause(builder, <span class="hljs-string">&quot;SELECT&quot;</span>, select, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;, &quot;</span>);<br>      &#125;<br><br>      sqlClause(builder, <span class="hljs-string">&quot;FROM&quot;</span>, tables, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;, &quot;</span>);<br>      sqlClause(builder, <span class="hljs-string">&quot;JOIN&quot;</span>, join, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;\nJOIN &quot;</span>);<br>      sqlClause(builder, <span class="hljs-string">&quot;INNER JOIN&quot;</span>, innerJoin, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;\nINNER JOIN &quot;</span>);<br>      sqlClause(builder, <span class="hljs-string">&quot;OUTER JOIN&quot;</span>, outerJoin, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;\nOUTER JOIN &quot;</span>);<br>      sqlClause(builder, <span class="hljs-string">&quot;LEFT OUTER JOIN&quot;</span>, leftOuterJoin, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;\nLEFT OUTER JOIN &quot;</span>);<br>      sqlClause(builder, <span class="hljs-string">&quot;RIGHT OUTER JOIN&quot;</span>, rightOuterJoin, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;\nRIGHT OUTER JOIN &quot;</span>);<br>      <span class="hljs-comment">// where条件默认拼接上AND</span><br>      sqlClause(builder, <span class="hljs-string">&quot;WHERE&quot;</span>, where, <span class="hljs-string">&quot;(&quot;</span>, <span class="hljs-string">&quot;)&quot;</span>, <span class="hljs-string">&quot; AND &quot;</span>);<br>      sqlClause(builder, <span class="hljs-string">&quot;GROUP BY&quot;</span>, groupBy, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;, &quot;</span>);<br>      sqlClause(builder, <span class="hljs-string">&quot;HAVING&quot;</span>, having, <span class="hljs-string">&quot;(&quot;</span>, <span class="hljs-string">&quot;)&quot;</span>, <span class="hljs-string">&quot; AND &quot;</span>);<br>      sqlClause(builder, <span class="hljs-string">&quot;ORDER BY&quot;</span>, orderBy, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;, &quot;</span>);<br>      <span class="hljs-keyword">return</span> builder.toString();<br>    &#125; <br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">insertSQL</span><span class="hljs-params">(SafeAppendable builder)</span> &#123;<br>      sqlClause(builder, <span class="hljs-string">&quot;INSERT INTO&quot;</span>, tables, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>      sqlClause(builder, <span class="hljs-string">&quot;&quot;</span>, columns, <span class="hljs-string">&quot;(&quot;</span>, <span class="hljs-string">&quot;)&quot;</span>, <span class="hljs-string">&quot;, &quot;</span>);<br>      sqlClause(builder, <span class="hljs-string">&quot;VALUES&quot;</span>, values, <span class="hljs-string">&quot;(&quot;</span>, <span class="hljs-string">&quot;)&quot;</span>, <span class="hljs-string">&quot;, &quot;</span>);<br>      <span class="hljs-keyword">return</span> builder.toString();<br>    &#125; <br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">deleteSQL</span><span class="hljs-params">(SafeAppendable builder)</span> &#123;<br>      sqlClause(builder, <span class="hljs-string">&quot;DELETE FROM&quot;</span>, tables, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>      sqlClause(builder, <span class="hljs-string">&quot;WHERE&quot;</span>, where, <span class="hljs-string">&quot;(&quot;</span>, <span class="hljs-string">&quot;)&quot;</span>, <span class="hljs-string">&quot; AND &quot;</span>);<br>      <span class="hljs-keyword">return</span> builder.toString();<br>    &#125; <br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">updateSQL</span><span class="hljs-params">(SafeAppendable builder)</span> &#123;<br>      sqlClause(builder, <span class="hljs-string">&quot;UPDATE&quot;</span>, tables, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>      sqlClause(builder, <span class="hljs-string">&quot;SET&quot;</span>, sets, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;, &quot;</span>);<br>      sqlClause(builder, <span class="hljs-string">&quot;WHERE&quot;</span>, where, <span class="hljs-string">&quot;(&quot;</span>, <span class="hljs-string">&quot;)&quot;</span>, <span class="hljs-string">&quot; AND &quot;</span>);<br>      <span class="hljs-keyword">return</span> builder.toString();<br>    &#125; <br><br>    <span class="hljs-comment">// 拼装SQL</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">sql</span><span class="hljs-params">(Appendable a)</span> &#123;<br>      <span class="hljs-type">SafeAppendable</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SafeAppendable</span>(a);<br>      <span class="hljs-keyword">if</span> (statementType == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125;<br><br>      String answer;<br><br>      <span class="hljs-keyword">switch</span> (statementType) &#123;<br>        <span class="hljs-keyword">case</span> DELETE:<br>          answer = deleteSQL(builder);<br>          <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> INSERT:<br>          answer = insertSQL(builder);<br>          <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> SELECT:<br>          answer = selectSQL(builder);<br>          <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">case</span> UPDATE:<br>          answer = updateSQL(builder);<br>          <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">default</span>:<br>          answer = <span class="hljs-literal">null</span>;<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> answer;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">AND</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;) \nAND (&quot;</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">OR</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;) \nOR (&quot;</span>;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">SQLStatement</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQLStatement</span>(); <br><br>  <span class="hljs-comment">// 抽象接口，留给子类实现</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> T <span class="hljs-title function_">getSelf</span><span class="hljs-params">()</span>; <br><br>  <span class="hljs-comment">// 下面的方法都是构造 SQLStatement</span><br>  <span class="hljs-comment">// 构造update语句</span><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">UPDATE</span><span class="hljs-params">(String table)</span> &#123;<br>    sql().statementType = SQLStatement.StatementType.UPDATE;<br>    sql().tables.add(table);<br>    <span class="hljs-keyword">return</span> getSelf();<br>  &#125; <br><br>  <span class="hljs-comment">// set关键字</span><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">SET</span><span class="hljs-params">(String sets)</span> &#123;<br>    sql().sets.add(sets);<br>    <span class="hljs-keyword">return</span> getSelf();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">INSERT_INTO</span><span class="hljs-params">(String tableName)</span> &#123;<br>    sql().statementType = SQLStatement.StatementType.INSERT;<br>    sql().tables.add(tableName);<br>    <span class="hljs-keyword">return</span> getSelf();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">VALUES</span><span class="hljs-params">(String columns, String values)</span> &#123;<br>    sql().columns.add(columns);<br>    sql().values.add(values);<br>    <span class="hljs-keyword">return</span> getSelf();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">SELECT</span><span class="hljs-params">(String columns)</span> &#123;<br>    sql().statementType = SQLStatement.StatementType.SELECT;<br>    sql().select.add(columns);<br>    <span class="hljs-keyword">return</span> getSelf();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">SELECT_DISTINCT</span><span class="hljs-params">(String columns)</span> &#123;<br>    sql().distinct = <span class="hljs-literal">true</span>;<br>    SELECT(columns);<br>    <span class="hljs-keyword">return</span> getSelf();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">DELETE_FROM</span><span class="hljs-params">(String table)</span> &#123;<br>    sql().statementType = SQLStatement.StatementType.DELETE;<br>    sql().tables.add(table);<br>    <span class="hljs-keyword">return</span> getSelf();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">FROM</span><span class="hljs-params">(String table)</span> &#123;<br>    sql().tables.add(table);<br>    <span class="hljs-keyword">return</span> getSelf();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">JOIN</span><span class="hljs-params">(String join)</span> &#123;<br>    sql().join.add(join);<br>    <span class="hljs-keyword">return</span> getSelf();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">INNER_JOIN</span><span class="hljs-params">(String join)</span> &#123;<br>    sql().innerJoin.add(join);<br>    <span class="hljs-keyword">return</span> getSelf();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">LEFT_OUTER_JOIN</span><span class="hljs-params">(String join)</span> &#123;<br>    sql().leftOuterJoin.add(join);<br>    <span class="hljs-keyword">return</span> getSelf();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">RIGHT_OUTER_JOIN</span><span class="hljs-params">(String join)</span> &#123;<br>    sql().rightOuterJoin.add(join);<br>    <span class="hljs-keyword">return</span> getSelf();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">OUTER_JOIN</span><span class="hljs-params">(String join)</span> &#123;<br>    sql().outerJoin.add(join);<br>    <span class="hljs-keyword">return</span> getSelf();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">WHERE</span><span class="hljs-params">(String conditions)</span> &#123;<br>    sql().where.add(conditions);<br>    <span class="hljs-comment">// 标记最后一个list（可能是最后一个）</span><br>    <span class="hljs-comment">// 这个lastList似乎没有用到</span><br>    sql().lastList = sql().where;<br>    <span class="hljs-keyword">return</span> getSelf();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">OR</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 最后一个list加上OR</span><br>    sql().lastList.add(OR);<br>    <span class="hljs-keyword">return</span> getSelf();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">AND</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 最后一个list加上AND</span><br>    sql().lastList.add(AND);<br>    <span class="hljs-keyword">return</span> getSelf();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">GROUP_BY</span><span class="hljs-params">(String columns)</span> &#123;<br>    sql().groupBy.add(columns);<br>    <span class="hljs-keyword">return</span> getSelf();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">HAVING</span><span class="hljs-params">(String conditions)</span> &#123;<br>    sql().having.add(conditions);<br>    <span class="hljs-comment">// 标记最后一个list</span><br>    sql().lastList = sql().having;<br>    <span class="hljs-keyword">return</span> getSelf();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">ORDER_BY</span><span class="hljs-params">(String columns)</span> &#123;<br>    sql().orderBy.add(columns);<br>    <span class="hljs-keyword">return</span> getSelf();<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> SQLStatement <span class="hljs-title function_">sql</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> sql;<br>  &#125; <br><br>  <span class="hljs-comment">// 使用提供的Appender构造sql语句</span><br>  <span class="hljs-keyword">public</span> &lt;A <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Appendable</span>&gt; A <span class="hljs-title function_">usingAppender</span><span class="hljs-params">(A a)</span> &#123;<br>    sql().sql(a);<br>    <span class="hljs-keyword">return</span> a;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-comment">// 默认使用 StringBuilder 构造sql语句并返回</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    sql().sql(sb);<br>    <span class="hljs-keyword">return</span> sb.toString();<br>  &#125; <br><br>  <span class="hljs-comment">// 安全的Appendable</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SafeAppendable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Appendable a;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">empty</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SafeAppendable</span><span class="hljs-params">(Appendable a)</span> &#123;<br>      <span class="hljs-built_in">super</span>();<br>      <span class="hljs-built_in">this</span>.a = a;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> SafeAppendable <span class="hljs-title function_">append</span><span class="hljs-params">(CharSequence s)</span> &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (empty &amp;&amp; s.length() &gt; <span class="hljs-number">0</span>) &#123;<br>          empty = <span class="hljs-literal">false</span>;<br>        &#125;<br>        a.append(s);<br>      &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> empty;<br>    &#125;<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SQL</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractSQL</span>&lt;SQL&gt; &#123;<br><br>  <span class="hljs-comment">// fluent API </span><br>  <span class="hljs-comment">// 感觉这是为了抽象而抽象</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> SQL <span class="hljs-title function_">getSelf</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="ScriptRunner"><a href="#ScriptRunner" class="headerlink" title="ScriptRunner"></a>ScriptRunner</h4><p>      脚本运行器,可以运行SQL脚本，如建表，插入数据，作为单元测试的前期准备 。这个类其实可以被所有项目的单元测试作为工具所利用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScriptRunner</span> &#123; <br><br>  <span class="hljs-comment">// 换行分割符，默认是 &quot;\n&quot;</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LINE_SEPARATOR</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;line.separator&quot;</span>, <span class="hljs-string">&quot;\n&quot;</span>); <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_DELIMITER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;;&quot;</span>;<br><br>  <span class="hljs-keyword">private</span> Connection connection; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> stopOnError;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> autoCommit;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> sendFullScript;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> removeCRs;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">escapeProcessing</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">logWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(System.out);<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">errorLogWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(System.err);<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">delimiter</span> <span class="hljs-operator">=</span> DEFAULT_DELIMITER;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">fullLineDelimiter</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">ScriptRunner</span><span class="hljs-params">(Connection connection)</span> &#123;<br>    <span class="hljs-built_in">this</span>.connection = connection;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runScript</span><span class="hljs-params">(Reader reader)</span> &#123;<br>    setAutoCommit();<br><br>    <span class="hljs-keyword">try</span> &#123; <br>      <span class="hljs-comment">// 一次执行脚本里的所有sql语句</span><br>      <span class="hljs-keyword">if</span> (sendFullScript) &#123;<br>        executeFullScript(reader);<br>      &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 一行一行执行脚本里的sql语句</span><br>        executeLineByLine(reader);<br>      &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123; <br>      <span class="hljs-comment">// 无论有没有执行成功都回滚</span><br>      rollbackConnection();<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 设置 connection 的 autoCommit属性</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAutoCommit</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">if</span> (autoCommit != connection.getAutoCommit()) &#123;<br>        connection.setAutoCommit(autoCommit);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeSqlException</span>(<span class="hljs-string">&quot;Could not set AutoCommit to &quot;</span> + autoCommit + <span class="hljs-string">&quot;. Cause: &quot;</span> + t, t);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">executeFullScript</span><span class="hljs-params">(Reader reader)</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">script</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">lineReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(reader);<br>      String line;<br>      <span class="hljs-keyword">while</span> ((line = lineReader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>        script.append(line);<br>        script.append(LINE_SEPARATOR);<br>      &#125;<br>      executeStatement(script.toString());<br>      commitConnection();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Error executing: &quot;</span> + script + <span class="hljs-string">&quot;.  Cause: &quot;</span> + e;<br>      printlnError(message);<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeSqlException</span>(message, e);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">executeStatement</span><span class="hljs-params">(String command)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">// 就是用最简单的JDBC来执行</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">hasResults</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br>    statement.setEscapeProcessing(escapeProcessing);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> command;<br>    <span class="hljs-keyword">if</span> (removeCRs) &#123;<br>      sql = sql.replaceAll(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (stopOnError) &#123;<br>      hasResults = statement.execute(sql);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        hasResults = statement.execute(sql);<br>      &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Error executing: &quot;</span> + command + <span class="hljs-string">&quot;.  Cause: &quot;</span> + e;<br>        printlnError(message);<br>      &#125;<br>    &#125;<br>    printResults(statement, hasResults);<br>    <span class="hljs-keyword">try</span> &#123;<br>      statement.close();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-comment">// Ignore to workaround a bug in some connection pools</span><br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 打印语句执行结果（如果有的话）</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printResults</span><span class="hljs-params">(Statement statement, <span class="hljs-type">boolean</span> hasResults)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">if</span> (hasResults) &#123;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> statement.getResultSet();<br>        <span class="hljs-keyword">if</span> (rs != <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> rs.getMetaData();<br>          <span class="hljs-type">int</span> <span class="hljs-variable">cols</span> <span class="hljs-operator">=</span> md.getColumnCount(); <br>          <span class="hljs-comment">// 先打印一行列名</span><br>          <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; cols; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> md.getColumnLabel(i + <span class="hljs-number">1</span>);<br>            print(name + <span class="hljs-string">&quot;\t&quot;</span>);<br>          &#125;<br>          println(<span class="hljs-string">&quot;&quot;</span>); <br>          <span class="hljs-comment">// 再打印每一行的数据</span><br>          <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; cols; i++) &#123;<br>              <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> rs.getString(i + <span class="hljs-number">1</span>);<br>              print(value + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            println(<span class="hljs-string">&quot;&quot;</span>);<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>      printlnError(<span class="hljs-string">&quot;Error printing results: &quot;</span> + e.getMessage());<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 提交</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commitConnection</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">if</span> (!connection.getAutoCommit()) &#123;<br>        connection.commit();<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeSqlException</span>(<span class="hljs-string">&quot;Could not commit transaction. Cause: &quot;</span> + t, t);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">executeLineByLine</span><span class="hljs-params">(Reader reader)</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">lineReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(reader);<br>      String line;<br>      <span class="hljs-keyword">while</span> ((line = lineReader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>        command = handleLine(command, line);<br>      &#125;<br>      commitConnection();<br>      checkForMissingLineTerminator(command);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Error executing: &quot;</span> + command + <span class="hljs-string">&quot;.  Cause: &quot;</span> + e;<br>      printlnError(message);<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeSqlException</span>(message, e);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> StringBuilder <span class="hljs-title function_">handleLine</span><span class="hljs-params">(StringBuilder command, String line)</span> <span class="hljs-keyword">throws</span> SQLException, UnsupportedEncodingException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">trimmedLine</span> <span class="hljs-operator">=</span> line.trim();<br>    <span class="hljs-keyword">if</span> (lineIsComment(trimmedLine)) &#123;<br>      <span class="hljs-comment">// 处理注释，直接打印</span><br>      println(trimmedLine);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (commandReadyToExecute(trimmedLine)) &#123;<br>      <span class="hljs-comment">// 如果有分号，执行</span><br>      command.append(line.substring(<span class="hljs-number">0</span>, line.lastIndexOf(delimiter)));<br>      command.append(LINE_SEPARATOR);<br>      println(command);<br>      executeStatement(command.toString());<br>      command.setLength(<span class="hljs-number">0</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (trimmedLine.length() &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">// 没有分号，先加入，等后面的分号</span><br>      command.append(line);<br>      command.append(LINE_SEPARATOR);<br>    &#125;<br>    <span class="hljs-keyword">return</span> command;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">lineIsComment</span><span class="hljs-params">(String trimmedLine)</span> &#123;<br>    <span class="hljs-keyword">return</span> trimmedLine.startsWith(<span class="hljs-string">&quot;//&quot;</span>) || trimmedLine.startsWith(<span class="hljs-string">&quot;--&quot;</span>);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">commandReadyToExecute</span><span class="hljs-params">(String trimmedLine)</span> &#123;<br>    <span class="hljs-comment">// issue #561 remove anything after the delimiter</span><br>    <span class="hljs-keyword">return</span> !fullLineDelimiter &amp;&amp; trimmedLine.contains(delimiter) || fullLineDelimiter &amp;&amp; trimmedLine.equals(delimiter);<br>  &#125; <br><br>  <span class="hljs-comment">// 最后一条语句没有 ; </span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkForMissingLineTerminator</span><span class="hljs-params">(StringBuilder command)</span> &#123;<br>    <span class="hljs-keyword">if</span> (command != <span class="hljs-literal">null</span> &amp;&amp; command.toString().trim().length() &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeSqlException</span>(<span class="hljs-string">&quot;Line missing end-of-line terminator (&quot;</span> + delimiter + <span class="hljs-string">&quot;) =&gt; &quot;</span> + command);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollbackConnection</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">if</span> (!connection.getAutoCommit()) &#123;<br>        connection.rollback();<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>      <span class="hljs-comment">// ignore</span><br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 剩下的get、set方法和print方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SqlRunner"><a href="#SqlRunner" class="headerlink" title="SqlRunner"></a>SqlRunner</h4><p>    SQL运行器,可以运行SQL，如select，作为单元测试的正式测试 。这个类其实可以被所有项目的单元测试作为工具所利用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SqlRunner</span> &#123; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">NO_GENERATED_KEY</span> <span class="hljs-operator">=</span> Integer.MIN_VALUE + <span class="hljs-number">1001</span>;<br><br>  <span class="hljs-keyword">private</span> Connection connection;<br>  <span class="hljs-keyword">private</span> TypeHandlerRegistry typeHandlerRegistry;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> useGeneratedKeySupport; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">SqlRunner</span><span class="hljs-params">(Connection connection)</span> &#123;<br>    <span class="hljs-built_in">this</span>.connection = connection;<br>    <span class="hljs-built_in">this</span>.typeHandlerRegistry = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeHandlerRegistry</span>();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">selectOne</span><span class="hljs-params">(String sql, Object... args)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    List&lt;Map&lt;String, Object&gt;&gt; results = selectAll(sql, args);<br>    <span class="hljs-keyword">if</span> (results.size() != <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQLException</span>(<span class="hljs-string">&quot;Statement returned &quot;</span> + results.size() + <span class="hljs-string">&quot; results where exactly one (1) was expected.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> results.get(<span class="hljs-number">0</span>);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">(String sql, Object... args)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);<br>    <span class="hljs-keyword">try</span> &#123;<br>      setParameters(ps, args);<br>      <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> ps.executeQuery();<br>      <span class="hljs-keyword">return</span> getResults(rs);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        ps.close();<br>      &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        <span class="hljs-comment">//ignore</span><br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 取得结果</span><br>  <span class="hljs-keyword">private</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="hljs-title function_">getResults</span><span class="hljs-params">(ResultSet rs)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      List&lt;Map&lt;String, Object&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Map&lt;String, Object&gt;&gt;();<br>      List&lt;String&gt; columns = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>      List&lt;TypeHandler&lt;?&gt;&gt; typeHandlers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;TypeHandler&lt;?&gt;&gt;();<br>      <span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">rsmd</span> <span class="hljs-operator">=</span> rs.getMetaData();<br>      <span class="hljs-comment">// 先计算要哪些列，以及列的类型（TypeHandler）</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, n = rsmd.getColumnCount(); i &lt; n; i++) &#123;<br>        columns.add(rsmd.getColumnLabel(i + <span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">try</span> &#123;<br>          Class&lt;?&gt; type = Resources.classForName(rsmd.getColumnClassName(i + <span class="hljs-number">1</span>));<br>          TypeHandler&lt;?&gt; typeHandler = typeHandlerRegistry.getTypeHandler(type); <br>          <span class="hljs-comment">// 没有 TypeHandler 的话使用 ObjectTypeHandler</span><br>          <span class="hljs-keyword">if</span> (typeHandler == <span class="hljs-literal">null</span>) &#123;<br>            typeHandler = typeHandlerRegistry.getTypeHandler(Object.class);<br>          &#125;<br>          typeHandlers.add(typeHandler);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>          typeHandlers.add(typeHandlerRegistry.getTypeHandler(Object.class));<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">while</span> (rs.next()) &#123;<br>        Map&lt;String, Object&gt; row = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, n = columns.size(); i &lt; n; i++) &#123;<br>          <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> columns.get(i);<br>          TypeHandler&lt;?&gt; handler = typeHandlers.get(i);<br>          <span class="hljs-comment">// 巧妙的利用TypeHandler来取得结果</span><br>          row.put(name.toUpperCase(Locale.ENGLISH), handler.getResult(rs, name));<br>        &#125;<br>        list.add(row);<br>      &#125;<br>      <span class="hljs-keyword">return</span> list;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-keyword">if</span> (rs != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            rs.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>          <span class="hljs-comment">// ignore</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 执行insert语句</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String sql, Object... args)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    PreparedStatement ps;<br>    <span class="hljs-keyword">if</span> (useGeneratedKeySupport) &#123; <br>      <span class="hljs-comment">// 返回生成的id</span><br>      ps = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      ps = connection.prepareStatement(sql);<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>      setParameters(ps, args);<br>      ps.executeUpdate();<br>      <span class="hljs-keyword">if</span> (useGeneratedKeySupport) &#123;<br>        List&lt;Map&lt;String, Object&gt;&gt; keys = getResults(ps.getGeneratedKeys());<br>        <span class="hljs-keyword">if</span> (keys.size() == <span class="hljs-number">1</span>) &#123;<br>          Map&lt;String, Object&gt; key = keys.get(<span class="hljs-number">0</span>);<br>          Iterator&lt;Object&gt; i = key.values().iterator();<br>          <span class="hljs-keyword">if</span> (i.hasNext()) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">genkey</span> <span class="hljs-operator">=</span> i.next();<br>            <span class="hljs-keyword">if</span> (genkey != <span class="hljs-literal">null</span>) &#123;<br>              <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">return</span> Integer.parseInt(genkey.toString());<br>              &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>                <span class="hljs-comment">//ignore, no numeric key suppot</span><br>              &#125;<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> NO_GENERATED_KEY;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        ps.close();<br>      &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        <span class="hljs-comment">//ignore</span><br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 设置参数</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setParameters</span><span class="hljs-params">(PreparedStatement ps, Object... args)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, n = args.length; i &lt; n; i++) &#123;<br>      <span class="hljs-keyword">if</span> (args[i] == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQLException</span>(<span class="hljs-string">&quot;SqlRunner requires an instance of Null to represent typed null values for JDBC compatibility&quot;</span>);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (args[i] <span class="hljs-keyword">instanceof</span> Null) &#123;<br>        ((Null) args[i]).getTypeHandler().setParameter(ps, i + <span class="hljs-number">1</span>, <span class="hljs-literal">null</span>, ((Null) args[i]).getJdbcType());<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 巧妙的利用TypeHandler来设置参数</span><br>        <span class="hljs-type">TypeHandler</span> <span class="hljs-variable">typeHandler</span> <span class="hljs-operator">=</span> typeHandlerRegistry.getTypeHandler(args[i].getClass());<br>        <span class="hljs-keyword">if</span> (typeHandler == <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQLException</span>(<span class="hljs-string">&quot;SqlRunner could not find a TypeHandler instance for &quot;</span> + args[i].getClass());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          typeHandler.setParameter(ps, i + <span class="hljs-number">1</span>, args[i], <span class="hljs-literal">null</span>);<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 执行update语句</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String sql, Object... args)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);<br>    <span class="hljs-keyword">try</span> &#123;<br>      setParameters(ps, args);<br>      <span class="hljs-keyword">return</span> ps.executeUpdate();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        ps.close();<br>      &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        <span class="hljs-comment">//ignore</span><br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// delete和update处理相同</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String sql, Object... args)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">return</span> update(sql, args);<br>  &#125; <br><br>  <span class="hljs-comment">// 执行sql语句</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String sql)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> connection.createStatement();<br>    <span class="hljs-keyword">try</span> &#123;<br>      stmt.execute(sql);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        stmt.close();<br>      &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        <span class="hljs-comment">//ignore</span><br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 设置是否启用 获取插入数据行的id</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUseGeneratedKeySupport</span><span class="hljs-params">(<span class="hljs-type">boolean</span> useGeneratedKeySupport)</span> &#123;<br>    <span class="hljs-built_in">this</span>.useGeneratedKeySupport = useGeneratedKeySupport;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><p>    SelectBuilder 和 SqlBuilder只是对 SQL进行了简单的封装，就不做代码分析了</p>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10-session</title>
    <link href="/2023/07/13/10-session/"/>
    <url>/2023/07/13/10-session/</url>
    
    <content type="html"><![CDATA[<h4 id="AutoMappingBehavior"><a href="#AutoMappingBehavior" class="headerlink" title="AutoMappingBehavior"></a>AutoMappingBehavior</h4><p>​ 指定MyBatis是否以及如何将列自动映射到字段&#x2F;属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">AutoMappingBehavior</span> &#123; <br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Disables auto-mapping.</span><br><span class="hljs-comment">   */</span><br>  NONE,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Will only auto-map results with no nested result mappings defined inside.</span><br><span class="hljs-comment">   * 将只自动映射内部未定义嵌套结果映射的结果。</span><br><span class="hljs-comment">   */</span><br>  PARTIAL,<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Will auto-map result mappings of any complexity (containing nested or otherwise).</span><br><span class="hljs-comment">   * 将自动映射任意复杂度的结果映射（包括嵌套或其它）</span><br><span class="hljs-comment">   */</span><br>  FULL  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ExecutorType"><a href="#ExecutorType" class="headerlink" title="ExecutorType"></a>ExecutorType</h4><p>​ 执行器类型枚举</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">ExecutorType</span> &#123; <br><br>    <span class="hljs-comment">// ExecutorType.SIMPLE</span><br>    <span class="hljs-comment">// 这个执行器类型不做特殊的事情。它为每个语句的执行创建一个新的预处理语句。</span><br>    <span class="hljs-comment">// ExecutorType.REUSE</span><br>    <span class="hljs-comment">// 这个执行器类型会复用预处理语句。</span><br>    <span class="hljs-comment">// ExecutorType.BATCH</span><br>    <span class="hljs-comment">// 这个执行器会批量执行所有更新语句，如果SELECT在它们中间执行还会标定它们是必须的，来保证一个简单并易于理解的行为。</span><br>    SIMPLE, REUSE, BATCH<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="LocalCacheScope"><a href="#LocalCacheScope" class="headerlink" title="LocalCacheScope"></a>LocalCacheScope</h4><p>​ 本地缓存范围枚举</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复的嵌套查询。</span><br><span class="hljs-comment"> * 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。</span><br><span class="hljs-comment"> * 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据，相当于没有缓存。</span><br><span class="hljs-comment"> * 可以参考下面的文章进行深入了解</span><br><span class="hljs-comment"> * https://tech.meituan.com/2018/01/19/mybatis-cache.html</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">LocalCacheScope</span> &#123;<br>  SESSION,STATEMENT<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="TransactionIsolationLevel"><a href="#TransactionIsolationLevel" class="headerlink" title="TransactionIsolationLevel"></a>TransactionIsolationLevel</h4><p>​ 事务隔离级别枚举</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">TransactionIsolationLevel</span> &#123;<br>  <span class="hljs-comment">// 包括JDBC支持的5个级别</span><br>  NONE(Connection.TRANSACTION_NONE),<br>  READ_COMMITTED(Connection.TRANSACTION_READ_COMMITTED),<br>  READ_UNCOMMITTED(Connection.TRANSACTION_READ_UNCOMMITTED),<br>  REPEATABLE_READ(Connection.TRANSACTION_REPEATABLE_READ),<br>  SERIALIZABLE(Connection.TRANSACTION_SERIALIZABLE);<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> level;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">TransactionIsolationLevel</span><span class="hljs-params">(<span class="hljs-type">int</span> level)</span> &#123;<br>    <span class="hljs-built_in">this</span>.level = level;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLevel</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> level;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="RowBounds"><a href="#RowBounds" class="headerlink" title="RowBounds"></a>RowBounds</h4><p>​ 分页用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RowBounds</span> &#123; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">NO_ROW_OFFSET</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">NO_ROW_LIMIT</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">RowBounds</span> <span class="hljs-variable">DEFAULT</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RowBounds</span>();<br><br>  <span class="hljs-comment">// offset,limit就等于一般分页的start,limit,</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> offset;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> limit;<br><br>  <span class="hljs-comment">// 默认是一页Integer.MAX_VALUE条</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">RowBounds</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.offset = NO_ROW_OFFSET;<br>    <span class="hljs-built_in">this</span>.limit = NO_ROW_LIMIT;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">RowBounds</span><span class="hljs-params">(<span class="hljs-type">int</span> offset, <span class="hljs-type">int</span> limit)</span> &#123;<br>    <span class="hljs-built_in">this</span>.offset = offset;<br>    <span class="hljs-built_in">this</span>.limit = limit;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOffset</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> offset;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLimit</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> limit;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h4><p>​ 使用MyBatis的主要Java接口。通过这个接口你能执行sql命令，获取映射器以及管理事务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SqlSession</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Closeable</span> &#123; <br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Retrieve a single row mapped from the statement key</span><br><span class="hljs-comment">   * 根据指定的statement获取一条记录的封装对象</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &lt;T&gt; the returned object type 封装之后的对象类型</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> statement</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> Mapped object 封装之后的对象</span><br><span class="hljs-comment">   */</span><br>  &lt;T&gt; T <span class="hljs-title function_">selectOne</span><span class="hljs-params">(String statement)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Retrieve a single row mapped from the statement key and parameter.</span><br><span class="hljs-comment">   * 根据指定的statement获取一条记录的封装对象，只不过这个方法允许我们给sql传递一些参数</span><br><span class="hljs-comment">   * 一般在实际使用中，这个参数传递的是pojo，或者Map或者ImmutableMap</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &lt;T&gt; the returned object type</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> statement Unique identifier matching the statement to use.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> parameter A parameter object to pass to the statement.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> Mapped object</span><br><span class="hljs-comment">   */</span><br>  &lt;T&gt; T <span class="hljs-title function_">selectOne</span><span class="hljs-params">(String statement, Object parameter)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Retrieve a list of mapped objects from the statement key and parameter.</span><br><span class="hljs-comment">   * 根据指定的statement获取多条记录</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &lt;E&gt; the returned list element type</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> statement Unique identifier matching the statement to use.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> List of mapped object</span><br><span class="hljs-comment">   */</span><br>  &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">selectList</span><span class="hljs-params">(String statement)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Retrieve a list of mapped objects from the statement key and parameter.</span><br><span class="hljs-comment">   * 获取多条记录，这个方法允许我们传递一些参数</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &lt;E&gt; the returned list element type</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> statement Unique identifier matching the statement to use.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> parameter A parameter object to pass to the statement.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> List of mapped object</span><br><span class="hljs-comment">   */</span><br>  &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">selectList</span><span class="hljs-params">(String statement, Object parameter)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Retrieve a list of mapped objects from the statement key and parameter,</span><br><span class="hljs-comment">   * within the specified row bounds.</span><br><span class="hljs-comment">   * 获取多条记录，这个方法容许我们可以传递一些参数，不过这个方法容许我们进行</span><br><span class="hljs-comment">   * 分页查询。</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * 需要注意的是默认情况下，Mybatis为了扩展性，仅仅支持内存分页。也就是会先把</span><br><span class="hljs-comment">   * 所有的数据查询出来，然后在内存中进行分页。因此在实际的情况中，需要注意</span><br><span class="hljs-comment">   * 这一点。</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * 一般情况下公司都会编写自己的Mybatis 物理分页插件</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &lt;E&gt; the returned list element type</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> statement Unique identifier matching the statement to use.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> parameter A parameter object to pass to the statement.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> rowBounds  Bounds to limit object retrieval</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> List of mapped object</span><br><span class="hljs-comment">   */</span><br>  &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">selectList</span><span class="hljs-params">(String statement, Object parameter, RowBounds rowBounds)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * The selectMap is a special case in that it is designed to convert a list</span><br><span class="hljs-comment">   * of results into a Map based on one of the properties in the resulting</span><br><span class="hljs-comment">   * objects.</span><br><span class="hljs-comment">   * Eg. Return a of Map[Integer,Author] for selectMap(&quot;selectAuthors&quot;,&quot;id&quot;)</span><br><span class="hljs-comment">   * 将查询到的结果列表转换为Map类型。</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &lt;K&gt; the returned Map keys type</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &lt;V&gt; the returned Map values type</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> statement Unique identifier matching the statement to use.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> mapKey The property to use as key for each value in the list. </span><br><span class="hljs-comment">   * mapKey：对于结果集中的每个值，其在返回的Map中的key由值中的mapKey属性标识</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> Map containing key pair data.</span><br><span class="hljs-comment">   */</span><br>  &lt;K, V&gt; Map&lt;K, V&gt; <span class="hljs-title function_">selectMap</span><span class="hljs-params">(String statement, String mapKey)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * The selectMap is a special case in that it is designed to convert a list</span><br><span class="hljs-comment">   * of results into a Map based on one of the properties in the resulting</span><br><span class="hljs-comment">   * objects.</span><br><span class="hljs-comment">   * 将查询到的结果列表转换为Map类型。这个方法容许我们传入需要的参数</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &lt;K&gt; the returned Map keys type</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &lt;V&gt; the returned Map values type</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> statement Unique identifier matching the statement to use.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> parameter A parameter object to pass to the statement.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> mapKey The property to use as key for each value in the list.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> Map containing key pair data.</span><br><span class="hljs-comment">   */</span><br>  &lt;K, V&gt; Map&lt;K, V&gt; <span class="hljs-title function_">selectMap</span><span class="hljs-params">(String statement, Object parameter, String mapKey)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * The selectMap is a special case in that it is designed to convert a list</span><br><span class="hljs-comment">   * of results into a Map based on one of the properties in the resulting</span><br><span class="hljs-comment">   * objects.</span><br><span class="hljs-comment">   * 获取多条记录,加上分页,并存入Map</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &lt;K&gt; the returned Map keys type</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &lt;V&gt; the returned Map values type</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> statement Unique identifier matching the statement to use.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> parameter A parameter object to pass to the statement.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> mapKey The property to use as key for each value in the list.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> rowBounds  Bounds to limit object retrieval</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> Map containing key pair data.</span><br><span class="hljs-comment">   */</span><br>  &lt;K, V&gt; Map&lt;K, V&gt; <span class="hljs-title function_">selectMap</span><span class="hljs-params">(String statement, Object parameter, String mapKey, RowBounds rowBounds)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Retrieve a single row mapped from the statement key and parameter</span><br><span class="hljs-comment">   * using a &#123;<span class="hljs-doctag">@code</span> ResultHandler&#125;.</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> statement Unique identifier matching the statement to use.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> parameter A parameter object to pass to the statement.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> handler ResultHandler that will handle each retrieved row</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> Mapped object</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">(String statement, Object parameter, ResultHandler handler)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Retrieve a single row mapped from the statement</span><br><span class="hljs-comment">   * using a &#123;<span class="hljs-doctag">@code</span> ResultHandler&#125;.</span><br><span class="hljs-comment">   * 获取一条记录,并转交给ResultHandler处理。这个方法允许我们自己定义对</span><br><span class="hljs-comment">   * 查询到的行的处理方式。不过一般用的并不是很多</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> statement Unique identifier matching the statement to use.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> handler ResultHandler that will handle each retrieved row</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> Mapped object</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">(String statement, ResultHandler handler)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Retrieve a single row mapped from the statement key and parameter</span><br><span class="hljs-comment">   * using a &#123;<span class="hljs-doctag">@code</span> ResultHandler&#125; and &#123;<span class="hljs-doctag">@code</span> RowBounds&#125;</span><br><span class="hljs-comment">   * 获取一条记录,加上分页,并转交给ResultHandler处理</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> statement Unique identifier matching the statement to use.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> rowBounds RowBound instance to limit the query results</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> handler ResultHandler that will handle each retrieved row</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> Mapped object</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Execute an insert statement.</span><br><span class="hljs-comment">   * 插入记录。一般情况下这个语句在实际项目中用的并不是太多，而且更多使用带参数的insert函数</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> statement Unique identifier matching the statement to execute.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> int The number of rows affected by the insert.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String statement)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Execute an insert statement with the given parameter object. Any generated</span><br><span class="hljs-comment">   * autoincrement values or selectKey entries will modify the given parameter</span><br><span class="hljs-comment">   * object properties. Only the number of rows affected will be returned.</span><br><span class="hljs-comment">   * 插入记录，容许传入参数。</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> statement Unique identifier matching the statement to execute.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> parameter A parameter object to pass to the statement.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> int The number of rows affected by the insert. 注意返回的是受影响的行数</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String statement, Object parameter)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Execute an update statement. The number of rows affected will be returned.</span><br><span class="hljs-comment">   * 更新记录。返回的是受影响的行数</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> statement Unique identifier matching the statement to execute.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> int The number of rows affected by the update.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String statement)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Execute an update statement. The number of rows affected will be returned.</span><br><span class="hljs-comment">   * 更新记录</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> statement Unique identifier matching the statement to execute.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> parameter A parameter object to pass to the statement.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> int The number of rows affected by the update. 返回的是受影响的行数</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String statement, Object parameter)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Execute a delete statement. The number of rows affected will be returned.</span><br><span class="hljs-comment">   * 删除记录</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> statement Unique identifier matching the statement to execute.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> int The number of rows affected by the delete. 返回的是受影响的行数</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String statement)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Execute a delete statement. The number of rows affected will be returned.</span><br><span class="hljs-comment">   * 删除记录</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> statement Unique identifier matching the statement to execute.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> parameter A parameter object to pass to the statement.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> int The number of rows affected by the delete. 返回的是受影响的行数</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String statement, Object parameter)</span>;<br><br>  <span class="hljs-comment">// 以下是事务控制方法,commit,rollback</span><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Flushes batch statements and commits database connection.</span><br><span class="hljs-comment">   * Note that database connection will not be committed if no updates/deletes/inserts were called.</span><br><span class="hljs-comment">   * To force the commit call &#123;<span class="hljs-doctag">@link</span> SqlSession#commit(boolean)&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Flushes batch statements and commits database connection.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> force forces connection commit</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">(<span class="hljs-type">boolean</span> force)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Discards pending batch statements and rolls database connection back.</span><br><span class="hljs-comment">   * Note that database connection will not be rolled back if no updates/deletes/inserts were called.</span><br><span class="hljs-comment">   * To force the rollback call &#123;<span class="hljs-doctag">@link</span> SqlSession#rollback(boolean)&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Discards pending batch statements and rolls database connection back.</span><br><span class="hljs-comment">   * Note that database connection will not be rolled back if no updates/deletes/inserts were called.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> force forces connection rollback</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">(<span class="hljs-type">boolean</span> force)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Flushes batch statements.</span><br><span class="hljs-comment">   * 刷新批处理语句,返回批处理结果</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> BatchResult list of updated records</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@since</span> 3.0.6</span><br><span class="hljs-comment">   */</span><br>  List&lt;BatchResult&gt; <span class="hljs-title function_">flushStatements</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Closes the session</span><br><span class="hljs-comment">   * 关闭Session</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Clears local session cache</span><br><span class="hljs-comment">   * 清理Session缓存</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearCache</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Retrieves current configuration</span><br><span class="hljs-comment">   * 得到配置</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> Configuration</span><br><span class="hljs-comment">   */</span><br>  Configuration <span class="hljs-title function_">getConfiguration</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Retrieves a mapper.</span><br><span class="hljs-comment">   * 得到映射器</span><br><span class="hljs-comment">   * 这个巧妙的使用了泛型，使得类型安全</span><br><span class="hljs-comment">   * 到了MyBatis 3，还可以用注解,这样xml都不用写了</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &lt;T&gt; the mapper type</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> type Mapper interface class</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> a mapper bound to this SqlSession</span><br><span class="hljs-comment">   */</span><br>  &lt;T&gt; T <span class="hljs-title function_">getMapper</span><span class="hljs-params">(Class&lt;T&gt; type)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Retrieves inner database connection</span><br><span class="hljs-comment">   * 得到数据库连接</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> Connection</span><br><span class="hljs-comment">   */</span><br>  Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="DefaultSqlSession"><a href="#DefaultSqlSession" class="headerlink" title="DefaultSqlSession"></a>DefaultSqlSession</h4><p>​ 默认的SqlSession实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultSqlSession</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SqlSession</span> &#123;<br><br>  <span class="hljs-keyword">private</span> Configuration configuration;<br><br>  <span class="hljs-comment">// 执行器，几乎所有方法都委托其执行</span><br>  <span class="hljs-keyword">private</span> Executor executor;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 是否自动提交</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> autoCommit;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> dirty;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">DefaultSqlSession</span><span class="hljs-params">(Configuration configuration, Executor executor, <span class="hljs-type">boolean</span> autoCommit)</span> &#123;<br>    <span class="hljs-built_in">this</span>.configuration = configuration;<br>    <span class="hljs-built_in">this</span>.executor = executor;<br>    <span class="hljs-built_in">this</span>.dirty = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">this</span>.autoCommit = autoCommit;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">DefaultSqlSession</span><span class="hljs-params">(Configuration configuration, Executor executor)</span> &#123;<br>    <span class="hljs-built_in">this</span>(configuration, executor, <span class="hljs-literal">false</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">selectOne</span><span class="hljs-params">(String statement)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.&lt;T&gt;selectOne(statement, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// 核心selectOne</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">selectOne</span><span class="hljs-params">(String statement, Object parameter)</span> &#123;<br>    <span class="hljs-comment">// Popular vote was to return null on 0 results and throw exception on too many.</span><br>    <span class="hljs-comment">// 转而去调用selectList,很简单的，如果得到0条则返回null，得到1条则返回1条，得到多条报TooManyResultsException错</span><br>    <span class="hljs-comment">// 特别需要注意的是当没有查询到结果的时候就会返回null。因此一般建议在mapper中编写resultType的时候使用包装类型</span><br>    <span class="hljs-comment">// 而不是基本类型，比如推荐使用Integer而不是int。这样就可以避免NPE</span><br>    List&lt;T&gt; list = <span class="hljs-built_in">this</span>.&lt;T&gt;selectList(statement, parameter);<br>    <span class="hljs-keyword">if</span> (list.size() == <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">return</span> list.get(<span class="hljs-number">0</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (list.size() &gt; <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TooManyResultsException</span>(<span class="hljs-string">&quot;Expected one result (or null) to be returned by selectOne(), but found: &quot;</span> + list.size());<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;K, V&gt; Map&lt;K, V&gt; <span class="hljs-title function_">selectMap</span><span class="hljs-params">(String statement, String mapKey)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.selectMap(statement, <span class="hljs-literal">null</span>, mapKey, RowBounds.DEFAULT);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;K, V&gt; Map&lt;K, V&gt; <span class="hljs-title function_">selectMap</span><span class="hljs-params">(String statement, Object parameter, String mapKey)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.selectMap(statement, parameter, mapKey, RowBounds.DEFAULT);<br>  &#125;<br><br>  <span class="hljs-comment">// 核心selectMap</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;K, V&gt; Map&lt;K, V&gt; <span class="hljs-title function_">selectMap</span><span class="hljs-params">(String statement, Object parameter, String mapKey, RowBounds rowBounds)</span> &#123;<br>    <span class="hljs-comment">// 转而去调用selectList</span><br>    <span class="hljs-keyword">final</span> List&lt;?&gt; list = selectList(statement, parameter, rowBounds);<br>    <span class="hljs-keyword">final</span> DefaultMapResultHandler&lt;K, V&gt; mapResultHandler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultMapResultHandler</span>&lt;K, V&gt;(mapKey,<br>        configuration.getObjectFactory(), configuration.getObjectWrapperFactory());<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">DefaultResultContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultResultContext</span>();<br>    <span class="hljs-keyword">for</span> (Object o : list) &#123;<br>      <span class="hljs-comment">// 循环用DefaultMapResultHandler处理每条记录</span><br>      context.nextResultObject(o);<br>      mapResultHandler.handleResult(context);<br>    &#125;<br>    <span class="hljs-comment">// 注意这个DefaultMapResultHandler里面存了所有已处理的记录，最后再返回一个Map</span><br>    <span class="hljs-keyword">return</span> mapResultHandler.getMappedResults();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">selectList</span><span class="hljs-params">(String statement)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.selectList(statement, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">selectList</span><span class="hljs-params">(String statement, Object parameter)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.selectList(statement, parameter, RowBounds.DEFAULT);<br>  &#125;<br><br>  <span class="hljs-comment">// 核心selectList</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">selectList</span><span class="hljs-params">(String statement, Object parameter, RowBounds rowBounds)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 根据statement 找到对应的MappedStatement（这里statement已经处理过了，所以点进去看到的是从map中取）</span><br>      <span class="hljs-comment">// 在 MapperAnnotationBuilder 和 XMLStatementBuilder 中均调用了 MapperBuilderAssistant 的 </span><br>      <span class="hljs-comment">// addMappedStatement 方法</span><br>      <span class="hljs-type">MappedStatement</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> configuration.getMappedStatement(statement);<br>      <span class="hljs-comment">// 转而用执行器来查询结果,注意这里传入的ResultHandler是null</span><br>      <span class="hljs-keyword">return</span> executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> ExceptionFactory.wrapException(<span class="hljs-string">&quot;Error querying database.  Cause: &quot;</span> + e, e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      ErrorContext.instance().reset();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">(String statement, Object parameter, ResultHandler handler)</span> &#123;<br>    select(statement, parameter, RowBounds.DEFAULT, handler);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">(String statement, ResultHandler handler)</span> &#123;<br>    select(statement, <span class="hljs-literal">null</span>, RowBounds.DEFAULT, handler);<br>  &#125; <br><br>  <span class="hljs-comment">// 核心select,带有ResultHandler，和selectList代码差不多的，区别就一个ResultHandler</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">MappedStatement</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> configuration.getMappedStatement(statement);<br>      executor.query(ms, wrapCollection(parameter), rowBounds, handler);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> ExceptionFactory.wrapException(<span class="hljs-string">&quot;Error querying database.  Cause: &quot;</span> + e, e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      ErrorContext.instance().reset();<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String statement)</span> &#123;<br>    <span class="hljs-keyword">return</span> insert(statement, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String statement, Object parameter)</span> &#123;<br>    <span class="hljs-comment">// insert也是调用update</span><br>    <span class="hljs-keyword">return</span> update(statement, parameter);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String statement)</span> &#123;<br>    <span class="hljs-keyword">return</span> update(statement, <span class="hljs-literal">null</span>);<br>  &#125; <br><br>  <span class="hljs-comment">// 核心update</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String statement, Object parameter)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 每次要更新之前，dirty标志设为true</span><br>      dirty = <span class="hljs-literal">true</span>;<br>      <span class="hljs-type">MappedStatement</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> configuration.getMappedStatement(statement);<br>      <span class="hljs-comment">// 转而用执行器来update结果</span><br>      <span class="hljs-keyword">return</span> executor.update(ms, wrapCollection(parameter));<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> ExceptionFactory.wrapException(<span class="hljs-string">&quot;Error updating database.  Cause: &quot;</span> + e, e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      ErrorContext.instance().reset();<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String statement)</span> &#123;<br>    <span class="hljs-comment">// delete也是调用update</span><br>    <span class="hljs-keyword">return</span> update(statement, <span class="hljs-literal">null</span>);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String statement, Object parameter)</span> &#123;<br>    <span class="hljs-keyword">return</span> update(statement, parameter);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span> &#123;<br>    commit(<span class="hljs-literal">false</span>);<br>  &#125; <br><br>  <span class="hljs-comment">// 核心commit</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">(<span class="hljs-type">boolean</span> force)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 转而用执行器来commit</span><br>      executor.commit(isCommitOrRollbackRequired(force));<br>      <span class="hljs-comment">// 每次commit之后，dirty标志设为false</span><br>      dirty = <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> ExceptionFactory.wrapException(<span class="hljs-string">&quot;Error committing transaction.  Cause: &quot;</span> + e, e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      ErrorContext.instance().reset();<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 检查是否需要强制commit或rollback</span><br>  <span class="hljs-comment">// force 指的是需要强制commit或rollback</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCommitOrRollbackRequired</span><span class="hljs-params">(<span class="hljs-type">boolean</span> force)</span> &#123;<br>    <span class="hljs-keyword">return</span> (!autoCommit &amp;&amp; dirty) || force;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">()</span> &#123;<br>    rollback(<span class="hljs-literal">false</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// 核心rollback</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">(<span class="hljs-type">boolean</span> force)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 转而用执行器来rollback</span><br>      executor.rollback(isCommitOrRollbackRequired(force));<br>      <span class="hljs-comment">// 每次rollback之后，dirty标志设为false</span><br>      dirty = <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> ExceptionFactory.wrapException(<span class="hljs-string">&quot;Error rolling back transaction.  Cause: &quot;</span> + e, e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      ErrorContext.instance().reset();<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 核心flushStatements</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> List&lt;BatchResult&gt; <span class="hljs-title function_">flushStatements</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 转而用执行器来flushStatements</span><br>      <span class="hljs-keyword">return</span> executor.flushStatements();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> ExceptionFactory.wrapException(<span class="hljs-string">&quot;Error flushing statements.  Cause: &quot;</span> + e, e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      ErrorContext.instance().reset();<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 核心close</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 转而用执行器来close</span><br>      executor.close(isCommitOrRollbackRequired(<span class="hljs-literal">false</span>));<br>      <span class="hljs-comment">// 每次close之后，dirty标志设为false</span><br>      dirty = <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      ErrorContext.instance().reset();<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Configuration <span class="hljs-title function_">getConfiguration</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> configuration;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getMapper</span><span class="hljs-params">(Class&lt;T&gt; type)</span> &#123;<br>    <span class="hljs-comment">// 最后会去调用MapperRegistry.getMapper</span><br>    <span class="hljs-keyword">return</span> configuration.&lt;T&gt;getMapper(type, <span class="hljs-built_in">this</span>);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> executor.getTransaction().getConnection();<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>      <span class="hljs-keyword">throw</span> ExceptionFactory.wrapException(<span class="hljs-string">&quot;Error getting a new connection.  Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 核心clearCache</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearCache</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 转而用执行器来clearLocalCache</span><br>    executor.clearLocalCache();<br>  &#125; <br><br>  <span class="hljs-comment">// 把参数包装成Collection</span><br>  <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">wrapCollection</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object object)</span> &#123;<br>    <span class="hljs-keyword">if</span> (object <span class="hljs-keyword">instanceof</span> Collection) &#123;<br>      <span class="hljs-comment">// 参数若是Collection型，做collection标记</span><br>      StrictMap&lt;Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StrictMap</span>&lt;Object&gt;();<br>      map.put(<span class="hljs-string">&quot;collection&quot;</span>, object);<br>      <span class="hljs-keyword">if</span> (object <span class="hljs-keyword">instanceof</span> List) &#123;<br>        <span class="hljs-comment">// 参数若是List型，做list标记</span><br>        map.put(<span class="hljs-string">&quot;list&quot;</span>, object);<br>      &#125;<br>      <span class="hljs-keyword">return</span> map;      <br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (object != <span class="hljs-literal">null</span> &amp;&amp; object.getClass().isArray()) &#123;<br>      <span class="hljs-comment">// 参数若是数组型，，做array标记</span><br>      StrictMap&lt;Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StrictMap</span>&lt;Object&gt;();<br>      map.put(<span class="hljs-string">&quot;array&quot;</span>, object);<br>      <span class="hljs-keyword">return</span> map;<br>    &#125;<br>    <span class="hljs-comment">// 参数若不是集合型，直接返回原来值</span><br>    <span class="hljs-keyword">return</span> object;<br>  &#125; <br><br>  <span class="hljs-comment">// 严格的Map，如果找不到对应的key，直接抛BindingException例外，而不是返回null</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StrictMap</span>&lt;V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashMap</span>&lt;String, V&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">5741767162221585340L</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">super</span>.containsKey(key)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BindingException</span>(<span class="hljs-string">&quot;Parameter &#x27;&quot;</span> + key + <span class="hljs-string">&quot;&#x27; not found. Available parameters are &quot;</span> + <span class="hljs-built_in">this</span>.keySet());<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.get(key);<br>    &#125;<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h4><p>构建SqlSession的工厂.工厂模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SqlSessionFactory</span> &#123;<br><br>  <span class="hljs-comment">// 8个方法可以用来创建SqlSession实例</span><br>  SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">// 自动提交</span><br>  SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">(<span class="hljs-type">boolean</span> autoCommit)</span>;<br>  <span class="hljs-comment">// 连接</span><br>  SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">(Connection connection)</span>;<br>  <span class="hljs-comment">// 事务隔离级别</span><br>  SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">(TransactionIsolationLevel level)</span>;<br><br>  <span class="hljs-comment">// 执行器的类型</span><br>  SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">(ExecutorType execType)</span>;<br>  SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">(ExecutorType execType, <span class="hljs-type">boolean</span> autoCommit)</span>;<br>  SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">(ExecutorType execType, TransactionIsolationLevel level)</span>;<br>  SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">(ExecutorType execType, Connection connection)</span>;<br><br>  Configuration <span class="hljs-title function_">getConfiguration</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="DefaultSqlSessionFactory"><a href="#DefaultSqlSessionFactory" class="headerlink" title="DefaultSqlSessionFactory"></a>DefaultSqlSessionFactory</h4><p>默认的SqlSessionFactory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultSqlSessionFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SqlSessionFactory</span> &#123; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Configuration configuration;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">DefaultSqlSessionFactory</span><span class="hljs-params">(Configuration configuration)</span> &#123;<br>    <span class="hljs-built_in">this</span>.configuration = configuration;<br>  &#125; <br><br>  <span class="hljs-comment">// 最终都会调用2种方法：openSessionFromDataSource,openSessionFromConnection</span><br>  <span class="hljs-comment">// 这两个方法通过事务工厂产生事务的方式不同</span><br>  <span class="hljs-comment">// 以下6个方法都会调用openSessionFromDataSource</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> openSessionFromDataSource(configuration.getDefaultExecutorType(), <span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">(<span class="hljs-type">boolean</span> autoCommit)</span> &#123;<br>    <span class="hljs-keyword">return</span> openSessionFromDataSource(configuration.getDefaultExecutorType(), <span class="hljs-literal">null</span>, autoCommit);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">(ExecutorType execType)</span> &#123;<br>    <span class="hljs-keyword">return</span> openSessionFromDataSource(execType, <span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">(TransactionIsolationLevel level)</span> &#123;<br>    <span class="hljs-keyword">return</span> openSessionFromDataSource(configuration.getDefaultExecutorType(), level, <span class="hljs-literal">false</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">(ExecutorType execType, TransactionIsolationLevel level)</span> &#123;<br>    <span class="hljs-keyword">return</span> openSessionFromDataSource(execType, level, <span class="hljs-literal">false</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">(ExecutorType execType, <span class="hljs-type">boolean</span> autoCommit)</span> &#123;<br>    <span class="hljs-keyword">return</span> openSessionFromDataSource(execType, <span class="hljs-literal">null</span>, autoCommit);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> SqlSession <span class="hljs-title function_">openSessionFromDataSource</span><span class="hljs-params">(ExecutorType execType, TransactionIsolationLevel level, <span class="hljs-type">boolean</span> autoCommit)</span> &#123;<br>    <span class="hljs-type">Transaction</span> <span class="hljs-variable">tx</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">Environment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> configuration.getEnvironment();<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">TransactionFactory</span> <span class="hljs-variable">transactionFactory</span> <span class="hljs-operator">=</span> getTransactionFactoryFromEnvironment(environment);<br>      <span class="hljs-comment">// 通过事务工厂来产生一个事务</span><br>      tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);<br>      <span class="hljs-comment">// 生成一个执行器(事务包含在执行器里)</span><br>      <span class="hljs-keyword">final</span> <span class="hljs-type">Executor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> configuration.newExecutor(tx, execType);<br>      <span class="hljs-comment">// 然后产生一个DefaultSqlSession</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultSqlSession</span>(configuration, executor, autoCommit);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-comment">// 如果打开事务出错，则关闭它</span><br>      closeTransaction(tx); <span class="hljs-comment">// may have fetched a connection so lets call close()</span><br>      <span class="hljs-keyword">throw</span> ExceptionFactory.wrapException(<span class="hljs-string">&quot;Error opening session.  Cause: &quot;</span> + e, e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-comment">// 最后清空错误上下文</span><br>      ErrorContext.instance().reset();<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> TransactionFactory <span class="hljs-title function_">getTransactionFactoryFromEnvironment</span><span class="hljs-params">(Environment environment)</span> &#123;<br>    <span class="hljs-comment">// 如果没有配置事务工厂，则返回托管事务工厂</span><br>    <span class="hljs-keyword">if</span> (environment == <span class="hljs-literal">null</span> || environment.getTransactionFactory() == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ManagedTransactionFactory</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> environment.getTransactionFactory();<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">closeTransaction</span><span class="hljs-params">(Transaction tx)</span> &#123;<br>    <span class="hljs-keyword">if</span> (tx != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        tx.close();<br>      &#125; <span class="hljs-keyword">catch</span> (SQLException ignore) &#123;<br>        <span class="hljs-comment">// Intentionally ignore. Prefer previous error.</span><br>      &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 以下2个方法都会调用openSessionFromConnection</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">(Connection connection)</span> &#123;<br>    <span class="hljs-keyword">return</span> openSessionFromConnection(configuration.getDefaultExecutorType(), connection);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">(ExecutorType execType, Connection connection)</span> &#123;<br>    <span class="hljs-keyword">return</span> openSessionFromConnection(execType, connection);<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> SqlSession <span class="hljs-title function_">openSessionFromConnection</span><span class="hljs-params">(ExecutorType execType, Connection connection)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">boolean</span> autoCommit;<br>      <span class="hljs-keyword">try</span> &#123;<br>        autoCommit = connection.getAutoCommit();<br>      &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        <span class="hljs-comment">// Failover to true, as most poor drivers</span><br>        <span class="hljs-comment">// or databases won&#x27;t support transactions</span><br>        autoCommit = <span class="hljs-literal">true</span>;<br>      &#125;      <br>      <span class="hljs-keyword">final</span> <span class="hljs-type">Environment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> configuration.getEnvironment();<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">TransactionFactory</span> <span class="hljs-variable">transactionFactory</span> <span class="hljs-operator">=</span> getTransactionFactoryFromEnvironment(environment);<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">Transaction</span> <span class="hljs-variable">tx</span> <span class="hljs-operator">=</span> transactionFactory.newTransaction(connection);<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">Executor</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> configuration.newExecutor(tx, execType);<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultSqlSession</span>(configuration, executor, autoCommit);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> ExceptionFactory.wrapException(<span class="hljs-string">&quot;Error opening session.  Cause: &quot;</span> + e, e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      ErrorContext.instance().reset();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder"></a>SqlSessionFactoryBuilder</h4><p>构建SqlSessionFactory的工厂，工厂模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span> &#123; <br><br>  <span class="hljs-comment">// 以下3个方法都是调用下面第4种方法</span><br>  <span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title function_">build</span><span class="hljs-params">(Reader reader)</span> &#123;<br>    <span class="hljs-keyword">return</span> build(reader, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title function_">build</span><span class="hljs-params">(Reader reader, String environment)</span> &#123;<br>    <span class="hljs-keyword">return</span> build(reader, environment, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title function_">build</span><span class="hljs-params">(Reader reader, Properties properties)</span> &#123;<br>    <span class="hljs-keyword">return</span> build(reader, <span class="hljs-literal">null</span>, properties);<br>  &#125; <br><br>  <span class="hljs-comment">// 第4种方法是最常用的，它使用了一个参照了XML文档或更特定的SqlMapConfig.xml文件的Reader实例。</span><br>  <span class="hljs-comment">// 可选的参数是environment和properties。</span><br>  <span class="hljs-comment">// Environment决定加载哪种环境(开发环境/生产环境)，包括数据源和事务管理器。</span><br>  <span class="hljs-comment">// 如果使用properties，那么就会加载那些properties（属性配置文件），</span><br>  <span class="hljs-comment">// 属性可以用$&#123;propName&#125;语法形式多次用在配置文件中。和Spring很像</span><br>  <span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title function_">build</span><span class="hljs-params">(Reader reader, String environment, Properties properties)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 委托XMLConfigBuilder来解析xml文件，并构建</span><br>      <span class="hljs-type">XMLConfigBuilder</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLConfigBuilder</span>(reader, environment, properties);<br>      <span class="hljs-keyword">return</span> build(parser.parse());<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-comment">//这里是捕获异常，包装成自己的异常并抛出的idiom？，最后还要reset ErrorContext</span><br>      <span class="hljs-keyword">throw</span> ExceptionFactory.wrapException(<span class="hljs-string">&quot;Error building SqlSession.&quot;</span>, e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      ErrorContext.instance().reset();<br>      <span class="hljs-keyword">try</span> &#123;<br>        reader.close();<br>      &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-comment">// Intentionally ignore. Prefer previous error.</span><br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 以下3个方法都是调用下面第8种方法</span><br>  <span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title function_">build</span><span class="hljs-params">(InputStream inputStream)</span> &#123;<br>    <span class="hljs-keyword">return</span> build(inputStream, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title function_">build</span><span class="hljs-params">(InputStream inputStream, String environment)</span> &#123;<br>    <span class="hljs-keyword">return</span> build(inputStream, environment, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title function_">build</span><span class="hljs-params">(InputStream inputStream, Properties properties)</span> &#123;<br>    <span class="hljs-keyword">return</span> build(inputStream, <span class="hljs-literal">null</span>, properties);<br>  &#125; <br><br>  <span class="hljs-comment">// 第8种方法和第4种方法差不多，Reader换成了InputStream</span><br>  <span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title function_">build</span><span class="hljs-params">(InputStream inputStream, String environment, Properties properties)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">XMLConfigBuilder</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLConfigBuilder</span>(inputStream, environment, properties);<br>      <span class="hljs-keyword">return</span> build(parser.parse());<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> ExceptionFactory.wrapException(<span class="hljs-string">&quot;Error building SqlSession.&quot;</span>, e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      ErrorContext.instance().reset();<br>      <span class="hljs-keyword">try</span> &#123;<br>        inputStream.close();<br>      &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-comment">// Intentionally ignore. Prefer previous error.</span><br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 最后一个build方法使用了一个Configuration作为参数,并返回DefaultSqlSessionFactory</span><br>  <span class="hljs-keyword">public</span> SqlSessionFactory <span class="hljs-title function_">build</span><span class="hljs-params">(Configuration config)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultSqlSessionFactory</span>(config);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SqlSessionManager"><a href="#SqlSessionManager" class="headerlink" title="SqlSessionManager"></a>SqlSessionManager</h4><p>这个类似乎是用来做测试的，它封装了SqlSessionFactory和SqlSession的方法，并且对SqlSession进行了代理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SqlSessionManager</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SqlSessionFactory</span>, SqlSession &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SqlSessionFactory sqlSessionFactory;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SqlSession sqlSessionProxy;<br><br>  <span class="hljs-keyword">private</span> ThreadLocal&lt;SqlSession&gt; localSqlSession = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;SqlSession&gt;();<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">SqlSessionManager</span><span class="hljs-params">(SqlSessionFactory sqlSessionFactory)</span> &#123;<br>    <span class="hljs-built_in">this</span>.sqlSessionFactory = sqlSessionFactory;<br>    <span class="hljs-built_in">this</span>.sqlSessionProxy = (SqlSession) Proxy.newProxyInstance(<br>        SqlSessionFactory.class.getClassLoader(),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;SqlSession.class&#125;,<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionInterceptor</span>());<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSessionManager <span class="hljs-title function_">newInstance</span><span class="hljs-params">(Reader reader)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionManager</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(reader, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSessionManager <span class="hljs-title function_">newInstance</span><span class="hljs-params">(Reader reader, String environment)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionManager</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(reader, environment, <span class="hljs-literal">null</span>));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSessionManager <span class="hljs-title function_">newInstance</span><span class="hljs-params">(Reader reader, Properties properties)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionManager</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(reader, <span class="hljs-literal">null</span>, properties));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSessionManager <span class="hljs-title function_">newInstance</span><span class="hljs-params">(InputStream inputStream)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionManager</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSessionManager <span class="hljs-title function_">newInstance</span><span class="hljs-params">(InputStream inputStream, String environment)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionManager</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream, environment, <span class="hljs-literal">null</span>));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSessionManager <span class="hljs-title function_">newInstance</span><span class="hljs-params">(InputStream inputStream, Properties properties)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionManager</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream, <span class="hljs-literal">null</span>, properties));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSessionManager <span class="hljs-title function_">newInstance</span><span class="hljs-params">(SqlSessionFactory sqlSessionFactory)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionManager</span>(sqlSessionFactory);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startManagedSession</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.localSqlSession.set(openSession());<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startManagedSession</span><span class="hljs-params">(<span class="hljs-type">boolean</span> autoCommit)</span> &#123;<br>    <span class="hljs-built_in">this</span>.localSqlSession.set(openSession(autoCommit));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startManagedSession</span><span class="hljs-params">(Connection connection)</span> &#123;<br>    <span class="hljs-built_in">this</span>.localSqlSession.set(openSession(connection));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startManagedSession</span><span class="hljs-params">(TransactionIsolationLevel level)</span> &#123;<br>    <span class="hljs-built_in">this</span>.localSqlSession.set(openSession(level));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startManagedSession</span><span class="hljs-params">(ExecutorType execType)</span> &#123;<br>    <span class="hljs-built_in">this</span>.localSqlSession.set(openSession(execType));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startManagedSession</span><span class="hljs-params">(ExecutorType execType, <span class="hljs-type">boolean</span> autoCommit)</span> &#123;<br>    <span class="hljs-built_in">this</span>.localSqlSession.set(openSession(execType, autoCommit));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startManagedSession</span><span class="hljs-params">(ExecutorType execType, TransactionIsolationLevel level)</span> &#123;<br>    <span class="hljs-built_in">this</span>.localSqlSession.set(openSession(execType, level));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startManagedSession</span><span class="hljs-params">(ExecutorType execType, Connection connection)</span> &#123;<br>    <span class="hljs-built_in">this</span>.localSqlSession.set(openSession(execType, connection));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isManagedSessionStarted</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.localSqlSession.get() != <span class="hljs-literal">null</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">(<span class="hljs-type">boolean</span> autoCommit)</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSessionFactory.openSession(autoCommit);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">(Connection connection)</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSessionFactory.openSession(connection);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">(TransactionIsolationLevel level)</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSessionFactory.openSession(level);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">(ExecutorType execType)</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSessionFactory.openSession(execType);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">(ExecutorType execType, <span class="hljs-type">boolean</span> autoCommit)</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSessionFactory.openSession(execType, autoCommit);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">(ExecutorType execType, TransactionIsolationLevel level)</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSessionFactory.openSession(execType, level);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> SqlSession <span class="hljs-title function_">openSession</span><span class="hljs-params">(ExecutorType execType, Connection connection)</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSessionFactory.openSession(execType, connection);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Configuration <span class="hljs-title function_">getConfiguration</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSessionFactory.getConfiguration();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">selectOne</span><span class="hljs-params">(String statement)</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSessionProxy.&lt;T&gt; selectOne(statement);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">selectOne</span><span class="hljs-params">(String statement, Object parameter)</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSessionProxy.&lt;T&gt; selectOne(statement, parameter);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;K, V&gt; Map&lt;K, V&gt; <span class="hljs-title function_">selectMap</span><span class="hljs-params">(String statement, String mapKey)</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSessionProxy.&lt;K, V&gt; selectMap(statement, mapKey);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;K, V&gt; Map&lt;K, V&gt; <span class="hljs-title function_">selectMap</span><span class="hljs-params">(String statement, Object parameter, String mapKey)</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSessionProxy.&lt;K, V&gt; selectMap(statement, parameter, mapKey);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;K, V&gt; Map&lt;K, V&gt; <span class="hljs-title function_">selectMap</span><span class="hljs-params">(String statement, Object parameter, String mapKey, RowBounds rowBounds)</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSessionProxy.&lt;K, V&gt; selectMap(statement, parameter, mapKey, rowBounds);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">selectList</span><span class="hljs-params">(String statement)</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSessionProxy.&lt;E&gt; selectList(statement);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">selectList</span><span class="hljs-params">(String statement, Object parameter)</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSessionProxy.&lt;E&gt; selectList(statement, parameter);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="hljs-title function_">selectList</span><span class="hljs-params">(String statement, Object parameter, RowBounds rowBounds)</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSessionProxy.&lt;E&gt; selectList(statement, parameter, rowBounds);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">(String statement, ResultHandler handler)</span> &#123;<br>    sqlSessionProxy.select(statement, handler);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">(String statement, Object parameter, ResultHandler handler)</span> &#123;<br>    sqlSessionProxy.select(statement, parameter, handler);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler)</span> &#123;<br>    sqlSessionProxy.select(statement, parameter, rowBounds, handler);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String statement)</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSessionProxy.insert(statement);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String statement, Object parameter)</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSessionProxy.insert(statement, parameter);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String statement)</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSessionProxy.update(statement);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String statement, Object parameter)</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSessionProxy.update(statement, parameter);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String statement)</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSessionProxy.delete(statement);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String statement, Object parameter)</span> &#123;<br>    <span class="hljs-keyword">return</span> sqlSessionProxy.delete(statement, parameter);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getMapper</span><span class="hljs-params">(Class&lt;T&gt; type)</span> &#123;<br>    <span class="hljs-keyword">return</span> getConfiguration().getMapper(type, <span class="hljs-built_in">this</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> localSqlSession.get();<br>    <span class="hljs-keyword">if</span> (sqlSession == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionException</span>(<span class="hljs-string">&quot;Error:  Cannot get connection.  No managed session is started.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> sqlSession.getConnection();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearCache</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> localSqlSession.get();<br>    <span class="hljs-keyword">if</span> (sqlSession == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionException</span>(<span class="hljs-string">&quot;Error:  Cannot clear the cache.  No managed session is started.&quot;</span>);<br>    &#125;<br>    sqlSession.clearCache();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> localSqlSession.get();<br>    <span class="hljs-keyword">if</span> (sqlSession == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionException</span>(<span class="hljs-string">&quot;Error:  Cannot commit.  No managed session is started.&quot;</span>);<br>    &#125;<br>    sqlSession.commit();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">(<span class="hljs-type">boolean</span> force)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> localSqlSession.get();<br>    <span class="hljs-keyword">if</span> (sqlSession == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionException</span>(<span class="hljs-string">&quot;Error:  Cannot commit.  No managed session is started.&quot;</span>);<br>    &#125;<br>    sqlSession.commit(force);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> localSqlSession.get();<br>    <span class="hljs-keyword">if</span> (sqlSession == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionException</span>(<span class="hljs-string">&quot;Error:  Cannot rollback.  No managed session is started.&quot;</span>);<br>    &#125;<br>    sqlSession.rollback();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">(<span class="hljs-type">boolean</span> force)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> localSqlSession.get();<br>    <span class="hljs-keyword">if</span> (sqlSession == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionException</span>(<span class="hljs-string">&quot;Error:  Cannot rollback.  No managed session is started.&quot;</span>);<br>    &#125;<br>    sqlSession.rollback(force);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> List&lt;BatchResult&gt; <span class="hljs-title function_">flushStatements</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> localSqlSession.get();<br>    <span class="hljs-keyword">if</span> (sqlSession == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionException</span>(<span class="hljs-string">&quot;Error:  Cannot rollback.  No managed session is started.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> sqlSession.flushStatements();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> localSqlSession.get();<br>    <span class="hljs-keyword">if</span> (sqlSession == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionException</span>(<span class="hljs-string">&quot;Error:  Cannot close.  No managed session is started.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>      sqlSession.close();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      localSqlSession.set(<span class="hljs-literal">null</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 代理模式</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SqlSessionInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SqlSessionInterceptor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// Prevent Synthetic Access</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>      <span class="hljs-keyword">final</span> <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> SqlSessionManager.<span class="hljs-built_in">this</span>.localSqlSession.get();<br>      <span class="hljs-keyword">if</span> (sqlSession != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 如果当前线程已经有SqlSession了，则直接调用</span><br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-keyword">return</span> method.invoke(sqlSession, args);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>          <span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(t);<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 如果当前线程没有SqlSession，先打开session，再调用,最后提交</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">SqlSession</span> <span class="hljs-variable">autoSqlSession</span> <span class="hljs-operator">=</span> openSession();<br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(autoSqlSession, args);<br>          autoSqlSession.commit();<br>          <span class="hljs-keyword">return</span> result;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>          autoSqlSession.rollback();<br>          <span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(t);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>          autoSqlSession.close();<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><p><code>ResultContext</code>和<code>ResultHandler</code>在这个模块只定义了一个接口，于是我打算同它们的实现一起讲；而<code>Configuration</code>则是把mybatis能放的东西都放进去了，留在后面讲吧</p>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>9-transaction</title>
    <link href="/2023/07/12/9-transaction/"/>
    <url>/2023/07/12/9-transaction/</url>
    
    <content type="html"><![CDATA[<h4 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h4><p>​ Transaction包装了一个数据库连接，处理连接的生命周期，包括:创建、准备、提交&#x2F;回滚和关闭。在Mybatis中有两种事物类型（也就是 type&#x3D;”[JDBC|MANAGED]”）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Transaction</span> &#123; <br><br>  <span class="hljs-comment">// 获取数据库连接</span><br>  Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException;<br><br>  <span class="hljs-comment">// 提交内部的数据库连接</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException;<br><br>  <span class="hljs-comment">// 回滚内部的数据库连接</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException;<br><br>  <span class="hljs-comment">// 关闭内部的数据库连接</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="TransactionFactory"><a href="#TransactionFactory" class="headerlink" title="TransactionFactory"></a>TransactionFactory</h4><p>​ 事务工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TransactionFactory</span> &#123; <br><br>  <span class="hljs-comment">// 设置事务工厂的自定义属性</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties props)</span>; <br><br>  <span class="hljs-comment">// 根据Connection创建Transaction</span><br>  Transaction <span class="hljs-title function_">newTransaction</span><span class="hljs-params">(Connection conn)</span>;<br><br>  <span class="hljs-comment">// 根据数据源和事务隔离级别创建Transaction</span><br>  Transaction <span class="hljs-title function_">newTransaction</span><span class="hljs-params">(DataSource dataSource, TransactionIsolationLevel level, <span class="hljs-type">boolean</span> autoCommit)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="JdbcTransaction"><a href="#JdbcTransaction" class="headerlink" title="JdbcTransaction"></a>JdbcTransaction</h4><p>​ JdbcTransaction直接使用JDBC提交和回滚功能。它依赖从数据源检索的连接来管理事务的范围。</p><p>​ 它会延迟连接获取知道<code>getConnection()</code>方法被调用。当autocommit打开的时候忽略commit或rollback请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcTransaction</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Transaction</span> &#123; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LogFactory.getLog(JdbcTransaction.class);<br><br>  <span class="hljs-keyword">protected</span> Connection connection;<br>  <span class="hljs-keyword">protected</span> DataSource dataSource;<br>  <span class="hljs-keyword">protected</span> TransactionIsolationLevel level;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> autoCommmit;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">JdbcTransaction</span><span class="hljs-params">(DataSource ds, TransactionIsolationLevel desiredLevel, <span class="hljs-type">boolean</span> desiredAutoCommit)</span> &#123;<br>    dataSource = ds;<br>    level = desiredLevel;<br>    autoCommmit = desiredAutoCommit;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">JdbcTransaction</span><span class="hljs-params">(Connection connection)</span> &#123;<br>    <span class="hljs-built_in">this</span>.connection = connection;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-comment">// 延迟获取数据库连接</span><br>  <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">if</span> (connection == <span class="hljs-literal">null</span>) &#123;<br>      openConnection();<br>    &#125;<br>    <span class="hljs-keyword">return</span> connection;<br>  &#125;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">openConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>      log.debug(<span class="hljs-string">&quot;Opening JDBC Connection&quot;</span>);<br>    &#125;<br>    connection = dataSource.getConnection();<br>    <span class="hljs-keyword">if</span> (level != <span class="hljs-literal">null</span>) &#123;<br>      connection.setTransactionIsolation(level.getLevel());<br>    &#125;<br>    <span class="hljs-comment">// 设置 AutoCommit</span><br>    setDesiredAutoCommit(autoCommmit);<br>  &#125;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDesiredAutoCommit</span><span class="hljs-params">(<span class="hljs-type">boolean</span> desiredAutoCommit)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 和原来的比一下，再设置autocommit，应该是考虑多到了 connection.setAutoCommit() 带来的额外性能开销</span><br>      <span class="hljs-keyword">if</span> (connection.getAutoCommit() != desiredAutoCommit) &#123;<br>        <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>          log.debug(<span class="hljs-string">&quot;Setting autocommit to &quot;</span> + desiredAutoCommit + <span class="hljs-string">&quot; on JDBC Connection [&quot;</span> + connection + <span class="hljs-string">&quot;]&quot;</span>);<br>        &#125;<br>        connection.setAutoCommit(desiredAutoCommit);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>      <span class="hljs-comment">// Only a very poorly implemented driver would fail here,</span><br>      <span class="hljs-comment">// and there&#x27;s not much we can do about that.</span><br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransactionException</span>(<span class="hljs-string">&quot;Error configuring AutoCommit.  &quot;</span><br>          + <span class="hljs-string">&quot;Your driver may not support getAutoCommit() or setAutoCommit(). &quot;</span><br>          + <span class="hljs-string">&quot;Requested setting: &quot;</span> + desiredAutoCommit + <span class="hljs-string">&quot;.  Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-comment">// commit 和 rollback 均在 autoCommmit = false才真正执行</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">if</span> (connection != <span class="hljs-literal">null</span> &amp;&amp; !connection.getAutoCommit()) &#123;<br>      <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>        log.debug(<span class="hljs-string">&quot;Committing JDBC Connection [&quot;</span> + connection + <span class="hljs-string">&quot;]&quot;</span>);<br>      &#125;<br>      connection.commit();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">if</span> (connection != <span class="hljs-literal">null</span> &amp;&amp; !connection.getAutoCommit()) &#123;<br>      <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>        log.debug(<span class="hljs-string">&quot;Rolling back JDBC Connection [&quot;</span> + connection + <span class="hljs-string">&quot;]&quot;</span>);<br>      &#125;<br>      connection.rollback();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-comment">// 关闭数据库连接</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">if</span> (connection != <span class="hljs-literal">null</span>) &#123;<br>      resetAutoCommit();<br>      <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>        log.debug(<span class="hljs-string">&quot;Closing JDBC Connection [&quot;</span> + connection + <span class="hljs-string">&quot;]&quot;</span>);<br>      &#125;<br>      connection.close();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resetAutoCommit</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">if</span> (!connection.getAutoCommit()) &#123;<br>        <span class="hljs-comment">// MyBatis does not call commit/rollback on a connection if just selects were performed.</span><br>        <span class="hljs-comment">// Some databases start transactions with select statements</span><br>        <span class="hljs-comment">// and they mandate a commit/rollback before closing the connection.</span><br>        <span class="hljs-comment">// A workaround is setting the autocommit to true before closing the connection.</span><br>        <span class="hljs-comment">// Sybase throws an exception here.</span><br>        <span class="hljs-comment">// 如果只执行查询，MyBatis不会在连接上调用提交/回滚。</span><br>        <span class="hljs-comment">// 然而一些数据库使用select语句启动事务，并在关闭连接之前强制执行提交/回滚。</span><br>        <span class="hljs-comment">// 一种解决方法是在关闭连接之前将自动提交设置为true。</span><br>        <span class="hljs-comment">// Sybase在这里抛出一个异常。</span><br>        <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>          log.debug(<span class="hljs-string">&quot;Resetting autocommit to true on JDBC Connection [&quot;</span> + connection + <span class="hljs-string">&quot;]&quot;</span>);<br>        &#125;<br>        connection.setAutoCommit(<span class="hljs-literal">true</span>);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>      log.debug(<span class="hljs-string">&quot;Error resetting autocommit to true &quot;</span><br>          + <span class="hljs-string">&quot;before closing the connection.  Cause: &quot;</span> + e);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="JdbcTransactionFactory"><a href="#JdbcTransactionFactory" class="headerlink" title="JdbcTransactionFactory"></a>JdbcTransactionFactory</h4><p>​ JdbcTransaction工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcTransactionFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TransactionFactory</span> &#123; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties props)</span> &#123;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Transaction <span class="hljs-title function_">newTransaction</span><span class="hljs-params">(Connection conn)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTransaction</span>(conn);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Transaction <span class="hljs-title function_">newTransaction</span><span class="hljs-params">(DataSource ds, TransactionIsolationLevel level, <span class="hljs-type">boolean</span> autoCommit)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTransaction</span>(ds, level, autoCommit);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ManagedTransaction"><a href="#ManagedTransaction" class="headerlink" title="ManagedTransaction"></a>ManagedTransaction</h4><p>​ ManagedTransaction让容器管理事务的整个生命周期。和JdbcTransaction一样，延迟获取数据库连接直到getConnection()方法被调用</p><p>​ 默认情况下，它会关闭连接，但可以将 closeConnection 属性设置为 false不关闭连接。</p><p>​ 如果使用mybatis-spring的话，不需要配置transactionManager ,因为mybatis-spring覆盖了mybatis里的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ManagedTransaction</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Transaction</span> &#123; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LogFactory.getLog(ManagedTransaction.class);<br><br>  <span class="hljs-keyword">private</span> DataSource dataSource;<br>  <span class="hljs-keyword">private</span> TransactionIsolationLevel level;<br>  <span class="hljs-keyword">private</span> Connection connection;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> closeConnection;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">ManagedTransaction</span><span class="hljs-params">(Connection connection, <span class="hljs-type">boolean</span> closeConnection)</span> &#123;<br>    <span class="hljs-built_in">this</span>.connection = connection;<br>    <span class="hljs-built_in">this</span>.closeConnection = closeConnection;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">ManagedTransaction</span><span class="hljs-params">(DataSource ds, TransactionIsolationLevel level, <span class="hljs-type">boolean</span> closeConnection)</span> &#123;<br>    <span class="hljs-built_in">this</span>.dataSource = ds;<br>    <span class="hljs-built_in">this</span>.level = level;<br>    <span class="hljs-built_in">this</span>.closeConnection = closeConnection;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.connection == <span class="hljs-literal">null</span>) &#123;<br>      openConnection();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.connection;<br>  &#125;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">openConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>      log.debug(<span class="hljs-string">&quot;Opening JDBC Connection&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">this</span>.connection = <span class="hljs-built_in">this</span>.dataSource.getConnection();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.level != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-built_in">this</span>.connection.setTransactionIsolation(<span class="hljs-built_in">this</span>.level.getLevel());<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 托管事务commit和rollback都是不做事的，交给容器管理</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">// Does nothing</span><br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">// Does nothing</span><br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">// 如果properties文件配置了closeConnection=false,则不关闭连接</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.closeConnection &amp;&amp; <span class="hljs-built_in">this</span>.connection != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>        log.debug(<span class="hljs-string">&quot;Closing JDBC Connection [&quot;</span> + <span class="hljs-built_in">this</span>.connection + <span class="hljs-string">&quot;]&quot;</span>);<br>      &#125;<br>      <span class="hljs-built_in">this</span>.connection.close();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ManagedTransactionFactory"><a href="#ManagedTransactionFactory" class="headerlink" title="ManagedTransactionFactory"></a>ManagedTransactionFactory</h4><p>​ 托管事务工厂,默认情况下它会关闭连接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ManagedTransactionFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TransactionFactory</span> &#123; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">closeConnection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties props)</span> &#123;<br>    <span class="hljs-comment">// 设置closeConnection属性</span><br>    <span class="hljs-keyword">if</span> (props != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">closeConnectionProperty</span> <span class="hljs-operator">=</span> props.getProperty(<span class="hljs-string">&quot;closeConnection&quot;</span>);<br>      <span class="hljs-keyword">if</span> (closeConnectionProperty != <span class="hljs-literal">null</span>) &#123;<br>        closeConnection = Boolean.valueOf(closeConnectionProperty);<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Transaction <span class="hljs-title function_">newTransaction</span><span class="hljs-params">(Connection conn)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ManagedTransaction</span>(conn, closeConnection);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Transaction <span class="hljs-title function_">newTransaction</span><span class="hljs-params">(DataSource ds, TransactionIsolationLevel level, <span class="hljs-type">boolean</span> autoCommit)</span> &#123;<br>    <span class="hljs-comment">// Silently ignores autocommit and isolation level, as managed transactions are entirely</span><br>    <span class="hljs-comment">// controlled by an external manager.  It&#x27;s silently ignored so that</span><br>    <span class="hljs-comment">// code remains portable between managed and unmanaged configurations.</span><br>    <span class="hljs-comment">// 静默忽略自动提交和隔离级别，因为托管事务完全由外部管理器控制。</span><br>    <span class="hljs-comment">// 它会被忽略，这样代码就可以在托管和非托管配置之间移植。</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ManagedTransaction</span>(ds, level, closeConnection);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8-datasource</title>
    <link href="/2023/07/11/8-datasource/"/>
    <url>/2023/07/11/8-datasource/</url>
    
    <content type="html"><![CDATA[<h4 id="DataSourceFactory"><a href="#DataSourceFactory" class="headerlink" title="DataSourceFactory"></a>DataSourceFactory</h4><p>​ 数据源工厂，有三种内置的数据源类型 UNPOOLED POOLED JNDI</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DataSourceFactory</span> &#123;<br><br>  <span class="hljs-comment">// 设置数据源属性,被XMLConfigBuilder所调用</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties props)</span>;<br><br>  <span class="hljs-comment">// 生产数据源,直接得到javax.sql.DataSource</span><br>  DataSource <span class="hljs-title function_">getDataSource</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="JndiDataSourceFactory"><a href="#JndiDataSourceFactory" class="headerlink" title="JndiDataSourceFactory"></a>JndiDataSourceFactory</h4><p>​ JNDI数据源工厂。这个数据源的实现是为了配合如Spring或应用服务器这类的容器使用, 容器可以集中或在外部配置数据源,然后放置一个JNDI上下文的引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JndiDataSourceFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DataSourceFactory</span> &#123; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">INITIAL_CONTEXT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;initial_context&quot;</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DATA_SOURCE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;data_source&quot;</span>;<br><br>  <span class="hljs-comment">// 和其他数据源配置相似, 它也可以通过名为 “env.” 的前缀直接向初始上下文发送属性。 比如:</span><br>  <span class="hljs-comment">// env.encoding=UTF8</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ENV_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;env.&quot;</span>;<br><br>  <span class="hljs-keyword">private</span> DataSource dataSource;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Properties <span class="hljs-title function_">getEnvProperties</span><span class="hljs-params">(Properties allProps)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">PREFIX</span> <span class="hljs-operator">=</span> ENV_PREFIX;<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">contextProperties</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 从 allProps 中抽出前缀为 env. 的属性组成一个新的 Properties</span><br>    <span class="hljs-keyword">for</span> (Entry&lt;Object, Object&gt; entry : allProps.entrySet()) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (String) entry.getKey();<br>      <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (String) entry.getValue();<br>      <span class="hljs-keyword">if</span> (key.startsWith(PREFIX)) &#123;<br>        <span class="hljs-keyword">if</span> (contextProperties == <span class="hljs-literal">null</span>) &#123;<br>          contextProperties = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        &#125;<br>        contextProperties.put(key.substring(PREFIX.length()), value);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> contextProperties;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties properties)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">InitialContext</span> <span class="hljs-variable">initCtx</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>      <span class="hljs-type">Properties</span> <span class="hljs-variable">env</span> <span class="hljs-operator">=</span> getEnvProperties(properties);<br>      <span class="hljs-keyword">if</span> (env == <span class="hljs-literal">null</span>) &#123;<br>        initCtx = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        initCtx = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>(env);<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (properties.containsKey(INITIAL_CONTEXT)<br>          &amp;&amp; properties.containsKey(DATA_SOURCE)) &#123;<br>        <span class="hljs-type">Context</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> (Context) initCtx.lookup(properties.getProperty(INITIAL_CONTEXT));<br>        dataSource = (DataSource) ctx.lookup(properties.getProperty(DATA_SOURCE));<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (properties.containsKey(DATA_SOURCE)) &#123;<br>        dataSource = (DataSource) initCtx.lookup(properties.getProperty(DATA_SOURCE));<br>      &#125;<br><br>    &#125; <span class="hljs-keyword">catch</span> (NamingException e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceException</span>(<span class="hljs-string">&quot;There was an error configuring JndiDataSourceTransactionPool. Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">getDataSource</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> dataSource;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="UnpooledDataSourceFactory"><a href="#UnpooledDataSourceFactory" class="headerlink" title="UnpooledDataSourceFactory"></a>UnpooledDataSourceFactory</h4><p>​ 非池化的数据源工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnpooledDataSourceFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DataSourceFactory</span> &#123; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DRIVER_PROPERTY_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;driver.&quot;</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DRIVER_PROPERTY_PREFIX_LENGTH</span> <span class="hljs-operator">=</span> DRIVER_PROPERTY_PREFIX.length();<br><br>  <span class="hljs-keyword">protected</span> DataSource dataSource;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnpooledDataSourceFactory</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.dataSource = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnpooledDataSource</span>();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties properties)</span> &#123;<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">driverProperties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    <span class="hljs-comment">// 用到了之前的MetaObject</span><br>    <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaDataSource</span> <span class="hljs-operator">=</span> SystemMetaObject.forObject(dataSource);<br>    <span class="hljs-keyword">for</span> (Object key : properties.keySet()) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">propertyName</span> <span class="hljs-operator">=</span> (String) key;<br>      <span class="hljs-comment">// 作为可选项,你可以传递数据库驱动的属性。要这样做,属性的前缀是以“driver.”开 头的,例如</span><br>      <span class="hljs-comment">// driver.encoding=UTF8</span><br>      <span class="hljs-keyword">if</span> (propertyName.startsWith(DRIVER_PROPERTY_PREFIX)) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> properties.getProperty(propertyName);<br>        driverProperties.setProperty(propertyName.substring(DRIVER_PROPERTY_PREFIX_LENGTH), value);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (metaDataSource.hasSetter(propertyName)) &#123;<br>        <span class="hljs-comment">// 如果UnpooledDataSource有相应的setter函数，则设置它</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (String) properties.get(propertyName);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">convertedValue</span> <span class="hljs-operator">=</span> convertValue(metaDataSource, propertyName, value);<br>        metaDataSource.setValue(propertyName, convertedValue);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataSourceException</span>(<span class="hljs-string">&quot;Unknown DataSource property: &quot;</span> + propertyName);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (driverProperties.size() &gt; <span class="hljs-number">0</span>) &#123;<br>      metaDataSource.setValue(<span class="hljs-string">&quot;driverProperties&quot;</span>, driverProperties);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 根据setter的类型,将配置文件中的值强转成相应的类型</span><br>  <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">convertValue</span><span class="hljs-params">(MetaObject metaDataSource, String propertyName, String value)</span> &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">convertedValue</span> <span class="hljs-operator">=</span> value;<br>    Class&lt;?&gt; targetType = metaDataSource.getSetterType(propertyName);<br>    <span class="hljs-comment">// 这里应该是只考虑转换这几种类型</span><br>    <span class="hljs-keyword">if</span> (targetType == Integer.class || targetType == <span class="hljs-type">int</span>.class) &#123;<br>      convertedValue = Integer.valueOf(value);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (targetType == Long.class || targetType == <span class="hljs-type">long</span>.class) &#123;<br>      convertedValue = Long.valueOf(value);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (targetType == Boolean.class || targetType == <span class="hljs-type">boolean</span>.class) &#123;<br>      convertedValue = Boolean.valueOf(value);<br>    &#125;<br>    <span class="hljs-keyword">return</span> convertedValue;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">getDataSource</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> dataSource;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="UnpooledDataSource"><a href="#UnpooledDataSource" class="headerlink" title="UnpooledDataSource"></a>UnpooledDataSource</h4><p>​ 非池化的数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnpooledDataSource</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DataSource</span> &#123; <br><br>  <span class="hljs-keyword">private</span> ClassLoader driverClassLoader;<br><br>  <span class="hljs-comment">// 作为可选项,你可以传递数据库驱动的属性。要这样做,属性的前缀是以“driver.”开 头的,例如</span><br>  <span class="hljs-comment">// driver.encoding=UTF8</span><br>  <span class="hljs-keyword">private</span> Properties driverProperties;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, Driver&gt; registeredDrivers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;String, Driver&gt;();<br><br>  <span class="hljs-keyword">private</span> String driver;<br>  <span class="hljs-keyword">private</span> String url;<br>  <span class="hljs-keyword">private</span> String username;<br>  <span class="hljs-keyword">private</span> String password;<br><br>  <span class="hljs-keyword">private</span> Boolean autoCommit;<br>  <span class="hljs-comment">// 默认的事物隔离级别</span><br>  <span class="hljs-keyword">private</span> Integer defaultTransactionIsolationLevel;<br><br>  <span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-comment">// 读取当前调用者可以访问的所有当前已经加载的JDBC驱动程序的枚举，放入 registeredDrivers 中</span><br>    Enumeration&lt;Driver&gt; drivers = DriverManager.getDrivers();<br>    <span class="hljs-keyword">while</span> (drivers.hasMoreElements()) &#123;<br>      <span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> drivers.nextElement();<br>      registeredDrivers.put(driver.getClass().getName(), driver);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnpooledDataSource</span><span class="hljs-params">()</span> &#123;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnpooledDataSource</span><span class="hljs-params">(String driver, String url, String username, String password)</span> &#123;<br>    <span class="hljs-built_in">this</span>.driver = driver;<br>    <span class="hljs-built_in">this</span>.url = url;<br>    <span class="hljs-built_in">this</span>.username = username;<br>    <span class="hljs-built_in">this</span>.password = password;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnpooledDataSource</span><span class="hljs-params">(String driver, String url, Properties driverProperties)</span> &#123;<br>    <span class="hljs-built_in">this</span>.driver = driver;<br>    <span class="hljs-built_in">this</span>.url = url;<br>    <span class="hljs-built_in">this</span>.driverProperties = driverProperties;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnpooledDataSource</span><span class="hljs-params">(ClassLoader driverClassLoader, String driver, String url, String username, String password)</span> &#123;<br>    <span class="hljs-built_in">this</span>.driverClassLoader = driverClassLoader;<br>    <span class="hljs-built_in">this</span>.driver = driver;<br>    <span class="hljs-built_in">this</span>.url = url;<br>    <span class="hljs-built_in">this</span>.username = username;<br>    <span class="hljs-built_in">this</span>.password = password;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnpooledDataSource</span><span class="hljs-params">(ClassLoader driverClassLoader, String driver, String url, Properties driverProperties)</span> &#123;<br>    <span class="hljs-built_in">this</span>.driverClassLoader = driverClassLoader;<br>    <span class="hljs-built_in">this</span>.driver = driver;<br>    <span class="hljs-built_in">this</span>.url = url;<br>    <span class="hljs-built_in">this</span>.driverProperties = driverProperties;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">return</span> doGetConnection(username, password);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">(String username, String password)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">return</span> doGetConnection(username, password);<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> Connection <span class="hljs-title function_">doGetConnection</span><span class="hljs-params">(String username, String password)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    <span class="hljs-keyword">if</span> (driverProperties != <span class="hljs-literal">null</span>) &#123;<br>      props.putAll(driverProperties);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (username != <span class="hljs-literal">null</span>) &#123;<br>      props.setProperty(<span class="hljs-string">&quot;user&quot;</span>, username);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (password != <span class="hljs-literal">null</span>) &#123;<br>      props.setProperty(<span class="hljs-string">&quot;password&quot;</span>, password);<br>    &#125;<br>    <span class="hljs-keyword">return</span> doGetConnection(props);<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> Connection <span class="hljs-title function_">doGetConnection</span><span class="hljs-params">(Properties properties)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    initializeDriver();<br>    <span class="hljs-comment">// 属性的前缀是以“driver.”开头的,它是通过DriverManager.getConnection(url,driverProperties)方法传递给数据库驱动</span><br>    <span class="hljs-comment">// 在 DriverManager.getConnection 方法里遍历 registeredDrivers ，尝试用每个驱动获取连接，直到获取到数据库连接</span><br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, properties);<br>    configureConnection(connection);<br>    <span class="hljs-keyword">return</span> connection;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initializeDriver</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">// 这里便是大家熟悉的初学JDBC时的那几句话了 Class.forName newInstance()</span><br>    <span class="hljs-keyword">if</span> (!registeredDrivers.containsKey(driver)) &#123;<br>      Class&lt;?&gt; driverType;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (driverClassLoader != <span class="hljs-literal">null</span>) &#123;<br>          driverType = Class.forName(driver, <span class="hljs-literal">true</span>, driverClassLoader);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          driverType = Resources.classForName(driver);<br>        &#125;<br>        <span class="hljs-comment">// DriverManager requires the driver to be loaded via the system ClassLoader.</span><br>        <span class="hljs-comment">// http://www.kfu.com/~nsayer/Java/dyn-jdbc.html</span><br>        <span class="hljs-type">Driver</span> <span class="hljs-variable">driverInstance</span> <span class="hljs-operator">=</span> (Driver)driverType.newInstance();<br>        DriverManager.registerDriver(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DriverProxy</span>(driverInstance));<br>        registeredDrivers.put(driver, driverInstance);<br>      &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQLException</span>(<span class="hljs-string">&quot;Error setting driver on UnpooledDataSource. Cause: &quot;</span> + e);<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 配置 AutoCommit 和 TransactionIsolation</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureConnection</span><span class="hljs-params">(Connection conn)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">if</span> (autoCommit != <span class="hljs-literal">null</span> &amp;&amp; autoCommit != conn.getAutoCommit()) &#123;<br>      conn.setAutoCommit(autoCommit);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (defaultTransactionIsolationLevel != <span class="hljs-literal">null</span>) &#123;<br>      conn.setTransactionIsolation(defaultTransactionIsolationLevel);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 驱动代理</span><br><span class="hljs-comment">   * 只暴露了Driver接口中定义的方法</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DriverProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Driver</span> &#123;<br>    <span class="hljs-keyword">private</span> Driver driver;<br><br>    DriverProxy(Driver d) &#123;<br>      <span class="hljs-built_in">this</span>.driver = d;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">acceptsURL</span><span class="hljs-params">(String u)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.driver.acceptsURL(u);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">connect</span><span class="hljs-params">(String u, Properties p)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.driver.connect(u, p);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMajorVersion</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.driver.getMajorVersion();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMinorVersion</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.driver.getMinorVersion();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> DriverPropertyInfo[] getPropertyInfo(String u, Properties p) <span class="hljs-keyword">throws</span> SQLException &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.driver.getPropertyInfo(u, p);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">jdbcCompliant</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.driver.jdbcCompliant();<br>    &#125;<br><br>    <span class="hljs-comment">// @Override only valid jdk7+</span><br>    <span class="hljs-keyword">public</span> Logger <span class="hljs-title function_">getParentLogger</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">unwrap</span><span class="hljs-params">(Class&lt;T&gt; iface)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQLException</span>(getClass().getName() + <span class="hljs-string">&quot; is not a wrapper.&quot;</span>);<br>  &#125;  <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isWrapperFor</span><span class="hljs-params">(Class&lt;?&gt; iface)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// @Override only valid jdk7+</span><br>  <span class="hljs-keyword">public</span> Logger <span class="hljs-title function_">getParentLogger</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// requires JDK version 1.6</span><br>    <span class="hljs-keyword">return</span> Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);<br>  &#125;<br><br>  <span class="hljs-comment">// 剩下set、get方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="PooledDataSourceFactory"><a href="#PooledDataSourceFactory" class="headerlink" title="PooledDataSourceFactory"></a>PooledDataSourceFactory</h4><p>​ 池化的数据源工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PooledDataSourceFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">UnpooledDataSourceFactory</span> &#123;<br><br>  <span class="hljs-comment">// 和UnpooledDataSourceFactory一样，只是数据源换成了PooledDataSource</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">PooledDataSourceFactory</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.dataSource = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PooledDataSource</span>();<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="PoolState"><a href="#PoolState" class="headerlink" title="PoolState"></a>PoolState</h4><p>​ 池状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PoolState</span> &#123; <br><br>  <span class="hljs-keyword">protected</span> PooledDataSource dataSource;<br><br>  <span class="hljs-comment">// 空闲的连接</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> List&lt;PooledConnection&gt; idleConnections = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;PooledConnection&gt;();<br>  <span class="hljs-comment">// 活动的连接</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> List&lt;PooledConnection&gt; activeConnections = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;PooledConnection&gt;();<br><br>  <span class="hljs-comment">//----------以下是一些统计信息----------</span><br>  <span class="hljs-comment">// 请求次数</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-variable">requestCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">// 总请求时间</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-variable">accumulatedRequestTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-variable">accumulatedCheckoutTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-variable">claimedOverdueConnectionCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-variable">accumulatedCheckoutTimeOfOverdueConnections</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">// 总等待时间</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-variable">accumulatedWaitTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">// 要等待的次数</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-variable">hadToWaitCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">// 坏的连接次数</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-variable">badConnectionCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">PoolState</span><span class="hljs-params">(PooledDataSource dataSource)</span> &#123;<br>    <span class="hljs-built_in">this</span>.dataSource = dataSource;<br>  &#125;<br><br>  <span class="hljs-comment">// 下面全是一些get方法，并且都加了锁，这些方法只有在测试的时候使用过</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getRequestCount</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> requestCount;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getAverageRequestTime</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> requestCount == <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : accumulatedRequestTime / requestCount;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getAverageWaitTime</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> hadToWaitCount == <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : accumulatedWaitTime / hadToWaitCount;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getHadToWaitCount</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> hadToWaitCount;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getBadConnectionCount</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> badConnectionCount;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getClaimedOverdueConnectionCount</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> claimedOverdueConnectionCount;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getAverageOverdueCheckoutTime</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> claimedOverdueConnectionCount == <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : accumulatedCheckoutTimeOfOverdueConnections / claimedOverdueConnectionCount;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getAverageCheckoutTime</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> requestCount == <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : accumulatedCheckoutTime / requestCount;<br>  &#125;<br><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getIdleConnectionCount</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> idleConnections.size();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getActiveConnectionCount</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> activeConnections.size();<br>  &#125;<br><br>  <span class="hljs-comment">// 打印统计信息，可以供性能优化用</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    builder.append(<span class="hljs-string">&quot;\n===CONFINGURATION==============================================&quot;</span>);<br>    builder.append(<span class="hljs-string">&quot;\n jdbcDriver                     &quot;</span>).append(dataSource.getDriver());<br>    builder.append(<span class="hljs-string">&quot;\n jdbcUrl                        &quot;</span>).append(dataSource.getUrl());<br>    builder.append(<span class="hljs-string">&quot;\n jdbcUsername                   &quot;</span>).append(dataSource.getUsername());<br>    builder.append(<span class="hljs-string">&quot;\n jdbcPassword                   &quot;</span>).append((dataSource.getPassword() == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;NULL&quot;</span> : <span class="hljs-string">&quot;************&quot;</span>));<br>    builder.append(<span class="hljs-string">&quot;\n poolMaxActiveConnections       &quot;</span>).append(dataSource.poolMaximumActiveConnections);<br>    builder.append(<span class="hljs-string">&quot;\n poolMaxIdleConnections         &quot;</span>).append(dataSource.poolMaximumIdleConnections);<br>    builder.append(<span class="hljs-string">&quot;\n poolMaxCheckoutTime            &quot;</span>).append(dataSource.poolMaximumCheckoutTime);<br>    builder.append(<span class="hljs-string">&quot;\n poolTimeToWait                 &quot;</span>).append(dataSource.poolTimeToWait);<br>    builder.append(<span class="hljs-string">&quot;\n poolPingEnabled                &quot;</span>).append(dataSource.poolPingEnabled);<br>    builder.append(<span class="hljs-string">&quot;\n poolPingQuery                  &quot;</span>).append(dataSource.poolPingQuery);<br>    builder.append(<span class="hljs-string">&quot;\n poolPingConnectionsNotUsedFor  &quot;</span>).append(dataSource.poolPingConnectionsNotUsedFor);<br>    builder.append(<span class="hljs-string">&quot;\n ---STATUS-----------------------------------------------------&quot;</span>);<br>    builder.append(<span class="hljs-string">&quot;\n activeConnections              &quot;</span>).append(getActiveConnectionCount());<br>    builder.append(<span class="hljs-string">&quot;\n idleConnections                &quot;</span>).append(getIdleConnectionCount());<br>    builder.append(<span class="hljs-string">&quot;\n requestCount                   &quot;</span>).append(getRequestCount());<br>    builder.append(<span class="hljs-string">&quot;\n averageRequestTime             &quot;</span>).append(getAverageRequestTime());<br>    builder.append(<span class="hljs-string">&quot;\n averageCheckoutTime            &quot;</span>).append(getAverageCheckoutTime());<br>    builder.append(<span class="hljs-string">&quot;\n claimedOverdue                 &quot;</span>).append(getClaimedOverdueConnectionCount());<br>    builder.append(<span class="hljs-string">&quot;\n averageOverdueCheckoutTime     &quot;</span>).append(getAverageOverdueCheckoutTime());<br>    builder.append(<span class="hljs-string">&quot;\n hadToWait                      &quot;</span>).append(getHadToWaitCount());<br>    builder.append(<span class="hljs-string">&quot;\n averageWaitTime                &quot;</span>).append(getAverageWaitTime());<br>    builder.append(<span class="hljs-string">&quot;\n badConnectionCount             &quot;</span>).append(getBadConnectionCount());<br>    builder.append(<span class="hljs-string">&quot;\n===============================================================&quot;</span>);<br>    <span class="hljs-keyword">return</span> builder.toString();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="PooledDataSource"><a href="#PooledDataSource" class="headerlink" title="PooledDataSource"></a>PooledDataSource</h4><p>​ 有连接池的数据源，这是mybatis自己实现的连接池。其他还有诸如C3P0的<code>com.mchange.v2.c3p0.ComboPooledDataSource</code>,DBCP等</p><p>还有一些人喜欢自己用<code>apache commons pool</code>写一个连接池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PooledDataSource</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DataSource</span> &#123; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LogFactory.getLog(PooledDataSource.class);<br><br>  <span class="hljs-comment">// 有一个池状态</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">PoolState</span> <span class="hljs-variable">state</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PoolState</span>(<span class="hljs-built_in">this</span>);<br><br>  <span class="hljs-comment">// 里面有一个UnpooledDataSource</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> UnpooledDataSource dataSource;<br><br>  <span class="hljs-comment">// OPTIONAL CONFIGURATION FIELDS</span><br>  <span class="hljs-comment">// 最大活跃连接数</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-variable">poolMaximumActiveConnections</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>  <span class="hljs-comment">// 最大空闲连接数</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-variable">poolMaximumIdleConnections</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><br>  <span class="hljs-comment">// 在被强制返回之前,池中连接被检查的时间</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-variable">poolMaximumCheckoutTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">20000</span>;<br><br>  <span class="hljs-comment">// 没有获取到数据库连接时的最大等待时间</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-variable">poolTimeToWait</span> <span class="hljs-operator">=</span> <span class="hljs-number">20000</span>;<br><br>  <span class="hljs-comment">// 发送到数据库的侦测查询,用来验证连接是否正常工作,并且准备接受请求。默认是“NO PING QUERY SET” ,</span><br>  <span class="hljs-comment">// 许多数据库驱动连接会失败</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">String</span> <span class="hljs-variable">poolPingQuery</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;NO PING QUERY SET&quot;</span>;<br><br>  <span class="hljs-comment">// 开启或禁用侦测查询</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">poolPingEnabled</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>  <span class="hljs-comment">// 用来配置 poolPingQuery 多长时间被用一次</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-variable">poolPingConnectionsNotUsedFor</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>  <span class="hljs-comment">// 标识连接的hash码</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> expectedConnectionTypeCode;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">PooledDataSource</span><span class="hljs-params">()</span> &#123;<br>    dataSource = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnpooledDataSource</span>();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">PooledDataSource</span><span class="hljs-params">(String driver, String url, String username, String password)</span> &#123;<br>    dataSource = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnpooledDataSource</span>(driver, url, username, password);<br>    expectedConnectionTypeCode = assembleConnectionTypeCode(dataSource.getUrl(), dataSource.getUsername(), dataSource.getPassword());<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">PooledDataSource</span><span class="hljs-params">(String driver, String url, Properties driverProperties)</span> &#123;<br>    dataSource = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnpooledDataSource</span>(driver, url, driverProperties);<br>    expectedConnectionTypeCode = assembleConnectionTypeCode(dataSource.getUrl(), dataSource.getUsername(), dataSource.getPassword());<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">PooledDataSource</span><span class="hljs-params">(ClassLoader driverClassLoader, String driver, String url, String username, String password)</span> &#123;<br>    dataSource = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnpooledDataSource</span>(driverClassLoader, driver, url, username, password);<br>    expectedConnectionTypeCode = assembleConnectionTypeCode(dataSource.getUrl(), dataSource.getUsername(), dataSource.getPassword());<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">PooledDataSource</span><span class="hljs-params">(ClassLoader driverClassLoader, String driver, String url, Properties driverProperties)</span> &#123;<br>    dataSource = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnpooledDataSource</span>(driverClassLoader, driver, url, driverProperties);<br>    expectedConnectionTypeCode = assembleConnectionTypeCode(dataSource.getUrl(), dataSource.getUsername(), dataSource.getPassword());<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">// 覆盖了DataSource.getConnection方法，每次都是pop一个Connection，即从池中取出一个来</span><br>    <span class="hljs-keyword">return</span> popConnection(dataSource.getUsername(), dataSource.getPassword()).getProxyConnection();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">(String username, String password)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">return</span> popConnection(username, password).getProxyConnection();<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> PooledConnection <span class="hljs-title function_">popConnection</span><span class="hljs-params">(String username, String password)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">countedWait</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">PooledConnection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">localBadConnectionCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 最外面是while死循环，如果一直拿不到connection，则不断尝试</span><br>    <span class="hljs-keyword">while</span> (conn == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">synchronized</span> (state) &#123;<br>        <span class="hljs-keyword">if</span> (!state.idleConnections.isEmpty()) &#123;<br>          <span class="hljs-comment">// 如果有空闲的连接的话</span><br>          <span class="hljs-comment">// Pool has available connection</span><br>          <span class="hljs-comment">// 删除空闲列表里第一个，返回</span><br>          conn = state.idleConnections.remove(<span class="hljs-number">0</span>);<br>          <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>            log.debug(<span class="hljs-string">&quot;Checked out connection &quot;</span> + conn.getRealHashCode() + <span class="hljs-string">&quot; from pool.&quot;</span>);<br>          &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 如果没有可用（空闲）的连接</span><br>          <span class="hljs-comment">// Pool does not have available connection</span><br>          <span class="hljs-keyword">if</span> (state.activeConnections.size() &lt; poolMaximumActiveConnections) &#123;<br>              <span class="hljs-comment">// 如果activeConnections没有达到限制,那就new一个PooledConnection</span><br>            <span class="hljs-comment">// Can create new connection</span><br>            conn = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PooledConnection</span>(dataSource.getConnection(), <span class="hljs-built_in">this</span>);<br>            <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>              log.debug(<span class="hljs-string">&quot;Created connection &quot;</span> + conn.getRealHashCode() + <span class="hljs-string">&quot;.&quot;</span>);<br>            &#125;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>              <span class="hljs-comment">// 如果activeConnections已经很多了，那不能再new了</span><br>            <span class="hljs-comment">// Cannot create new connection</span><br>              <span class="hljs-comment">// 取得activeConnections列表的第一个（最老的）</span><br>            <span class="hljs-type">PooledConnection</span> <span class="hljs-variable">oldestActiveConnection</span> <span class="hljs-operator">=</span> state.activeConnections.get(<span class="hljs-number">0</span>);<br>            <span class="hljs-type">long</span> <span class="hljs-variable">longestCheckoutTime</span> <span class="hljs-operator">=</span> oldestActiveConnection.getCheckoutTime();<br>            <span class="hljs-keyword">if</span> (longestCheckoutTime &gt; poolMaximumCheckoutTime) &#123;<br>                <span class="hljs-comment">// 如果checkout时间过长，则这个connection标记为overdue（过期）</span><br>              <span class="hljs-comment">// Can claim overdue connection</span><br>              state.claimedOverdueConnectionCount++;<br>              state.accumulatedCheckoutTimeOfOverdueConnections += longestCheckoutTime;<br>              state.accumulatedCheckoutTime += longestCheckoutTime;<br>              state.activeConnections.remove(oldestActiveConnection);<br>              <span class="hljs-comment">// 连接关闭之前看是否需要回滚</span><br>              <span class="hljs-keyword">if</span> (!oldestActiveConnection.getRealConnection().getAutoCommit()) &#123;<br>                oldestActiveConnection.getRealConnection().rollback();<br>              &#125;<br>              <span class="hljs-comment">// 删掉最老的连接，然后再new一个新连接</span><br>              conn = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PooledConnection</span>(oldestActiveConnection.getRealConnection(), <span class="hljs-built_in">this</span>);<br>              <span class="hljs-comment">// 连接失效</span><br>              oldestActiveConnection.invalidate();<br>              <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>                log.debug(<span class="hljs-string">&quot;Claimed overdue connection &quot;</span> + conn.getRealHashCode() + <span class="hljs-string">&quot;.&quot;</span>);<br>              &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 如果checkout时间不够长，等待吧</span><br>              <span class="hljs-comment">// Must wait</span><br>              <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (!countedWait) &#123;<br>                    <span class="hljs-comment">// 统计信息：等待次数+1</span><br>                  state.hadToWaitCount++;<br>                  countedWait = <span class="hljs-literal">true</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>                  log.debug(<span class="hljs-string">&quot;Waiting as long as &quot;</span> + poolTimeToWait + <span class="hljs-string">&quot; milliseconds for connection.&quot;</span>);<br>                &#125;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">wt</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>                <span class="hljs-comment">// 睡一会儿吧</span><br>                state.wait(poolTimeToWait);<br>                state.accumulatedWaitTime += System.currentTimeMillis() - wt;<br>              &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                <span class="hljs-keyword">break</span>;<br>              &#125;<br>            &#125;<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (conn != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 如果已经拿到connection，则返回</span><br>          <span class="hljs-keyword">if</span> (conn.isValid()) &#123;<br>            <span class="hljs-keyword">if</span> (!conn.getRealConnection().getAutoCommit()) &#123;<br>              conn.getRealConnection().rollback();<br>            &#125;<br>            conn.setConnectionTypeCode(assembleConnectionTypeCode(dataSource.getUrl(), username, password));<br>            <span class="hljs-comment">// 记录checkout时间</span><br>            conn.setCheckoutTimestamp(System.currentTimeMillis());<br>            conn.setLastUsedTimestamp(System.currentTimeMillis());<br>            state.activeConnections.add(conn);<br>            state.requestCount++;<br>            state.accumulatedRequestTime += System.currentTimeMillis() - t;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>              log.debug(<span class="hljs-string">&quot;A bad connection (&quot;</span> + conn.getRealHashCode() + <span class="hljs-string">&quot;) was returned from the pool, getting another connection.&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">// 如果没拿到，统计信息：坏连接+1</span><br>            state.badConnectionCount++;<br>            localBadConnectionCount++;<br>            conn = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">if</span> (localBadConnectionCount &gt; (poolMaximumIdleConnections + <span class="hljs-number">3</span>)) &#123;<br>                <span class="hljs-comment">// 如果好几次都拿不到，就放弃了，抛出异常</span><br>              <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>                log.debug(<span class="hljs-string">&quot;PooledDataSource: Could not get a good connection to the database.&quot;</span>);<br>              &#125;<br>              <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQLException</span>(<span class="hljs-string">&quot;PooledDataSource: Could not get a good connection to the database.&quot;</span>);<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;      <br>    &#125;<br><br>    <span class="hljs-comment">// 没有拿到连接，抛异常出去</span><br>    <span class="hljs-keyword">if</span> (conn == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>        log.debug(<span class="hljs-string">&quot;PooledDataSource: Unknown severe error condition.  The connection pool returned a null connection.&quot;</span>);<br>      &#125;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQLException</span>(<span class="hljs-string">&quot;PooledDataSource: Unknown severe error condition.  The connection pool returned a null connection.&quot;</span>);<br>    &#125;<br><br>        <span class="hljs-keyword">return</span> conn;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDriver</span><span class="hljs-params">(String driver)</span> &#123;<br>    dataSource.setDriver(driver);<br>    forceCloseAll();<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * Closes all active and idle connections in the pool</span><br><span class="hljs-comment">   * 关闭连接池内所有活跃连接和空闲连接</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">forceCloseAll</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (state) &#123;<br>      expectedConnectionTypeCode = assembleConnectionTypeCode(dataSource.getUrl(), dataSource.getUsername(), dataSource.getPassword());<br>      <span class="hljs-comment">// 关闭所有的activeConnections和idleConnections</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> state.activeConnections.size(); i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-type">PooledConnection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> state.activeConnections.remove(i - <span class="hljs-number">1</span>);<br>          conn.invalidate();<br><br>          <span class="hljs-type">Connection</span> <span class="hljs-variable">realConn</span> <span class="hljs-operator">=</span> conn.getRealConnection();<br>          <span class="hljs-keyword">if</span> (!realConn.getAutoCommit()) &#123;<br>            realConn.rollback();<br>          &#125;<br>          realConn.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>          <span class="hljs-comment">// ignore</span><br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> state.idleConnections.size(); i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-type">PooledConnection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> state.idleConnections.remove(i - <span class="hljs-number">1</span>);<br>          conn.invalidate();<br><br>          <span class="hljs-type">Connection</span> <span class="hljs-variable">realConn</span> <span class="hljs-operator">=</span> conn.getRealConnection();<br>          <span class="hljs-keyword">if</span> (!realConn.getAutoCommit()) &#123;<br>            realConn.rollback();<br>          &#125;<br>          realConn.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>          <span class="hljs-comment">// ignore</span><br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>      log.debug(<span class="hljs-string">&quot;PooledDataSource forcefully closed/removed all connections.&quot;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 某个线程用完数据库连接，将其归还到数据库连接池</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pushConnection</span><span class="hljs-params">(PooledConnection conn)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br><br>    <span class="hljs-keyword">synchronized</span> (state) &#123;<br>      <span class="hljs-comment">// 先从activeConnections中删除此connection</span><br>      state.activeConnections.remove(conn);<br>      <span class="hljs-keyword">if</span> (conn.isValid()) &#123;<br>        <span class="hljs-keyword">if</span> (state.idleConnections.size() &lt; poolMaximumIdleConnections &amp;&amp; conn.getConnectionTypeCode() == expectedConnectionTypeCode) &#123;<br>            <span class="hljs-comment">// 如果空闲的连接没有达到限制</span><br>          state.accumulatedCheckoutTime += conn.getCheckoutTime();<br>          <span class="hljs-keyword">if</span> (!conn.getRealConnection().getAutoCommit()) &#123;<br>            conn.getRealConnection().rollback();<br>          &#125;<br>          <span class="hljs-comment">// new一个新的Connection，加入到idle列表</span><br>          <span class="hljs-type">PooledConnection</span> <span class="hljs-variable">newConn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PooledConnection</span>(conn.getRealConnection(), <span class="hljs-built_in">this</span>);<br>          state.idleConnections.add(newConn);<br>          newConn.setCreatedTimestamp(conn.getCreatedTimestamp());<br>          newConn.setLastUsedTimestamp(conn.getLastUsedTimestamp());<br>          conn.invalidate();<br>          <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>            log.debug(<span class="hljs-string">&quot;Returned connection &quot;</span> + newConn.getRealHashCode() + <span class="hljs-string">&quot; to pool.&quot;</span>);<br>          &#125;<br>          <span class="hljs-comment">// 通知其他线程可以来抢connection了</span><br>          state.notifyAll();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// 否则，即空闲的连接已经达到限制</span><br>          state.accumulatedCheckoutTime += conn.getCheckoutTime();<br>          <span class="hljs-keyword">if</span> (!conn.getRealConnection().getAutoCommit()) &#123;<br>            conn.getRealConnection().rollback();<br>          &#125;<br>          <span class="hljs-comment">// 那就将connection关闭就可以了</span><br>          conn.getRealConnection().close();<br>          <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>            log.debug(<span class="hljs-string">&quot;Closed connection &quot;</span> + conn.getRealHashCode() + <span class="hljs-string">&quot;.&quot;</span>);<br>          &#125;<br>          conn.invalidate();<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 连接已经失效</span><br>        <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>          log.debug(<span class="hljs-string">&quot;A bad connection (&quot;</span> + conn.getRealHashCode() + <span class="hljs-string">&quot;) attempted to return to the pool, discarding connection.&quot;</span>);<br>        &#125;<br>        state.badConnectionCount++;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 检查数据库连接是否仍可用</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">pingConnection</span><span class="hljs-params">(PooledConnection conn)</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 先看连接是否关闭</span><br>      result = !conn.getRealConnection().isClosed();<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>      <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>        log.debug(<span class="hljs-string">&quot;Connection &quot;</span> + conn.getRealHashCode() + <span class="hljs-string">&quot; is BAD: &quot;</span> + e.getMessage());<br>      &#125;<br>      result = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (result) &#123;<br>      <span class="hljs-comment">// 是否开启发送数据连接检查</span><br>      <span class="hljs-keyword">if</span> (poolPingEnabled) &#123;<br>        <span class="hljs-keyword">if</span> (poolPingConnectionsNotUsedFor &gt;= <span class="hljs-number">0</span> &amp;&amp; conn.getTimeElapsedSinceLastUse() &gt; poolPingConnectionsNotUsedFor) &#123;<br>          <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>              log.debug(<span class="hljs-string">&quot;Testing connection &quot;</span> + conn.getRealHashCode() + <span class="hljs-string">&quot; ...&quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">// 就是执行一下 &quot;NO PING QUERY SET&quot; 语句</span><br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">realConn</span> <span class="hljs-operator">=</span> conn.getRealConnection();<br>            <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> realConn.createStatement();<br>            <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> statement.executeQuery(poolPingQuery);<br>            rs.close();<br>            statement.close();<br>            <span class="hljs-keyword">if</span> (!realConn.getAutoCommit()) &#123;<br>              realConn.rollback();<br>            &#125;<br>            result = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>              log.debug(<span class="hljs-string">&quot;Connection &quot;</span> + conn.getRealHashCode() + <span class="hljs-string">&quot; is GOOD!&quot;</span>);<br>            &#125;<br>          &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// 执行语句失败后，关闭连接</span><br>            log.warn(<span class="hljs-string">&quot;Execution of ping query &#x27;&quot;</span> + poolPingQuery + <span class="hljs-string">&quot;&#x27; failed: &quot;</span> + e.getMessage());<br>            <span class="hljs-keyword">try</span> &#123;<br>              conn.getRealConnection().close();<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>              <span class="hljs-comment">//ignore</span><br>            &#125;<br>            result = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>              log.debug(<span class="hljs-string">&quot;Connection &quot;</span> + conn.getRealHashCode() + <span class="hljs-string">&quot; is BAD: &quot;</span> + e.getMessage());<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>  &#125;<br><br>  <span class="hljs-comment">// 解析池化的连接（PooledConnection）获取真正的连接（Connection）</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">unwrapConnection</span><span class="hljs-params">(Connection conn)</span> &#123;<br>    <span class="hljs-keyword">if</span> (Proxy.isProxyClass(conn.getClass())) &#123;<br>      <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> Proxy.getInvocationHandler(conn);<br>      <span class="hljs-keyword">if</span> (handler <span class="hljs-keyword">instanceof</span> PooledConnection) &#123;<br>        <span class="hljs-keyword">return</span> ((PooledConnection) handler).getRealConnection();<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> conn;<br>  &#125;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    forceCloseAll();<br>    <span class="hljs-built_in">super</span>.finalize();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">unwrap</span><span class="hljs-params">(Class&lt;T&gt; iface)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQLException</span>(getClass().getName() + <span class="hljs-string">&quot; is not a wrapper.&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isWrapperFor</span><span class="hljs-params">(Class&lt;?&gt; iface)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Logger <span class="hljs-title function_">getParentLogger</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Logger.getLogger(Logger.GLOBAL_LOGGER_NAME); <span class="hljs-comment">// requires JDK version 1.6</span><br>  &#125;<br><br>  <span class="hljs-comment">// 其他的set、get方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="PooledConnection"><a href="#PooledConnection" class="headerlink" title="PooledConnection"></a>PooledConnection</h4><p>​ 池化的连接，对java.sql.Connection进行代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PooledConnection</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CLOSE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;close&quot;</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Class&lt;?&gt;[] IFACES = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[] &#123; Connection.class &#125;;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">hashCode</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">private</span> PooledDataSource dataSource;<br>  <span class="hljs-comment">// 真正的连接</span><br>  <span class="hljs-keyword">private</span> Connection realConnection;<br>  <span class="hljs-comment">// 代理的连接</span><br>  <span class="hljs-keyword">private</span> Connection proxyConnection;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> checkoutTimestamp;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> createdTimestamp;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> lastUsedTimestamp;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> connectionTypeCode;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> valid;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">PooledConnection</span><span class="hljs-params">(Connection connection, PooledDataSource dataSource)</span> &#123;<br>    <span class="hljs-built_in">this</span>.hashCode = connection.hashCode();<br>    <span class="hljs-built_in">this</span>.realConnection = connection;<br>    <span class="hljs-built_in">this</span>.dataSource = dataSource;<br>    <span class="hljs-built_in">this</span>.createdTimestamp = System.currentTimeMillis();<br>    <span class="hljs-built_in">this</span>.lastUsedTimestamp = System.currentTimeMillis();<br>    <span class="hljs-built_in">this</span>.valid = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">this</span>.proxyConnection = (Connection) Proxy.newProxyInstance(Connection.class.getClassLoader(), IFACES, <span class="hljs-built_in">this</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// 使连接失效</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invalidate</span><span class="hljs-params">()</span> &#123;<br>    valid = <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// 查看连接是否失效</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> valid &amp;&amp; realConnection != <span class="hljs-literal">null</span> &amp;&amp; dataSource.pingConnection(<span class="hljs-built_in">this</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getTimeElapsedSinceLastUse</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> System.currentTimeMillis() - lastUsedTimestamp;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> System.currentTimeMillis() - createdTimestamp;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br>    <span class="hljs-comment">// 实际上是比较 Connection 的hashCode</span><br>    <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> PooledConnection) &#123;<br>      <span class="hljs-keyword">return</span> realConnection.hashCode() == (((PooledConnection) obj).realConnection.hashCode());<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> Connection) &#123;<br>      <span class="hljs-keyword">return</span> hashCode == obj.hashCode();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> method.getName();<br>    <span class="hljs-comment">// 如果调用close的话，忽略它，反而将这个connection归还给连接池</span><br>    <span class="hljs-keyword">if</span> (CLOSE.hashCode() == methodName.hashCode() &amp;&amp; CLOSE.equals(methodName)) &#123;<br>      dataSource.pushConnection(<span class="hljs-built_in">this</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 非 Object 类的方法</span><br>        <span class="hljs-keyword">if</span> (!Object.class.equals(method.getDeclaringClass())) &#123;<br>          <span class="hljs-comment">// issue #579 toString() should never fail</span><br>          <span class="hljs-comment">// throw an SQLException instead of a Runtime</span><br>          <span class="hljs-comment">// 除了toString()方法，其他方法调用之前要检查connection是否还是合法的,不合法要抛出SQLException</span><br>          checkConnection();<br>        &#125;<br>        <span class="hljs-comment">// 其他的方法，则交给真正的connection去调用</span><br>        <span class="hljs-keyword">return</span> method.invoke(realConnection, args);<br>      &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>        <span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(t);<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">if</span> (!valid) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQLException</span>(<span class="hljs-string">&quot;Error accessing PooledConnection. Connection is invalid.&quot;</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 其他set、get方法略</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7-reflection</title>
    <link href="/2023/07/10/7-reflection/"/>
    <url>/2023/07/10/7-reflection/</url>
    
    <content type="html"><![CDATA[<h4 id="ObjectFactory"><a href="#ObjectFactory" class="headerlink" title="ObjectFactory"></a>ObjectFactory</h4><p>​ 对象工厂，所有需要的new Objects都由其创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ObjectFactory</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Sets configuration properties.</span><br><span class="hljs-comment">   * 设置属性</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> properties configuration properties</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties properties)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Creates a new object with default constructor. </span><br><span class="hljs-comment">   * 使用默认构造函数创建新对象</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> type Object type</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  &lt;T&gt; T <span class="hljs-title function_">create</span><span class="hljs-params">(Class&lt;T&gt; type)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Creates a new object with the specified constructor and params.</span><br><span class="hljs-comment">   * 使用指定的构造函数和构造函数参数创建对象</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> type Object type</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> constructorArgTypes Constructor argument types</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> constructorArgs Constructor argument values</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  &lt;T&gt; T <span class="hljs-title function_">create</span><span class="hljs-params">(Class&lt;T&gt; type, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Returns true if this object can have a set of other objects.</span><br><span class="hljs-comment">   * It&#x27;s main purpose is to support non-java.util.Collection objects like Scala collections.</span><br><span class="hljs-comment">   * 返回这个对象是否是集合，为了支持非 java.util.Collection 对象，比如Scala collections</span><br><span class="hljs-comment">   * </span><br><span class="hljs-comment">   * <span class="hljs-doctag">@since</span> 3.1.0</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> type Object type</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> whether it is a collection or not</span><br><span class="hljs-comment">   */</span><br>  &lt;T&gt; <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCollection</span><span class="hljs-params">(Class&lt;T&gt; type)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="DefaultObjectFactory"><a href="#DefaultObjectFactory" class="headerlink" title="DefaultObjectFactory"></a>DefaultObjectFactory</h4><p>​ 默认的对象工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultObjectFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ObjectFactory</span>, Serializable &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">8855120656740914948L</span>;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">create</span><span class="hljs-params">(Class&lt;T&gt; type)</span> &#123;<br>    <span class="hljs-keyword">return</span> create(type, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">create</span><span class="hljs-params">(Class&lt;T&gt; type, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;<br>    <span class="hljs-comment">// 根据接口创建具体的类</span><br>    <span class="hljs-comment">// 1.解析接口（为接口指定实现类）</span><br>    Class&lt;?&gt; classToCreate = resolveInterface(type);<br>    <span class="hljs-comment">// we know types are assignable</span><br>    <span class="hljs-comment">// 2.实例化类</span><br>    <span class="hljs-keyword">return</span> (T) instantiateClass(classToCreate, constructorArgTypes, constructorArgs);<br>  &#125; <br><br>  <span class="hljs-comment">// 1.解析接口,将interface转为实际class</span><br>  <span class="hljs-keyword">protected</span> Class&lt;?&gt; resolveInterface(Class&lt;?&gt; type) &#123;<br>    Class&lt;?&gt; classToCreate;<br>    <span class="hljs-keyword">if</span> (type == List.class || type == Collection.class || type == Iterable.class) &#123;<br>      <span class="hljs-comment">// List|Collection|Iterable--&gt;ArrayList</span><br>      classToCreate = ArrayList.class;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == Map.class) &#123;<br>      <span class="hljs-comment">// Map-&gt;HashMap</span><br>      classToCreate = HashMap.class;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == SortedSet.class) &#123; <span class="hljs-comment">// issue #510 Collections Support</span><br>      <span class="hljs-comment">// SortedSet-&gt;TreeSet</span><br>      classToCreate = TreeSet.class;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type == Set.class) &#123;<br>      <span class="hljs-comment">// Set-&gt;HashSet</span><br>      classToCreate = HashSet.class;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 除此以外，就用原来的类型</span><br>      classToCreate = type;<br>    &#125;<br>    <span class="hljs-keyword">return</span> classToCreate;<br>  &#125;  <br><br>  <span class="hljs-comment">// 2.实例化类</span><br>  <span class="hljs-keyword">private</span> &lt;T&gt; T <span class="hljs-title function_">instantiateClass</span><span class="hljs-params">(Class&lt;T&gt; type, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      Constructor&lt;T&gt; constructor;<br>      <span class="hljs-comment">// 如果没有传入constructor，调用空构造函数，核心是调用Constructor.newInstance</span><br>      <span class="hljs-keyword">if</span> (constructorArgTypes == <span class="hljs-literal">null</span> || constructorArgs == <span class="hljs-literal">null</span>) &#123;<br>        constructor = type.getDeclaredConstructor();<br>        <span class="hljs-keyword">if</span> (!constructor.isAccessible()) &#123;<br>          constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> constructor.newInstance();<br>      &#125;<br>      <span class="hljs-comment">// 如果传入constructor，调用传入的构造函数，核心是调用Constructor.newInstance</span><br>      constructor = type.getDeclaredConstructor(constructorArgTypes.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[constructorArgTypes.size()]));<br>      <span class="hljs-keyword">if</span> (!constructor.isAccessible()) &#123;<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>      &#125;<br>      <span class="hljs-keyword">return</span> constructor.newInstance(constructorArgs.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[constructorArgs.size()]));<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-comment">//如果出错，包装一下，重新抛出自己的异常</span><br>      <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">argTypes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>      <span class="hljs-keyword">if</span> (constructorArgTypes != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (Class&lt;?&gt; argType : constructorArgTypes) &#123;<br>          argTypes.append(argType.getSimpleName());<br>          argTypes.append(<span class="hljs-string">&quot;,&quot;</span>);<br>        &#125;<br>      &#125;<br>      <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">argValues</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>      <span class="hljs-keyword">if</span> (constructorArgs != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (Object argValue : constructorArgs) &#123;<br>          argValues.append(String.valueOf(argValue));<br>          argValues.append(<span class="hljs-string">&quot;,&quot;</span>);<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectionException</span>(<span class="hljs-string">&quot;Error instantiating &quot;</span> + type + <span class="hljs-string">&quot; with invalid types (&quot;</span> + argTypes + <span class="hljs-string">&quot;) or values (&quot;</span> + argValues + <span class="hljs-string">&quot;). Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 默认没有属性可以设置</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties properties)</span> &#123;<br>    <span class="hljs-comment">// no props for default</span><br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCollection</span><span class="hljs-params">(Class&lt;T&gt; type)</span> &#123;<br>    <span class="hljs-comment">// 是否是Collection的子类（默认的实现似乎没有考虑非 java.util.Collection 的 集合）</span><br>    <span class="hljs-keyword">return</span> Collection.class.isAssignableFrom(type);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Invoker"><a href="#Invoker" class="headerlink" title="Invoker"></a>Invoker</h4><p>​ 为设置属性、获取属性、调用方法获取抽象接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Invoker</span> &#123; <br><br>  <span class="hljs-comment">// 调用</span><br>  Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object target, Object[] args)</span> <span class="hljs-keyword">throws</span> IllegalAccessException, InvocationTargetException;<br><br>  <span class="hljs-comment">// 取得类型</span><br>  Class&lt;?&gt; getType();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="GetFieldInvoker"><a href="#GetFieldInvoker" class="headerlink" title="GetFieldInvoker"></a>GetFieldInvoker</h4><p>​ 封装field 的 get 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetFieldInvoker</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Invoker</span> &#123;<br>  <span class="hljs-keyword">private</span> Field field;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">GetFieldInvoker</span><span class="hljs-params">(Field field)</span> &#123;<br>    <span class="hljs-built_in">this</span>.field = field;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object target, Object[] args)</span> <span class="hljs-keyword">throws</span> IllegalAccessException, InvocationTargetException &#123;<br>    <span class="hljs-keyword">return</span> field.get(target);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Class&lt;?&gt; getType() &#123;<br>    <span class="hljs-keyword">return</span> field.getType();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SetFieldInvoker"><a href="#SetFieldInvoker" class="headerlink" title="SetFieldInvoker"></a>SetFieldInvoker</h4><p>​ 封装field的 set 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetFieldInvoker</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Invoker</span> &#123;<br>  <span class="hljs-keyword">private</span> Field field;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">SetFieldInvoker</span><span class="hljs-params">(Field field)</span> &#123;<br>    <span class="hljs-built_in">this</span>.field = field;<br>  &#125;<br><br>  <span class="hljs-comment">// 就是调用Field.set</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object target, Object[] args)</span> <span class="hljs-keyword">throws</span> IllegalAccessException, InvocationTargetException &#123;<br>    field.set(target, args[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Class&lt;?&gt; getType() &#123;<br>    <span class="hljs-keyword">return</span> field.getType();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MethodInvoker"><a href="#MethodInvoker" class="headerlink" title="MethodInvoker"></a>MethodInvoker</h4><p>​ 封装method的 invoke 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodInvoker</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Invoker</span> &#123;<br><br>  <span class="hljs-keyword">private</span> Class&lt;?&gt; type;<br>  <span class="hljs-keyword">private</span> Method method;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">MethodInvoker</span><span class="hljs-params">(Method method)</span> &#123;<br>    <span class="hljs-built_in">this</span>.method = method;<br><br>    <span class="hljs-comment">// 如果只有一个参数，返回参数类型，否则返回return的类型</span><br>    <span class="hljs-keyword">if</span> (method.getParameterTypes().length == <span class="hljs-number">1</span>) &#123;<br>      type = method.getParameterTypes()[<span class="hljs-number">0</span>];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      type = method.getReturnType();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object target, Object[] args)</span> <span class="hljs-keyword">throws</span> IllegalAccessException, InvocationTargetException &#123;<br>    <span class="hljs-keyword">return</span> method.invoke(target, args);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Class&lt;?&gt; getType() &#123;<br>    <span class="hljs-keyword">return</span> type;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="PropertyCopier"><a href="#PropertyCopier" class="headerlink" title="PropertyCopier"></a>PropertyCopier</h4><p>​ 属性复制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PropertyCopier</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">PropertyCopier</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// Prevent Instantiation of Static Class</span><br>  &#125;<br><br>  <span class="hljs-comment">// 复制属性,类似功能的还有别的类，</span><br>  <span class="hljs-comment">// 如apache commons beanutil 的BeanUtils.copyProperties</span><br>  <span class="hljs-comment">// Spring 的BeanUtils.copyProperties</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copyBeanProperties</span><span class="hljs-params">(Class&lt;?&gt; type, Object sourceBean, Object destinationBean)</span> &#123;<br>    Class&lt;?&gt; parent = type;<br>    <span class="hljs-keyword">while</span> (parent != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 循环将父类的属性都复制过来</span><br>      <span class="hljs-keyword">final</span> Field[] fields = parent.getDeclaredFields();<br>      <span class="hljs-keyword">for</span>(Field field : fields) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          field.setAccessible(<span class="hljs-literal">true</span>);<br>          field.set(destinationBean, field.get(sourceBean));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>          <span class="hljs-comment">// Nothing useful to do, will only fail on final fields, which will be ignored.</span><br>        &#125;<br>      &#125;<br>      parent = parent.getSuperclass();<br>    &#125;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="PropertyNamer"><a href="#PropertyNamer" class="headerlink" title="PropertyNamer"></a>PropertyNamer</h4><p>​ 属性命名器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PropertyNamer</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">PropertyNamer</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// Prevent Instantiation of Static Class</span><br>  &#125;<br><br>  <span class="hljs-comment">// 方法转为属性</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">methodToProperty</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-comment">// 去掉get|set|is</span><br>    <span class="hljs-keyword">if</span> (name.startsWith(<span class="hljs-string">&quot;is&quot;</span>)) &#123;<br>      name = name.substring(<span class="hljs-number">2</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (name.startsWith(<span class="hljs-string">&quot;get&quot;</span>) || name.startsWith(<span class="hljs-string">&quot;set&quot;</span>)) &#123;<br>      name = name.substring(<span class="hljs-number">3</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectionException</span>(<span class="hljs-string">&quot;Error parsing property name &#x27;&quot;</span> + name + <span class="hljs-string">&quot;&#x27;.  Didn&#x27;t start with &#x27;is&#x27;, &#x27;get&#x27; or &#x27;set&#x27;.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 如果只有1个字母--&gt;转为小写</span><br>    <span class="hljs-comment">// 如果大于1个字母，第二个字母非大写--&gt;将第一个字母转为小写</span><br>    <span class="hljs-comment">// String uRL --&gt;String getuRL()</span><br>    <span class="hljs-keyword">if</span> (name.length() == <span class="hljs-number">1</span> || (name.length() &gt; <span class="hljs-number">1</span> &amp;&amp; !Character.isUpperCase(name.charAt(<span class="hljs-number">1</span>)))) &#123;<br>      name = name.substring(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>).toLowerCase(Locale.ENGLISH) + name.substring(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> name;<br>  &#125;<br><br>  <span class="hljs-comment">// 是否是属性</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isProperty</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-comment">// 必须以get|set|is开头</span><br>    <span class="hljs-keyword">return</span> name.startsWith(<span class="hljs-string">&quot;get&quot;</span>) || name.startsWith(<span class="hljs-string">&quot;set&quot;</span>) || name.startsWith(<span class="hljs-string">&quot;is&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// 是否是getter</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isGetter</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> name.startsWith(<span class="hljs-string">&quot;get&quot;</span>) || name.startsWith(<span class="hljs-string">&quot;is&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// 是否是setter</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSetter</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> name.startsWith(<span class="hljs-string">&quot;set&quot;</span>);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="PropertyTokenizer"><a href="#PropertyTokenizer" class="headerlink" title="PropertyTokenizer"></a>PropertyTokenizer</h4><p>​ 用于属性解析，如 <code>person[0].birthdate.year</code> 将依次解析为person[0]、birthdate、year</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PropertyTokenizer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterable</span>&lt;PropertyTokenizer&gt;, Iterator&lt;PropertyTokenizer&gt; &#123;<br><br>  <span class="hljs-comment">// 例子： person[0].birthdate.year</span><br>  <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">//person</span><br>  <span class="hljs-keyword">private</span> String indexedName; <span class="hljs-comment">//person[0]</span><br>  <span class="hljs-keyword">private</span> String index; <span class="hljs-comment">//0</span><br>  <span class="hljs-keyword">private</span> String children; <span class="hljs-comment">//birthdate.year </span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">PropertyTokenizer</span><span class="hljs-params">(String fullname)</span> &#123;<br>    <span class="hljs-comment">// person[0].birthdate.year</span><br>    <span class="hljs-comment">// 找.</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">delim</span> <span class="hljs-operator">=</span> fullname.indexOf(<span class="hljs-string">&#x27;.&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (delim &gt; -<span class="hljs-number">1</span>) &#123;<br>      name = fullname.substring(<span class="hljs-number">0</span>, delim);<br>      children = fullname.substring(delim + <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 找不到.的话，取全部部分</span><br>      name = fullname;<br>      children = <span class="hljs-literal">null</span>;<br>    &#125;<br>    indexedName = name;<br>    <span class="hljs-comment">// 把中括号里的数字给解析出来</span><br>    delim = name.indexOf(<span class="hljs-string">&#x27;[&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (delim &gt; -<span class="hljs-number">1</span>) &#123;<br>      index = name.substring(delim + <span class="hljs-number">1</span>, name.length() - <span class="hljs-number">1</span>);<br>      name = name.substring(<span class="hljs-number">0</span>, delim);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> name;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getIndex</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> index;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getIndexedName</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> indexedName;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getChildren</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> children;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-comment">// 使用的时候 hasNext() 和 next() 配合使用，</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> children != <span class="hljs-literal">null</span>;<br>  &#125; <br><br>  <span class="hljs-comment">// 取得下一个,通过children来new一个新的PropertyTokenizer实例</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> PropertyTokenizer <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyTokenizer</span>(children);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(<span class="hljs-string">&quot;Remove is not supported, as it has no meaning in the context of properties.&quot;</span>);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Iterator&lt;PropertyTokenizer&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Reflector"><a href="#Reflector" class="headerlink" title="Reflector"></a>Reflector</h4><p>​ 反射器，解析类的set、get方法以及对应的属性和返回类型，而且加了缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflector</span> &#123; <br>    <span class="hljs-comment">// 默认支持 类-&gt;Reflector 缓存</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">classCacheEnabled</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] EMPTY_STRING_ARRAY = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">0</span>];<br>  <span class="hljs-comment">// 这里用ConcurrentHashMap，多线程支持，作为一个缓存</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;Class&lt;?&gt;, Reflector&gt; REFLECTOR_MAP = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;Class&lt;?&gt;, Reflector&gt;();<br><br>  <span class="hljs-keyword">private</span> Class&lt;?&gt; type;<br><br>  <span class="hljs-comment">// getter的属性列表</span><br>  <span class="hljs-keyword">private</span> String[] readablePropertyNames = EMPTY_STRING_ARRAY;<br>  <span class="hljs-comment">// setter的属性列表</span><br>  <span class="hljs-keyword">private</span> String[] writeablePropertyNames = EMPTY_STRING_ARRAY;<br>  <span class="hljs-comment">// setter的方法列表</span><br>  <span class="hljs-keyword">private</span> Map&lt;String, Invoker&gt; setMethods = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Invoker&gt;();<br>  <span class="hljs-comment">// getter的方法列表</span><br>  <span class="hljs-keyword">private</span> Map&lt;String, Invoker&gt; getMethods = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Invoker&gt;();<br>  <span class="hljs-comment">// setter的类型列表</span><br>  <span class="hljs-keyword">private</span> Map&lt;String, Class&lt;?&gt;&gt; setTypes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Class&lt;?&gt;&gt;();<br>  <span class="hljs-comment">// getter的类型列表</span><br>  <span class="hljs-keyword">private</span> Map&lt;String, Class&lt;?&gt;&gt; getTypes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Class&lt;?&gt;&gt;();<br>  <span class="hljs-comment">// 构造函数</span><br>  <span class="hljs-keyword">private</span> Constructor&lt;?&gt; defaultConstructor;  <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">Reflector</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> &#123;<br>    type = clazz;<br>    <span class="hljs-comment">// 加入构造函数</span><br>    addDefaultConstructor(clazz);<br>    <span class="hljs-comment">// 加入getter</span><br>    addGetMethods(clazz);<br>    <span class="hljs-comment">// 加入setter</span><br>    addSetMethods(clazz);<br>    <span class="hljs-comment">// 加入字段</span><br>    addFields(clazz);<br>    readablePropertyNames = getMethods.keySet().toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[getMethods.keySet().size()]);<br>    writeablePropertyNames = setMethods.keySet().toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[setMethods.keySet().size()]);<br>    <span class="hljs-keyword">for</span> (String propName : readablePropertyNames) &#123;<br>      <span class="hljs-comment">// 这里为了能找到某一个属性，就把他变成大写作为map的key。。。</span><br>      caseInsensitivePropertyMap.put(propName.toUpperCase(Locale.ENGLISH), propName);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (String propName : writeablePropertyNames) &#123;<br>      caseInsensitivePropertyMap.put(propName.toUpperCase(Locale.ENGLISH), propName);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// </span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canAccessPrivateMethods</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 如果当前应用程序创建了SecurityManager，则返回，否则返回null</span><br>      <span class="hljs-type">SecurityManager</span> <span class="hljs-variable">securityManager</span> <span class="hljs-operator">=</span> System.getSecurityManager();<br>      <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != securityManager) &#123;<br>        <span class="hljs-comment">// 检查是否有名为 suppressAccessChecks 的 ReflectPermission</span><br>        <span class="hljs-comment">// suppressAccessChecks：能够抑制对类中字段和方法的标准Java语言访问检查；</span><br>        <span class="hljs-comment">// 不仅允许访问公共成员，而且还允许访问默认（包）访问、受保护和私有成员。</span><br>        securityManager.checkPermission(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectPermission</span>(<span class="hljs-string">&quot;suppressAccessChecks&quot;</span>));<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (SecurityException e) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// 添加可访问的无参构造函数</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addDefaultConstructor</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> &#123;<br>    Constructor&lt;?&gt;[] consts = clazz.getDeclaredConstructors();<br>    <span class="hljs-keyword">for</span> (Constructor&lt;?&gt; constructor : consts) &#123;<br>      <span class="hljs-keyword">if</span> (constructor.getParameterTypes().length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (canAccessPrivateMethods()) &#123;<br>          <span class="hljs-keyword">try</span> &#123;<br>            constructor.setAccessible(<span class="hljs-literal">true</span>);<br>          &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// Ignored. This is only a final precaution, nothing we can do.</span><br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (constructor.isAccessible()) &#123;<br>          <span class="hljs-built_in">this</span>.defaultConstructor = constructor;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addGetMethods</span><span class="hljs-params">(Class&lt;?&gt; cls)</span> &#123;<br>    Map&lt;String, List&lt;Method&gt;&gt; conflictingGetters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, List&lt;Method&gt;&gt;();<br>    <span class="hljs-comment">// 这里getter和setter都调用了getClassMethods，有点浪费效率了。</span><br>    <span class="hljs-comment">// 不妨把addGetMethods,addSetMethods合并成一个方法叫addMethods</span><br>    Method[] methods = getClassMethods(cls);<br>    <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> method.getName();<br>      <span class="hljs-keyword">if</span> (name.startsWith(<span class="hljs-string">&quot;get&quot;</span>) &amp;&amp; name.length() &gt; <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-keyword">if</span> (method.getParameterTypes().length == <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-comment">// 这里方法转属性时可能会将属性的第一个字母转为小写，</span><br>          <span class="hljs-comment">// 因此不规范的属性命名会造成将两个不相关的属性在一起判断冲突，</span><br>          <span class="hljs-comment">// 进而在 resolveGetterConflicts 中抛出 ReflectionException</span><br>          name = PropertyNamer.methodToProperty(name);<br>          addMethodConflict(conflictingGetters, name, method);<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (name.startsWith(<span class="hljs-string">&quot;is&quot;</span>) &amp;&amp; name.length() &gt; <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">if</span> (method.getParameterTypes().length == <span class="hljs-number">0</span>) &#123;<br>          name = PropertyNamer.methodToProperty(name);<br>          addMethodConflict(conflictingGetters, name, method);<br>        &#125;<br>      &#125;<br>    &#125;<br>    resolveGetterConflicts(conflictingGetters);<br>  &#125;<br><br>  <span class="hljs-comment">// 获取类的所有方法、其实现的接口的所有方法、以及所有父类的相应方法</span><br>  <span class="hljs-keyword">private</span> Method[]  getClassMethods(Class&lt;?&gt; cls) &#123;<br>    Map&lt;String, Method&gt; uniqueMethods = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Method&gt;();<br>    Class&lt;?&gt; currentClass = cls;<br>    <span class="hljs-keyword">while</span> (currentClass != <span class="hljs-literal">null</span>) &#123;<br>      addUniqueMethods(uniqueMethods, currentClass.getDeclaredMethods());<br><br>      <span class="hljs-comment">// we also need to look for interface methods - </span><br>      <span class="hljs-comment">// because the class may be abstract</span><br>      Class&lt;?&gt;[] interfaces = currentClass.getInterfaces();<br>      <span class="hljs-keyword">for</span> (Class&lt;?&gt; anInterface : interfaces) &#123;<br>        addUniqueMethods(uniqueMethods, anInterface.getMethods());<br>      &#125;<br><br>      currentClass = currentClass.getSuperclass();<br>    &#125;<br><br>    Collection&lt;Method&gt; methods = uniqueMethods.values();<br><br>    <span class="hljs-keyword">return</span> methods.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Method</span>[methods.size()]);<br>  &#125;<br><br>  <span class="hljs-comment">// 添加方法时通过签名区别每个方法，已经添加了相同签名的方法就不添加了</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUniqueMethods</span><span class="hljs-params">(Map&lt;String, Method&gt; uniqueMethods, Method[] methods)</span> &#123;<br>    <span class="hljs-keyword">for</span> (Method currentMethod : methods) &#123;<br>      <span class="hljs-keyword">if</span> (!currentMethod.isBridge()) &#123;<br>        <span class="hljs-comment">// 获得方法签名</span><br>        <span class="hljs-comment">// 格式为：返回值类型#方法名:参数1类型,参数2类型...</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> getSignature(currentMethod);<br>        <span class="hljs-comment">// check to see if the method is already known</span><br>        <span class="hljs-comment">// if it is known, then an extended class must have</span><br>        <span class="hljs-comment">// overridden a method</span><br>        <span class="hljs-keyword">if</span> (!uniqueMethods.containsKey(signature)) &#123;<br>          <span class="hljs-keyword">if</span> (canAccessPrivateMethods()) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>              currentMethod.setAccessible(<span class="hljs-literal">true</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>              <span class="hljs-comment">// Ignored. This is only a final precaution, nothing we can do.</span><br>            &#125;<br>          &#125;<br><br>          uniqueMethods.put(signature, currentMethod);<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getSignature</span><span class="hljs-params">(Method method)</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    Class&lt;?&gt; returnType = method.getReturnType();<br>    <span class="hljs-keyword">if</span> (returnType != <span class="hljs-literal">null</span>) &#123;<br>      sb.append(returnType.getName()).append(<span class="hljs-string">&#x27;#&#x27;</span>);<br>    &#125;<br>    sb.append(method.getName());<br>    Class&lt;?&gt;[] parameters = method.getParameterTypes();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; parameters.length; i++) &#123;<br>      <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>        sb.append(<span class="hljs-string">&#x27;:&#x27;</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        sb.append(<span class="hljs-string">&#x27;,&#x27;</span>);<br>      &#125;<br>      sb.append(parameters[i].getName());<br>    &#125;<br>    <span class="hljs-keyword">return</span> sb.toString();<br>  &#125;<br><br>  <span class="hljs-comment">// 将所有属性-方法集合放进一个map中，用于后续冲突处理</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addMethodConflict</span><span class="hljs-params">(Map&lt;String, List&lt;Method&gt;&gt; conflictingMethods, String name, Method method)</span> &#123;<br>    List&lt;Method&gt; list = conflictingMethods.get(name);<br>    <span class="hljs-keyword">if</span> (list == <span class="hljs-literal">null</span>) &#123;<br>      list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Method&gt;();<br>      conflictingMethods.put(name, list);<br>    &#125;<br>    list.add(method);<br>  &#125;<br><br>  <span class="hljs-comment">// 处理冲突（一个属性对应多个set方法，只取一个）</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resolveGetterConflicts</span><span class="hljs-params">(Map&lt;String, List&lt;Method&gt;&gt; conflictingGetters)</span> &#123;<br>    <span class="hljs-keyword">for</span> (String propName : conflictingGetters.keySet()) &#123;<br>      List&lt;Method&gt; getters = conflictingGetters.get(propName);<br>      Iterator&lt;Method&gt; iterator = getters.iterator();<br>      <span class="hljs-type">Method</span> <span class="hljs-variable">firstMethod</span> <span class="hljs-operator">=</span> iterator.next();<br>      <span class="hljs-keyword">if</span> (getters.size() == <span class="hljs-number">1</span>) &#123;<br>        addGetMethod(propName, firstMethod);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">getter</span> <span class="hljs-operator">=</span> firstMethod;<br>        Class&lt;?&gt; getterType = firstMethod.getReturnType();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>          <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> iterator.next();<br>          Class&lt;?&gt; methodType = method.getReturnType();<br>          <span class="hljs-comment">// 1 2 3 1 （3 2 1 3）----假设数字大的是数字小的的父类或父接口</span><br>          <span class="hljs-keyword">if</span> (methodType.equals(getterType)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectionException</span>(<span class="hljs-string">&quot;Illegal overloaded getter method with ambiguous type for property &quot;</span> <br>                + propName + <span class="hljs-string">&quot; in class &quot;</span> + firstMethod.getDeclaringClass()<br>                + <span class="hljs-string">&quot;.  This breaks the JavaBeans &quot;</span> + <span class="hljs-string">&quot;specification and can cause unpredicatble results.&quot;</span>);<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (methodType.isAssignableFrom(getterType)) &#123;<br>            <span class="hljs-comment">// 两个get方法的返回值类型如果有父子关系，取孩子</span><br>            <span class="hljs-comment">// 即取的类型能赋值给另一个类型</span><br>            <span class="hljs-comment">// OK getter type is descendant</span><br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (getterType.isAssignableFrom(methodType)) &#123;<br>            getter = method;<br>            getterType = methodType;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectionException</span>(<span class="hljs-string">&quot;Illegal overloaded getter method with ambiguous type for property &quot;</span> <br>                + propName + <span class="hljs-string">&quot; in class &quot;</span> + firstMethod.getDeclaringClass()<br>                + <span class="hljs-string">&quot;.  This breaks the JavaBeans &quot;</span> + <span class="hljs-string">&quot;specification and can cause unpredicatble results.&quot;</span>);<br>          &#125;<br>        &#125;<br>        addGetMethod(propName, getter);<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 添加get方法和类型映射</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addGetMethod</span><span class="hljs-params">(String name, Method method)</span> &#123;<br>    <span class="hljs-keyword">if</span> (isValidPropertyName(name)) &#123;<br>      getMethods.put(name, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodInvoker</span>(method));<br>      getTypes.put(name, method.getReturnType());<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 添加set方法</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addSetMethods</span><span class="hljs-params">(Class&lt;?&gt; cls)</span> &#123;<br>    Map&lt;String, List&lt;Method&gt;&gt; conflictingSetters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, List&lt;Method&gt;&gt;();<br>    Method[] methods = getClassMethods(cls);<br>    <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> method.getName();<br>      <span class="hljs-keyword">if</span> (name.startsWith(<span class="hljs-string">&quot;set&quot;</span>) &amp;&amp; name.length() &gt; <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-keyword">if</span> (method.getParameterTypes().length == <span class="hljs-number">1</span>) &#123;<br>          name = PropertyNamer.methodToProperty(name);<br>          addMethodConflict(conflictingSetters, name, method);<br>        &#125;<br>      &#125;<br>    &#125;<br>    resolveSetterConflicts(conflictingSetters);<br>  &#125; <br><br>  <span class="hljs-comment">// SET 方法 参数类型需和GET 方法的返回值类型一样</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resolveSetterConflicts</span><span class="hljs-params">(Map&lt;String, List&lt;Method&gt;&gt; conflictingSetters)</span> &#123;<br>    <span class="hljs-keyword">for</span> (String propName : conflictingSetters.keySet()) &#123;<br>      List&lt;Method&gt; setters = conflictingSetters.get(propName);<br>      <span class="hljs-type">Method</span> <span class="hljs-variable">firstMethod</span> <span class="hljs-operator">=</span> setters.get(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">if</span> (setters.size() == <span class="hljs-number">1</span>) &#123;<br>        addSetMethod(propName, firstMethod);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        Class&lt;?&gt; expectedType = getTypes.get(propName); <br>        <span class="hljs-comment">// set方法必须要对应的get方法</span><br>        <span class="hljs-keyword">if</span> (expectedType == <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectionException</span>(<span class="hljs-string">&quot;Illegal overloaded setter method with ambiguous type for property &quot;</span><br>              + propName + <span class="hljs-string">&quot; in class &quot;</span> + firstMethod.getDeclaringClass() + <span class="hljs-string">&quot;.  This breaks the JavaBeans &quot;</span> +<br>              <span class="hljs-string">&quot;specification and can cause unpredicatble results.&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          Iterator&lt;Method&gt; methods = setters.iterator();<br>          <span class="hljs-type">Method</span> <span class="hljs-variable">setter</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; <br>          <span class="hljs-comment">// 找到参数类型和get方法返回值相同的get方法就返回</span><br>          <span class="hljs-keyword">while</span> (methods.hasNext()) &#123;<br>            <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> methods.next();<br>            <span class="hljs-keyword">if</span> (method.getParameterTypes().length == <span class="hljs-number">1</span><br>                &amp;&amp; expectedType.equals(method.getParameterTypes()[<span class="hljs-number">0</span>])) &#123;<br>              setter = method;<br>              <span class="hljs-keyword">break</span>;<br>            &#125;<br>          &#125;<br>          <span class="hljs-keyword">if</span> (setter == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectionException</span>(<span class="hljs-string">&quot;Illegal overloaded setter method with ambiguous type for property &quot;</span><br>                + propName + <span class="hljs-string">&quot; in class &quot;</span> + firstMethod.getDeclaringClass() + <span class="hljs-string">&quot;.  This breaks the JavaBeans &quot;</span> +<br>                <span class="hljs-string">&quot;specification and can cause unpredicatble results.&quot;</span>);<br>          &#125;<br>          addSetMethod(propName, setter);<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addSetMethod</span><span class="hljs-params">(String name, Method method)</span> &#123;<br>    <span class="hljs-keyword">if</span> (isValidPropertyName(name)) &#123;<br>      setMethods.put(name, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodInvoker</span>(method));<br>      setTypes.put(name, method.getParameterTypes()[<span class="hljs-number">0</span>]);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 给public变量和有访问权限的private变量，添加set和get方法（通过反射）</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFields</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> &#123;<br>    Field[] fields = clazz.getDeclaredFields();<br>    <span class="hljs-keyword">for</span> (Field field : fields) &#123;<br>      <span class="hljs-keyword">if</span> (canAccessPrivateMethods()) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          field.setAccessible(<span class="hljs-literal">true</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>          <span class="hljs-comment">// Ignored. This is only a final precaution, nothing we can do.</span><br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (field.isAccessible()) &#123;<br>        <span class="hljs-keyword">if</span> (!setMethods.containsKey(field.getName())) &#123;<br>          <span class="hljs-comment">// issue #379 - removed the check for final because JDK 1.5 allows</span><br>          <span class="hljs-comment">// modification of final fields through reflection (JSR-133). (JGB)</span><br>          <span class="hljs-comment">// pr #16 - final static can only be set by the classloader</span><br>          <span class="hljs-type">int</span> <span class="hljs-variable">modifiers</span> <span class="hljs-operator">=</span> field.getModifiers();<br>          <span class="hljs-keyword">if</span> (!(Modifier.isFinal(modifiers) &amp;&amp; Modifier.isStatic(modifiers))) &#123;<br>            addSetField(field);<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!getMethods.containsKey(field.getName())) &#123;<br>          addGetField(field);<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (clazz.getSuperclass() != <span class="hljs-literal">null</span>) &#123;<br>      addFields(clazz.getSuperclass());<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addSetField</span><span class="hljs-params">(Field field)</span> &#123;<br>    <span class="hljs-keyword">if</span> (isValidPropertyName(field.getName())) &#123;<br>      setMethods.put(field.getName(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">SetFieldInvoker</span>(field));<br>      setTypes.put(field.getName(), field.getType());<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addGetField</span><span class="hljs-params">(Field field)</span> &#123;<br>    <span class="hljs-keyword">if</span> (isValidPropertyName(field.getName())) &#123;<br>      getMethods.put(field.getName(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">GetFieldInvoker</span>(field));<br>      getTypes.put(field.getName(), field.getType());<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValidPropertyName</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> !(name.startsWith(<span class="hljs-string">&quot;$&quot;</span>) || <span class="hljs-string">&quot;serialVersionUID&quot;</span>.equals(name) || <span class="hljs-string">&quot;class&quot;</span>.equals(name));<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Class&lt;?&gt; getType() &#123;<br>    <span class="hljs-keyword">return</span> type;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Constructor&lt;?&gt; getDefaultConstructor() &#123;<br>    <span class="hljs-keyword">if</span> (defaultConstructor != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> defaultConstructor;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectionException</span>(<span class="hljs-string">&quot;There is no default constructor for &quot;</span> + type);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasDefaultConstructor</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> defaultConstructor != <span class="hljs-literal">null</span>;<br>  &#125; <br><br>  <span class="hljs-comment">// 这里和下面的方法用到的 propertyName 应该通过 findPropertyName()方法 得到</span><br>  <span class="hljs-keyword">public</span> Invoker <span class="hljs-title function_">getSetInvoker</span><span class="hljs-params">(String propertyName)</span> &#123;<br>    <span class="hljs-type">Invoker</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> setMethods.get(propertyName);<br>    <span class="hljs-keyword">if</span> (method == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectionException</span>(<span class="hljs-string">&quot;There is no setter for property named &#x27;&quot;</span> + propertyName + <span class="hljs-string">&quot;&#x27; in &#x27;&quot;</span> + type + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> method;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Invoker <span class="hljs-title function_">getGetInvoker</span><span class="hljs-params">(String propertyName)</span> &#123;<br>    <span class="hljs-type">Invoker</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> getMethods.get(propertyName);<br>    <span class="hljs-keyword">if</span> (method == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectionException</span>(<span class="hljs-string">&quot;There is no getter for property named &#x27;&quot;</span> + propertyName + <span class="hljs-string">&quot;&#x27; in &#x27;&quot;</span> + type + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> method;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Class&lt;?&gt; getSetterType(String propertyName) &#123;<br>    Class&lt;?&gt; clazz = setTypes.get(propertyName);<br>    <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectionException</span>(<span class="hljs-string">&quot;There is no setter for property named &#x27;&quot;</span> + propertyName + <span class="hljs-string">&quot;&#x27; in &#x27;&quot;</span> + type + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> clazz;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Class&lt;?&gt; getGetterType(String propertyName) &#123;<br>    Class&lt;?&gt; clazz = getTypes.get(propertyName);<br>    <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectionException</span>(<span class="hljs-string">&quot;There is no getter for property named &#x27;&quot;</span> + propertyName + <span class="hljs-string">&quot;&#x27; in &#x27;&quot;</span> + type + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> clazz;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> String[] getGetablePropertyNames() &#123;<br>    <span class="hljs-keyword">return</span> readablePropertyNames;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> String[] getSetablePropertyNames() &#123;<br>    <span class="hljs-keyword">return</span> writeablePropertyNames;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasSetter</span><span class="hljs-params">(String propertyName)</span> &#123;<br>    <span class="hljs-keyword">return</span> setMethods.keySet().contains(propertyName);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasGetter</span><span class="hljs-params">(String propertyName)</span> &#123;<br>    <span class="hljs-keyword">return</span> getMethods.keySet().contains(propertyName);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">findPropertyName</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> caseInsensitivePropertyMap.get(name.toUpperCase(Locale.ENGLISH));<br>  &#125; <br><br>  <span class="hljs-comment">// 获取clazz的反射器，有缓存</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Reflector <span class="hljs-title function_">forClass</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> &#123;<br>    <span class="hljs-keyword">if</span> (classCacheEnabled) &#123;<br>      <span class="hljs-comment">// synchronized (clazz) removed see issue #461</span><br>      <span class="hljs-comment">// 对于每个类来说，我们假设它是不会变的，这样可以考虑将这个类的信息(构造函数，getter,setter,字段)加入缓存，以提高速度</span><br>      <span class="hljs-type">Reflector</span> <span class="hljs-variable">cached</span> <span class="hljs-operator">=</span> REFLECTOR_MAP.get(clazz);<br>      <span class="hljs-keyword">if</span> (cached == <span class="hljs-literal">null</span>) &#123;<br>        cached = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reflector</span>(clazz);<br>        REFLECTOR_MAP.put(clazz, cached);<br>      &#125;<br>      <span class="hljs-keyword">return</span> cached;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reflector</span>(clazz);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setClassCacheEnabled</span><span class="hljs-params">(<span class="hljs-type">boolean</span> classCacheEnabled)</span> &#123;<br>    Reflector.classCacheEnabled = classCacheEnabled;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isClassCacheEnabled</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> classCacheEnabled;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MetaClass"><a href="#MetaClass" class="headerlink" title="MetaClass"></a>MetaClass</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MetaClass</span> &#123; <br><br>  <span class="hljs-comment">// 有一个反射器</span><br>  <span class="hljs-comment">// 可以看到方法基本都是再次委派给这个Reflector</span><br>  <span class="hljs-keyword">private</span> Reflector reflector; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">MetaClass</span><span class="hljs-params">(Class&lt;?&gt; type)</span> &#123;<br>    <span class="hljs-built_in">this</span>.reflector = Reflector.forClass(type);<br>  &#125; <br><br>  <span class="hljs-comment">// 委托给 Reflector.forClass 得到 Reflector 后再封装成 MetaClass </span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> MetaClass <span class="hljs-title function_">forClass</span><span class="hljs-params">(Class&lt;?&gt; type)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MetaClass</span>(type);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isClassCacheEnabled</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Reflector.isClassCacheEnabled();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setClassCacheEnabled</span><span class="hljs-params">(<span class="hljs-type">boolean</span> classCacheEnabled)</span> &#123;<br>    Reflector.setClassCacheEnabled(classCacheEnabled);<br>  &#125; <br><br>  <span class="hljs-comment">// 这里得到正确的结果依赖 addFields()方法中通过反射为private变量添加get和set方法</span><br>  <span class="hljs-comment">// 如private变量Fog和getFog方法在addGetMethods时添加的是fog-getFog的映射</span><br>  <span class="hljs-keyword">public</span> MetaClass <span class="hljs-title function_">metaClassForProperty</span><span class="hljs-params">(String name)</span> &#123; <br>    Class&lt;?&gt; propType = reflector.getGetterType(name);<br>    <span class="hljs-keyword">return</span> MetaClass.forClass(propType);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">findProperty</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> buildProperty(name, <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>());<br>    <span class="hljs-keyword">return</span> prop.length() &gt; <span class="hljs-number">0</span> ? prop.toString() : <span class="hljs-literal">null</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">findProperty</span><span class="hljs-params">(String name, <span class="hljs-type">boolean</span> useCamelCaseMapping)</span> &#123;<br>    <span class="hljs-keyword">if</span> (useCamelCaseMapping) &#123;<br>      name = name.replace(<span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> findProperty(name);<br>  &#125; <br><br>  <span class="hljs-comment">// 对于多级属性如 person.age 队其每级属性调用 reflector.findPropertyName</span><br>  <span class="hljs-comment">// 然后将其拼接起来</span><br>  <span class="hljs-keyword">private</span> StringBuilder <span class="hljs-title function_">buildProperty</span><span class="hljs-params">(String name, StringBuilder builder)</span> &#123;<br>    <span class="hljs-type">PropertyTokenizer</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyTokenizer</span>(name);<br>    <span class="hljs-keyword">if</span> (prop.hasNext()) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">propertyName</span> <span class="hljs-operator">=</span> reflector.findPropertyName(prop.getName());<br>      <span class="hljs-keyword">if</span> (propertyName != <span class="hljs-literal">null</span>) &#123;<br>        builder.append(propertyName);<br>        builder.append(<span class="hljs-string">&quot;.&quot;</span>);<br>        <span class="hljs-type">MetaClass</span> <span class="hljs-variable">metaProp</span> <span class="hljs-operator">=</span> metaClassForProperty(propertyName);<br>        metaProp.buildProperty(prop.getChildren(), builder);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">propertyName</span> <span class="hljs-operator">=</span> reflector.findPropertyName(name);<br>      <span class="hljs-keyword">if</span> (propertyName != <span class="hljs-literal">null</span>) &#123;<br>        builder.append(propertyName);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> builder;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> String[] getGetterNames() &#123;<br>    <span class="hljs-keyword">return</span> reflector.getGetablePropertyNames();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> String[] getSetterNames() &#123;<br>    <span class="hljs-keyword">return</span> reflector.getSetablePropertyNames();<br>  &#125; <br><br>  <span class="hljs-comment">// 获取set参数的类型</span><br>  <span class="hljs-keyword">public</span> Class&lt;?&gt; getSetterType(String name) &#123;<br>    <span class="hljs-type">PropertyTokenizer</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyTokenizer</span>(name);<br>    <span class="hljs-keyword">if</span> (prop.hasNext()) &#123;<br>      <span class="hljs-type">MetaClass</span> <span class="hljs-variable">metaProp</span> <span class="hljs-operator">=</span> metaClassForProperty(prop.getName()); <br>      <span class="hljs-comment">// 这里是递归调用</span><br>      <span class="hljs-keyword">return</span> metaProp.getSetterType(prop.getChildren());<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> reflector.getSetterType(prop.getName());<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Class&lt;?&gt; getGetterType(String name) &#123;<br>    <span class="hljs-type">PropertyTokenizer</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyTokenizer</span>(name);<br>    <span class="hljs-keyword">if</span> (prop.hasNext()) &#123;<br>      <span class="hljs-type">MetaClass</span> <span class="hljs-variable">metaProp</span> <span class="hljs-operator">=</span> metaClassForProperty(prop);<br>      <span class="hljs-keyword">return</span> metaProp.getGetterType(prop.getChildren());<br>    &#125;<br>    <span class="hljs-comment">// issue #506. Resolve the type inside a Collection Object</span><br>    <span class="hljs-keyword">return</span> getGetterType(prop);<br>  &#125;<br><br>  <span class="hljs-comment">// 根据PropertyTokenizer构造MetaClass</span><br>  <span class="hljs-keyword">private</span> MetaClass <span class="hljs-title function_">metaClassForProperty</span><span class="hljs-params">(PropertyTokenizer prop)</span> &#123;<br>    Class&lt;?&gt; propType = getGetterType(prop);<br>    <span class="hljs-keyword">return</span> MetaClass.forClass(propType);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Class&lt;?&gt; getGetterType(PropertyTokenizer prop) &#123;<br>    Class&lt;?&gt; type = reflector.getGetterType(prop.getName());<br>    <span class="hljs-keyword">if</span> (prop.getIndex() != <span class="hljs-literal">null</span> &amp;&amp; Collection.class.isAssignableFrom(type)) &#123;<br>      <span class="hljs-type">Type</span> <span class="hljs-variable">returnType</span> <span class="hljs-operator">=</span> getGenericGetterType(prop.getName());<br>      <span class="hljs-keyword">if</span> (returnType <span class="hljs-keyword">instanceof</span> ParameterizedType) &#123;<br>        Type[] actualTypeArguments = ((ParameterizedType) returnType).getActualTypeArguments();<br>        <span class="hljs-keyword">if</span> (actualTypeArguments != <span class="hljs-literal">null</span> &amp;&amp; actualTypeArguments.length == <span class="hljs-number">1</span>) &#123;<br>          returnType = actualTypeArguments[<span class="hljs-number">0</span>];<br>          <span class="hljs-keyword">if</span> (returnType <span class="hljs-keyword">instanceof</span> Class) &#123;<br>            type = (Class&lt;?&gt;) returnType;<br>          &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (returnType <span class="hljs-keyword">instanceof</span> ParameterizedType) &#123;<br>            type = (Class&lt;?&gt;) ((ParameterizedType) returnType).getRawType();<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> type;<br>  &#125; <br><br>  <span class="hljs-comment">// 获取get方法返回值的 Type 类型</span><br>  <span class="hljs-keyword">private</span> Type <span class="hljs-title function_">getGenericGetterType</span><span class="hljs-params">(String propertyName)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">Invoker</span> <span class="hljs-variable">invoker</span> <span class="hljs-operator">=</span> reflector.getGetInvoker(propertyName);<br>      <span class="hljs-keyword">if</span> (invoker <span class="hljs-keyword">instanceof</span> MethodInvoker) &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">_method</span> <span class="hljs-operator">=</span> MethodInvoker.class.getDeclaredField(<span class="hljs-string">&quot;method&quot;</span>);<br>        _method.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> (Method) _method.get(invoker);<br>        <span class="hljs-keyword">return</span> method.getGenericReturnType();<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (invoker <span class="hljs-keyword">instanceof</span> GetFieldInvoker) &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">_field</span> <span class="hljs-operator">=</span> GetFieldInvoker.class.getDeclaredField(<span class="hljs-string">&quot;field&quot;</span>);<br>        _field.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> (Field) _field.get(invoker);<br>        <span class="hljs-keyword">return</span> field.getGenericType();<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasSetter</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-type">PropertyTokenizer</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyTokenizer</span>(name);<br>    <span class="hljs-keyword">if</span> (prop.hasNext()) &#123;<br>      <span class="hljs-keyword">if</span> (reflector.hasSetter(prop.getName())) &#123;<br>        <span class="hljs-type">MetaClass</span> <span class="hljs-variable">metaProp</span> <span class="hljs-operator">=</span> metaClassForProperty(prop.getName());<br>        <span class="hljs-keyword">return</span> metaProp.hasSetter(prop.getChildren());<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> reflector.hasSetter(prop.getName());<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasGetter</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-type">PropertyTokenizer</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyTokenizer</span>(name);<br>    <span class="hljs-keyword">if</span> (prop.hasNext()) &#123;<br>      <span class="hljs-keyword">if</span> (reflector.hasGetter(prop.getName())) &#123;<br>        <span class="hljs-type">MetaClass</span> <span class="hljs-variable">metaProp</span> <span class="hljs-operator">=</span> metaClassForProperty(prop);<br>        <span class="hljs-keyword">return</span> metaProp.hasGetter(prop.getChildren());<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> reflector.hasGetter(prop.getName());<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Invoker <span class="hljs-title function_">getGetInvoker</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> reflector.getGetInvoker(name);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Invoker <span class="hljs-title function_">getSetInvoker</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> reflector.getSetInvoker(name);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasDefaultConstructor</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> reflector.hasDefaultConstructor();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MetaObject"><a href="#MetaObject" class="headerlink" title="MetaObject"></a>MetaObject</h4><p>元对象，封装get和set方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MetaObject</span> &#123; <br>  <span class="hljs-comment">// 有一个封装的对象本身，对象包装器，对象工厂，对象包装器工厂</span><br>  <span class="hljs-keyword">private</span> Object originalObject;<br>  <span class="hljs-keyword">private</span> ObjectWrapper objectWrapper;<br>  <span class="hljs-keyword">private</span> ObjectFactory objectFactory;<br>  <span class="hljs-keyword">private</span> ObjectWrapperFactory objectWrapperFactory; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">MetaObject</span><span class="hljs-params">(Object object, ObjectFactory objectFactory, ObjectWrapperFactory objectWrapperFactory)</span> &#123;<br>    <span class="hljs-built_in">this</span>.originalObject = object;<br>    <span class="hljs-built_in">this</span>.objectFactory = objectFactory;<br>    <span class="hljs-built_in">this</span>.objectWrapperFactory = objectWrapperFactory;<br><br>    <span class="hljs-keyword">if</span> (object <span class="hljs-keyword">instanceof</span> ObjectWrapper) &#123;<br>      <span class="hljs-comment">// 如果对象本身已经是ObjectWrapper型，则直接赋给objectWrapper</span><br>      <span class="hljs-built_in">this</span>.objectWrapper = (ObjectWrapper) object;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (objectWrapperFactory.hasWrapperFor(object)) &#123;<br>      <span class="hljs-comment">// 如果有包装器,调用ObjectWrapperFactory.getWrapperFor</span><br>      <span class="hljs-built_in">this</span>.objectWrapper = objectWrapperFactory.getWrapperFor(<span class="hljs-built_in">this</span>, object);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (object <span class="hljs-keyword">instanceof</span> Map) &#123;<br>      <span class="hljs-comment">// 如果是Map型，返回MapWrapper</span><br>      <span class="hljs-built_in">this</span>.objectWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapWrapper</span>(<span class="hljs-built_in">this</span>, (Map) object);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (object <span class="hljs-keyword">instanceof</span> Collection) &#123;<br>      <span class="hljs-comment">// 如果是Collection型，返回CollectionWrapper</span><br>      <span class="hljs-built_in">this</span>.objectWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CollectionWrapper</span>(<span class="hljs-built_in">this</span>, (Collection) object);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 除此以外，返回BeanWrapper</span><br>      <span class="hljs-built_in">this</span>.objectWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanWrapper</span>(<span class="hljs-built_in">this</span>, object);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> MetaObject <span class="hljs-title function_">forObject</span><span class="hljs-params">(Object object, ObjectFactory objectFactory, ObjectWrapperFactory objectWrapperFactory)</span> &#123;<br>    <span class="hljs-keyword">if</span> (object == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 处理一下null,将null包装起来</span><br>      <span class="hljs-keyword">return</span> SystemMetaObject.NULL_META_OBJECT;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MetaObject</span>(object, objectFactory, objectWrapperFactory);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> ObjectFactory <span class="hljs-title function_">getObjectFactory</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> objectFactory;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> ObjectWrapperFactory <span class="hljs-title function_">getObjectWrapperFactory</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> objectWrapperFactory;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getOriginalObject</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> originalObject;<br>  &#125; <br><br>  <span class="hljs-comment">//--------以下方法都是委派给ObjectWrapper------</span><br>  <span class="hljs-comment">// 查找属性</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">findProperty</span><span class="hljs-params">(String propName, <span class="hljs-type">boolean</span> useCamelCaseMapping)</span> &#123;<br>    <span class="hljs-keyword">return</span> objectWrapper.findProperty(propName, useCamelCaseMapping);<br>  &#125; <br><br>  <span class="hljs-comment">// 取得getter的名字列表</span><br>  <span class="hljs-keyword">public</span> String[] getGetterNames() &#123;<br>    <span class="hljs-keyword">return</span> objectWrapper.getGetterNames();<br>  &#125;<br><br>  <span class="hljs-comment">// 取得setter的名字列表</span><br>  <span class="hljs-keyword">public</span> String[] getSetterNames() &#123;<br>    <span class="hljs-keyword">return</span> objectWrapper.getSetterNames();<br>  &#125; <br><br>  <span class="hljs-comment">// 取得setter的类型列表</span><br>  <span class="hljs-keyword">public</span> Class&lt;?&gt; getSetterType(String name) &#123;<br>    <span class="hljs-keyword">return</span> objectWrapper.getSetterType(name);<br>  &#125;<br><br>  <span class="hljs-comment">// 取得getter的类型列表</span><br>  <span class="hljs-keyword">public</span> Class&lt;?&gt; getGetterType(String name) &#123;<br>    <span class="hljs-keyword">return</span> objectWrapper.getGetterType(name);<br>  &#125; <br><br>  <span class="hljs-comment">// 是否有指定的setter</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasSetter</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> objectWrapper.hasSetter(name);<br>  &#125;<br><br>  <span class="hljs-comment">// 是否有指定的getter</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasGetter</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> objectWrapper.hasGetter(name);<br>  &#125; <br><br>  <span class="hljs-comment">// 是否有指定的setter</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasSetter</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> objectWrapper.hasSetter(name);<br>  &#125;<br><br>  <span class="hljs-comment">// 是否有指定的getter</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasGetter</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> objectWrapper.hasGetter(name);<br>  &#125; <br><br>  <span class="hljs-comment">// 取得值</span><br>  <span class="hljs-comment">// 如person[0].birthdate.year</span><br>  <span class="hljs-comment">// 具体测试用例可以看MetaObjectTest</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getValue</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-type">PropertyTokenizer</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyTokenizer</span>(name);<br>    <span class="hljs-keyword">if</span> (prop.hasNext()) &#123;<br>      <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaValue</span> <span class="hljs-operator">=</span> metaObjectForProperty(prop.getIndexedName());<br>      <span class="hljs-keyword">if</span> (metaValue == SystemMetaObject.NULL_META_OBJECT) &#123;<br>        <span class="hljs-comment">// 如果上层就是null了，那就结束，返回null</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 否则继续看下一层，递归调用getValue</span><br>       <span class="hljs-keyword">return</span> metaValue.getValue(prop.getChildren());<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> objectWrapper.get(prop);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 为某个属性生成元对象</span><br>  <span class="hljs-keyword">public</span> MetaObject <span class="hljs-title function_">metaObjectForProperty</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-comment">// 这里的getValue是递归调用，但是由于由name包装成的PropertyTokenizer</span><br>    <span class="hljs-comment">// 没有children，所以会调用 objectWrapper.get(prop); 获取对应的属性</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> getValue(name);<br>    <span class="hljs-keyword">return</span> MetaObject.forObject(value, objectFactory, objectWrapperFactory);<br>  &#125; <br><br>  <span class="hljs-comment">// 设置值</span><br>  <span class="hljs-comment">// 如person[0].birthdate.year</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(String name, Object value)</span> &#123;<br>    <span class="hljs-type">PropertyTokenizer</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyTokenizer</span>(name);<br>    <span class="hljs-keyword">if</span> (prop.hasNext()) &#123;<br>      <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaValue</span> <span class="hljs-operator">=</span> metaObjectForProperty(prop.getIndexedName());<br>      <span class="hljs-keyword">if</span> (metaValue == SystemMetaObject.NULL_META_OBJECT) &#123; <br>        <span class="hljs-comment">// 这里的 prop.getChildren() != null 判断似乎不需要</span><br>        <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span> &amp;&amp; prop.getChildren() != <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-comment">// don&#x27;t instantiate child path if value is null</span><br>          <span class="hljs-comment">// 如果上层就是null了，还得看有没有儿子，没有那就结束</span><br>          <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// 否则还得new一个，委派给ObjectWrapper.instantiatePropertyValue</span><br>          metaValue = objectWrapper.instantiatePropertyValue(name, prop, objectFactory);<br>        &#125;<br>      &#125;<br>      <span class="hljs-comment">// 递归调用setValue</span><br>      metaValue.setValue(prop.getChildren(), value);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 到了最后一层了，所以委派给ObjectWrapper.set</span><br>      objectWrapper.set(prop, value);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> ObjectWrapper <span class="hljs-title function_">getObjectWrapper</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> objectWrapper;<br>  &#125; <br><br>  <span class="hljs-comment">// 是否是集合</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCollection</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> objectWrapper.isCollection();<br>  &#125; <br><br>  <span class="hljs-comment">// 添加属性</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Object element)</span> &#123;<br>    objectWrapper.add(element);<br>  &#125;<br><br>  <span class="hljs-comment">// 添加属性</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAll</span><span class="hljs-params">(List&lt;E&gt; list)</span> &#123;<br>    objectWrapper.addAll(list);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SystemMetaObject"><a href="#SystemMetaObject" class="headerlink" title="SystemMetaObject"></a>SystemMetaObject</h4><p>一些系统级别的元对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SystemMetaObject</span> &#123; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectFactory</span> <span class="hljs-variable">DEFAULT_OBJECT_FACTORY</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultObjectFactory</span>();<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectWrapperFactory</span> <span class="hljs-variable">DEFAULT_OBJECT_WRAPPER_FACTORY</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultObjectWrapperFactory</span>();<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">MetaObject</span> <span class="hljs-variable">NULL_META_OBJECT</span> <span class="hljs-operator">=</span> MetaObject.forObject(NullObject.class, DEFAULT_OBJECT_FACTORY, DEFAULT_OBJECT_WRAPPER_FACTORY); <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">SystemMetaObject</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// Prevent Instantiation of Static Class</span><br>  &#125; <br><br>  <span class="hljs-comment">// 空对象</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NullObject</span> &#123;<br>  &#125; <br><br>  <span class="hljs-comment">// 使用默认的对象工厂和对象包装器工厂实例化元对象</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> MetaObject <span class="hljs-title function_">forObject</span><span class="hljs-params">(Object object)</span> &#123;<br>    <span class="hljs-keyword">return</span> MetaObject.forObject(object, DEFAULT_OBJECT_FACTORY, DEFAULT_OBJECT_WRAPPER_FACTORY);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ObjectWrapper"><a href="#ObjectWrapper" class="headerlink" title="ObjectWrapper"></a>ObjectWrapper</h4><p>对象包装器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ObjectWrapper</span> &#123; <br><br>  <span class="hljs-comment">// 获取属性对应的值</span><br>  Object <span class="hljs-title function_">get</span><span class="hljs-params">(PropertyTokenizer prop)</span>;<br><br>  <span class="hljs-comment">// 设置属性对应的值</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(PropertyTokenizer prop, Object value)</span>; <br><br>  <span class="hljs-comment">// 查找属性</span><br>  String <span class="hljs-title function_">findProperty</span><span class="hljs-params">(String name, <span class="hljs-type">boolean</span> useCamelCaseMapping)</span>; <br><br>  <span class="hljs-comment">// 取得getter的名字列表</span><br>  String[] getGetterNames();<br><br>  <span class="hljs-comment">// 取得setter的名字列表</span><br>  String[] getSetterNames();<br><br>  <span class="hljs-comment">// 取得setter的类型</span><br>  Class&lt;?&gt; getSetterType(String name);<br><br>  <span class="hljs-comment">// 取得getter的类型</span><br>  Class&lt;?&gt; getGetterType(String name); <br><br>  <span class="hljs-comment">// 是否有指定的setter</span><br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasSetter</span><span class="hljs-params">(String name)</span>;<br><br>  <span class="hljs-comment">// 是否有指定的getter</span><br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasGetter</span><span class="hljs-params">(String name)</span>; <br><br>  <span class="hljs-comment">// 实例化属性</span><br>  MetaObject <span class="hljs-title function_">instantiatePropertyValue</span><span class="hljs-params">(String name, PropertyTokenizer prop, ObjectFactory objectFactory)</span>; <br><br>  <span class="hljs-comment">// 是否是集合</span><br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCollection</span><span class="hljs-params">()</span>;<br>  <br>  <span class="hljs-comment">// 添加属性</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Object element)</span>;<br>  <br>  <span class="hljs-comment">// 添加属性</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAll</span><span class="hljs-params">(List&lt;E&gt; element)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BaseWrapper"><a href="#BaseWrapper" class="headerlink" title="BaseWrapper"></a>BaseWrapper</h4><p>对象包装器的基类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseWrapper</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ObjectWrapper</span> &#123; <br><br>  <span class="hljs-comment">// 提供了一些util方法</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[] NO_ARGUMENTS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">protected</span> MetaObject metaObject; <br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-title function_">BaseWrapper</span><span class="hljs-params">(MetaObject metaObject)</span> &#123;<br>    <span class="hljs-built_in">this</span>.metaObject = metaObject;<br>  &#125; <br><br>  <span class="hljs-comment">// 解析集合</span><br>  <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">resolveCollection</span><span class="hljs-params">(PropertyTokenizer prop, Object object)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;&quot;</span>.equals(prop.getName())) &#123;<br>      <span class="hljs-keyword">return</span> object;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> metaObject.getValue(prop.getName());<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 取集合的值</span><br>  <span class="hljs-comment">// 中括号有2个意思，一个是Map，一个是List或数组</span><br>  <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">getCollectionValue</span><span class="hljs-params">(PropertyTokenizer prop, Object collection)</span> &#123;<br>    <span class="hljs-keyword">if</span> (collection <span class="hljs-keyword">instanceof</span> Map) &#123;<br>      <span class="hljs-comment">// map[&#x27;name&#x27;]</span><br>      <span class="hljs-keyword">return</span> ((Map) collection).get(prop.getIndex());<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> Integer.parseInt(prop.getIndex());<br>      <span class="hljs-keyword">if</span> (collection <span class="hljs-keyword">instanceof</span> List) &#123;<br>        <span class="hljs-comment">// list[0]</span><br>        <span class="hljs-keyword">return</span> ((List) collection).get(i);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (collection <span class="hljs-keyword">instanceof</span> Object[]) &#123;<br>        <span class="hljs-keyword">return</span> ((Object[]) collection)[i];<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (collection <span class="hljs-keyword">instanceof</span> <span class="hljs-type">char</span>[]) &#123;<br>        <span class="hljs-keyword">return</span> ((<span class="hljs-type">char</span>[]) collection)[i];<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (collection <span class="hljs-keyword">instanceof</span> <span class="hljs-type">boolean</span>[]) &#123;<br>        <span class="hljs-keyword">return</span> ((<span class="hljs-type">boolean</span>[]) collection)[i];<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (collection <span class="hljs-keyword">instanceof</span> <span class="hljs-type">byte</span>[]) &#123;<br>        <span class="hljs-keyword">return</span> ((<span class="hljs-type">byte</span>[]) collection)[i];<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (collection <span class="hljs-keyword">instanceof</span> <span class="hljs-type">double</span>[]) &#123;<br>        <span class="hljs-keyword">return</span> ((<span class="hljs-type">double</span>[]) collection)[i];<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (collection <span class="hljs-keyword">instanceof</span> <span class="hljs-type">float</span>[]) &#123;<br>        <span class="hljs-keyword">return</span> ((<span class="hljs-type">float</span>[]) collection)[i];<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (collection <span class="hljs-keyword">instanceof</span> <span class="hljs-type">int</span>[]) &#123;<br>        <span class="hljs-keyword">return</span> ((<span class="hljs-type">int</span>[]) collection)[i];<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (collection <span class="hljs-keyword">instanceof</span> <span class="hljs-type">long</span>[]) &#123;<br>        <span class="hljs-keyword">return</span> ((<span class="hljs-type">long</span>[]) collection)[i];<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (collection <span class="hljs-keyword">instanceof</span> <span class="hljs-type">short</span>[]) &#123;<br>        <span class="hljs-keyword">return</span> ((<span class="hljs-type">short</span>[]) collection)[i];<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectionException</span>(<span class="hljs-string">&quot;The &#x27;&quot;</span> + prop.getName() + <span class="hljs-string">&quot;&#x27; property of &quot;</span> + collection + <span class="hljs-string">&quot; is not a List or Array.&quot;</span>);<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 设集合的值</span><br>  <span class="hljs-comment">// 中括号有2个意思，一个是Map，一个是List或数组</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCollectionValue</span><span class="hljs-params">(PropertyTokenizer prop, Object collection, Object value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (collection <span class="hljs-keyword">instanceof</span> Map) &#123;<br>      ((Map) collection).put(prop.getIndex(), value);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> Integer.parseInt(prop.getIndex());<br>      <span class="hljs-keyword">if</span> (collection <span class="hljs-keyword">instanceof</span> List) &#123;<br>        ((List) collection).set(i, value);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (collection <span class="hljs-keyword">instanceof</span> Object[]) &#123;<br>        ((Object[]) collection)[i] = value;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (collection <span class="hljs-keyword">instanceof</span> <span class="hljs-type">char</span>[]) &#123;<br>        ((<span class="hljs-type">char</span>[]) collection)[i] = (Character) value;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (collection <span class="hljs-keyword">instanceof</span> <span class="hljs-type">boolean</span>[]) &#123;<br>        ((<span class="hljs-type">boolean</span>[]) collection)[i] = (Boolean) value;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (collection <span class="hljs-keyword">instanceof</span> <span class="hljs-type">byte</span>[]) &#123;<br>        ((<span class="hljs-type">byte</span>[]) collection)[i] = (Byte) value;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (collection <span class="hljs-keyword">instanceof</span> <span class="hljs-type">double</span>[]) &#123;<br>        ((<span class="hljs-type">double</span>[]) collection)[i] = (Double) value;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (collection <span class="hljs-keyword">instanceof</span> <span class="hljs-type">float</span>[]) &#123;<br>        ((<span class="hljs-type">float</span>[]) collection)[i] = (Float) value;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (collection <span class="hljs-keyword">instanceof</span> <span class="hljs-type">int</span>[]) &#123;<br>        ((<span class="hljs-type">int</span>[]) collection)[i] = (Integer) value;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (collection <span class="hljs-keyword">instanceof</span> <span class="hljs-type">long</span>[]) &#123;<br>        ((<span class="hljs-type">long</span>[]) collection)[i] = (Long) value;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (collection <span class="hljs-keyword">instanceof</span> <span class="hljs-type">short</span>[]) &#123;<br>        ((<span class="hljs-type">short</span>[]) collection)[i] = (Short) value;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectionException</span>(<span class="hljs-string">&quot;The &#x27;&quot;</span> + prop.getName() + <span class="hljs-string">&quot;&#x27; property of &quot;</span> + collection + <span class="hljs-string">&quot; is not a List or Array.&quot;</span>);<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BeanWrapper"><a href="#BeanWrapper" class="headerlink" title="BeanWrapper"></a>BeanWrapper</h4><p>Bean包装器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanWrapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseWrapper</span> &#123; <br><br>  <span class="hljs-comment">// 原来的对象</span><br>  <span class="hljs-keyword">private</span> Object object;<br>  <span class="hljs-comment">// 元类</span><br>  <span class="hljs-keyword">private</span> MetaClass metaClass; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">BeanWrapper</span><span class="hljs-params">(MetaObject metaObject, Object object)</span> &#123;<br>    <span class="hljs-built_in">super</span>(metaObject);<br>    <span class="hljs-built_in">this</span>.object = object;<br>    <span class="hljs-built_in">this</span>.metaClass = MetaClass.forClass(object.getClass());<br>  &#125; <br><br>  <span class="hljs-comment">// 在这里做最终的取值操作</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(PropertyTokenizer prop)</span> &#123;<br>    <span class="hljs-comment">// 如果有index(有中括号),说明是集合，那就要解析集合,调用的是BaseWrapper.resolveCollection 和 getCollectionValue</span><br>    <span class="hljs-keyword">if</span> (prop.getIndex() != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">collection</span> <span class="hljs-operator">=</span> resolveCollection(prop, object);<br>      <span class="hljs-keyword">return</span> getCollectionValue(prop, collection);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 否则，getBeanProperty</span><br>      <span class="hljs-keyword">return</span> getBeanProperty(prop, object);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">getBeanProperty</span><span class="hljs-params">(PropertyTokenizer prop, Object object)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 得到getter方法，然后调用</span><br>      <span class="hljs-type">Invoker</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> metaClass.getGetInvoker(prop.getName());<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> method.invoke(object, NO_ARGUMENTS);<br>      &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>        <span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(t);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (RuntimeException e) &#123;<br>      <span class="hljs-keyword">throw</span> e;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectionException</span>(<span class="hljs-string">&quot;Could not get property &#x27;&quot;</span> + prop.getName() + <span class="hljs-string">&quot;&#x27; from &quot;</span> + object.getClass() + <span class="hljs-string">&quot;.  Cause: &quot;</span> + t.toString(), t);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(PropertyTokenizer prop, Object value)</span> &#123;<br>    <span class="hljs-comment">// 如果有index,说明是集合，那就要解析集合,调用的是BaseWrapper.resolveCollection 和 setCollectionValue</span><br>    <span class="hljs-keyword">if</span> (prop.getIndex() != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">collection</span> <span class="hljs-operator">=</span> resolveCollection(prop, object);<br>      setCollectionValue(prop, collection, value);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 否则，setBeanProperty</span><br>      setBeanProperty(prop, object, value);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBeanProperty</span><span class="hljs-params">(PropertyTokenizer prop, Object object, Object value)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 得到setter方法，然后调用</span><br>      <span class="hljs-type">Invoker</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> metaClass.getSetInvoker(prop.getName());<br>      Object[] params = &#123;value&#125;;<br>      <span class="hljs-keyword">try</span> &#123;<br>        method.invoke(object, params);<br>      &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>        <span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(t);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectionException</span>(<span class="hljs-string">&quot;Could not set property &#x27;&quot;</span> + prop.getName() + <span class="hljs-string">&quot;&#x27; of &#x27;&quot;</span> + object.getClass() + <span class="hljs-string">&quot;&#x27; with value &#x27;&quot;</span> + value + <span class="hljs-string">&quot;&#x27; Cause: &quot;</span> + t.toString(), t);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">findProperty</span><span class="hljs-params">(String name, <span class="hljs-type">boolean</span> useCamelCaseMapping)</span> &#123;<br>    <span class="hljs-keyword">return</span> metaClass.findProperty(name, useCamelCaseMapping);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String[] getGetterNames() &#123;<br>    <span class="hljs-keyword">return</span> metaClass.getGetterNames();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String[] getSetterNames() &#123;<br>    <span class="hljs-keyword">return</span> metaClass.getSetterNames();<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Class&lt;?&gt; getSetterType(String name) &#123;<br>    <span class="hljs-type">PropertyTokenizer</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyTokenizer</span>(name);<br>    <span class="hljs-keyword">if</span> (prop.hasNext()) &#123;<br>      <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaValue</span> <span class="hljs-operator">=</span> metaObject.metaObjectForProperty(prop.getIndexedName());<br>      <span class="hljs-keyword">if</span> (metaValue == SystemMetaObject.NULL_META_OBJECT) &#123;<br>        <span class="hljs-keyword">return</span> metaClass.getSetterType(name);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> metaValue.getSetterType(prop.getChildren());<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> metaClass.getSetterType(name);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Class&lt;?&gt; getGetterType(String name) &#123;<br>    <span class="hljs-type">PropertyTokenizer</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyTokenizer</span>(name);<br>    <span class="hljs-keyword">if</span> (prop.hasNext()) &#123;<br>      <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaValue</span> <span class="hljs-operator">=</span> metaObject.metaObjectForProperty(prop.getIndexedName());<br>      <span class="hljs-keyword">if</span> (metaValue == SystemMetaObject.NULL_META_OBJECT) &#123;<br>        <span class="hljs-keyword">return</span> metaClass.getGetterType(name);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> metaValue.getGetterType(prop.getChildren());<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> metaClass.getGetterType(name);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-comment">// 这个绕来绕去的......</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasSetter</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-type">PropertyTokenizer</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyTokenizer</span>(name);<br>    <span class="hljs-keyword">if</span> (prop.hasNext()) &#123;<br>      <span class="hljs-keyword">if</span> (metaClass.hasSetter(prop.getIndexedName())) &#123;<br>        <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaValue</span> <span class="hljs-operator">=</span> metaObject.metaObjectForProperty(prop.getIndexedName());<br>        <span class="hljs-keyword">if</span> (metaValue == SystemMetaObject.NULL_META_OBJECT) &#123;<br>          <span class="hljs-keyword">return</span> metaClass.hasSetter(name);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> metaValue.hasSetter(prop.getChildren());<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> metaClass.hasSetter(name);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasGetter</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-type">PropertyTokenizer</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyTokenizer</span>(name);<br>    <span class="hljs-keyword">if</span> (prop.hasNext()) &#123;<br>      <span class="hljs-keyword">if</span> (metaClass.hasGetter(prop.getIndexedName())) &#123;<br>        <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaValue</span> <span class="hljs-operator">=</span> metaObject.metaObjectForProperty(prop.getIndexedName());<br>        <span class="hljs-keyword">if</span> (metaValue == SystemMetaObject.NULL_META_OBJECT) &#123;<br>          <span class="hljs-keyword">return</span> metaClass.hasGetter(name);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> metaValue.hasGetter(prop.getChildren());<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> metaClass.hasGetter(name);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> MetaObject <span class="hljs-title function_">instantiatePropertyValue</span><span class="hljs-params">(String name, PropertyTokenizer prop, ObjectFactory objectFactory)</span> &#123;<br>    MetaObject metaValue;<br>    Class&lt;?&gt; type = getSetterType(prop.getName());<br>    <span class="hljs-keyword">try</span> &#123; <br>      <span class="hljs-comment">// 实例化属性</span><br>      <span class="hljs-type">Object</span> <span class="hljs-variable">newObject</span> <span class="hljs-operator">=</span> objectFactory.create(type);<br>      metaValue = MetaObject.forObject(newObject, metaObject.getObjectFactory(), metaObject.getObjectWrapperFactory());<br>      <span class="hljs-comment">// 属性填充</span><br>      set(prop, newObject);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectionException</span>(<span class="hljs-string">&quot;Cannot set value of property &#x27;&quot;</span> + name + <span class="hljs-string">&quot;&#x27; because &#x27;&quot;</span> + name + <span class="hljs-string">&quot;&#x27; is null and cannot be instantiated on instance of &quot;</span> + type.getName() + <span class="hljs-string">&quot;. Cause:&quot;</span> + e.toString(), e);<br>    &#125;<br>    <span class="hljs-keyword">return</span> metaValue;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCollection</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Object element)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAll</span><span class="hljs-params">(List&lt;E&gt; list)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="CollectionWrapper"><a href="#CollectionWrapper" class="headerlink" title="CollectionWrapper"></a>CollectionWrapper</h4><p>Collection包装器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CollectionWrapper</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ObjectWrapper</span> &#123; <br><br>  <span class="hljs-comment">// 原来的对象</span><br>  <span class="hljs-keyword">private</span> Collection&lt;Object&gt; object; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">CollectionWrapper</span><span class="hljs-params">(MetaObject metaObject, Collection&lt;Object&gt; object)</span> &#123;<br>    <span class="hljs-built_in">this</span>.object = object;<br>  &#125; <br><br>  <span class="hljs-comment">// get,set都是不允许的,只能添加元素</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(PropertyTokenizer prop)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(PropertyTokenizer prop, Object value)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">findProperty</span><span class="hljs-params">(String name, <span class="hljs-type">boolean</span> useCamelCaseMapping)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String[] getGetterNames() &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Class&lt;?&gt; getSetterType(String name) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Class&lt;?&gt; getGetterType(String name) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasSetter</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasGetter</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> MetaObject <span class="hljs-title function_">instantiatePropertyValue</span><span class="hljs-params">(String name, PropertyTokenizer prop, ObjectFactory objectFactory)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCollection</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Object element)</span> &#123;<br>    object.add(element);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAll</span><span class="hljs-params">(List&lt;E&gt; element)</span> &#123;<br>    object.addAll(element);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MapWrapper"><a href="#MapWrapper" class="headerlink" title="MapWrapper"></a>MapWrapper</h4><p>Map包装器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapWrapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseWrapper</span> &#123;<br> <br>  <span class="hljs-comment">// 原来的对象</span><br>  <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; map;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">MapWrapper</span><span class="hljs-params">(MetaObject metaObject, Map&lt;String, Object&gt; map)</span> &#123;<br>    <span class="hljs-built_in">super</span>(metaObject);<br>    <span class="hljs-built_in">this</span>.map = map;<br>  &#125; <br><br>  <span class="hljs-comment">// get,set是允许的</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(PropertyTokenizer prop)</span> &#123;<br>    <span class="hljs-comment">// 如果有index,说明是集合，那就要分解集合,调用的是BaseWrapper.resolveCollection 和 getCollectionVal            ue</span><br>    <span class="hljs-comment">// map的元素当作集合处理</span><br>    <span class="hljs-keyword">if</span> (prop.getIndex() != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">collection</span> <span class="hljs-operator">=</span> resolveCollection(prop, map);<br>      <span class="hljs-keyword">return</span> getCollectionValue(prop, collection);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> map.get(prop.getName());<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(PropertyTokenizer prop, Object value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (prop.getIndex() != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">collection</span> <span class="hljs-operator">=</span> resolveCollection(prop, map);<br>      setCollectionValue(prop, collection, value);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      map.put(prop.getName(), value);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">findProperty</span><span class="hljs-params">(String name, <span class="hljs-type">boolean</span> useCamelCaseMapping)</span> &#123;<br>    <span class="hljs-keyword">return</span> name;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String[] getGetterNames() &#123;<br>    <span class="hljs-keyword">return</span> map.keySet().toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[map.keySet().size()]);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String[] getSetterNames() &#123;<br>    <span class="hljs-keyword">return</span> map.keySet().toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[map.keySet().size()]);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Class&lt;?&gt; getSetterType(String name) &#123;<br>    <span class="hljs-type">PropertyTokenizer</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyTokenizer</span>(name);<br>    <span class="hljs-keyword">if</span> (prop.hasNext()) &#123;<br>      <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaValue</span> <span class="hljs-operator">=</span> metaObject.metaObjectForProperty(prop.getIndexedName());<br>      <span class="hljs-keyword">if</span> (metaValue == SystemMetaObject.NULL_META_OBJECT) &#123;<br>        <span class="hljs-keyword">return</span> Object.class;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> metaValue.getSetterType(prop.getChildren());<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (map.get(name) != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> map.get(name).getClass();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> Object.class;<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Class&lt;?&gt; getGetterType(String name) &#123;<br>    <span class="hljs-type">PropertyTokenizer</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyTokenizer</span>(name);<br>    <span class="hljs-keyword">if</span> (prop.hasNext()) &#123;<br>      <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaValue</span> <span class="hljs-operator">=</span> metaObject.metaObjectForProperty(prop.getIndexedName());<br>      <span class="hljs-keyword">if</span> (metaValue == SystemMetaObject.NULL_META_OBJECT) &#123;<br>        <span class="hljs-keyword">return</span> Object.class;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> metaValue.getGetterType(prop.getChildren());<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (map.get(name) != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> map.get(name).getClass();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> Object.class;<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-comment">// map一直允许set操作</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasSetter</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasGetter</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-type">PropertyTokenizer</span> <span class="hljs-variable">prop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertyTokenizer</span>(name);<br>    <span class="hljs-keyword">if</span> (prop.hasNext()) &#123; <br>      <span class="hljs-comment">// 真的会有人以 key[index] 作为map的key吗...</span><br>      <span class="hljs-keyword">if</span> (map.containsKey(prop.getIndexedName())) &#123;<br>        <span class="hljs-type">MetaObject</span> <span class="hljs-variable">metaValue</span> <span class="hljs-operator">=</span> metaObject.metaObjectForProperty(prop.getIndexedName());<br>        <span class="hljs-keyword">if</span> (metaValue == SystemMetaObject.NULL_META_OBJECT) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> metaValue.hasGetter(prop.getChildren());<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> map.containsKey(prop.getName());<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> MetaObject <span class="hljs-title function_">instantiatePropertyValue</span><span class="hljs-params">(String name, PropertyTokenizer prop, ObjectFactory objectFactory)</span> &#123;<br>    HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>    set(prop, map);<br>    <span class="hljs-keyword">return</span> MetaObject.forObject(map, metaObject.getObjectFactory(), metaObject.getObjectWrapperFactory());<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCollection</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Object element)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> &lt;E&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAll</span><span class="hljs-params">(List&lt;E&gt; element)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ObjectWrapperFactory"><a href="#ObjectWrapperFactory" class="headerlink" title="ObjectWrapperFactory"></a>ObjectWrapperFactory</h4><p>对象包装器工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ObjectWrapperFactory</span> &#123; <br>    <br>  <span class="hljs-comment">// 有没有包装器</span><br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasWrapperFor</span><span class="hljs-params">(Object object)</span>;<br>  <br>  <span class="hljs-comment">// 得到包装器</span><br>  ObjectWrapper <span class="hljs-title function_">getWrapperFor</span><span class="hljs-params">(MetaObject metaObject, Object object)</span>;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="DefaultObjectWrapperFactory"><a href="#DefaultObjectWrapperFactory" class="headerlink" title="DefaultObjectWrapperFactory"></a>DefaultObjectWrapperFactory</h4><p>默认的对象包装器工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultObjectWrapperFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ObjectWrapperFactory</span> &#123;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-comment">// 默认没有包装器</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasWrapperFor</span><span class="hljs-params">(Object object)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br><br>  <span class="hljs-comment">// 默认抛异常</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> ObjectWrapper <span class="hljs-title function_">getWrapperFor</span><span class="hljs-params">(MetaObject metaObject, Object object)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectionException</span>(<span class="hljs-string">&quot;The DefaultObjectWrapperFactory should never be called to provide an ObjectWrapper.&quot;</span>);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ExceptionUtil"><a href="#ExceptionUtil" class="headerlink" title="ExceptionUtil"></a>ExceptionUtil</h4><p>对异常进行解包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionUtil</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">ExceptionUtil</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// Prevent Instantiation</span><br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Throwable <span class="hljs-title function_">unwrapThrowable</span><span class="hljs-params">(Throwable wrapped)</span> &#123;<br>    <span class="hljs-type">Throwable</span> <span class="hljs-variable">unwrapped</span> <span class="hljs-operator">=</span> wrapped;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>      <span class="hljs-comment">// 处理2种异常，InvocationTargetException和UndeclaredThrowableException，将它们解包,从而得到真正的异常</span><br>      <span class="hljs-keyword">if</span> (unwrapped <span class="hljs-keyword">instanceof</span> InvocationTargetException) &#123;<br>        unwrapped = ((InvocationTargetException) unwrapped).getTargetException();<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (unwrapped <span class="hljs-keyword">instanceof</span> UndeclaredThrowableException) &#123;<br>        unwrapped = ((UndeclaredThrowableException) unwrapped).getUndeclaredThrowable();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> unwrapped;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6-io</title>
    <link href="/2023/07/06/6-io/"/>
    <url>/2023/07/06/6-io/</url>
    
    <content type="html"><![CDATA[<h4 id="JBoss6VFS"><a href="#JBoss6VFS" class="headerlink" title="JBoss6VFS"></a>JBoss6VFS</h4><p>​ 一个使用JBoss6提供的VFS API的VFS实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JBoss6VFS</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">VFS</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LogFactory.getLog(ResolverUtil.class);<br><br>  <span class="hljs-comment">// 一个模仿JBoss VirtualFile类的微小子集的类</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VirtualFile</span> &#123;<br>    <span class="hljs-keyword">static</span> Class&lt;?&gt; VirtualFile;<br>    <span class="hljs-keyword">static</span> Method getPathNameRelativeTo, getChildrenRecursively;<br><br>    Object virtualFile;<br><br>    VirtualFile(Object virtualFile) &#123;<br>      <span class="hljs-built_in">this</span>.virtualFile = virtualFile;<br>    &#125;<br><br>    String <span class="hljs-title function_">getPathNameRelativeTo</span><span class="hljs-params">(VirtualFile parent)</span> &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> invoke(getPathNameRelativeTo, virtualFile, parent.virtualFile);<br>      &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-comment">// This exception is not thrown by the called method</span><br>        log.error(<span class="hljs-string">&quot;This should not be possible. VirtualFile.getPathNameRelativeTo() threw IOException.&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125;<br>    &#125;<br><br>    List&lt;VirtualFile&gt; <span class="hljs-title function_">getChildren</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>      List&lt;?&gt; objects = invoke(getChildrenRecursively, virtualFile);<br>      List&lt;VirtualFile&gt; children = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;VirtualFile&gt;(objects.size());<br>      <span class="hljs-keyword">for</span> (Object object : objects) &#123;<br>        children.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">VirtualFile</span>(object));<br>      &#125;<br>      <span class="hljs-keyword">return</span> children;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 一个模仿JBoss VFS类的微小子集的类</span><br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VFS</span> &#123;<br>    <span class="hljs-keyword">static</span> Class&lt;?&gt; VFS;<br>    <span class="hljs-keyword">static</span> Method getChild;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">VFS</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// Prevent Instantiation</span><br>    &#125;<br><br>    <span class="hljs-keyword">static</span> VirtualFile <span class="hljs-title function_">getChild</span><span class="hljs-params">(URL url)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> invoke(getChild, VFS, url);<br>      <span class="hljs-keyword">return</span> o == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : <span class="hljs-keyword">new</span> <span class="hljs-title class_">VirtualFile</span>(o);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 执行方法并抛出异常</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">invoke</span><span class="hljs-params">(Method method, Object object, Object... parameters)</span><br>      <span class="hljs-keyword">throws</span> IOException, RuntimeException &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> (T) method.invoke(object, parameters);<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>      <span class="hljs-keyword">if</span> (e.getTargetException() <span class="hljs-keyword">instanceof</span> IOException) &#123;<br>        <span class="hljs-keyword">throw</span> (IOException) e.getTargetException();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>      &#125;<br>    &#125;<br>    &#125;    <br><br>  <span class="hljs-comment">// 表示这个VFS在当前环境下是否可用</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Boolean valid;<br><br>  <span class="hljs-comment">// 找到访问JBoss 6 VFS所需的所有类和方法</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (valid == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// Assume valid. It will get flipped later if something goes wrong.</span><br>      valid = Boolean.TRUE;<br><br>      <span class="hljs-comment">// Look up and verify required classes</span><br>      VFS.VFS = checkNotNull(getClass(<span class="hljs-string">&quot;org.jboss.vfs.VFS&quot;</span>));<br>      VirtualFile.VirtualFile = checkNotNull(getClass(<span class="hljs-string">&quot;org.jboss.vfs.VirtualFile&quot;</span>));<br><br>      <span class="hljs-comment">// Look up and verify required methods</span><br>      VFS.getChild = checkNotNull(getMethod(VFS.VFS, <span class="hljs-string">&quot;getChild&quot;</span>, URL.class));<br>      VirtualFile.getChildrenRecursively = checkNotNull(getMethod(VirtualFile.VirtualFile,<br>          <span class="hljs-string">&quot;getChildrenRecursively&quot;</span>));<br>      VirtualFile.getPathNameRelativeTo = checkNotNull(getMethod(VirtualFile.VirtualFile,<br>          <span class="hljs-string">&quot;getPathNameRelativeTo&quot;</span>, VirtualFile.VirtualFile));<br><br>      <span class="hljs-comment">// Verify that the API has not changed</span><br>      checkReturnType(VFS.getChild, VirtualFile.VirtualFile);<br>      checkReturnType(VirtualFile.getChildrenRecursively, List.class);<br>      checkReturnType(VirtualFile.getPathNameRelativeTo, String.class);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 通过当前线程的上下文类加载器根据类名获取类</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> Class&lt;?&gt; getClass(String className) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> Thread.currentThread().getContextClassLoader().loadClass(className);<br><span class="hljs-comment">//      return ReflectUtil.findClass(className);</span><br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>      log.debug(<span class="hljs-string">&quot;Class not found: &quot;</span> + className);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 如果对象为null，表示JBoss 6 VFS API在当前环境下不可用</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">checkNotNull</span><span class="hljs-params">(T object)</span> &#123;<br>    <span class="hljs-keyword">if</span> (object == <span class="hljs-literal">null</span>) &#123;<br>      setInvalid();<br>    &#125;<br>    <span class="hljs-keyword">return</span> object;<br>  &#125;  <br><br>  <span class="hljs-comment">// 根据方法名和参数获取类的某个方法</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> Method <span class="hljs-title function_">getMethod</span><span class="hljs-params">(Class&lt;?&gt; clazz, String methodName, Class&lt;?&gt;... parameterTypes)</span> &#123;<br>    <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> clazz.getMethod(methodName, parameterTypes);<br>    &#125; <span class="hljs-keyword">catch</span> (SecurityException e) &#123;<br>      log.error(<span class="hljs-string">&quot;Security exception looking for method &quot;</span> + clazz.getName() + <span class="hljs-string">&quot;.&quot;</span> + methodName + <span class="hljs-string">&quot;.  Cause: &quot;</span> + e);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>      log.error(<span class="hljs-string">&quot;Method not found &quot;</span> + clazz.getName() + <span class="hljs-string">&quot;.&quot;</span> + methodName + <span class="hljs-string">&quot;.&quot;</span> + methodName + <span class="hljs-string">&quot;.  Cause: &quot;</span> + e);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125;  <br><br>  <span class="hljs-comment">// 检查方法的返回值是否和预期的相同，以此来检查方法是否发生了变化，</span><br>  <span class="hljs-comment">// 如果方法发生了变化，设置JBoss 6 VFS API在当前环境下不可用</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkReturnType</span><span class="hljs-params">(Method method, Class&lt;?&gt; expected)</span> &#123;<br>    <span class="hljs-keyword">if</span> (method != <span class="hljs-literal">null</span> &amp;&amp; !expected.isAssignableFrom(method.getReturnType())) &#123;<br>      log.error(<span class="hljs-string">&quot;Method &quot;</span> + method.getClass().getName() + <span class="hljs-string">&quot;.&quot;</span> + method.getName()<br>          + <span class="hljs-string">&quot;(..) should return &quot;</span> + expected.getName() + <span class="hljs-string">&quot; but returns &quot;</span><br>          + method.getReturnType().getName() + <span class="hljs-string">&quot; instead.&quot;</span>);<br>      setInvalid();<br>    &#125;<br>  &#125;  <br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setInvalid</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (JBoss6VFS.valid == Boolean.TRUE) &#123;<br>      log.debug(<span class="hljs-string">&quot;JBoss 6 VFS API is not available in this environment.&quot;</span>);<br>      JBoss6VFS.valid = Boolean.FALSE;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">static</span> &#123;<br>    initialize();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-comment">// 递归列出所有资源的完整资源路径，这些资源是由URL标识的资源的子资源。</span><br>  <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(URL url, String path)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    VirtualFile directory;<br>    directory = VFS.getChild(url);<br>    <span class="hljs-keyword">if</span> (directory == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> Collections.emptyList();<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!path.endsWith(<span class="hljs-string">&quot;/&quot;</span>)) &#123;<br>      path += <span class="hljs-string">&quot;/&quot;</span>;<br>    &#125;<br><br>    List&lt;VirtualFile&gt; children = directory.getChildren();<br>    List&lt;String&gt; names = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;(children.size());<br>    <span class="hljs-keyword">for</span> (VirtualFile vf : children) &#123;<br>      names.add(path + vf.getPathNameRelativeTo(directory));<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> names;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="DefaultVFS"><a href="#DefaultVFS" class="headerlink" title="DefaultVFS"></a>DefaultVFS</h4><p>默认的VFS实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultVFS</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">VFS</span> &#123; <br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LogFactory.getLog(ResolverUtil.class);<br> <br>  <span class="hljs-comment">/** The magic header that indicates a JAR (ZIP) file. */</span><br>  <span class="hljs-comment">// 表示jar类型文件的魔数头</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] JAR_MAGIC = &#123; <span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> &#125;;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125; <br><br>  <span class="hljs-comment">// 试图解构给定的URL，以找到一个包含该URL所引用的资源的JAR文件。</span><br>  <span class="hljs-comment">// 也就是说，假设该URL引用了一个JAR条目，</span><br>  <span class="hljs-comment">// 该方法将返回一个引用一个JAR文件的URL，这个JAR文件包含此条目。</span><br>  <span class="hljs-comment">// 如果不能找到JAR，那么这个方法就会返回null。</span><br>  <span class="hljs-keyword">protected</span> URL <span class="hljs-title function_">findJarForResource</span><span class="hljs-params">(URL url)</span> <span class="hljs-keyword">throws</span> MalformedURLException &#123;<br>    log.debug(<span class="hljs-string">&quot;Find JAR URL: &quot;</span> + url);<br><br>    <span class="hljs-comment">// If the file part of the URL is itself a URL, then that URL probably points to the JAR</span><br>    <span class="hljs-comment">// 如果URL的文件部分本身是一个URL，那么其可能指向jar</span><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">for</span> (;;) &#123;<br>        url = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(url.getFile());<br>        log.debug(<span class="hljs-string">&quot;Inner URL: &quot;</span> + url);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (MalformedURLException e) &#123;<br>      <span class="hljs-comment">// This will happen at some point and serves as a break in the loop</span><br>    &#125;<br><br>    <span class="hljs-comment">// Look for the .jar extension and chop off everything after that</span><br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">jarUrl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(url.toExternalForm());<br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> jarUrl.lastIndexOf(<span class="hljs-string">&quot;.jar&quot;</span>);<br>    <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">0</span>) &#123;<br>      jarUrl.setLength(index + <span class="hljs-number">4</span>);<br>      log.debug(<span class="hljs-string">&quot;Extracted JAR URL: &quot;</span> + jarUrl);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>      log.debug(<span class="hljs-string">&quot;Not a JAR: &quot;</span> + jarUrl);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Try to open and test it</span><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">URL</span> <span class="hljs-variable">testUrl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(jarUrl.toString());<br>      <span class="hljs-keyword">if</span> (isJar(testUrl)) &#123;<br>        <span class="hljs-keyword">return</span> testUrl;<br>      &#125;<br>      <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// WebLogic fix: check if the URL&#x27;s file exists in the filesystem.</span><br>        log.debug(<span class="hljs-string">&quot;Not a JAR: &quot;</span> + jarUrl);<br>        jarUrl.replace(<span class="hljs-number">0</span>, jarUrl.length(), testUrl.getFile());<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(jarUrl.toString());<br><br>        <span class="hljs-comment">// File name might be URL-encoded</span><br>        <span class="hljs-keyword">if</span> (!file.exists()) &#123;<br>          <span class="hljs-keyword">try</span> &#123;<br>            file = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(URLEncoder.encode(jarUrl.toString(), <span class="hljs-string">&quot;UTF-8&quot;</span>));<br>          &#125; <span class="hljs-keyword">catch</span> (UnsupportedEncodingException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Unsupported encoding?  UTF-8?  That&#x27;s unpossible.&quot;</span>);<br>          &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>          log.debug(<span class="hljs-string">&quot;Trying real file: &quot;</span> + file.getAbsolutePath());<br>          testUrl = file.toURI().toURL();<br>          <span class="hljs-keyword">if</span> (isJar(testUrl)) &#123;<br>            <span class="hljs-keyword">return</span> testUrl;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (MalformedURLException e) &#123;<br>      log.warn(<span class="hljs-string">&quot;Invalid JAR URL: &quot;</span> + jarUrl);<br>    &#125;<br><br>    log.debug(<span class="hljs-string">&quot;Not a JAR: &quot;</span> + jarUrl);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125; <br><br>  <span class="hljs-comment">// 判断给定URL所代表的资源是否是一个jar文件</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isJar</span><span class="hljs-params">(URL url)</span> &#123;<br>    <span class="hljs-keyword">return</span> isJar(url, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[JAR_MAGIC.length]);<br>  &#125; <br><br>  <span class="hljs-comment">// 具体是通过魔数进行的判断</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isJar</span><span class="hljs-params">(URL url, <span class="hljs-type">byte</span>[] buffer)</span> &#123;<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      is = url.openStream();<br>      is.read(buffer, <span class="hljs-number">0</span>, JAR_MAGIC.length);<br>      <span class="hljs-comment">// 只有魔数匹配，才认为是jar</span><br>      <span class="hljs-keyword">if</span> (Arrays.equals(buffer, JAR_MAGIC)) &#123;<br>        log.debug(<span class="hljs-string">&quot;Found JAR: &quot;</span> + url);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-comment">// Failure to read the stream means this is not a JAR</span><br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-keyword">if</span> (is != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          is.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>          <span class="hljs-comment">// Ignore</span><br>        &#125;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(URL url, String path)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      List&lt;String&gt; resources = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><br>      <span class="hljs-comment">// First, try to find the URL of a JAR file containing the requested resource. If a JAR</span><br>      <span class="hljs-comment">// file is found, then we&#x27;ll list child resources by reading the JAR.</span><br>      <span class="hljs-type">URL</span> <span class="hljs-variable">jarUrl</span> <span class="hljs-operator">=</span> findJarForResource(url);<br>      <span class="hljs-keyword">if</span> (jarUrl != <span class="hljs-literal">null</span>) &#123;<br>        is = jarUrl.openStream();<br>        log.debug(<span class="hljs-string">&quot;Listing &quot;</span> + url);<br>        <span class="hljs-comment">// 用JDK自带的JarInputStream来读取jar包</span><br>        resources = listResources(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JarInputStream</span>(is), path);<br>      &#125;<br>      <span class="hljs-keyword">else</span> &#123;<br>        List&lt;String&gt; children = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>        <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-keyword">if</span> (isJar(url)) &#123;<br>            <span class="hljs-comment">// Some versions of JBoss VFS might give a JAR stream even if the resource</span><br>            <span class="hljs-comment">// referenced by the URL isn&#x27;t actually a JAR</span><br>            is = url.openStream();<br>            <span class="hljs-type">JarInputStream</span> <span class="hljs-variable">jarInput</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JarInputStream</span>(is);<br>            log.debug(<span class="hljs-string">&quot;Listing &quot;</span> + url);<br>            <span class="hljs-keyword">for</span> (JarEntry entry; (entry = jarInput.getNextJarEntry()) != <span class="hljs-literal">null</span>;) &#123;<br>              log.debug(<span class="hljs-string">&quot;Jar entry: &quot;</span> + entry.getName());<br>              children.add(entry.getName());<br>            &#125;<br>            jarInput.close();<br>          &#125;<br>          <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">             * Some servlet containers allow reading from directory resources like a</span><br><span class="hljs-comment">             * text file, listing the child resources one per line. However, there is no</span><br><span class="hljs-comment">             * way to differentiate between directory and file resources just by reading</span><br><span class="hljs-comment">             * them. To work around that, as each line is read, try to look it up via</span><br><span class="hljs-comment">             * the class loader as a child of the current resource. If any line fails</span><br><span class="hljs-comment">             * then we assume the current resource is not a directory.</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-comment">// 一些servlet容器允许像文本文件一样从目录资源中读取，每行列出一个子资源。</span><br>            <span class="hljs-comment">// 然而，仅仅通过读取目录资源和文件资源是没有办法区分的。</span><br>            <span class="hljs-comment">// 为了解决这个问题，在读取每一行时，</span><br>            <span class="hljs-comment">// 尝试通过类加载器将其作为当前资源的一个子资源来查找。</span><br>            <span class="hljs-comment">// 如果任何一行失败 那么我们就假设当前资源不是一个目录。</span><br>            is = url.openStream();<br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is));<br>            List&lt;String&gt; lines = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>            <span class="hljs-keyword">for</span> (String line; (line = reader.readLine()) != <span class="hljs-literal">null</span>;) &#123;<br>              log.debug(<span class="hljs-string">&quot;Reader entry: &quot;</span> + line);<br>              lines.add(line);<br>              <span class="hljs-keyword">if</span> (getResources(path + <span class="hljs-string">&quot;/&quot;</span> + line).isEmpty()) &#123;<br>                lines.clear();<br>                <span class="hljs-keyword">break</span>;<br>              &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (!lines.isEmpty()) &#123;<br>              log.debug(<span class="hljs-string">&quot;Listing &quot;</span> + url);<br>              children.addAll(lines);<br>            &#125;<br>          &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>          <span class="hljs-comment">/*</span><br><span class="hljs-comment">           * For file URLs the openStream() call might fail, depending on the servlet</span><br><span class="hljs-comment">           * container, because directories can&#x27;t be opened for reading. If that happens,</span><br><span class="hljs-comment">           * then list the directory directly instead.</span><br><span class="hljs-comment">           */</span><br>          <span class="hljs-comment">// 有的servlet容器 openStream()方法可能会报错，因为目录不能被打开用于read</span><br>          <span class="hljs-comment">// 因此如果出现相应的报错，直接递归调用list遍历目录</span><br>          <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;file&quot;</span>.equals(url.getProtocol())) &#123;<br>            <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(url.getFile());<br>            log.debug(<span class="hljs-string">&quot;Listing directory &quot;</span> + file.getAbsolutePath());<br>            <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<br>              log.debug(<span class="hljs-string">&quot;Listing &quot;</span> + url);<br>              children = Arrays.asList(file.list());<br>            &#125;<br>          &#125;<br>          <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// No idea where the exception came from so rethrow it</span><br>            <span class="hljs-keyword">throw</span> e;<br>          &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// The URL prefix to use when recursively listing child resources</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">prefix</span> <span class="hljs-operator">=</span> url.toExternalForm();<br>        <span class="hljs-keyword">if</span> (!prefix.endsWith(<span class="hljs-string">&quot;/&quot;</span>)) &#123;<br>          prefix = prefix + <span class="hljs-string">&quot;/&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// Iterate over immediate children, adding files and recursing into directories</span><br>        <span class="hljs-comment">// 对子目录进行递归调用</span><br>        <span class="hljs-keyword">for</span> (String child : children) &#123;<br>          <span class="hljs-type">String</span> <span class="hljs-variable">resourcePath</span> <span class="hljs-operator">=</span> path + <span class="hljs-string">&quot;/&quot;</span> + child;<br>          resources.add(resourcePath);<br>          <span class="hljs-type">URL</span> <span class="hljs-variable">childUrl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(prefix + child);<br>          resources.addAll(list(childUrl, resourcePath));<br>        &#125;<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> resources;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-keyword">if</span> (is != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          is.close();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>          <span class="hljs-comment">// Ignore</span><br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">protected</span> List&lt;String&gt; <span class="hljs-title function_">listResources</span><span class="hljs-params">(JarInputStream jar, String path)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// Include the leading and trailing slash when matching names</span><br>    <span class="hljs-keyword">if</span> (!path.startsWith(<span class="hljs-string">&quot;/&quot;</span>)) &#123;<br>      path = <span class="hljs-string">&quot;/&quot;</span> + path;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!path.endsWith(<span class="hljs-string">&quot;/&quot;</span>)) &#123;<br>      path = path + <span class="hljs-string">&quot;/&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Iterate over the entries and collect those that begin with the requested path</span><br>    List&lt;String&gt; resources = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    <span class="hljs-keyword">for</span> (JarEntry entry; (entry = jar.getNextJarEntry()) != <span class="hljs-literal">null</span>;) &#123;<br>      <span class="hljs-keyword">if</span> (!entry.isDirectory()) &#123;<br>        <span class="hljs-comment">// Add leading slash if it&#x27;s missing</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> entry.getName();<br>        <span class="hljs-keyword">if</span> (!name.startsWith(<span class="hljs-string">&quot;/&quot;</span>)) &#123;<br>          name = <span class="hljs-string">&quot;/&quot;</span> + name;<br>        &#125;<br><br>        <span class="hljs-comment">// Check file name</span><br>        <span class="hljs-keyword">if</span> (name.startsWith(path)) &#123;<br>          log.debug(<span class="hljs-string">&quot;Found resource: &quot;</span> + name);<br>          <span class="hljs-comment">// Trim leading slash</span><br>          resources.add(name.substring(<span class="hljs-number">1</span>));<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> resources;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="VFS"><a href="#VFS" class="headerlink" title="VFS"></a>VFS</h4><p>虚拟文件系统，用来读取应用服务器里的资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VFS</span> &#123; <br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LogFactory.getLog(ResolverUtil.class);<br>  <span class="hljs-comment">/** The built-in implementations. */</span><br>  <span class="hljs-comment">// 默认提供2个实现 JBoss6VFS,DefaultVFS</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Class&lt;?&gt;[] IMPLEMENTATIONS = &#123; JBoss6VFS.class, DefaultVFS.class &#125;;<br><br>  <span class="hljs-comment">/** The list to which implementations are added by &#123;<span class="hljs-doctag">@link</span> #addImplClass(Class)&#125;. */</span><br>  <span class="hljs-comment">// 这里是提供一个用户扩展点，可以让用户自定义VFS实现</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> List&lt;Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">VFS</span>&gt;&gt; USER_IMPLEMENTATIONS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">VFS</span>&gt;&gt;();<br><br>  <span class="hljs-comment">/** Singleton instance. */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> VFS instance; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> VFS <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (instance != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><br>    <span class="hljs-comment">// Try the user implementations first, then the built-ins</span><br>    List&lt;Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">VFS</span>&gt;&gt; impls = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">VFS</span>&gt;&gt;();<br>    impls.addAll(USER_IMPLEMENTATIONS);<br>    impls.addAll(Arrays.asList((Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">VFS</span>&gt;[]) IMPLEMENTATIONS));<br><br>    <span class="hljs-comment">// Try each implementation class until a valid one is found</span><br>    <span class="hljs-comment">// 遍历查找实现类，返回第一个找到的</span><br>    <span class="hljs-type">VFS</span> <span class="hljs-variable">vfs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; vfs == <span class="hljs-literal">null</span> || !vfs.isValid(); i++) &#123;<br>      Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">VFS</span>&gt; impl = impls.get(i);<br>      <span class="hljs-keyword">try</span> &#123;<br>        vfs = impl.newInstance();<br>        <span class="hljs-keyword">if</span> (vfs == <span class="hljs-literal">null</span> || !vfs.isValid()) &#123;<br>          log.debug(<span class="hljs-string">&quot;VFS implementation &quot;</span> + impl.getName() +<br>              <span class="hljs-string">&quot; is not valid in this environment.&quot;</span>);<br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>        log.error(<span class="hljs-string">&quot;Failed to instantiate &quot;</span> + impl, e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>        log.error(<span class="hljs-string">&quot;Failed to instantiate &quot;</span> + impl, e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125;<br>    &#125;<br><br>    log.debug(<span class="hljs-string">&quot;Using VFS adapter &quot;</span> + vfs.getClass().getName());<br>    VFS.instance = vfs;<br>    <span class="hljs-keyword">return</span> VFS.instance;<br>  &#125; <br><br>  <span class="hljs-comment">// 添加自定义VFS实现类</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addImplClass</span><span class="hljs-params">(Class&lt;? extends VFS&gt; clazz)</span> &#123;<br>    <span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>      USER_IMPLEMENTATIONS.add(clazz);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 通过类名获取类</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> Class&lt;?&gt; getClass(String className) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> Thread.currentThread().getContextClassLoader().loadClass(className);<br><span class="hljs-comment">//      return ReflectUtil.findClass(className);</span><br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>      log.debug(<span class="hljs-string">&quot;Class not found: &quot;</span> + className);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 根据方法名和参数获取类的方法</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> Method <span class="hljs-title function_">getMethod</span><span class="hljs-params">(Class&lt;?&gt; clazz, String methodName, Class&lt;?&gt;... parameterTypes)</span> &#123;<br>    <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> clazz.getMethod(methodName, parameterTypes);<br>    &#125; <span class="hljs-keyword">catch</span> (SecurityException e) &#123;<br>      log.error(<span class="hljs-string">&quot;Security exception looking for method &quot;</span> + clazz.getName() + <span class="hljs-string">&quot;.&quot;</span> + methodName + <span class="hljs-string">&quot;.  Cause: &quot;</span> + e);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>      log.error(<span class="hljs-string">&quot;Method not found &quot;</span> + clazz.getName() + <span class="hljs-string">&quot;.&quot;</span> + methodName + <span class="hljs-string">&quot;.&quot;</span> + methodName + <span class="hljs-string">&quot;.  Cause: &quot;</span> + e);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 执行方法</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">invoke</span><span class="hljs-params">(Method method, Object object, Object... parameters)</span><br>      <span class="hljs-keyword">throws</span> IOException, RuntimeException &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> (T) method.invoke(object, parameters);<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>      <span class="hljs-keyword">if</span> (e.getTargetException() <span class="hljs-keyword">instanceof</span> IOException) &#123;<br>        <span class="hljs-keyword">throw</span> (IOException) e.getTargetException();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 使用线程上下文类加载器获取资源</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> List&lt;URL&gt; <span class="hljs-title function_">getResources</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">return</span> Collections.list(Thread.currentThread().getContextClassLoader().getResources(path));<br>  &#125; <br><br>  <span class="hljs-comment">// 用于判断VFS实现类是否可用</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">()</span>; <br><br>  <span class="hljs-comment">// 递归地列出所有资源的完整资源路径，这些资源是由一个URL确定的资源的子代。</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> List&lt;String&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(URL url, String forPath)</span> <span class="hljs-keyword">throws</span> IOException;<br><br>  <span class="hljs-comment">// 递归地列出所有资源的完整资源路径，这些资源是在指定路径找到的所有资源的子资源。</span><br>  <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">list</span><span class="hljs-params">(String path)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    List&lt;String&gt; names = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    <span class="hljs-keyword">for</span> (URL url : getResources(path)) &#123;<br>      names.addAll(list(url, path));<br>    &#125;<br>    <span class="hljs-keyword">return</span> names;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ClassLoaderWrapper"><a href="#ClassLoaderWrapper" class="headerlink" title="ClassLoaderWrapper"></a>ClassLoaderWrapper</h4><p>封装了几个类加载器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassLoaderWrapper</span> &#123; <br>  <span class="hljs-comment">// defaultClassLoader在 Resources 类中需要手动设置</span><br>  ClassLoader defaultClassLoader;<br>  ClassLoader systemClassLoader;<br><br>  ClassLoaderWrapper() &#123;<br>    <span class="hljs-keyword">try</span> &#123; <br>      <span class="hljs-comment">// 初始化系统类加载器</span><br>      systemClassLoader = ClassLoader.getSystemClassLoader();<br>    &#125; <span class="hljs-keyword">catch</span> (SecurityException ignored) &#123;<br>      <span class="hljs-comment">// AccessControlException on Google App Engine   </span><br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 下面获取URL型的resource、获取InputStream的resource以及根据名称获取类</span><br>  <span class="hljs-comment">// 都是委托给默认的类加载器实现的，如果提供了类加载器，则先用提供的类加载器尝试</span><br>  <span class="hljs-keyword">public</span> URL <span class="hljs-title function_">getResourceAsURL</span><span class="hljs-params">(String resource)</span> &#123;<br>    <span class="hljs-keyword">return</span> getResourceAsURL(resource, getClassLoaders(<span class="hljs-literal">null</span>));<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> URL <span class="hljs-title function_">getResourceAsURL</span><span class="hljs-params">(String resource, ClassLoader classLoader)</span> &#123;<br>    <span class="hljs-keyword">return</span> getResourceAsURL(resource, getClassLoaders(classLoader));<br>  &#125; <br><br>  URL <span class="hljs-title function_">getResourceAsURL</span><span class="hljs-params">(String resource, ClassLoader[] classLoader)</span> &#123;<br>    URL url;<br>    <span class="hljs-keyword">for</span> (ClassLoader cl : classLoader) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != cl) &#123;<br>        <span class="hljs-comment">// look for the resource as passed in...</span><br>        url = cl.getResource(resource);<br>        <span class="hljs-comment">// ...but some class loaders want this leading &quot;/&quot;, so we&#x27;ll add it</span><br>        <span class="hljs-comment">// and try again if we didn&#x27;t find the resource</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == url) &#123;<br>          url = cl.getResource(<span class="hljs-string">&quot;/&quot;</span> + resource);<br>        &#125;<br>        <span class="hljs-comment">// &quot;It&#x27;s always in the last place I look for it!&quot;</span><br>        <span class="hljs-comment">// ... because only an idiot would keep looking for it after finding it, so stop looking already.</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != url) &#123;<br>          <span class="hljs-keyword">return</span> url;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// didn&#x27;t find it anywhere.</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> InputStream <span class="hljs-title function_">getResourceAsStream</span><span class="hljs-params">(String resource)</span> &#123;<br>    <span class="hljs-keyword">return</span> getResourceAsStream(resource, getClassLoaders(<span class="hljs-literal">null</span>));<br>  &#125;    <br><br>  <span class="hljs-keyword">public</span> InputStream <span class="hljs-title function_">getResourceAsStream</span><span class="hljs-params">(String resource, ClassLoader classLoader)</span> &#123;<br>    <span class="hljs-keyword">return</span> getResourceAsStream(resource, getClassLoaders(classLoader));<br>  &#125; <br><br>  InputStream <span class="hljs-title function_">getResourceAsStream</span><span class="hljs-params">(String resource, ClassLoader[] classLoader)</span> &#123;<br>    <span class="hljs-keyword">for</span> (ClassLoader cl : classLoader) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != cl) &#123;<br>        <span class="hljs-comment">// try to find the resource as passed</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> cl.getResourceAsStream(resource);<br>        <span class="hljs-comment">// now, some class loaders want this leading &quot;/&quot;, so we&#x27;ll add it and try again if we didn&#x27;t find the resource</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == returnValue) &#123;<br>          returnValue = cl.getResourceAsStream(<span class="hljs-string">&quot;/&quot;</span> + resource);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != returnValue) &#123;<br>          <span class="hljs-keyword">return</span> returnValue;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Class&lt;?&gt; classForName(String name) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>    <span class="hljs-keyword">return</span> classForName(name, getClassLoaders(<span class="hljs-literal">null</span>));<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Class&lt;?&gt; classForName(String name, ClassLoader classLoader) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>    <span class="hljs-keyword">return</span> classForName(name, getClassLoaders(classLoader));<br>  &#125; <br><br>  Class&lt;?&gt; classForName(String name, ClassLoader[] classLoader) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>    <span class="hljs-keyword">for</span> (ClassLoader cl : classLoader) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != cl) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>          Class&lt;?&gt; c = Class.forName(name, <span class="hljs-literal">true</span>, cl);<br>          <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != c) &#123;<br>            <span class="hljs-keyword">return</span> c;<br>          &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>          <span class="hljs-comment">// we&#x27;ll ignore this until all classloaders fail to locate the class</span><br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassNotFoundException</span>(<span class="hljs-string">&quot;Cannot find class: &quot;</span> + name);<br>  &#125; <br><br>  ClassLoader[] getClassLoaders(ClassLoader classLoader) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassLoader</span>[]&#123;<br>        classLoader,<br>        defaultClassLoader,<br>        Thread.currentThread().getContextClassLoader(),<br>        getClass().getClassLoader(),<br>        systemClassLoader&#125;;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h4><p>通过类加载器获取resource的辅助类  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Resources</span> &#123;<br>    <br>  <span class="hljs-comment">// 大多数方法都是委托给ClassLoaderWrapper，再去做真正的事</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ClassLoaderWrapper</span> <span class="hljs-variable">classLoaderWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassLoaderWrapper</span>();<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * Charset to use when calling getResourceAsReader.</span><br><span class="hljs-comment">   * null means use the system default.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Charset charset; <br><br>  Resources() &#123;<br>  &#125; <br><br>  <span class="hljs-comment">// 返回默认的classloader（可能为null），没有手动设置就为null</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ClassLoader <span class="hljs-title function_">getDefaultClassLoader</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> classLoaderWrapper.defaultClassLoader;<br>  &#125; <br><br>  <span class="hljs-comment">// 设置默认的classloader</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDefaultClassLoader</span><span class="hljs-params">(ClassLoader defaultClassLoader)</span> &#123;<br>    classLoaderWrapper.defaultClassLoader = defaultClassLoader;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> URL <span class="hljs-title function_">getResourceURL</span><span class="hljs-params">(String resource)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>      <span class="hljs-comment">// issue #625</span><br>      <span class="hljs-keyword">return</span> getResourceURL(<span class="hljs-literal">null</span>, resource);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> URL <span class="hljs-title function_">getResourceURL</span><span class="hljs-params">(ClassLoader loader, String resource)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> classLoaderWrapper.getResourceAsURL(resource, loader);<br>    <span class="hljs-keyword">if</span> (url == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>(<span class="hljs-string">&quot;Could not find resource &quot;</span> + resource);<br>    &#125;<br>    <span class="hljs-keyword">return</span> url;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InputStream <span class="hljs-title function_">getResourceAsStream</span><span class="hljs-params">(String resource)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">return</span> getResourceAsStream(<span class="hljs-literal">null</span>, resource);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InputStream <span class="hljs-title function_">getResourceAsStream</span><span class="hljs-params">(ClassLoader loader, String resource)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> classLoaderWrapper.getResourceAsStream(resource, loader);<br>    <span class="hljs-keyword">if</span> (in == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>(<span class="hljs-string">&quot;Could not find resource &quot;</span> + resource);<br>    &#125;<br>    <span class="hljs-keyword">return</span> in;<br>  &#125; <br><br>  <span class="hljs-comment">// 解析resource，返回Properties</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Properties <span class="hljs-title function_">getResourceAsProperties</span><span class="hljs-params">(String resource)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> getResourceAsStream(resource);<br>    props.load(in);<br>    in.close();<br>    <span class="hljs-keyword">return</span> props;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Properties <span class="hljs-title function_">getResourceAsProperties</span><span class="hljs-params">(ClassLoader loader, String resource)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> getResourceAsStream(loader, resource);<br>    props.load(in);<br>    in.close();<br>    <span class="hljs-keyword">return</span> props;<br>  &#125; <br><br>  <span class="hljs-comment">// 解析resource，返回Reader</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Reader <span class="hljs-title function_">getResourceAsReader</span><span class="hljs-params">(String resource)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    Reader reader;<br>    <span class="hljs-keyword">if</span> (charset == <span class="hljs-literal">null</span>) &#123;<br>      reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(getResourceAsStream(resource));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(getResourceAsStream(resource), charset);<br>    &#125;<br>    <span class="hljs-keyword">return</span> reader;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Reader <span class="hljs-title function_">getResourceAsReader</span><span class="hljs-params">(ClassLoader loader, String resource)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    Reader reader;<br>    <span class="hljs-keyword">if</span> (charset == <span class="hljs-literal">null</span>) &#123;<br>      reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(getResourceAsStream(loader, resource));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(getResourceAsStream(loader, resource), charset);<br>    &#125;<br>    <span class="hljs-keyword">return</span> reader;<br>  &#125; <br><br>  <span class="hljs-comment">// Returns a resource on the classpath as a File object</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> File <span class="hljs-title function_">getResourceAsFile</span><span class="hljs-params">(String resource)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(getResourceURL(resource).getFile());<br>  &#125; <br><br>  <span class="hljs-comment">// Returns a resource on the classpath as a File object</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> File <span class="hljs-title function_">getResourceAsFile</span><span class="hljs-params">(ClassLoader loader, String resource)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(getResourceURL(loader, resource).getFile());<br>  &#125; <br><br>  <span class="hljs-comment">// Gets a URL as an input stream</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InputStream <span class="hljs-title function_">getUrlAsStream</span><span class="hljs-params">(String urlString)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(urlString);<br>    <span class="hljs-type">URLConnection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> url.openConnection();<br>    <span class="hljs-keyword">return</span> conn.getInputStream();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Reader <span class="hljs-title function_">getUrlAsReader</span><span class="hljs-params">(String urlString)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    Reader reader;<br>    <span class="hljs-keyword">if</span> (charset == <span class="hljs-literal">null</span>) &#123;<br>      reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(getUrlAsStream(urlString));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(getUrlAsStream(urlString), charset);<br>    &#125;<br>    <span class="hljs-keyword">return</span> reader;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Properties <span class="hljs-title function_">getUrlAsProperties</span><span class="hljs-params">(String urlString)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> getUrlAsStream(urlString);<br>    props.load(in);<br>    in.close();<br>    <span class="hljs-keyword">return</span> props;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class&lt;?&gt; classForName(String className) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>    <span class="hljs-keyword">return</span> classLoaderWrapper.classForName(className);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Charset <span class="hljs-title function_">getCharset</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> charset;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCharset</span><span class="hljs-params">(Charset charset)</span> &#123;<br>    Resources.charset = charset;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ExternalResources"><a href="#ExternalResources" class="headerlink" title="ExternalResources"></a>ExternalResources</h4><p>此类中的方法未在任何地方使用，因此不做分析</p>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5-type</title>
    <link href="/2023/06/25/5-type/"/>
    <url>/2023/06/25/5-type/</url>
    
    <content type="html"><![CDATA[<h4 id="Alias"><a href="#Alias" class="headerlink" title="Alias"></a>Alias</h4><p>    此注解用于注册类型别名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 2种方式可以注册别名</span><br><span class="hljs-comment"> *     1)xml方式</span><br><span class="hljs-comment"> * &lt;typeAlias alias=&quot;Author&quot; type=&quot;domain.blog.Author&quot;/&gt;</span><br><span class="hljs-comment"> *     2)annotation方式</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Alias</span>(&quot;author&quot;)</span><br><span class="hljs-comment"> * public class Author &#123;</span><br><span class="hljs-comment"> *   ...</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Alias &#123;<br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="JdbcType"><a href="#JdbcType" class="headerlink" title="JdbcType"></a>JdbcType</h4><p>    JDBC类型枚举</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">JdbcType</span> &#123;<br>  <span class="hljs-comment">// 就是包装了一下java.sql.Types</span><br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * This is added to enable basic support for the</span><br><span class="hljs-comment">   * ARRAY data type - but a custom type handler is still required</span><br><span class="hljs-comment">   */</span><br>  ARRAY(Types.ARRAY),<br>  BIT(Types.BIT),<br>  TINYINT(Types.TINYINT),<br>  SMALLINT(Types.SMALLINT),<br>  INTEGER(Types.INTEGER),<br>  BIGINT(Types.BIGINT),<br>  FLOAT(Types.FLOAT),<br>  REAL(Types.REAL),<br>  DOUBLE(Types.DOUBLE),<br>  NUMERIC(Types.NUMERIC),<br>  DECIMAL(Types.DECIMAL),<br>  CHAR(Types.CHAR),<br>  VARCHAR(Types.VARCHAR),<br>  LONGVARCHAR(Types.LONGVARCHAR),<br>  DATE(Types.DATE),<br>  TIME(Types.TIME),<br>  TIMESTAMP(Types.TIMESTAMP),<br>  BINARY(Types.BINARY),<br>  VARBINARY(Types.VARBINARY),<br>  LONGVARBINARY(Types.LONGVARBINARY),<br>  NULL(Types.NULL),<br>  OTHER(Types.OTHER),<br>  BLOB(Types.BLOB),<br>  CLOB(Types.CLOB),<br>  BOOLEAN(Types.BOOLEAN),<br>  CURSOR(-<span class="hljs-number">10</span>), <span class="hljs-comment">// Oracle</span><br>  UNDEFINED(Integer.MIN_VALUE + <span class="hljs-number">1000</span>),<br>  <span class="hljs-comment">// 太周到了，还考虑jdk5兼容性，jdk6的常量都不是直接引用</span><br>  NVARCHAR(Types.NVARCHAR), <span class="hljs-comment">// JDK6</span><br>  NCHAR(Types.NCHAR), <span class="hljs-comment">// JDK6</span><br>  NCLOB(Types.NCLOB), <span class="hljs-comment">// JDK6</span><br>  STRUCT(Types.STRUCT);<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> TYPE_CODE;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;Integer,JdbcType&gt; codeLookup = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Integer,JdbcType&gt;();<br><br>  <span class="hljs-comment">// 缓存，提升查询性能</span><br>  <span class="hljs-comment">// 可以参考 https://mp.weixin.qq.com/s/CLr5bcxsG7C8v6qSsagEbw 进行扩展</span><br>  <span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-keyword">for</span> (JdbcType type : JdbcType.values()) &#123;<br>      codeLookup.put(type.TYPE_CODE, type);<br>    &#125;<br>  &#125;<br><br>  JdbcType(<span class="hljs-type">int</span> code) &#123;<br>    <span class="hljs-built_in">this</span>.TYPE_CODE = code;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JdbcType <span class="hljs-title function_">forCode</span><span class="hljs-params">(<span class="hljs-type">int</span> code)</span>  &#123;<br>    <span class="hljs-keyword">return</span> codeLookup.get(code);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MappedTypes"><a href="#MappedTypes" class="headerlink" title="MappedTypes"></a>MappedTypes</h4><p>    看代码是标记自定义的类型处理器对应的Java类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MappedTypes &#123; <br>  <span class="hljs-keyword">public</span> Class&lt;?&gt;[] value();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="MappedJdbcTypes"><a href="#MappedJdbcTypes" class="headerlink" title="MappedJdbcTypes"></a>MappedJdbcTypes</h4><p>     用于标记类型处理器可以处理 Java类型和哪些Jdbc类型 的互相转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MappedJdbcTypes &#123;<br>  <span class="hljs-keyword">public</span> JdbcType[] value(); <br>  <span class="hljs-comment">// 是否将类型处理器注册为能处理 Java类型和Jdbc Null类型的互相转换</span><br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">includeNullJdbcType</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="TypeAliasRegistry"><a href="#TypeAliasRegistry" class="headerlink" title="TypeAliasRegistry"></a>TypeAliasRegistry</h4><p>    类型别名注册机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TypeAliasRegistry</span> &#123; <br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, Class&lt;?&gt;&gt; TYPE_ALIASES = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Class&lt;?&gt;&gt;();<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">TypeAliasRegistry</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 构造函数里注册系统内置的类型别名</span><br>    registerAlias(<span class="hljs-string">&quot;string&quot;</span>, String.class);<br><br>    <span class="hljs-comment">// 基本包装类型</span><br>    registerAlias(<span class="hljs-string">&quot;byte&quot;</span>, Byte.class);<br>    registerAlias(<span class="hljs-string">&quot;long&quot;</span>, Long.class);<br>    registerAlias(<span class="hljs-string">&quot;short&quot;</span>, Short.class);<br>    registerAlias(<span class="hljs-string">&quot;int&quot;</span>, Integer.class);<br>    registerAlias(<span class="hljs-string">&quot;integer&quot;</span>, Integer.class);<br>    registerAlias(<span class="hljs-string">&quot;double&quot;</span>, Double.class);<br>    registerAlias(<span class="hljs-string">&quot;float&quot;</span>, Float.class);<br>    registerAlias(<span class="hljs-string">&quot;boolean&quot;</span>, Boolean.class);<br><br>    <span class="hljs-comment">// 基本数组包装类型</span><br>    registerAlias(<span class="hljs-string">&quot;byte[]&quot;</span>, Byte[].class);<br>    registerAlias(<span class="hljs-string">&quot;long[]&quot;</span>, Long[].class);<br>    registerAlias(<span class="hljs-string">&quot;short[]&quot;</span>, Short[].class);<br>    registerAlias(<span class="hljs-string">&quot;int[]&quot;</span>, Integer[].class);<br>    registerAlias(<span class="hljs-string">&quot;integer[]&quot;</span>, Integer[].class);<br>    registerAlias(<span class="hljs-string">&quot;double[]&quot;</span>, Double[].class);<br>    registerAlias(<span class="hljs-string">&quot;float[]&quot;</span>, Float[].class);<br>    registerAlias(<span class="hljs-string">&quot;boolean[]&quot;</span>, Boolean[].class);<br><br>    <span class="hljs-comment">// 加个下划线，就变成了基本类型</span><br>    registerAlias(<span class="hljs-string">&quot;_byte&quot;</span>, <span class="hljs-type">byte</span>.class);<br>    registerAlias(<span class="hljs-string">&quot;_long&quot;</span>, <span class="hljs-type">long</span>.class);<br>    registerAlias(<span class="hljs-string">&quot;_short&quot;</span>, <span class="hljs-type">short</span>.class);<br>    registerAlias(<span class="hljs-string">&quot;_int&quot;</span>, <span class="hljs-type">int</span>.class);<br>    registerAlias(<span class="hljs-string">&quot;_integer&quot;</span>, <span class="hljs-type">int</span>.class);<br>    registerAlias(<span class="hljs-string">&quot;_double&quot;</span>, <span class="hljs-type">double</span>.class);<br>    registerAlias(<span class="hljs-string">&quot;_float&quot;</span>, <span class="hljs-type">float</span>.class);<br>    registerAlias(<span class="hljs-string">&quot;_boolean&quot;</span>, <span class="hljs-type">boolean</span>.class);<br><br>    <span class="hljs-comment">// 加个下划线，就变成了基本数组类型</span><br>    registerAlias(<span class="hljs-string">&quot;_byte[]&quot;</span>, <span class="hljs-type">byte</span>[].class);<br>    registerAlias(<span class="hljs-string">&quot;_long[]&quot;</span>, <span class="hljs-type">long</span>[].class);<br>    registerAlias(<span class="hljs-string">&quot;_short[]&quot;</span>, <span class="hljs-type">short</span>[].class);<br>    registerAlias(<span class="hljs-string">&quot;_int[]&quot;</span>, <span class="hljs-type">int</span>[].class);<br>    registerAlias(<span class="hljs-string">&quot;_integer[]&quot;</span>, <span class="hljs-type">int</span>[].class);<br>    registerAlias(<span class="hljs-string">&quot;_double[]&quot;</span>, <span class="hljs-type">double</span>[].class);<br>    registerAlias(<span class="hljs-string">&quot;_float[]&quot;</span>, <span class="hljs-type">float</span>[].class);<br>    registerAlias(<span class="hljs-string">&quot;_boolean[]&quot;</span>, <span class="hljs-type">boolean</span>[].class);<br><br>    <span class="hljs-comment">// 日期数字型</span><br>    registerAlias(<span class="hljs-string">&quot;date&quot;</span>, Date.class);<br>    registerAlias(<span class="hljs-string">&quot;decimal&quot;</span>, BigDecimal.class);<br>    registerAlias(<span class="hljs-string">&quot;bigdecimal&quot;</span>, BigDecimal.class);<br>    registerAlias(<span class="hljs-string">&quot;biginteger&quot;</span>, BigInteger.class);<br>    registerAlias(<span class="hljs-string">&quot;object&quot;</span>, Object.class);<br><br>    registerAlias(<span class="hljs-string">&quot;date[]&quot;</span>, Date[].class);<br>    registerAlias(<span class="hljs-string">&quot;decimal[]&quot;</span>, BigDecimal[].class);<br>    registerAlias(<span class="hljs-string">&quot;bigdecimal[]&quot;</span>, BigDecimal[].class);<br>    registerAlias(<span class="hljs-string">&quot;biginteger[]&quot;</span>, BigInteger[].class);<br>    registerAlias(<span class="hljs-string">&quot;object[]&quot;</span>, Object[].class);<br><br>    <span class="hljs-comment">// 集合型</span><br>    registerAlias(<span class="hljs-string">&quot;map&quot;</span>, Map.class);<br>    registerAlias(<span class="hljs-string">&quot;hashmap&quot;</span>, HashMap.class);<br>    registerAlias(<span class="hljs-string">&quot;list&quot;</span>, List.class);<br>    registerAlias(<span class="hljs-string">&quot;arraylist&quot;</span>, ArrayList.class);<br>    registerAlias(<span class="hljs-string">&quot;collection&quot;</span>, Collection.class);<br>    registerAlias(<span class="hljs-string">&quot;iterator&quot;</span>, Iterator.class);<br><br>    <span class="hljs-comment">// 还有个ResultSet型</span><br>    registerAlias(<span class="hljs-string">&quot;ResultSet&quot;</span>, ResultSet.class);<br>  &#125;<br><br>  <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>  <span class="hljs-comment">// throws class cast exception as well if types cannot be assigned</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; Class&lt;T&gt; <span class="hljs-title function_">resolveAlias</span><span class="hljs-params">(String string)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">if</span> (string == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125;<br>      <span class="hljs-comment">// issue #748 (这里的issue在 google code上，已经无了)</span><br>      <span class="hljs-comment">// 先转成小写再解析</span><br>      <span class="hljs-comment">// 比如如果本地语言是Turkish，那i转成大写就不是I了，而是另外一个字符（İ）。这样土耳其的机器就用不了mybatis了！这是一个很大的bug，但是基本上每个人都会犯......</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> string.toLowerCase(Locale.ENGLISH);<br>      Class&lt;T&gt; value;<br>      <span class="hljs-comment">// 原理就很简单了，从HashMap里找对应的键值，找到则返回类型别名对应的Class</span><br>      <span class="hljs-keyword">if</span> (TYPE_ALIASES.containsKey(key)) &#123;<br>        value = (Class&lt;T&gt;) TYPE_ALIASES.get(key);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 找不到，再试着将String直接转成Class、</span><br>        <span class="hljs-comment">// 这样怪不得我们也可以直接用java.lang.Integer的方式定义</span><br>        value = (Class&lt;T&gt;) Resources.classForName(string);<br>      &#125;<br>      <span class="hljs-keyword">return</span> value;<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeException</span>(<span class="hljs-string">&quot;Could not resolve type alias &#x27;&quot;</span> + string + <span class="hljs-string">&quot;&#x27;.  Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 注册包下所有类，并为其取一个别名</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerAliases</span><span class="hljs-params">(String packageName)</span>&#123;<br>    registerAliases(packageName, Object.class);<br>  &#125; <br><br>  <span class="hljs-comment">// 扫描并注册包下所有继承于superType的类型别名</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerAliases</span><span class="hljs-params">(String packageName, Class&lt;?&gt; superType)</span>&#123;<br>    ResolverUtil&lt;Class&lt;?&gt;&gt; resolverUtil = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResolverUtil</span>&lt;Class&lt;?&gt;&gt;();<br>    resolverUtil.find(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ResolverUtil</span>.IsA(superType), packageName);<br>    Set&lt;Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Class</span>&lt;?&gt;&gt;&gt; typeSet = resolverUtil.getClasses();<br>    <span class="hljs-keyword">for</span>(Class&lt;?&gt; type : typeSet)&#123;<br>      <span class="hljs-comment">// Ignore inner classes and interfaces (including package-info.java)</span><br>      <span class="hljs-comment">// Skip also inner classes. See issue #6</span><br>      <span class="hljs-keyword">if</span> (!type.isAnonymousClass() &amp;&amp; !type.isInterface() &amp;&amp; !type.isMemberClass()) &#123;<br>        registerAlias(type);<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 注册类型别名</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerAlias</span><span class="hljs-params">(Class&lt;?&gt; type)</span> &#123;<br>    <span class="hljs-comment">// 如果没有类型别名，用Class.getSimpleName来注册</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">alias</span> <span class="hljs-operator">=</span> type.getSimpleName();<br>    <span class="hljs-comment">// 或者通过Alias注解来注册(Class.getAnnotation)</span><br>    <span class="hljs-type">Alias</span> <span class="hljs-variable">aliasAnnotation</span> <span class="hljs-operator">=</span> type.getAnnotation(Alias.class);<br>    <span class="hljs-keyword">if</span> (aliasAnnotation != <span class="hljs-literal">null</span>) &#123;<br>      alias = aliasAnnotation.value();<br>    &#125; <br>    registerAlias(alias, type);<br>  &#125; <br><br>  <span class="hljs-comment">// 注册类型别名</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerAlias</span><span class="hljs-params">(String alias, Class&lt;?&gt; value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (alias == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeException</span>(<span class="hljs-string">&quot;The parameter alias cannot be null&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// issue #748</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> alias.toLowerCase(Locale.ENGLISH);<br>    <span class="hljs-comment">// 如果已经存在key了，且value和之前不一致，报错</span><br>    <span class="hljs-keyword">if</span> (TYPE_ALIASES.containsKey(key) &amp;&amp; TYPE_ALIASES.get(key) != <span class="hljs-literal">null</span> &amp;&amp; !TYPE_ALIASES.get(key).equals(value)) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeException</span>(<span class="hljs-string">&quot;The alias &#x27;&quot;</span> + alias + <span class="hljs-string">&quot;&#x27; is already mapped to the value &#x27;&quot;</span> + TYPE_ALIASES.get(key).getName() + <span class="hljs-string">&quot;&#x27;.&quot;</span>);<br>    &#125;<br>    TYPE_ALIASES.put(key, value);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerAlias</span><span class="hljs-params">(String alias, String value)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      registerAlias(alias, Resources.classForName(value));<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeException</span>(<span class="hljs-string">&quot;Error registering type alias &quot;</span>+alias+<span class="hljs-string">&quot; for &quot;</span>+value+<span class="hljs-string">&quot;. Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 获取所有类型别名信息</span><br>  <span class="hljs-keyword">public</span> Map&lt;String, Class&lt;?&gt;&gt; getTypeAliases() &#123;<br>    <span class="hljs-keyword">return</span> Collections.unmodifiableMap(TYPE_ALIASES);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="TypeHandler"><a href="#TypeHandler" class="headerlink" title="TypeHandler"></a>TypeHandler</h4><p>    类型处理器接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TypeHandler</span>&lt;T&gt; &#123;<br><br>  <span class="hljs-comment">// 设置参数</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">setParameter</span><span class="hljs-params">(PreparedStatement ps, <span class="hljs-type">int</span> i, T parameter, JdbcType jdbcType)</span> <span class="hljs-keyword">throws</span> SQLException;<br><br>  <span class="hljs-comment">// 取得结果,供普通select用</span><br>  T <span class="hljs-title function_">getResult</span><span class="hljs-params">(ResultSet rs, String columnName)</span> <span class="hljs-keyword">throws</span> SQLException;<br><br>  <span class="hljs-comment">// 取得结果,供普通select用</span><br>  T <span class="hljs-title function_">getResult</span><span class="hljs-params">(ResultSet rs, <span class="hljs-type">int</span> columnIndex)</span> <span class="hljs-keyword">throws</span> SQLException;<br><br>  <span class="hljs-comment">// 取得结果,供SP用</span><br>  T <span class="hljs-title function_">getResult</span><span class="hljs-params">(CallableStatement cs, <span class="hljs-type">int</span> columnIndex)</span> <span class="hljs-keyword">throws</span> SQLException;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="TypeReference"><a href="#TypeReference" class="headerlink" title="TypeReference"></a>TypeReference</h4><p>      3.1新加的类型引用,为了引用一个泛型类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TypeReference</span>&lt;T&gt; &#123; <br>  <span class="hljs-comment">// 引用的原生类型</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Type rawType; <br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-title function_">TypeReference</span><span class="hljs-params">()</span> &#123;<br>    rawType = getSuperclassTypeParameter(getClass());<br>  &#125;<br><br>  Type <span class="hljs-title function_">getSuperclassTypeParameter</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * class.getGenericSuperclass()</span><br><span class="hljs-comment">     * 返回表示此类所表示的实体(类、接口、基元类型或void)的直接父类的类型。</span><br><span class="hljs-comment">     * 如果父类是参数化类型（泛型），则返回的类型对象必须准确反映源代码中使用的实际类型参数。</span><br><span class="hljs-comment">     * 如果以前没有创建过表示父类的参数化类型，则会创建它</span><br><span class="hljs-comment">     * 有关参数化类型创建过程的语义，请参见ParameterizedType的声明。</span><br><span class="hljs-comment">     * 如果该类表示对象类、接口、基本类型或void，则返回null。</span><br><span class="hljs-comment">     * 如果这个对象代表一个数组类，则返回代表该对象类的类对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">Type</span> <span class="hljs-variable">genericSuperclass</span> <span class="hljs-operator">=</span> clazz.getGenericSuperclass();<br>    <span class="hljs-comment">// 不是参数化类型，看其父类是否是参数化类型</span><br>    <span class="hljs-keyword">if</span> (genericSuperclass <span class="hljs-keyword">instanceof</span> Class) &#123;<br>      <span class="hljs-comment">// try to climb up the hierarchy until meet something useful</span><br>      <span class="hljs-comment">// 一直找到 TypeReference.class</span><br>      <span class="hljs-keyword">if</span> (TypeReference.class != genericSuperclass) &#123;<br>        <span class="hljs-keyword">return</span> getSuperclassTypeParameter(clazz.getSuperclass());<br>      &#125;<br>      <span class="hljs-comment">// 其所有父类都不是参数化类型，报错</span><br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeException</span>(<span class="hljs-string">&quot;&#x27;&quot;</span> + getClass() + <span class="hljs-string">&quot;&#x27; extends TypeReference but misses the type parameter. &quot;</span><br>        + <span class="hljs-string">&quot;Remove the extension or add a type parameter to it.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 获取泛型类型</span><br>    <span class="hljs-type">Type</span> <span class="hljs-variable">rawType</span> <span class="hljs-operator">=</span> ((ParameterizedType) genericSuperclass).getActualTypeArguments()[<span class="hljs-number">0</span>];<br>    <span class="hljs-comment">// TODO remove this when Reflector is fixed to return Types</span><br>    <span class="hljs-keyword">if</span> (rawType <span class="hljs-keyword">instanceof</span> ParameterizedType) &#123;<br>      rawType = ((ParameterizedType) rawType).getRawType();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> rawType;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Type <span class="hljs-title function_">getRawType</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> rawType;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> rawType.toString();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BaseTypeHandler"><a href="#BaseTypeHandler" class="headerlink" title="BaseTypeHandler"></a>BaseTypeHandler</h4><p>    类型处理器的基类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseTypeHandler</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TypeReference</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TypeHandler</span>&lt;T&gt; &#123;<br>  <span class="hljs-keyword">protected</span> Configuration configuration;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setConfiguration</span><span class="hljs-params">(Configuration c)</span> &#123;<br>    <span class="hljs-built_in">this</span>.configuration = c;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setParameter</span><span class="hljs-params">(PreparedStatement ps, <span class="hljs-type">int</span> i, T parameter, JdbcType jdbcType)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-comment">// 特殊情况，设置NULL</span><br>    <span class="hljs-keyword">if</span> (parameter == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">if</span> (jdbcType == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 如果没设置jdbcType，报错啦</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeException</span>(<span class="hljs-string">&quot;JDBC requires that the JdbcType must be specified for all nullable parameters.&quot;</span>);<br>      &#125;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 设成NULL</span><br>        ps.setNull(i, jdbcType.TYPE_CODE);<br>      &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeException</span>(<span class="hljs-string">&quot;Error setting null for parameter #&quot;</span> + i + <span class="hljs-string">&quot; with JdbcType &quot;</span> + jdbcType + <span class="hljs-string">&quot; . &quot;</span> +<br>                <span class="hljs-string">&quot;Try setting a different JdbcType for this parameter or a different jdbcTypeForNull configuration property. &quot;</span> +<br>                <span class="hljs-string">&quot;Cause: &quot;</span> + e, e);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 非NULL情况，怎么设还得交给不同的子类完成, setNonNullParameter是一个抽象方法</span><br>      setNonNullParameter(ps, i, parameter, jdbcType);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-comment">// 根据列名获取结果</span><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getResult</span><span class="hljs-params">(ResultSet rs, String columnName)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">T</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> getNullableResult(rs, columnName);<br>    <span class="hljs-comment">// 通过ResultSet.wasNull判断是否为NULL</span><br>    <span class="hljs-keyword">if</span> (rs.wasNull()) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> result;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-comment">// 根据列下标获取结果</span><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getResult</span><span class="hljs-params">(ResultSet rs, <span class="hljs-type">int</span> columnIndex)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">T</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> getNullableResult(rs, columnIndex);<br>    <span class="hljs-keyword">if</span> (rs.wasNull()) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> result;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getResult</span><span class="hljs-params">(CallableStatement cs, <span class="hljs-type">int</span> columnIndex)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">T</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> getNullableResult(cs, columnIndex);<br>    <span class="hljs-comment">// 通过CallableStatement.wasNull判断是否为NULL</span><br>    <span class="hljs-keyword">if</span> (cs.wasNull()) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> result;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 非NULL情况，怎么设参数还得交给不同的子类完成</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNonNullParameter</span><span class="hljs-params">(PreparedStatement ps, <span class="hljs-type">int</span> i, T parameter, JdbcType jdbcType)</span> <span class="hljs-keyword">throws</span> SQLException;<br><br>  <span class="hljs-comment">// 以下3个方法是取得可能为null的结果，具体交给子类完成</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> T <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(ResultSet rs, String columnName)</span> <span class="hljs-keyword">throws</span> SQLException;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> T <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(ResultSet rs, <span class="hljs-type">int</span> columnIndex)</span> <span class="hljs-keyword">throws</span> SQLException;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> T <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(CallableStatement cs, <span class="hljs-type">int</span> columnIndex)</span> <span class="hljs-keyword">throws</span> SQLException;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="UnknownTypeHandler"><a href="#UnknownTypeHandler" class="headerlink" title="UnknownTypeHandler"></a>UnknownTypeHandler</h4><p>    在prepare非复合类型的key时，如果没有找到参数对应的TypeHandler，则使用UnknownTypeHandler（Mybatis中有些找不到 TypeHandler的情况没有使用UnknownTypeHandler，但是和UnknownTypeHandler的处理方法一样—-使用ObjectTypeHandler）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnknownTypeHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseTypeHandler</span>&lt;Object&gt; &#123; <br><br>  <span class="hljs-comment">// Object 类型 处理器</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectTypeHandler</span> <span class="hljs-variable">OBJECT_TYPE_HANDLER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectTypeHandler</span>();<br><br>  <span class="hljs-comment">// TypeHandler 注册器</span><br>  <span class="hljs-keyword">private</span> TypeHandlerRegistry typeHandlerRegistry;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnknownTypeHandler</span><span class="hljs-params">(TypeHandlerRegistry typeHandlerRegistry)</span> &#123;<br>    <span class="hljs-built_in">this</span>.typeHandlerRegistry = typeHandlerRegistry;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNonNullParameter</span><span class="hljs-params">(PreparedStatement ps, <span class="hljs-type">int</span> i, Object parameter, JdbcType jdbcType)</span><br>      <span class="hljs-keyword">throws</span> SQLException &#123; <br>    <span class="hljs-comment">// 根据参数对象和其 JdbcType ，获取对应的TypeHandler</span><br>    <span class="hljs-type">TypeHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> resolveTypeHandler(parameter, jdbcType);<br>    handler.setParameter(ps, i, parameter, jdbcType);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> TypeHandler&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span>&gt; resolveTypeHandler(Object parameter, JdbcType jdbcType) &#123;<br>    TypeHandler&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span>&gt; handler; <br>    <span class="hljs-comment">// null 委托给 OBJECT_TYPE_HANDLER 处理</span><br>    <span class="hljs-keyword">if</span> (parameter == <span class="hljs-literal">null</span>) &#123;<br>      handler = OBJECT_TYPE_HANDLER;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      handler = typeHandlerRegistry.getTypeHandler(parameter.getClass(), jdbcType);<br>      <span class="hljs-comment">// check if handler is null (issue #270)</span><br>      <span class="hljs-comment">// 没有找到对应的 TypeHandler，委托给OBJECT_TYPE_HANDLER 处理</span><br>      <span class="hljs-keyword">if</span> (handler == <span class="hljs-literal">null</span> || handler <span class="hljs-keyword">instanceof</span> UnknownTypeHandler) &#123;<br>        handler = OBJECT_TYPE_HANDLER;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> handler;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(ResultSet rs, String columnName)</span><br>      <span class="hljs-keyword">throws</span> SQLException &#123;<br>    TypeHandler&lt;?&gt; handler = resolveTypeHandler(rs, columnName);<br>    <span class="hljs-keyword">return</span> handler.getResult(rs, columnName);<br>  &#125; <br><br>  <span class="hljs-comment">// 根据ResultSet 和 列名 查找 TypeHandler</span><br>  <span class="hljs-keyword">private</span> TypeHandler&lt;?&gt; resolveTypeHandler(ResultSet rs, String column) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      Map&lt;String,Integer&gt; columnIndexLookup;<br>      columnIndexLookup = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Integer&gt;();<br>      <span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">rsmd</span> <span class="hljs-operator">=</span> rs.getMetaData();<br>      <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> rsmd.getColumnCount();<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i &lt;= count; i++) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> rsmd.getColumnName(i);<br>        columnIndexLookup.put(name,i);<br>      &#125;<br>      <span class="hljs-type">Integer</span> <span class="hljs-variable">columnIndex</span> <span class="hljs-operator">=</span> columnIndexLookup.get(column);<br>      TypeHandler&lt;?&gt; handler = <span class="hljs-literal">null</span>;<br>      <span class="hljs-keyword">if</span> (columnIndex != <span class="hljs-literal">null</span>) &#123;<br>        handler = resolveTypeHandler(rsmd, columnIndex);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (handler == <span class="hljs-literal">null</span> || handler <span class="hljs-keyword">instanceof</span> UnknownTypeHandler) &#123;<br>        handler = OBJECT_TYPE_HANDLER;<br>      &#125;<br>      <span class="hljs-keyword">return</span> handler;<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeException</span>(<span class="hljs-string">&quot;Error determining JDBC type for column &quot;</span> + column + <span class="hljs-string">&quot;.  Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> TypeHandler&lt;?&gt; resolveTypeHandler(ResultSetMetaData rsmd, Integer columnIndex) <span class="hljs-keyword">throws</span> SQLException &#123;<br>    TypeHandler&lt;?&gt; handler = <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">JdbcType</span> <span class="hljs-variable">jdbcType</span> <span class="hljs-operator">=</span> safeGetJdbcTypeForColumn(rsmd, columnIndex);<br>    Class&lt;?&gt; javaType = safeGetClassForColumn(rsmd, columnIndex);<br>    <span class="hljs-comment">// 根据javaType 和 jdbcType获取 TypeHandler</span><br>    <span class="hljs-keyword">if</span> (javaType != <span class="hljs-literal">null</span> &amp;&amp; jdbcType != <span class="hljs-literal">null</span>) &#123;<br>      handler = typeHandlerRegistry.getTypeHandler(javaType, jdbcType);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (javaType != <span class="hljs-literal">null</span>) &#123;<br>      handler = typeHandlerRegistry.getTypeHandler(javaType);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (jdbcType != <span class="hljs-literal">null</span>) &#123;<br>      handler = typeHandlerRegistry.getTypeHandler(jdbcType);<br>    &#125;<br>    <span class="hljs-keyword">return</span> handler;<br>  &#125; <br><br>  <span class="hljs-comment">// 根据列索引返回列的 JdbcType</span><br>  <span class="hljs-keyword">private</span> JdbcType <span class="hljs-title function_">safeGetJdbcTypeForColumn</span><span class="hljs-params">(ResultSetMetaData rsmd, Integer columnIndex)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> JdbcType.forCode(rsmd.getColumnType(columnIndex));<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 根据列的索引返回列对应Class</span><br>  <span class="hljs-keyword">private</span> Class&lt;?&gt; safeGetClassForColumn(ResultSetMetaData rsmd, Integer columnIndex) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">return</span> Resources.classForName(rsmd.getColumnClassName(columnIndex));<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(CallableStatement cs, <span class="hljs-type">int</span> columnIndex)</span><br>      <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">return</span> cs.getObject(columnIndex);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="其他TypeHandler-略"><a href="#其他TypeHandler-略" class="headerlink" title="其他TypeHandler 略"></a>其他TypeHandler 略</h4><h4 id="TypeHandlerRegistry"><a href="#TypeHandlerRegistry" class="headerlink" title="TypeHandlerRegistry"></a>TypeHandlerRegistry</h4><p>    类型处理器注册机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TypeHandlerRegistry</span> &#123; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;JdbcType, TypeHandler&lt;?&gt;&gt; JDBC_TYPE_HANDLER_MAP = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnumMap</span>&lt;JdbcType, TypeHandler&lt;?&gt;&gt;(JdbcType.class);<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;Type, Map&lt;JdbcType, TypeHandler&lt;?&gt;&gt;&gt; TYPE_HANDLER_MAP = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Type, Map&lt;JdbcType, TypeHandler&lt;?&gt;&gt;&gt;();<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> TypeHandler&lt;Object&gt; UNKNOWN_TYPE_HANDLER = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnknownTypeHandler</span>(<span class="hljs-built_in">this</span>);<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;Class&lt;?&gt;, TypeHandler&lt;?&gt;&gt; ALL_TYPE_HANDLERS_MAP = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Class&lt;?&gt;, TypeHandler&lt;?&gt;&gt;(); <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">TypeHandlerRegistry</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 构造函数里注册系统内置的类型处理器</span><br>    <span class="hljs-comment">// 以下是为多个类型注册到同一个handler</span><br>    register(Boolean.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BooleanTypeHandler</span>());<br>    register(<span class="hljs-type">boolean</span>.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BooleanTypeHandler</span>());<br>    register(JdbcType.BOOLEAN, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BooleanTypeHandler</span>());<br>    register(JdbcType.BIT, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BooleanTypeHandler</span>());<br><br>    register(Byte.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteTypeHandler</span>());<br>    register(<span class="hljs-type">byte</span>.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteTypeHandler</span>());<br>    register(JdbcType.TINYINT, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteTypeHandler</span>());<br><br>    register(Short.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShortTypeHandler</span>());<br>    register(<span class="hljs-type">short</span>.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShortTypeHandler</span>());<br>    register(JdbcType.SMALLINT, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShortTypeHandler</span>());<br><br>    register(Integer.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntegerTypeHandler</span>());<br>    register(<span class="hljs-type">int</span>.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntegerTypeHandler</span>());<br>    register(JdbcType.INTEGER, <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntegerTypeHandler</span>());<br><br>    register(Long.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LongTypeHandler</span>());<br>    register(<span class="hljs-type">long</span>.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LongTypeHandler</span>());<br><br>    register(Float.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">FloatTypeHandler</span>());<br>    register(<span class="hljs-type">float</span>.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">FloatTypeHandler</span>());<br>    register(JdbcType.FLOAT, <span class="hljs-keyword">new</span> <span class="hljs-title class_">FloatTypeHandler</span>());<br><br>    register(Double.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DoubleTypeHandler</span>());<br>    register(<span class="hljs-type">double</span>.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DoubleTypeHandler</span>());<br>    register(JdbcType.DOUBLE, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DoubleTypeHandler</span>());<br><br>    <span class="hljs-comment">// 以下是为同一个类型的多种变种注册到多个不同的handler</span><br>    register(String.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTypeHandler</span>());<br>    register(String.class, JdbcType.CHAR, <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTypeHandler</span>());<br>    register(String.class, JdbcType.CLOB, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClobTypeHandler</span>());<br>    register(String.class, JdbcType.VARCHAR, <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTypeHandler</span>());<br>    register(String.class, JdbcType.LONGVARCHAR, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClobTypeHandler</span>());<br>    register(String.class, JdbcType.NVARCHAR, <span class="hljs-keyword">new</span> <span class="hljs-title class_">NStringTypeHandler</span>());<br>    register(String.class, JdbcType.NCHAR, <span class="hljs-keyword">new</span> <span class="hljs-title class_">NStringTypeHandler</span>());<br>    register(String.class, JdbcType.NCLOB, <span class="hljs-keyword">new</span> <span class="hljs-title class_">NClobTypeHandler</span>());<br>    register(JdbcType.CHAR, <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTypeHandler</span>());<br>    register(JdbcType.VARCHAR, <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTypeHandler</span>());<br>    register(JdbcType.CLOB, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClobTypeHandler</span>());<br>    register(JdbcType.LONGVARCHAR, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClobTypeHandler</span>());<br>    register(JdbcType.NVARCHAR, <span class="hljs-keyword">new</span> <span class="hljs-title class_">NStringTypeHandler</span>());<br>    register(JdbcType.NCHAR, <span class="hljs-keyword">new</span> <span class="hljs-title class_">NStringTypeHandler</span>());<br>    register(JdbcType.NCLOB, <span class="hljs-keyword">new</span> <span class="hljs-title class_">NClobTypeHandler</span>());<br><br>    register(Object.class, JdbcType.ARRAY, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayTypeHandler</span>());<br>    register(JdbcType.ARRAY, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayTypeHandler</span>());<br><br>    register(BigInteger.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigIntegerTypeHandler</span>());<br>    register(JdbcType.BIGINT, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LongTypeHandler</span>());<br><br>    register(BigDecimal.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimalTypeHandler</span>());<br>    register(JdbcType.REAL, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimalTypeHandler</span>());<br>    register(JdbcType.DECIMAL, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimalTypeHandler</span>());<br>    register(JdbcType.NUMERIC, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimalTypeHandler</span>());<br><br>    register(Byte[].class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteObjectArrayTypeHandler</span>());<br>    register(Byte[].class, JdbcType.BLOB, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlobByteObjectArrayTypeHandler</span>());<br>    register(Byte[].class, JdbcType.LONGVARBINARY, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlobByteObjectArrayTypeHandler</span>());<br>    register(<span class="hljs-type">byte</span>[].class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayTypeHandler</span>());<br>    register(<span class="hljs-type">byte</span>[].class, JdbcType.BLOB, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlobTypeHandler</span>());<br>    register(<span class="hljs-type">byte</span>[].class, JdbcType.LONGVARBINARY, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlobTypeHandler</span>());<br>    register(JdbcType.LONGVARBINARY, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlobTypeHandler</span>());<br>    register(JdbcType.BLOB, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlobTypeHandler</span>());<br><br>    register(Object.class, UNKNOWN_TYPE_HANDLER);<br>    register(Object.class, JdbcType.OTHER, UNKNOWN_TYPE_HANDLER);<br>    register(JdbcType.OTHER, UNKNOWN_TYPE_HANDLER);<br><br>    register(Date.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTypeHandler</span>());<br>    register(Date.class, JdbcType.DATE, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateOnlyTypeHandler</span>());<br>    register(Date.class, JdbcType.TIME, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimeOnlyTypeHandler</span>());<br>    register(JdbcType.TIMESTAMP, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateTypeHandler</span>());<br>    register(JdbcType.DATE, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateOnlyTypeHandler</span>());<br>    register(JdbcType.TIME, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimeOnlyTypeHandler</span>());<br><br>    register(java.sql.Date.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlDateTypeHandler</span>());<br>    register(java.sql.Time.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlTimeTypeHandler</span>());<br>    register(java.sql.Timestamp.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlTimestampTypeHandler</span>());<br><br>    <span class="hljs-comment">// issue #273</span><br>    register(Character.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CharacterTypeHandler</span>());<br>    register(<span class="hljs-type">char</span>.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CharacterTypeHandler</span>());<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> TypeHandler&lt;?&gt; getMappingTypeHandler(Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TypeHandler</span>&lt;?&gt;&gt; handlerType) &#123;<br>    <span class="hljs-keyword">return</span> ALL_TYPE_HANDLERS_MAP.get(handlerType);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasTypeHandler</span><span class="hljs-params">(Class&lt;?&gt; javaType)</span> &#123;<br>    <span class="hljs-keyword">return</span> hasTypeHandler(javaType, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasTypeHandler</span><span class="hljs-params">(TypeReference&lt;?&gt; javaTypeReference)</span> &#123;<br>    <span class="hljs-keyword">return</span> hasTypeHandler(javaTypeReference, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasTypeHandler</span><span class="hljs-params">(Class&lt;?&gt; javaType, JdbcType jdbcType)</span> &#123;<br>    <span class="hljs-keyword">return</span> javaType != <span class="hljs-literal">null</span> &amp;&amp; getTypeHandler((Type) javaType, jdbcType) != <span class="hljs-literal">null</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasTypeHandler</span><span class="hljs-params">(TypeReference&lt;?&gt; javaTypeReference, JdbcType jdbcType)</span> &#123;<br>    <span class="hljs-keyword">return</span> javaTypeReference != <span class="hljs-literal">null</span> &amp;&amp; getTypeHandler(javaTypeReference, jdbcType) != <span class="hljs-literal">null</span>;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> &lt;T&gt; TypeHandler&lt;T&gt; <span class="hljs-title function_">getTypeHandler</span><span class="hljs-params">(Class&lt;T&gt; type)</span> &#123;<br>    <span class="hljs-keyword">return</span> getTypeHandler((Type) type, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> &lt;T&gt; TypeHandler&lt;T&gt; <span class="hljs-title function_">getTypeHandler</span><span class="hljs-params">(TypeReference&lt;T&gt; javaTypeReference)</span> &#123;<br>    <span class="hljs-keyword">return</span> getTypeHandler(javaTypeReference, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> TypeHandler&lt;?&gt; getTypeHandler(JdbcType jdbcType) &#123;<br>    <span class="hljs-keyword">return</span> JDBC_TYPE_HANDLER_MAP.get(jdbcType);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> &lt;T&gt; TypeHandler&lt;T&gt; <span class="hljs-title function_">getTypeHandler</span><span class="hljs-params">(Class&lt;T&gt; type, JdbcType jdbcType)</span> &#123;<br>    <span class="hljs-keyword">return</span> getTypeHandler((Type) type, jdbcType);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> &lt;T&gt; TypeHandler&lt;T&gt; <span class="hljs-title function_">getTypeHandler</span><span class="hljs-params">(TypeReference&lt;T&gt; javaTypeReference, JdbcType jdbcType)</span> &#123;<br>    <span class="hljs-keyword">return</span> getTypeHandler(javaTypeReference.getRawType(), jdbcType);<br>  &#125; <br><br>  <span class="hljs-comment">// 根据java类型和jdbc类型获取 TypeHandler</span><br>  <span class="hljs-keyword">private</span> &lt;T&gt; TypeHandler&lt;T&gt; <span class="hljs-title function_">getTypeHandler</span><span class="hljs-params">(Type type, JdbcType jdbcType)</span> &#123;<br>    Map&lt;JdbcType, TypeHandler&lt;?&gt;&gt; jdbcHandlerMap = TYPE_HANDLER_MAP.get(type);<br>    TypeHandler&lt;?&gt; handler = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (jdbcHandlerMap != <span class="hljs-literal">null</span>) &#123;<br>      handler = jdbcHandlerMap.get(jdbcType);<br>      <span class="hljs-keyword">if</span> (handler == <span class="hljs-literal">null</span>) &#123;<br>        handler = jdbcHandlerMap.get(<span class="hljs-literal">null</span>);<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// type 为 枚举类型</span><br>    <span class="hljs-keyword">if</span> (handler == <span class="hljs-literal">null</span> &amp;&amp; type != <span class="hljs-literal">null</span> &amp;&amp; type <span class="hljs-keyword">instanceof</span> Class &amp;&amp; Enum.class.isAssignableFrom((Class&lt;?&gt;) type)) &#123;<br>      handler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnumTypeHandler</span>((Class&lt;?&gt;) type);<br>    &#125;<br>    <span class="hljs-comment">// type drives generics here</span><br>    <span class="hljs-keyword">return</span> (TypeHandler&lt;T&gt;) handler;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> TypeHandler&lt;Object&gt; <span class="hljs-title function_">getUnknownTypeHandler</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> UNKNOWN_TYPE_HANDLER;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(JdbcType jdbcType, TypeHandler&lt;?&gt; handler)</span> &#123;<br>    JDBC_TYPE_HANDLER_MAP.put(jdbcType, handler);<br>  &#125; <br><br>  <span class="hljs-comment">//</span><br>  <span class="hljs-comment">// REGISTER INSTANCE</span><br>  <span class="hljs-comment">//</span><br><br>  <span class="hljs-comment">// Only handler</span><br><br>  <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(TypeHandler&lt;T&gt; typeHandler)</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">mappedTypeFound</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">MappedTypes</span> <span class="hljs-variable">mappedTypes</span> <span class="hljs-operator">=</span> typeHandler.getClass().getAnnotation(MappedTypes.class);<br>    <span class="hljs-keyword">if</span> (mappedTypes != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">for</span> (Class&lt;?&gt; handledType : mappedTypes.value()) &#123;<br>        register(handledType, typeHandler);<br>        mappedTypeFound = <span class="hljs-literal">true</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// @since 3.1.0 - try to auto-discover the mapped type </span><br>    <span class="hljs-comment">// 注册系统内置的实现了 TypeReference 的 TypeHandler</span><br>    <span class="hljs-keyword">if</span> (!mappedTypeFound &amp;&amp; typeHandler <span class="hljs-keyword">instanceof</span> TypeReference) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        TypeReference&lt;T&gt; typeReference = (TypeReference&lt;T&gt;) typeHandler;<br>        register(typeReference.getRawType(), typeHandler);<br>        mappedTypeFound = <span class="hljs-literal">true</span>;<br>      &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>        <span class="hljs-comment">// maybe users define the TypeReference with a different type and are not assignable, so just ignore it</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!mappedTypeFound) &#123;<br>      register((Class&lt;T&gt;) <span class="hljs-literal">null</span>, typeHandler);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// java type + handler</span><br><br>  <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(Class&lt;T&gt; javaType, TypeHandler&lt;? extends T&gt; typeHandler)</span> &#123;<br>    register((Type) javaType, typeHandler);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(Type javaType, TypeHandler&lt;? extends T&gt; typeHandler)</span> &#123;<br>    <span class="hljs-comment">// MappedJdbcTypes的注解的用法可参考测试类StringTrimmingTypeHandler</span><br>    <span class="hljs-comment">// 另外在文档中也提到，这是扩展自定义的typeHandler所需要的</span><br>    <span class="hljs-comment">// (你可以重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型)</span><br>    <span class="hljs-type">MappedJdbcTypes</span> <span class="hljs-variable">mappedJdbcTypes</span> <span class="hljs-operator">=</span> typeHandler.getClass().getAnnotation(MappedJdbcTypes.class);<br>    <span class="hljs-keyword">if</span> (mappedJdbcTypes != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">for</span> (JdbcType handledJdbcType : mappedJdbcTypes.value()) &#123;<br>        register(javaType, handledJdbcType, typeHandler);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (mappedJdbcTypes.includeNullJdbcType()) &#123;<br>        register(javaType, <span class="hljs-literal">null</span>, typeHandler);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      register(javaType, <span class="hljs-literal">null</span>, typeHandler);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(TypeReference&lt;T&gt; javaTypeReference, TypeHandler&lt;? extends T&gt; handler)</span> &#123;<br>    register(javaTypeReference.getRawType(), handler);<br>  &#125; <br><br>  <span class="hljs-comment">// java type + jdbc type + handler</span><br><br>  <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(Class&lt;T&gt; type, JdbcType jdbcType, TypeHandler&lt;? extends T&gt; handler)</span> &#123;<br>    register((Type) type, jdbcType, handler);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(Type javaType, JdbcType jdbcType, TypeHandler&lt;?&gt; handler)</span> &#123;<br>    <span class="hljs-keyword">if</span> (javaType != <span class="hljs-literal">null</span>) &#123;<br>      Map&lt;JdbcType, TypeHandler&lt;?&gt;&gt; map = TYPE_HANDLER_MAP.get(javaType);<br>      <span class="hljs-keyword">if</span> (map == <span class="hljs-literal">null</span>) &#123;<br>        map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;JdbcType, TypeHandler&lt;?&gt;&gt;();<br>        TYPE_HANDLER_MAP.put(javaType, map);<br>      &#125;<br>      map.put(jdbcType, handler);<br>    &#125; <br>    <span class="hljs-comment">// TypeHandler 全集 </span><br>    ALL_TYPE_HANDLERS_MAP.put(handler.getClass(), handler); <br>  &#125; <br><br>  <span class="hljs-comment">//</span><br>  <span class="hljs-comment">// REGISTER CLASS</span><br>  <span class="hljs-comment">//</span><br><br>  <span class="hljs-comment">// Only handler type</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(Class&lt;?&gt; typeHandlerClass)</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">mappedTypeFound</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">MappedTypes</span> <span class="hljs-variable">mappedTypes</span> <span class="hljs-operator">=</span> typeHandlerClass.getAnnotation(MappedTypes.class);<br>    <span class="hljs-keyword">if</span> (mappedTypes != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">for</span> (Class&lt;?&gt; javaTypeClass : mappedTypes.value()) &#123;<br>        register(javaTypeClass, typeHandlerClass);<br>        mappedTypeFound = <span class="hljs-literal">true</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!mappedTypeFound) &#123;<br>      register(getInstance(<span class="hljs-literal">null</span>, typeHandlerClass));<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// java type + handler type</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(Class&lt;?&gt; javaTypeClass, Class&lt;?&gt; typeHandlerClass)</span> &#123;<br>    register(javaTypeClass, getInstance(javaTypeClass, typeHandlerClass));<br>  &#125; <br><br>  <span class="hljs-comment">// java type + jdbc type + handler type</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(Class&lt;?&gt; javaTypeClass, JdbcType jdbcType, Class&lt;?&gt; typeHandlerClass)</span> &#123;<br>    register(javaTypeClass, jdbcType, getInstance(javaTypeClass, typeHandlerClass));<br>  &#125; <br><br>  <span class="hljs-comment">// Construct a handler (used also from Builders)</span><br><br>  <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; TypeHandler&lt;T&gt; <span class="hljs-title function_">getInstance</span><span class="hljs-params">(Class&lt;?&gt; javaTypeClass, Class&lt;?&gt; typeHandlerClass)</span> &#123;<br>    <span class="hljs-keyword">if</span> (javaTypeClass != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 内置的 TypeHandler 中只有 EnumTypeHandler 和 EnumOrdinalTypeHandler</span><br>        <span class="hljs-comment">// 有这个构造函数</span><br>        Constructor&lt;?&gt; c = typeHandlerClass.getConstructor(Class.class);<br>        <span class="hljs-keyword">return</span> (TypeHandler&lt;T&gt;) c.newInstance(javaTypeClass);<br>      &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException ignored) &#123;<br>        <span class="hljs-comment">// ignored</span><br>      &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeException</span>(<span class="hljs-string">&quot;Failed invoking constructor for handler &quot;</span> + typeHandlerClass, e);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>      Constructor&lt;?&gt; c = typeHandlerClass.getConstructor();<br>      <span class="hljs-keyword">return</span> (TypeHandler&lt;T&gt;) c.newInstance();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeException</span>(<span class="hljs-string">&quot;Unable to find a usable constructor for &quot;</span> + typeHandlerClass, e);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>    还有一个<code>SimpleTypeRegistry</code>给忘了，读者可以自己去看看代码，功能是判断class是否为known common type</p>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot自动配置浅析</title>
    <link href="/2023/06/11/SpringBoot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%B5%85%E6%9E%90/"/>
    <url>/2023/06/11/SpringBoot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%B5%85%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>    之前我一直以为SpringBoot的自动配置由 <code>@EnableAutoConfiguration</code>开启的，在看完源码后，发现是我天真了，下面我们就来根据SpringBoot和Spring的源码来一探究竟（为了行文方便，下面我会按照SpringBoot启动的流程来进行讲解，其实我在研究的时候是逆推的）</p><h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h3><p>首先看看SpringBoot应用程序的标志性注解 <code>@SpringBootApplication</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="hljs-meta">        @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootApplication &#123; <br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>除开一些常用的注解外，发现这个注解又由 <code>@SpringBootConfiguration 、@EnableAutoConfiguration、@ComponentScan</code> 三个注解修饰</p><p>点开<code>@SpringBootConfiguration</code>，发现其由 <code>@Configuration</code>注解修饰，这表示SpringBoot应用程序的入口类是一个配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Indexed</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootConfiguration &#123;<br>    <span class="hljs-meta">@AliasFor(</span><br><span class="hljs-meta">        annotation = Configuration.class</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">proxyBeanMethods</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后就是令人期待的  <code>@EnableAutoConfiguration</code>，看到了<code> @Import</code> 和<br><code>@AutoConfigurationPackage</code>（这个注解里面也是一个 <code>@Import</code>），<code>@Import</code>注解的作用后续再说</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@AutoConfigurationPackage</span><br><span class="hljs-meta">@Import(AutoConfigurationImportSelector.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableAutoConfiguration &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Environment property that can be used to override when auto-configuration is</span><br><span class="hljs-comment">     * enabled.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.boot.enableautoconfiguration&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Exclude specific auto-configuration classes such that they will never be applied.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the classes to exclude</span><br><span class="hljs-comment">     */</span><br>    Class&lt;?&gt;[] exclude() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Exclude specific auto-configuration class names such that they will never be</span><br><span class="hljs-comment">     * applied.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the class names to exclude</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 1.3.0</span><br><span class="hljs-comment">     */</span><br>    String[] excludeName() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>&#125; <br><br><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@Import(AutoConfigurationPackages.Registrar.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> AutoConfigurationPackage &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Base packages that should be registered with &#123;<span class="hljs-doctag">@link</span> AutoConfigurationPackages&#125;.</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * Use &#123;<span class="hljs-doctag">@link</span> #basePackageClasses&#125; for a type-safe alternative to String-based package</span><br><span class="hljs-comment">     * names.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the back package names</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 2.3.0</span><br><span class="hljs-comment">     */</span><br>    String[] basePackages() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Type-safe alternative to &#123;<span class="hljs-doctag">@link</span> #basePackages&#125; for specifying the packages to be</span><br><span class="hljs-comment">     * registered with &#123;<span class="hljs-doctag">@link</span> AutoConfigurationPackages&#125;.</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * Consider creating a special no-op marker class or interface in each package that</span><br><span class="hljs-comment">     * serves no purpose other than being referenced by this attribute.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> the base package classes</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 2.3.0</span><br><span class="hljs-comment">     */</span><br>    Class&lt;?&gt;[] basePackageClasses() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>最后 <code>@ComponentScan</code> 在这里只提供了两个 excludeFilter，这个在之后包扫描的时候会用来排除相应的 Configuration 类</p><h3 id="SpringApplication-run"><a href="#SpringApplication-run" class="headerlink" title="SpringApplication.run"></a>SpringApplication.run</h3><p>    下面我们跟着 <code>SpringApplication.run(Application.class, args);</code>的执行流程大致看一下SpringBoot容器启动的过程中做了哪些与自动配置相关的操作</p><p>一直点，到达 <code>public ConfigurableApplicationContext run(String... args)</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StopWatch</span> <span class="hljs-variable">stopWatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StopWatch</span>();<br>        ...<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">ApplicationArguments</span> <span class="hljs-variable">applicationArguments</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultApplicationArguments</span>(args);<br>            <span class="hljs-type">ConfigurableEnvironment</span> <span class="hljs-variable">environment</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.prepareEnvironment(listeners, bootstrapContext, applicationArguments);<br>            <span class="hljs-built_in">this</span>.configureIgnoreBeanInfo(environment);<br>            <span class="hljs-type">Banner</span> <span class="hljs-variable">printedBanner</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.printBanner(environment); <br>            <span class="hljs-comment">// 创建上下文</span><br>            context = <span class="hljs-built_in">this</span>.createApplicationContext();<br>            context.setApplicationStartup(<span class="hljs-built_in">this</span>.applicationStartup);<br>            <span class="hljs-built_in">this</span>.prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);<br>            <span class="hljs-comment">// refreshContext其实就是调用的 AbstractApplicationContext的refresh</span><br>            <span class="hljs-built_in">this</span>.refreshContext(context);<br>            <span class="hljs-built_in">this</span>.afterRefresh(context, applicationArguments);<br>            stopWatch.stop();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.logStartupInfo) &#123;<br>                (<span class="hljs-keyword">new</span> <span class="hljs-title class_">StartupInfoLogger</span>(<span class="hljs-built_in">this</span>.mainApplicationClass)).logStarted(<span class="hljs-built_in">this</span>.getApplicationLog(), stopWatch);<br>            &#125;<br><br>            listeners.started(context);<br>            <span class="hljs-built_in">this</span>.callRunners(context, applicationArguments);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable var10) &#123;<br>            <span class="hljs-built_in">this</span>.handleRunFailure(context, var10, listeners);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(var10);<br>        &#125;<br><br>        ...<br></code></pre></td></tr></table></figure><h4 id="this-createApplicationContext"><a href="#this-createApplicationContext" class="headerlink" title="this.createApplicationContext"></a>this.createApplicationContext</h4><p>根据代码可以看到创建上下文是委托给 <code>applicationContextFactory </code>来完成的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> ConfigurableApplicationContext <span class="hljs-title function_">createApplicationContext</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.applicationContextFactory.create(<span class="hljs-built_in">this</span>.webApplicationType);<br>&#125;<br></code></pre></td></tr></table></figure><p>而这个 <code>applicationContextFactory</code>在初始化时 赋值为 <code>ApplicationContextFactory.DEFAULT</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ApplicationContextFactory</span> <span class="hljs-variable">DEFAULT</span> <span class="hljs-operator">=</span> (webApplicationType) -&gt; &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">switch</span> (webApplicationType) &#123;<br>            <span class="hljs-keyword">case</span> SERVLET:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigServletWebServerApplicationContext</span>();<br>            <span class="hljs-keyword">case</span> REACTIVE:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigReactiveWebServerApplicationContext</span>();<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>();<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception var2) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Unable create a default ApplicationContext instance, you may need a custom ApplicationContextFactory&quot;</span>, var2);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>而根据 <code>ApplicationContextFactory.DEFAULT</code> 的代码可以看到是根据 <code>webApplicationType </code>来创建应用上下文</p><p>具体的细节不谈，这里我们只需要直到这三个应用上下文的初始化方法中都有这一行</p><p><code>this.reader = new AnnotatedBeanDefinitionReader(this);</code></p><p>点进去看看，发现在 <code>AnnotatedBeanDefinitionReader</code>初始化的时候调用了 <code>AnnotationConfigUtils.registerAnnotationConfigProcessors(this.registry);</code></p><p>看方法名猜测这个方法应该是注册了一些配置处理器</p><p>再点进去看看，一直到 <code> public static Set&lt;BeanDefinitionHolder&gt; registerAnnotationConfigProcessors(BeanDefinitionRegistry registry, @Nullable Object source)</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Set&lt;BeanDefinitionHolder&gt; <span class="hljs-title function_">registerAnnotationConfigProcessors</span><span class="hljs-params">(BeanDefinitionRegistry registry, <span class="hljs-meta">@Nullable</span> Object source)</span> &#123;<br>        ...<br><br>        Set&lt;BeanDefinitionHolder&gt; beanDefs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>(<span class="hljs-number">8</span>);<br>        RootBeanDefinition def;<br>        <span class="hljs-keyword">if</span> (!registry.containsBeanDefinition(<span class="hljs-string">&quot;org.springframework.context.annotation.internalConfigurationAnnotationProcessor&quot;</span>)) &#123; <br>            <span class="hljs-comment">// 这里的 ConfigurationClassPostProcessor 是咱们今天的主角</span><br>            def = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RootBeanDefinition</span>(ConfigurationClassPostProcessor.class);<br>            def.setSource(source);<br>            <span class="hljs-comment">// 可以看到这里是把 ConfigurationClassPostProcessor 注册到了IOC容器中</span><br>            <span class="hljs-comment">// 也就是容器刚创建时就往IOC容器中塞了好几个 BeanFactoryPostProcessor</span><br>            beanDefs.add(registerPostProcessor(registry, def, <span class="hljs-string">&quot;org.springframework.context.annotation.internalConfigurationAnnotationProcessor&quot;</span>));<br>        &#125;<br><br>        ...<br><br>        <span class="hljs-keyword">return</span> beanDefs;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="this-prepareContext"><a href="#this-prepareContext" class="headerlink" title="this.prepareContext"></a>this.prepareContext</h4><p>下面我们来看一下  <code>this.prepareContext(bootstrapContext, context, environment, listeners, applicationArguments, printedBanner);</code></p><p>本文我们主要关注 <code>this.load(context, sources.toArray(new Object[0]));</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">load</span><span class="hljs-params">(ApplicationContext context, Object[] sources)</span> &#123;<br>    <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>        logger.debug(<span class="hljs-string">&quot;Loading source &quot;</span> + StringUtils.arrayToCommaDelimitedString(sources));<br>    &#125;<br><br>    <span class="hljs-type">BeanDefinitionLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.createBeanDefinitionLoader(<span class="hljs-built_in">this</span>.getBeanDefinitionRegistry(context), sources);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.beanNameGenerator != <span class="hljs-literal">null</span>) &#123;<br>        loader.setBeanNameGenerator(<span class="hljs-built_in">this</span>.beanNameGenerator);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.resourceLoader != <span class="hljs-literal">null</span>) &#123;<br>        loader.setResourceLoader(<span class="hljs-built_in">this</span>.resourceLoader);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.environment != <span class="hljs-literal">null</span>) &#123;<br>        loader.setEnvironment(<span class="hljs-built_in">this</span>.environment);<br>    &#125;<br><br>    loader.load();<br>&#125;<br></code></pre></td></tr></table></figure><p>发现这个方法里先是定义了一个 <code>BeanDefinitionLoader</code> ，然后通过 <code>BeanDefinitionLoader.load()</code>进行load</p><p>然后再点点点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">load</span><span class="hljs-params">(Object source)</span> &#123;<br>    Assert.notNull(source, <span class="hljs-string">&quot;Source must not be null&quot;</span>);<br>    <span class="hljs-keyword">if</span> (source <span class="hljs-keyword">instanceof</span> Class) &#123;<br>        <span class="hljs-built_in">this</span>.load((Class)source);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (source <span class="hljs-keyword">instanceof</span> Resource) &#123;<br>        <span class="hljs-built_in">this</span>.load((Resource)source);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (source <span class="hljs-keyword">instanceof</span> Package) &#123;<br>        <span class="hljs-built_in">this</span>.load((Package)source);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (source <span class="hljs-keyword">instanceof</span> CharSequence) &#123;<br>        <span class="hljs-built_in">this</span>.load((CharSequence)source);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Invalid source type &quot;</span> + source.getClass());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到这里根据 source的类型选择了不同的方法</p><p>让我们回到 <code>SpringApplication.run(Application.class, args);</code>在构造方法的调用过程中看到了这样一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConfigurableApplicationContext <span class="hljs-title function_">run</span><span class="hljs-params">(Class&lt;?&gt;[] primarySources, String[] args)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringApplication</span>(primarySources)).run(args);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到这是将 <code>Application.class</code>作为参数传给了 <code>SpringApplication</code></p><p>而在 <code>SpringApplication</code>的构造方法中有这么一行代码 <code>this.primarySources = new LinkedHashSet(Arrays.asList(primarySources));</code></p><p>我们再回来，看看传给 <code>this.load(context, sources.toArray(new Object[0]));</code>的sources有哪些元素</p><p>根据上下文知道  <code>Set&lt;Object&gt; sources = this.getAllSources();</code></p><p>点进去看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Set&lt;Object&gt; <span class="hljs-title function_">getAllSources</span><span class="hljs-params">()</span> &#123;<br>    Set&lt;Object&gt; allSources = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>();<br>    <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(<span class="hljs-built_in">this</span>.primarySources)) &#123;<br>        allSources.addAll(<span class="hljs-built_in">this</span>.primarySources);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(<span class="hljs-built_in">this</span>.sources)) &#123;<br>        allSources.addAll(<span class="hljs-built_in">this</span>.sources);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> Collections.unmodifiableSet(allSources);<br>&#125;<br></code></pre></td></tr></table></figure><p>发现 <code>primarySources </code>在sources中，所以知道 Application.class 也被load了</p><p>点进 <code>load(Class&lt;?&gt; source)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">load</span><span class="hljs-params">(Class&lt;?&gt; source)</span> &#123; <br>    <span class="hljs-comment">// 这个条件一看就不满足</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.isGroovyPresent() &amp;&amp; GroovyBeanDefinitionSource.class.isAssignableFrom(source)) &#123;<br>        <span class="hljs-type">GroovyBeanDefinitionSource</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> (GroovyBeanDefinitionSource)BeanUtils.instantiateClass(source, GroovyBeanDefinitionSource.class);<br>        ((GroovyBeanDefinitionReader)<span class="hljs-built_in">this</span>.groovyReader).beans(loader.getBeans());<br>    &#125;<br><br>    <span class="hljs-comment">// 这个条件成立</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.isEligible(source)) &#123;<br>        <span class="hljs-comment">// 在这里将 SpringBoot应用程序的入口类注册到了 IOC 容器中</span><br>        <span class="hljs-comment">// 有兴趣的同学可以自己深入了解或者debug一下看看是不是这样</span><br>        <span class="hljs-built_in">this</span>.annotatedReader.register(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;source&#125;);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>至此，我们知道了应用程序上下文在创建的时候就向IOC容器中注册了几个 <code>BeanFactoryPostProcessor</code>，其中包括我们今天的主角 <code>ConfigurationClassPostProcessor</code>，并且在<code>this.prepareContext</code>将SpringBoot应用程序的入口类也注册进了IOC容器中</p><h4 id="this-refreshContext"><a href="#this-refreshContext" class="headerlink" title="this.refreshContext"></a>this.refreshContext</h4><p>    下面就进入到了 AbstractApplicationContext 中的refresh 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">refresh</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException, IllegalStateException &#123;<br><span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.startupShutdownMonitor) &#123;<br><span class="hljs-type">StartupStep</span> <span class="hljs-variable">contextRefresh</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.applicationStartup.start(<span class="hljs-string">&quot;spring.context.refresh&quot;</span>);<br><br><span class="hljs-comment">// Prepare this context for refreshing.</span><br><span class="hljs-comment">// 准备刷新的上下文环境</span><br>prepareRefresh();<br><br><span class="hljs-comment">// Tell the subclass to refresh the internal bean factory.</span><br><span class="hljs-comment">// 初始化BeanFactory，并进行XML文件读取</span><br><span class="hljs-type">ConfigurableListableBeanFactory</span> <span class="hljs-variable">beanFactory</span> <span class="hljs-operator">=</span> obtainFreshBeanFactory();<br><br><span class="hljs-comment">// Prepare the bean factory for use in this context.</span><br><span class="hljs-comment">// 对BeanFactory进行各种功能优化</span><br>prepareBeanFactory(beanFactory);<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">// Allows post-processing of the bean factory in context subclasses.</span><br><span class="hljs-comment">// 子类覆盖方法做额外的处理</span><br>postProcessBeanFactory(beanFactory);<br><br><span class="hljs-type">StartupStep</span> <span class="hljs-variable">beanPostProcess</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.applicationStartup.start(<span class="hljs-string">&quot;spring.context.beans.post-process&quot;</span>);<br><span class="hljs-comment">// Invoke factory processors registered as beans in the context.</span><br><span class="hljs-comment">// 激活各种BeanFactory处理器</span><br>            invokeBeanFactoryPostProcessors(beanFactory);<br><br><span class="hljs-comment">// Register bean processors that intercept bean creation.</span><br><span class="hljs-comment">// 注册拦截Bean创建的Bean处理器，这里只是注册，真正的调用是在getBean的时候</span><br>registerBeanPostProcessors(beanFactory);<br>beanPostProcess.end();<br><br><span class="hljs-comment">// Initialize message source for this context.</span><br><span class="hljs-comment">// 为上下文初始化Message源，即不同语言的消息体，国际化处理</span><br>initMessageSource();<br><br><span class="hljs-comment">// Initialize event multicaster for this context.</span><br><span class="hljs-comment">// 初始化应用消息广播器，并放入&quot;applicationEventMulticaster&quot; bean 中</span><br>initApplicationEventMulticaster();<br><br><span class="hljs-comment">// Initialize other special beans in specific context subclasses.</span><br><span class="hljs-comment">// 留给子类来初始化其他的bean</span><br>onRefresh();<br><br><span class="hljs-comment">// Check for listener beans and register them.</span><br><span class="hljs-comment">// 在所有注册的bean中查找Listener bean，注册到消息广播器中</span><br>registerListeners();<br><br><span class="hljs-comment">// Instantiate all remaining (non-lazy-init) singletons.</span><br><span class="hljs-comment">// 初始化剩下的单实例（非惰性的）</span><br>finishBeanFactoryInitialization(beanFactory);<br><br><span class="hljs-comment">// Last step: publish corresponding event.</span><br><span class="hljs-comment">// 完成刷新过程，通知生命周期处理器lifecycleProcessor刷新过程，同时发出</span><br><span class="hljs-comment">// ContextRefreshEvent通知别人</span><br>finishRefresh();<br>&#125;<br><br><span class="hljs-keyword">catch</span> (BeansException ex) &#123;<br><span class="hljs-keyword">if</span> (logger.isWarnEnabled()) &#123;<br>logger.warn(<span class="hljs-string">&quot;Exception encountered during context initialization - &quot;</span> +<br><span class="hljs-string">&quot;cancelling refresh attempt: &quot;</span> + ex);<br>&#125;<br><br><span class="hljs-comment">// Destroy already created singletons to avoid dangling resources.</span><br>destroyBeans();<br><br><span class="hljs-comment">// Reset &#x27;active&#x27; flag.</span><br>cancelRefresh(ex);<br><br><span class="hljs-comment">// Propagate exception to caller.</span><br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br><br><span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-comment">// Reset common introspection caches in Spring&#x27;s core, since we</span><br><span class="hljs-comment">// might not ever need metadata for singleton beans anymore...</span><br>resetCommonCaches();<br>contextRefresh.end();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为今天的主角是 一个 BeanFactoryPostProcessor，所以我们只关注 <code>invokeBeanFactoryPostProcessors(beanFactory);</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeBeanFactoryPostProcessors</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;<br>PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());<br><br><span class="hljs-comment">// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime</span><br><span class="hljs-comment">// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)</span><br><span class="hljs-keyword">if</span> (!NativeDetector.inNativeImage() &amp;&amp; beanFactory.getTempClassLoader() == <span class="hljs-literal">null</span> &amp;&amp; beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;<br>beanFactory.addBeanPostProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoadTimeWeaverAwareProcessor</span>(beanFactory));<br>beanFactory.setTempClassLoader(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ContextTypeMatchClassLoader</span>(beanFactory.getBeanClassLoader()));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>点进去发现对 <code>BeanFactoryPostProcessor </code>相关方法的调用委托给了 <code>PostProcessorRegistrationDelegate</code></p><blockquote><p>注意，执行到这里的时候 <code>getBeanFactoryPostProcessors()</code>默认情况下返回的集合元素个数为0，除非在这之前手动调用了 <code>addBeanFactoryPostProcessor(BeanFactoryPostProcessor postProcessor)</code>方法</p></blockquote><p>在 <code>PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors())</code>中主要看下面一行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] postProcessorNames =<br>beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><p>顾名思义，这行代码从IOC容器中获取所有实现了 <code>BeanDefinitionRegistryPostProcessor </code>接口的bean的名称，不巧的是 <code>ConfigurationClassPostProcessor</code>实现了这个接口（方法中还对实现了<code>BeanDefinitionRegistryPostProcessor </code>接口的类进行了排序）</p><blockquote><p>注意：</p><p><code>BeanDefinitionRegistryPostProcessor </code>实现了 <code>BeanFactoryPostProcessor</code>接口</p></blockquote><p>然后是 <code>invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry, beanFactory.getApplicationStartup());</code>  和 <code>invokeBeanFactoryPostProcessors(registryProcessors, beanFactory);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeBeanDefinitionRegistryPostProcessors</span><span class="hljs-params">(</span><br><span class="hljs-params">Collection&lt;? extends BeanDefinitionRegistryPostProcessor&gt; postProcessors, BeanDefinitionRegistry registry, ApplicationStartup applicationStartup)</span> &#123;<br><br><span class="hljs-keyword">for</span> (BeanDefinitionRegistryPostProcessor postProcessor : postProcessors) &#123;<br><span class="hljs-type">StartupStep</span> <span class="hljs-variable">postProcessBeanDefRegistry</span> <span class="hljs-operator">=</span> applicationStartup.start(<span class="hljs-string">&quot;spring.context.beandef-registry.post-process&quot;</span>)<br>.tag(<span class="hljs-string">&quot;postProcessor&quot;</span>, postProcessor::toString);<br>postProcessor.postProcessBeanDefinitionRegistry(registry);<br>postProcessBeanDefRegistry.end();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对每个 <code>BeanDefinitionRegistryPostProcessor</code>，调用其 <code>postProcessBeanDefinitionRegistry </code>方法和 <code>postProcessBeanFactory </code> 方法</p><p>由于咱们的 <code>ConfigurationClassPostProcessor </code>也在其中，下面就去看它具体做了什么</p><h4 id="ConfigurationClassPostProcessor-postProcessBeanDefinitionRegistry"><a href="#ConfigurationClassPostProcessor-postProcessBeanDefinitionRegistry" class="headerlink" title="ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry"></a>ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Derive further bean definitions from the configuration classes in the registry. </span><br><span class="hljs-comment"> * 从registry中的配置类派生更多的bean定义。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postProcessBeanDefinitionRegistry</span><span class="hljs-params">(BeanDefinitionRegistry registry)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">registryId</span> <span class="hljs-operator">=</span> System.identityHashCode(registry);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.registriesPostProcessed.contains(registryId)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br><span class="hljs-string">&quot;postProcessBeanDefinitionRegistry already called on this post-processor against &quot;</span> + registry);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.factoriesPostProcessed.contains(registryId)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<br><span class="hljs-string">&quot;postProcessBeanFactory already called on this post-processor against &quot;</span> + registry);<br>&#125;<br><span class="hljs-built_in">this</span>.registriesPostProcessed.add(registryId);<br><br>processConfigBeanDefinitions(registry);<br>&#125;<br></code></pre></td></tr></table></figure><p>点进 <code>processConfigBeanDefinitions(registry)</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processConfigBeanDefinitions</span><span class="hljs-params">(BeanDefinitionRegistry registry)</span> &#123;<br>List&lt;BeanDefinitionHolder&gt; configCandidates = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(); <br>    <span class="hljs-comment">// 获取容器中所有的bean名称，注意到这里可以获取到SpringBoot应用程序</span><br>    <span class="hljs-comment">// 的入口类对应的bean的名称</span><br>String[] candidateNames = registry.getBeanDefinitionNames();<br><br><span class="hljs-keyword">for</span> (String beanName : candidateNames) &#123;<br><span class="hljs-type">BeanDefinition</span> <span class="hljs-variable">beanDef</span> <span class="hljs-operator">=</span> registry.getBeanDefinition(beanName); <br>        <span class="hljs-comment">// 判断bean是否被处理过</span><br><span class="hljs-keyword">if</span> (beanDef.getAttribute(ConfigurationClassUtils.CONFIGURATION_CLASS_ATTRIBUTE) != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>logger.debug(<span class="hljs-string">&quot;Bean definition has already been processed as a configuration class: &quot;</span> + beanDef);<br>&#125;<br>&#125; <br>        <span class="hljs-comment">// 这里判断bean是否满足条件</span><br>        <span class="hljs-comment">// 具体的条件是类被 @Configuration 修饰</span><br>        <span class="hljs-comment">// 然后下面两项条件满足一项即可</span><br>        <span class="hljs-comment">// 1. @Configuration 注解的 proxyBeanMethods 属性为true</span><br>        <span class="hljs-comment">// 2. 类同时被 @Component 或者 @ComponentScan 或者 @Import 或者</span><br>        <span class="hljs-comment">// @ImportResource 注解修饰 或者类有方法被@Bean注解修饰</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, <span class="hljs-built_in">this</span>.metadataReaderFactory)) &#123;<br>configCandidates.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinitionHolder</span>(beanDef, beanName));<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Return immediately if no @Configuration classes were found</span><br><span class="hljs-keyword">if</span> (configCandidates.isEmpty()) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// Sort by previously determined @Order value, if applicable</span><br>configCandidates.sort((bd1, bd2) -&gt; &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> ConfigurationClassUtils.getOrder(bd1.getBeanDefinition());<br><span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> ConfigurationClassUtils.getOrder(bd2.getBeanDefinition());<br><span class="hljs-keyword">return</span> Integer.compare(i1, i2);<br>&#125;);<br><br><span class="hljs-comment">// Detect any custom bean name generation strategy supplied through the enclosing application context</span><br><span class="hljs-type">SingletonBeanRegistry</span> <span class="hljs-variable">sbr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (registry <span class="hljs-keyword">instanceof</span> SingletonBeanRegistry) &#123;<br>sbr = (SingletonBeanRegistry) registry;<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.localBeanNameGeneratorSet) &#123;<br><span class="hljs-type">BeanNameGenerator</span> <span class="hljs-variable">generator</span> <span class="hljs-operator">=</span> (BeanNameGenerator) sbr.getSingleton(<br>AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR);<br><span class="hljs-keyword">if</span> (generator != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.componentScanBeanNameGenerator = generator;<br><span class="hljs-built_in">this</span>.importBeanNameGenerator = generator;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.environment == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.environment = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardEnvironment</span>();<br>&#125;<br><br><span class="hljs-comment">// Parse each @Configuration class</span><br><span class="hljs-type">ConfigurationClassParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConfigurationClassParser</span>(<br><span class="hljs-built_in">this</span>.metadataReaderFactory, <span class="hljs-built_in">this</span>.problemReporter, <span class="hljs-built_in">this</span>.environment,<br><span class="hljs-built_in">this</span>.resourceLoader, <span class="hljs-built_in">this</span>.componentScanBeanNameGenerator, registry);<br><br>Set&lt;BeanDefinitionHolder&gt; candidates = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;(configCandidates);<br>Set&lt;ConfigurationClass&gt; alreadyParsed = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(configCandidates.size());<br><span class="hljs-keyword">do</span> &#123;<br><span class="hljs-type">StartupStep</span> <span class="hljs-variable">processConfig</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.applicationStartup.start(<span class="hljs-string">&quot;spring.context.config-classes.parse&quot;</span>);<br><span class="hljs-comment">// 委托 ConfigurationClassParser 处理候选的 配置类</span><br>        parser.parse(candidates);<br>parser.validate();<br><br>Set&lt;ConfigurationClass&gt; configClasses = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;(parser.getConfigurationClasses());<br>configClasses.removeAll(alreadyParsed);<br><br><span class="hljs-comment">// Read the model and create bean definitions based on its content</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.reader == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConfigurationClassBeanDefinitionReader</span>(<br>registry, <span class="hljs-built_in">this</span>.sourceExtractor, <span class="hljs-built_in">this</span>.resourceLoader, <span class="hljs-built_in">this</span>.environment,<br><span class="hljs-built_in">this</span>.importBeanNameGenerator, parser.getImportRegistry());<br>&#125;<br><span class="hljs-built_in">this</span>.reader.loadBeanDefinitions(configClasses);<br>alreadyParsed.addAll(configClasses);<br>processConfig.tag(<span class="hljs-string">&quot;classCount&quot;</span>, () -&gt; String.valueOf(configClasses.size())).end();<br><br>candidates.clear();<br><span class="hljs-keyword">if</span> (registry.getBeanDefinitionCount() &gt; candidateNames.length) &#123;<br>String[] newCandidateNames = registry.getBeanDefinitionNames();<br>Set&lt;String&gt; oldCandidateNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;(Arrays.asList(candidateNames));<br>Set&lt;String&gt; alreadyParsedClasses = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (ConfigurationClass configurationClass : alreadyParsed) &#123;<br>alreadyParsedClasses.add(configurationClass.getMetadata().getClassName());<br>&#125;<br><span class="hljs-keyword">for</span> (String candidateName : newCandidateNames) &#123;<br><span class="hljs-keyword">if</span> (!oldCandidateNames.contains(candidateName)) &#123;<br><span class="hljs-type">BeanDefinition</span> <span class="hljs-variable">bd</span> <span class="hljs-operator">=</span> registry.getBeanDefinition(candidateName);<br><span class="hljs-keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, <span class="hljs-built_in">this</span>.metadataReaderFactory) &amp;&amp;<br>!alreadyParsedClasses.contains(bd.getBeanClassName())) &#123;<br>candidates.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinitionHolder</span>(bd, candidateName));<br>&#125;<br>&#125;<br>&#125;<br>candidateNames = newCandidateNames;<br>&#125;<br>&#125;<br><span class="hljs-keyword">while</span> (!candidates.isEmpty());<br><br><span class="hljs-comment">// Register the ImportRegistry as a bean in order to support ImportAware @Configuration classes</span><br><span class="hljs-keyword">if</span> (sbr != <span class="hljs-literal">null</span> &amp;&amp; !sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) &#123;<br>sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry());<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.metadataReaderFactory <span class="hljs-keyword">instanceof</span> CachingMetadataReaderFactory cachingMetadataReaderFactory) &#123;<br><span class="hljs-comment">// Clear cache in externally provided MetadataReaderFactory; this is a no-op</span><br><span class="hljs-comment">// for a shared cache since it&#x27;ll be cleared by the ApplicationContext.</span><br>cachingMetadataReaderFactory.clearCache();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ConfigurationClassParser-parse"><a href="#ConfigurationClassParser-parse" class="headerlink" title="ConfigurationClassParser.parse"></a>ConfigurationClassParser.parse</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parse</span><span class="hljs-params">(Set&lt;BeanDefinitionHolder&gt; configCandidates)</span> &#123;<br><span class="hljs-keyword">for</span> (BeanDefinitionHolder holder : configCandidates) &#123;<br><span class="hljs-type">BeanDefinition</span> <span class="hljs-variable">bd</span> <span class="hljs-operator">=</span> holder.getBeanDefinition();<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">if</span> (bd <span class="hljs-keyword">instanceof</span> AnnotatedBeanDefinition) &#123;<br>parse(((AnnotatedBeanDefinition) bd).getMetadata(), holder.getBeanName());<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bd <span class="hljs-keyword">instanceof</span> AbstractBeanDefinition &amp;&amp; ((AbstractBeanDefinition) bd).hasBeanClass()) &#123;<br>parse(((AbstractBeanDefinition) bd).getBeanClass(), holder.getBeanName());<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>parse(bd.getBeanClassName(), holder.getBeanName());<br>&#125;<br>&#125;<br>...<br>&#125;<br><br><span class="hljs-built_in">this</span>.deferredImportSelectorHandler.process();<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到根据 BeanDefinition的类型进行了不同的处理（parse）</p><p>其中<code>this.deferredImportSelectorHandler.process();</code>这行代码对应<code>DeferredImportSelector</code>的处理</p><p>上面的三个parse方法最终都会调用<code>protected void processConfigurationClass(ConfigurationClass configClass, Predicate&lt;String&gt; filter) throws IOException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processConfigurationClass</span><span class="hljs-params">(ConfigurationClass configClass, Predicate&lt;String&gt; filter)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>   <span class="hljs-comment">// 是否应该跳过处理配置类（根据类上的 @Conditional注解）</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.conditionEvaluator.shouldSkip(configClass.getMetadata(), ConfigurationPhase.PARSE_CONFIGURATION)) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>       <span class="hljs-comment">// 看这个类是否已经被放入待处理集合</span><br><span class="hljs-type">ConfigurationClass</span> <span class="hljs-variable">existingClass</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.configurationClasses.get(configClass);<br><span class="hljs-keyword">if</span> (existingClass != <span class="hljs-literal">null</span>) &#123; <br>        <span class="hljs-comment">// configClass是通过 @Import 注册的或者是 由于嵌套在另一个配置类中而自动注册</span><br><span class="hljs-keyword">if</span> (configClass.isImported()) &#123;<br><span class="hljs-keyword">if</span> (existingClass.isImported()) &#123; <br>                <span class="hljs-comment">// 合并同一个类的导入对象集合</span><br>existingClass.mergeImportedBy(configClass);<br>&#125;<br><span class="hljs-comment">// Otherwise ignore new imported config class; existing non-imported class overrides it.</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// Explicit bean definition found, probably replacing an import.</span><br><span class="hljs-comment">// Let&#x27;s remove the old one and go with the new one. </span><br>            <span class="hljs-comment">// 找到了显式bean定义，将之前可能存在的导入的bean定义删除</span><br><span class="hljs-built_in">this</span>.configurationClasses.remove(configClass);<br><span class="hljs-built_in">this</span>.knownSuperclasses.values().removeIf(configClass::equals);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// Recursively process the configuration class and its superclass hierarchy.</span><br>    <span class="hljs-comment">// 递归处理配置类及其父类</span><br><span class="hljs-type">SourceClass</span> <span class="hljs-variable">sourceClass</span> <span class="hljs-operator">=</span> asSourceClass(configClass, filter);<br><span class="hljs-keyword">do</span> &#123;<br>sourceClass = doProcessConfigurationClass(configClass, sourceClass, filter);<br>&#125;<br><span class="hljs-keyword">while</span> (sourceClass != <span class="hljs-literal">null</span>);<br><br>    <span class="hljs-comment">// 最后将类放入待处理集合中，这个集合是 LinkedHashMap，根据插入元素的顺序</span><br>    <span class="hljs-comment">// 是有序的</span><br><span class="hljs-built_in">this</span>.configurationClasses.put(configClass, configClass);<br>&#125;<br></code></pre></td></tr></table></figure><p>看一下 <code>doProcessConfigurationClass </code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> ConfigurationClassParser.SourceClass <span class="hljs-title function_">doProcessConfigurationClass</span><span class="hljs-params">(</span><br><span class="hljs-params">        ConfigurationClass configClass, ConfigurationClassParser.SourceClass sourceClass, Predicate&lt;String&gt; filter)</span><br>        <span class="hljs-keyword">throws</span> IOException &#123;<br><br>    <span class="hljs-comment">// 处理嵌入的类，也是通过</span><br>    <span class="hljs-comment">// ConfigurationClassUtils.isConfigurationCandidate 判断嵌入类</span><br>    <span class="hljs-comment">// 是否是配置类候选，然后递归进行处理</span><br>    <span class="hljs-keyword">if</span> (configClass.getMetadata().isAnnotated(Component.class.getName())) &#123;<br>        <span class="hljs-comment">// Recursively process any member (nested) classes first</span><br>        processMemberClasses(configClass, sourceClass, filter);<br>    &#125;<br><br>    <span class="hljs-comment">// Process any @PropertySource annotations</span><br>    <span class="hljs-keyword">for</span> (AnnotationAttributes propertySource : AnnotationConfigUtils.attributesForRepeatable(<br>            sourceClass.getMtadata(), PropertySources.class,<br>            org.springframework.context.annotation.PropertySource.class)) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.environment <span class="hljs-keyword">instanceof</span> ConfigurableEnvironment) &#123;<br>            processPropertySource(propertySource);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            logger.info(<span class="hljs-string">&quot;Ignoring @PropertySource annotation on [&quot;</span> + sourceClass.getMetadata().getClassName() +<br>                    <span class="hljs-string">&quot;]. Reason: Environment must implement ConfigurableEnvironment&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Process any @ComponentScan annotations</span><br>    <span class="hljs-comment">// 配置类上有 @ComponentScan 注解（支持同时使用多个@ComponentScan注解）</span><br>    Set&lt;AnnotationAttributes&gt; componentScans = AnnotationConfigUtils.attributesForRepeatable(<br>            sourceClass.getMetadata(), ComponentScans.class, ComponentScan.class);<br>    <span class="hljs-keyword">if</span> (!componentScans.isEmpty() &amp;&amp;<br>            !<span class="hljs-built_in">this</span>.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationCondition.ConfigurationPhase.REGISTER_BEAN)) &#123;<br>        <span class="hljs-keyword">for</span> (AnnotationAttributes componentScan : componentScans) &#123;<br>            <span class="hljs-comment">// The config class is annotated with @ComponentScan -&gt; perform the scan immediately </span><br>            <span class="hljs-comment">// 通过 @ComponentScan 注解的属性进行包扫描，并把扫描到的bean注册到IOC容器中</span><br>            <span class="hljs-comment">// 如果 basePackages 和 basePackageClasses都为空，则扫描 sourceClass 所在的包</span><br>            <span class="hljs-comment">// 扫描时会根据 excludeFilters 和 includeFilters 过滤掉不符合条件的类</span><br>            <span class="hljs-comment">// 其中 includeFilters 有默认的过滤器 AnnotationTypeFilter(Component.class)等等</span><br>            Set&lt;BeanDefinitionHolder&gt; scannedBeanDefinitions =<br>                    <span class="hljs-built_in">this</span>.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());<br>            <span class="hljs-comment">// Check the set of scanned definitions for any further config classes and parse recursively if needed</span><br>            <span class="hljs-keyword">for</span> (BeanDefinitionHolder holder : scannedBeanDefinitions) &#123;<br>                <span class="hljs-type">BeanDefinition</span> <span class="hljs-variable">bdCand</span> <span class="hljs-operator">=</span> holder.getBeanDefinition().getOriginatingBeanDefinition();<br>                <span class="hljs-keyword">if</span> (bdCand == <span class="hljs-literal">null</span>) &#123;<br>                    bdCand = holder.getBeanDefinition();<br>                &#125;<br>                <span class="hljs-comment">// 处理候选配置类</span><br>                <span class="hljs-keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(bdCand, <span class="hljs-built_in">this</span>.metadataReaderFactory)) &#123;<br>                    parse(bdCand.getBeanClassName(), holder.getBeanName());<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Process any @Import annotations</span><br>    processImports(configClass, sourceClass, getImports(sourceClass), filter, <span class="hljs-literal">true</span>);<br><br>    <span class="hljs-comment">// Process any @ImportResource annotations</span><br>    <span class="hljs-type">AnnotationAttributes</span> <span class="hljs-variable">importResource</span> <span class="hljs-operator">=</span><br>            AnnotationConfigUtils.attributesFor(sourceClass.getMetadata(), ImportResource.class);<br>    <span class="hljs-keyword">if</span> (importResource != <span class="hljs-literal">null</span>) &#123;<br>        String[] resources = importResource.getStringArray(<span class="hljs-string">&quot;locations&quot;</span>);<br>        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BeanDefinitionReader</span>&gt; readerClass = importResource.getClass(<span class="hljs-string">&quot;reader&quot;</span>);<br>        <span class="hljs-keyword">for</span> (String resource : resources) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">resolvedResource</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.environment.resolveRequiredPlaceholders(resource);<br>            configClass.addImportedResource(resolvedResource, readerClass);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// Process individual @Bean methods</span><br>    Set&lt;MethodMetadata&gt; beanMethods = retrieveBeanMethodMetadata(sourceClass);<br>    <span class="hljs-keyword">for</span> (MethodMetadata methodMetadata : beanMethods) &#123;<br>        configClass.addBeanMethod(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanMethod</span>(methodMetadata, configClass));<br>    &#125;<br><br>    <span class="hljs-comment">// Process default methods on interfaces</span><br>    <span class="hljs-comment">// 处理类继承的接口中的被 @Bean注解修饰的方法 ？</span><br>    processInterfaces(configClass, sourceClass);<br><br>    <span class="hljs-comment">// Process superclass, if any</span><br>    <span class="hljs-keyword">if</span> (sourceClass.getMetadata().hasSuperClass()) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">superclass</span> <span class="hljs-operator">=</span> sourceClass.getMetadata().getSuperClassName();<br>        <span class="hljs-keyword">if</span> (superclass != <span class="hljs-literal">null</span> &amp;&amp; !superclass.startsWith(<span class="hljs-string">&quot;java&quot;</span>) &amp;&amp;<br>                !<span class="hljs-built_in">this</span>.knownSuperclasses.containsKey(superclass)) &#123;<br>            <span class="hljs-built_in">this</span>.knownSuperclasses.put(superclass, configClass);<br>            <span class="hljs-comment">// Superclass found, return its annotation metadata and recurse</span><br>            <span class="hljs-keyword">return</span> sourceClass.getSuperClass();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// No superclass -&gt; processing is complete</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><p>在看处理<code>@import</code> 注解的方法前先看一下 <code>getImports(SourceClass sourceClass)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Set&lt;ConfigurationClassParser.SourceClass&gt; getImports(ConfigurationClassParser.SourceClass sourceClass) <span class="hljs-keyword">throws</span> IOException &#123;<br>    Set&lt;ConfigurationClassParser.SourceClass&gt; imports = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;();<br>    Set&lt;ConfigurationClassParser.SourceClass&gt; visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;();<br>    collectImports(sourceClass, imports, visited);<br>    <span class="hljs-keyword">return</span> imports;<br>&#125; <br><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">collectImports</span><span class="hljs-params">(ConfigurationClassParser.SourceClass sourceClass, Set&lt;ConfigurationClassParser.SourceClass&gt; imports, Set&lt;ConfigurationClassParser.SourceClass&gt; visited)</span><br>        <span class="hljs-keyword">throws</span> IOException &#123;<br><br>    <span class="hljs-keyword">if</span> (visited.add(sourceClass)) &#123;<br>        <span class="hljs-keyword">for</span> (ConfigurationClassParser.SourceClass annotation : sourceClass.getAnnotations()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">annName</span> <span class="hljs-operator">=</span> annotation.getMetadata().getClassName();<br>            <span class="hljs-keyword">if</span> (!annName.equals(Import.class.getName())) &#123;<br>                collectImports(annotation, imports, visited);<br>            &#125;<br>        &#125;<br>        imports.addAll(sourceClass.getAnnotationAttributes(Import.class.getName(), <span class="hljs-string">&quot;value&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到Spring是递归地获取配置类上所有 <code>@Import</code> 注解上的 value值作为 importCandidates 传给 <code>processImports</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processImports</span><span class="hljs-params">(ConfigurationClass configClass, ConfigurationClassParser.SourceClass currentSourceClass,</span><br><span class="hljs-params">                            Collection&lt;ConfigurationClassParser.SourceClass&gt; importCandidates, Predicate&lt;String&gt; exclusionFilter,</span><br><span class="hljs-params">                            <span class="hljs-type">boolean</span> checkForCircularImports)</span>     &#123;<br>    <span class="hljs-comment">// 配置类上没有 @Import 注解或者 @Import 注解上的value为空</span><br>    <span class="hljs-keyword">if</span> (importCandidates.isEmpty()) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 检查循环 Import</span><br>    <span class="hljs-keyword">if</span> (checkForCircularImports &amp;&amp; isChainedImportOnStack(configClass)) &#123;<br>        <span class="hljs-built_in">this</span>.problemReporter.error(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConfigurationClassParser</span>.CircularImportProblem(configClass, <span class="hljs-built_in">this</span>.importStack));<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">this</span>.importStack.push(configClass);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (ConfigurationClassParser.SourceClass candidate : importCandidates) &#123;<br>                <span class="hljs-comment">// import 的是 ImportSelector 的实现类</span><br>                <span class="hljs-keyword">if</span> (candidate.isAssignable(ImportSelector.class)) &#123;<br>                    <span class="hljs-comment">// Candidate class is an ImportSelector -&gt; delegate to it to determine imports</span><br>                    Class&lt;?&gt; candidateClass = candidate.loadClass();<br>                    <span class="hljs-type">ImportSelector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> ParserStrategyUtils.instantiateClass(candidateClass, ImportSelector.class,<br>                            <span class="hljs-built_in">this</span>.environment, <span class="hljs-built_in">this</span>.resourceLoader, <span class="hljs-built_in">this</span>.registry);<br>                    Predicate&lt;String&gt; selectorFilter = selector.getExclusionFilter();<br>                    <span class="hljs-comment">// 处理过滤器</span><br>                    <span class="hljs-keyword">if</span> (selectorFilter != <span class="hljs-literal">null</span>) &#123;<br>                        exclusionFilter = exclusionFilter.or(selectorFilter);<br>                    &#125;<br>                    <span class="hljs-comment">// 如果是DeferredImportSelector，则先存起来</span><br>                    <span class="hljs-comment">// 最后在 parse(Set&lt;BeanDefinitionHolder&gt; configCandidates) 方法中</span><br>                    <span class="hljs-comment">// 调用 this.deferredImportSelectorHandler.process</span><br>                    <span class="hljs-comment">// 统一处理，实现了了延迟加载的效果</span><br>                    <span class="hljs-keyword">if</span> (selector <span class="hljs-keyword">instanceof</span> DeferredImportSelector) &#123;<br>                        <span class="hljs-built_in">this</span>.deferredImportSelectorHandler.handle(configClass, (DeferredImportSelector) selector);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> &#123;<br>                        String[] importClassNames = selector.selectImports(currentSourceClass.getMetadata());<br>                        Collection&lt;ConfigurationClassParser.SourceClass&gt; importSourceClasses = asSourceClasses(importClassNames, exclusionFilter);<br>                        <span class="hljs-comment">// 递归处理配置类</span><br>                        processImports(configClass, currentSourceClass, importSourceClasses, exclusionFilter, <span class="hljs-literal">false</span>);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (candidate.isAssignable(ImportBeanDefinitionRegistrar.class)) &#123;<br>                    <span class="hljs-comment">// Candidate class is an ImportBeanDefinitionRegistrar -&gt;</span><br>                    <span class="hljs-comment">// delegate to it to register additional bean definitions</span><br>                    Class&lt;?&gt; candidateClass = candidate.loadClass();<br>                    <span class="hljs-type">ImportBeanDefinitionRegistrar</span> <span class="hljs-variable">registrar</span> <span class="hljs-operator">=</span><br>                            ParserStrategyUtils.instantiateClass(candidateClass, ImportBeanDefinitionRegistrar.class,<br>                                    <span class="hljs-built_in">this</span>.environment, <span class="hljs-built_in">this</span>.resourceLoader, <span class="hljs-built_in">this</span>.registry);<br>                    <span class="hljs-comment">// 如果是导入 ImportBeanDefinitionRegistrar 类型的类</span><br>                    <span class="hljs-comment">// 先添加到 this.importBeanDefinitionRegistrars 集合中</span><br>                    <span class="hljs-comment">// 最后在 ConfigurationClassBeanDefinitionReader中处理</span><br>                    configClass.addImportBeanDefinitionRegistrar(registrar, currentSourceClass.getMetadata());<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// Candidate class not an ImportSelector or ImportBeanDefinitionRegistrar -&gt;</span><br>                    <span class="hljs-comment">// process it as an @Configuration class</span><br>                    <span class="hljs-comment">// 作为配置类处理，递归调用</span><br>                    <span class="hljs-built_in">this</span>.importStack.registerImport(<br>                            currentSourceClass.getMetadata(), candidate.getMetadata().getClassName());<br>                    processConfigurationClass(candidate.asConfigClass(configClass), exclusionFilter);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (BeanDefinitionStoreException ex) &#123;<br>            <span class="hljs-keyword">throw</span> ex;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinitionStoreException</span>(<br>                    <span class="hljs-string">&quot;Failed to process import candidates for configuration class [&quot;</span> +<br>                            configClass.getMetadata().getClassName() + <span class="hljs-string">&quot;]&quot;</span>, ex);<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-built_in">this</span>.importStack.pop();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ConfigurationClassBeanDefinitionReader-loadBeanDefinitions"><a href="#ConfigurationClassBeanDefinitionReader-loadBeanDefinitions" class="headerlink" title="ConfigurationClassBeanDefinitionReader.loadBeanDefinitions"></a>ConfigurationClassBeanDefinitionReader.loadBeanDefinitions</h4><p>    委托给ConfigurationClassParser解析完配置类后，调用<code>this.reader.loadBeanDefinitions(configClasses);</code>将配置类注册到IOC容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadBeanDefinitions</span><span class="hljs-params">(Set&lt;ConfigurationClass&gt; configurationModel)</span> &#123;<br>    ConfigurationClassBeanDefinitionReader.<span class="hljs-type">TrackedConditionEvaluator</span> <span class="hljs-variable">trackedConditionEvaluator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConfigurationClassBeanDefinitionReader</span>.TrackedConditionEvaluator();<br>    <span class="hljs-keyword">for</span> (ConfigurationClass configClass : configurationModel) &#123;<br>        loadBeanDefinitionsForConfigurationClass(configClass, trackedConditionEvaluator);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loadBeanDefinitionsForConfigurationClass</span><span class="hljs-params">(</span><br><span class="hljs-params">        ConfigurationClass configClass, ConfigurationClassBeanDefinitionReader.TrackedConditionEvaluator trackedConditionEvaluator)</span> &#123;<br><br>    <span class="hljs-keyword">if</span> (trackedConditionEvaluator.shouldSkip(configClass)) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">beanName</span> <span class="hljs-operator">=</span> configClass.getBeanName();<br>        <span class="hljs-keyword">if</span> (StringUtils.hasLength(beanName) &amp;&amp; <span class="hljs-built_in">this</span>.registry.containsBeanDefinition(beanName)) &#123;<br>            <span class="hljs-built_in">this</span>.registry.removeBeanDefinition(beanName);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.importRegistry.removeImportingClass(configClass.getMetadata().getClassName());<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (configClass.isImported()) &#123;<br>        registerBeanDefinitionForImportedConfigurationClass(configClass);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (BeanMethod beanMethod : configClass.getBeanMethods()) &#123;<br>        loadBeanDefinitionsForBeanMethod(beanMethod);<br>    &#125;<br><br>    loadBeanDefinitionsFromImportedResources(configClass.getImportedResources());<br>    loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars());<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以看到是根据 配置类插入的顺序依次进行bean定义的加载</p><p>而对单个配置类，如果该配置类是由其他配置类导入的，会额外将其注册IOC容器中、然后是注册其被<code>@Bean</code>注解修饰的方法返回的bean、然后注册配置类上<code>@ImportResource</code>导入的bean、最后注册配置类导入的 实现了<code>ImportBeanDefinitionRegistrar</code>接口的类中要注册的bean</p><p>至此Spring加载配置类的流程基本上就走完了</p><h3 id="DeferredImportSelector-的加载流程"><a href="#DeferredImportSelector-的加载流程" class="headerlink" title="DeferredImportSelector 的加载流程"></a>DeferredImportSelector 的加载流程</h3><p>    <code>ConfigurationClassParser</code>在解析配置类时对 <code>@Import</code>注解的处理涉及到 <code>DeferredImportSelector</code></p><p>在处理 <code>ImportSelector </code>的实现类时，如果其还是 <code>DeferredImportSelector</code>的实现类，会调用 <code>this.deferredImportSelectorHandler.handle(configClass, (DeferredImportSelector) selector);</code>进行处理</p><p>下面我们点进去看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(ConfigurationClass configClass, DeferredImportSelector importSelector)</span> &#123;<br>    ConfigurationClassParser.<span class="hljs-type">DeferredImportSelectorHolder</span> <span class="hljs-variable">holder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConfigurationClassParser</span>.DeferredImportSelectorHolder(configClass, importSelector);<br>    <span class="hljs-comment">// 正在执行 this.deferredImportSelectorHandler.process</span><br>    <span class="hljs-comment">// 对新加入的 DeferredImportSelector 单独进行处理</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.deferredImportSelectors == <span class="hljs-literal">null</span>) &#123;<br>        ConfigurationClassParser.<span class="hljs-type">DeferredImportSelectorGroupingHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConfigurationClassParser</span>.DeferredImportSelectorGroupingHandler();<br>        handler.register(holder);<br>        handler.processGroupImports();<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 简单地将封装好的 DeferredImportSelectorHolder 加入到</span><br>        <span class="hljs-comment">// this.deferredImportSelector List中</span><br>        <span class="hljs-built_in">this</span>.deferredImportSelectors.add(holder);<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>最后在 <code>public void parse(Set&lt;BeanDefinitionHolder&gt; configCandidates)</code>的最后执行  <code>this.deferredImportSelectorHandler.process();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">()</span> &#123;<br>    List&lt;ConfigurationClassParser.DeferredImportSelectorHolder&gt; deferredImports = <span class="hljs-built_in">this</span>.deferredImportSelectors;<br>    <span class="hljs-comment">// 这里对应上面的 this.deferredImportSelectors == null 的情况</span><br>    <span class="hljs-built_in">this</span>.deferredImportSelectors = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (deferredImports != <span class="hljs-literal">null</span>) &#123;<br>            ConfigurationClassParser.<span class="hljs-type">DeferredImportSelectorGroupingHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConfigurationClassParser</span>.DeferredImportSelectorGroupingHandler();<br>            deferredImports.sort(DEFERRED_IMPORT_COMPARATOR);<br>            <span class="hljs-comment">// 逐个将 DeferredImportSelectorHolder 注册到 </span><br>            <span class="hljs-comment">// DeferredImportSelectorGroupingHandler 中</span><br>            deferredImports.forEach(handler::register);<br>            <span class="hljs-comment">// 处理</span><br>            handler.processGroupImports();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-built_in">this</span>.deferredImportSelectors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    &#125;<br>&#125; <br><br><br><span class="hljs-comment">// private final Map&lt;Object, DeferredImportSelectorGrouping&gt; groupings = new LinkedHashMap&lt;&gt;();</span><br><span class="hljs-comment">// private final Map&lt;AnnotationMetadata, ConfigurationClass&gt; configurationClasses = new HashMap&lt;&gt;();</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(ConfigurationClassParser.DeferredImportSelectorHolder deferredImport)</span> &#123;<br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DeferredImportSelector</span>.Group&gt; group = deferredImport.getImportSelector().getImportGroup();<br>    <span class="hljs-comment">// 看 DeferredImportSelectorHolder 中存储的 DeferredImportSelector </span><br>    <span class="hljs-comment">// 是否有 DeferredImportSelector.Group 子类，没有的话以 </span><br>    <span class="hljs-comment">// DeferredImportSelectorHolder 为key</span><br>    <span class="hljs-comment">// 其中 createGroup 方法也判断 group是否为空</span><br>    <span class="hljs-comment">// 如果为空，则以默认的 DefaultDeferredImportSelectorGroup作为group</span><br>    ConfigurationClassParser.<span class="hljs-type">DeferredImportSelectorGrouping</span> <span class="hljs-variable">grouping</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.groupings.computeIfAbsent(<br>            (group != <span class="hljs-literal">null</span> ? group : deferredImport),<br>            key -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConfigurationClassParser</span>.DeferredImportSelectorGrouping(createGroup(group)));<br>    grouping.add(deferredImport);<br>    <span class="hljs-comment">// 将 DeferredImportSelector 接口的实现类放入 LinkedHashMap中后续处理</span><br>    <span class="hljs-comment">// import 导入的配置类会在</span><br>    <span class="hljs-comment">// ConfigurationClassBeanDefinitionReader.registerBeanDefinitionForImportedConfigurationClass</span><br>    <span class="hljs-comment">// 方法中注册进IOC容器</span><br>    <span class="hljs-built_in">this</span>.configurationClasses.put(deferredImport.getConfigurationClass().getMetadata(),<br>            deferredImport.getConfigurationClass());<br>&#125; <br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processGroupImports</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (ConfigurationClassParser.DeferredImportSelectorGrouping grouping : <span class="hljs-built_in">this</span>.groupings.values()) &#123;<br>        Predicate&lt;String&gt; exclusionFilter = grouping.getCandidateFilter();<br>        grouping.getImports().forEach(entry -&gt; &#123;<br>            <span class="hljs-comment">// 根据entry 的 AnnotationMetadata 获取将entry导入的配置类</span><br>            <span class="hljs-type">ConfigurationClass</span> <span class="hljs-variable">configurationClass</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.configurationClasses.get(entry.getMetadata());<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 以处理@Import注解的方式处理 </span><br>                <span class="hljs-comment">// DeferredImportSelector 导入的类</span><br>                processImports(configurationClass, asSourceClass(configurationClass, exclusionFilter),<br>                        Collections.singleton(asSourceClass(entry.getImportClassName(), exclusionFilter)),<br>                        exclusionFilter, <span class="hljs-literal">false</span>);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (BeanDefinitionStoreException ex) &#123;<br>                <span class="hljs-keyword">throw</span> ex;<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanDefinitionStoreException</span>(<br>                        <span class="hljs-string">&quot;Failed to process import candidates for configuration class [&quot;</span> +<br>                                configurationClass.getMetadata().getClassName() + <span class="hljs-string">&quot;]&quot;</span>, ex);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125; <br><br><span class="hljs-comment">// 可以看到 DeferredImportSelectorGrouping的 getImports 方法</span><br><span class="hljs-comment">// 调用了 DeferredImportSelector.Group 的 process 和 selectImports 方法</span><br><span class="hljs-keyword">public</span> Iterable&lt;DeferredImportSelector.Group.Entry&gt; getImports() &#123;<br>    <span class="hljs-keyword">for</span> (ConfigurationClassParser.DeferredImportSelectorHolder deferredImport : <span class="hljs-built_in">this</span>.deferredImports) &#123;<br>        <span class="hljs-built_in">this</span>.group.process(deferredImport.getConfigurationClass().getMetadata(),<br>                deferredImport.getImportSelector());<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.group.selectImports();<br>&#125;<br></code></pre></td></tr></table></figure><p>我们再回过头看看 <code>@EnableAutoConfiguration</code>中 import 的 <code>AutoConfigurationImportSelector</code>，其实现了 <code>DeferredImportSelector</code>接口，并且 <code>getImportGroup()</code>方法返回其子类  <code>AutoConfigurationGroup</code></p><p>所以我们主要看 <code>AutoConfigurationGroup </code>的 <code>process </code>和 <code>selectImports </code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(AnnotationMetadata annotationMetadata, DeferredImportSelector deferredImportSelector)</span> &#123;<br>    Assert.state(deferredImportSelector <span class="hljs-keyword">instanceof</span> AutoConfigurationImportSelector,<br>            () -&gt; String.format(<span class="hljs-string">&quot;Only %s implementations are supported, got %s&quot;</span>,<br>                    AutoConfigurationImportSelector.class.getSimpleName(),<br>                    deferredImportSelector.getClass().getName()));<br>    <span class="hljs-comment">// 根据 annotationMetadata 构建 AutoConfigurationEntry</span><br>    AutoConfigurationImportSelector.<span class="hljs-type">AutoConfigurationEntry</span> <span class="hljs-variable">autoConfigurationEntry</span> <span class="hljs-operator">=</span> ((AutoConfigurationImportSelector) deferredImportSelector)<br>            .getAutoConfigurationEntry(annotationMetadata);<br>    <span class="hljs-built_in">this</span>.autoConfigurationEntries.add(autoConfigurationEntry);<br>    <span class="hljs-keyword">for</span> (String importClassName : autoConfigurationEntry.getConfigurations()) &#123;<br>        <span class="hljs-comment">// 建立 annotationMetadata 和根据其导入的类的名称 importClassName 的映射</span><br>        <span class="hljs-built_in">this</span>.entries.putIfAbsent(importClassName, annotationMetadata);<br>    &#125;<br>&#125; <br><br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Iterable&lt;DeferredImportSelector.Group.Entry&gt; selectImports() &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.autoConfigurationEntries.isEmpty()) &#123;<br>        <span class="hljs-keyword">return</span> Collections.emptyList();<br>    &#125;<br>    Set&lt;String&gt; allExclusions = <span class="hljs-built_in">this</span>.autoConfigurationEntries.stream()<br>            .map(AutoConfigurationImportSelector.AutoConfigurationEntry::getExclusions).flatMap(Collection::stream).collect(Collectors.toSet());<br>    Set&lt;String&gt; processedConfigurations = <span class="hljs-built_in">this</span>.autoConfigurationEntries.stream()<br>            .map(AutoConfigurationImportSelector.AutoConfigurationEntry::getConfigurations).flatMap(Collection::stream)<br>            .collect(Collectors.toCollection(LinkedHashSet::<span class="hljs-keyword">new</span>));<br>    processedConfigurations.removeAll(allExclusions);<br><br>    <span class="hljs-comment">// 最后返回排好序的 DeferredImportSelector.Group.Entry</span><br>    <span class="hljs-keyword">return</span> sortAutoConfigurations(processedConfigurations, getAutoConfigurationMetadata()).stream()<br>            .map((importClassName) -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeferredImportSelector</span>.Group.Entry(<span class="hljs-built_in">this</span>.entries.get(importClassName), importClassName))<br>            .collect(Collectors.toList());<br>&#125;<br></code></pre></td></tr></table></figure><p>最后看一下 <code>AutoConfigurationImportSelector</code>的 <code>getAutoConfigurationEntry</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> AutoConfigurationImportSelector.AutoConfigurationEntry <span class="hljs-title function_">getAutoConfigurationEntry</span><span class="hljs-params">(AnnotationMetadata annotationMetadata)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!isEnabled(annotationMetadata)) &#123;<br>        <span class="hljs-keyword">return</span> EMPTY_ENTRY;<br>    &#125; <br>    <span class="hljs-comment">// 获取注解上的属性</span><br>    <span class="hljs-type">AnnotationAttributes</span> <span class="hljs-variable">attributes</span> <span class="hljs-operator">=</span> getAttributes(annotationMetadata);<br>    <span class="hljs-comment">// 根据注解的属性获取要导入的候选类</span><br>    List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);<br>    configurations = removeDuplicates(configurations);<br>    Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);<br>    checkExcludedClasses(configurations, exclusions);<br>    configurations.removeAll(exclusions);<br>    configurations = getConfigurationClassFilter().filter(configurations);<br>    fireAutoConfigurationImportEvents(configurations, exclusions);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AutoConfigurationImportSelector</span>.AutoConfigurationEntry(configurations, exclusions);<br>&#125; <br><br><br><span class="hljs-keyword">protected</span> List&lt;String&gt; <span class="hljs-title function_">getCandidateConfigurations</span><span class="hljs-params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> &#123;<br>    <span class="hljs-comment">// 获取候选类名的方法委托给 SpringFactoriesLoader.loadFactoryNames 实现</span><br>    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),<br>            getBeanClassLoader());<br>    Assert.notEmpty(configurations, <span class="hljs-string">&quot;No auto configuration classes found in META-INF/spring.factories. If you &quot;</span><br>            + <span class="hljs-string">&quot;are using a custom packaging, make sure that file is correct.&quot;</span>);<br>    <span class="hljs-keyword">return</span> configurations;<br>&#125; <br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">loadFactoryNames</span><span class="hljs-params">(Class&lt;?&gt; factoryType, <span class="hljs-meta">@Nullable</span> ClassLoader classLoader)</span> &#123;<br>    <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoaderToUse</span> <span class="hljs-operator">=</span> classLoader;<br>    <span class="hljs-keyword">if</span> (classLoader == <span class="hljs-literal">null</span>) &#123;<br>        classLoaderToUse = SpringFactoriesLoader.class.getClassLoader();<br>    &#125; <br><br>    <span class="hljs-comment">// 这里的 factoryTypeName 就是 @EnableAutoConfiguration 注解的类名</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">factoryTypeName</span> <span class="hljs-operator">=</span> factoryType.getName(); <br>    <span class="hljs-comment">// 找不到就返回空集合</span><br>    <span class="hljs-keyword">return</span> (List)loadSpringFactories(classLoaderToUse).getOrDefault(factoryTypeName, Collections.emptyList());<br>&#125; <br><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; <span class="hljs-title function_">loadSpringFactories</span><span class="hljs-params">(ClassLoader classLoader)</span> &#123;<br>    Map&lt;String, List&lt;String&gt;&gt; result = (Map)cache.get(classLoader);<br>    <span class="hljs-keyword">if</span> (result != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Map&lt;String, List&lt;String&gt;&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><br>        <span class="hljs-keyword">try</span> &#123; <br>            <span class="hljs-comment">// 解析 META-INF/spring.factories 文件</span><br>            Enumeration&lt;URL&gt; urls = classLoader.getResources(<span class="hljs-string">&quot;META-INF/spring.factories&quot;</span>);<br><br>            <span class="hljs-keyword">while</span>(urls.hasMoreElements()) &#123;<br>                <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> (URL)urls.nextElement();<br>                <span class="hljs-type">UrlResource</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlResource</span>(url);<br>                <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> PropertiesLoaderUtils.loadProperties(resource);<br>                <span class="hljs-type">Iterator</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> properties.entrySet().iterator();<br><br>                <span class="hljs-keyword">while</span>(var6.hasNext()) &#123;<br>                    Map.Entry&lt;?, ?&gt; entry = (Map.Entry)var6.next(); <br>                    <span class="hljs-comment">// 获取文件中一行格式为 factoryTypeName = className,className...</span><br>                    <span class="hljs-comment">// 的行的 factoryTypeName </span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">factoryTypeName</span> <span class="hljs-operator">=</span> ((String)entry.getKey()).trim();<br>                    String[] factoryImplementationNames = StringUtils.commaDelimitedListToStringArray((String)entry.getValue());<br>                    String[] var10 = factoryImplementationNames;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">var11</span> <span class="hljs-operator">=</span> factoryImplementationNames.length;<br>                    <span class="hljs-comment">// 获取factoryTypeName 对应的所有className</span><br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">var12</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; var12 &lt; var11; ++var12) &#123;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">factoryImplementationName</span> <span class="hljs-operator">=</span> var10[var12];<br>                        ((List)result.computeIfAbsent(factoryTypeName, (key) -&gt; &#123;<br>                            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>                        &#125;)).add(factoryImplementationName.trim());<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 每个 factoryTypeName 对应的 classNames去重</span><br>            result.replaceAll((factoryType, implementations) -&gt; &#123;<br>                <span class="hljs-keyword">return</span> (List)implementations.stream().distinct().collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));<br>            &#125;);<br>            cache.put(classLoader, result);<br>            <span class="hljs-keyword">return</span> result;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException var14) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Unable to load factories from location [META-INF/spring.factories]&quot;</span>, var14);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="AutoConfigurationPackage"><a href="#AutoConfigurationPackage" class="headerlink" title="@AutoConfigurationPackage"></a>@AutoConfigurationPackage</h4><p>    <code>@EnableAutoConfiguration</code> 注解还被 <code>@AutoConfigurationPackage</code> 修饰</p><p>而点进去发现了 <code>@Import(AutoConfigurationPackages.Registrar.class)</code></p><p>其中 <code>AutoConfigurationPackages.Registrar</code> 实现了 <code>ImportBeanDefinitionRegistrar</code>接口</p><p>而这个类的 <code>registerBeanDefinitions</code>方法是在加载配置类的bean定义时在 <code>loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars());</code>中被调用的</p><p>其实 <code>AutoConfigurationPackages.Registrar</code>只是往容器中注册了一个名为 <code>AutoConfigurationPackages.class.getName()</code>的bean，这个bean中有一个Set 型的basePackages属性，感兴趣的同学可以自行去看一下源码</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>    在<code>@SpringBootApplication</code>注解中的<code>@ComponentScan</code>有excludeFilters属性，它定义了两个excludeFilter，一个是<code>TypeExcludeFilter</code>，看了一下这个过滤器的实现类全在test包里面，猜测应该和SpringBootTest相关；还有一个就是<code>AutoConfigurationExcludeFilter</code>，这个过滤器是匹配被<code>@Configuration</code>注解修饰并且是在 <code>META-INF/spring.factories</code> 文件中以 <code>EnableAutoConfiguration</code>的类名为开头的类，也就是在扫描包的时候，由<code>@EnableAutoConfiguration</code>中 <code>AutoConfigurationImportSelector</code>导入的类先不要处理，等到最后由<code>deferredImportSelectorHandler</code>处理</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>    综上所述，我认为以<code>ConfigurationClassPostProcessor</code>和<code>ConfigurationClassParser</code>为核心的配置类处理类</p><p>以及</p><ol><li><p>在创建上下文时注册配置类处理器</p></li><li><p>准备上下文时将SpringBoot入口类注册进IOC容器中</p></li><li><p>以及在refresh上下文时调用配置类处理器进行包扫描并根据不同的情况处理配置类</p></li></ol><p>流程称作SpringBoot的自动配置更为恰当一些。</p><p> <code>@EnableAutoConfiguration</code>注解的作用不是开启自动配置，而是提供了一种在配置文件<code>META-INF/spring.factories</code>中延迟注册bean的方案以及往IOC容器中塞了一个名为 <code>AutoConfigurationPackages.class.getName()</code>的bean，而这个bean在配置类处理类中也没有被使用过（我没有看到，如有错误，恳请指正）</p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><ul><li><p><a href="https://zhuanlan.zhihu.com/p/147025312">Spring全解系列 - @Import注解 - 知乎 (zhihu.com)</a></p></li><li><p><a href="https://www.cnblogs.com/ZhuChangwu/p/11681101.html">深入理解 Spring BeanFactoryPostProcessor的回调 - 赐我白日梦 - 博客园 (cnblogs.com)</a></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4-parsing</title>
    <link href="/2023/06/09/4-parsing/"/>
    <url>/2023/06/09/4-parsing/</url>
    
    <content type="html"><![CDATA[<p>    这个模块提供了通用的字符串解析（替换）接口，并封装了 <code>org.w3c.dom.Node</code> 和  <code>javax.xml.xpath.XPath</code>等</p><h4 id="TokenHandler"><a href="#TokenHandler" class="headerlink" title="TokenHandler"></a>TokenHandler</h4><p>    TokenHandler 是 提供了对匹配到的字符串进行处理的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TokenHandler</span> &#123;<br>  <span class="hljs-comment">// 处理content</span><br>  String <span class="hljs-title function_">handleToken</span><span class="hljs-params">(String content)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="GenericTokenParser"><a href="#GenericTokenParser" class="headerlink" title="GenericTokenParser"></a>GenericTokenParser</h4><p>    通用记号解析器，用于处理#{}和${}参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericTokenParser</span> &#123;<br>  <span class="hljs-comment">// 开始标记和结束标记</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String openToken;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String closeToken; <br><br>  <span class="hljs-comment">// 记号处理器</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> TokenHandler handler; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">GenericTokenParser</span><span class="hljs-params">(String openToken, String closeToken, TokenHandler handler)</span> &#123;<br>    <span class="hljs-built_in">this</span>.openToken = openToken;<br>    <span class="hljs-built_in">this</span>.closeToken = closeToken;<br>    <span class="hljs-built_in">this</span>.handler = handler;<br>  &#125; <br><br>  <span class="hljs-comment">// 这里是自己实现了一个简单的正则匹配</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">parse</span><span class="hljs-params">(String text)</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-keyword">if</span> (text != <span class="hljs-literal">null</span> &amp;&amp; text.length() &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-type">char</span>[] src = text.toCharArray();<br>      <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> text.indexOf(openToken, offset);<br>      <span class="hljs-comment">// #&#123;favouriteSection,jdbcType=VARCHAR&#125;</span><br>      <span class="hljs-comment">// 这里是循环解析参数，参考GenericTokenParserTest,</span><br>      <span class="hljs-comment">// 比如可以解析$&#123;first_name&#125; $&#123;initial&#125; $&#123;last_name&#125; reporting.</span><br>      <span class="hljs-comment">// 这样的字符串,里面有3个 $&#123;&#125;</span><br>      <span class="hljs-keyword">while</span> (start &gt; -<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-comment">// 判断一下 $&#123;(openToken) 前面是否是反斜杠，这个逻辑在老版的mybatis中（如3.1.0）</span><br>        <span class="hljs-comment">// 是没有的</span><br>        <span class="hljs-comment">// 这里相当于转义，openToken当成一般字符处理</span><br>        <span class="hljs-keyword">if</span> (start &gt; <span class="hljs-number">0</span> &amp;&amp; src[start - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;\\&#x27;</span>) &#123;<br>          <span class="hljs-comment">// the variable is escaped. remove the backslash.</span><br>        <span class="hljs-comment">// 新版已经没有调用substring了，改为调用如下的offset方式，提高了效率</span><br>          <span class="hljs-comment">// issue #760</span><br>          builder.append(src, offset, start - offset - <span class="hljs-number">1</span>).append(openToken);<br>          offset = start + openToken.length();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> text.indexOf(closeToken, start);<br>          <span class="hljs-comment">// openToken没有对应的closeToken，也当成普通字符处理</span><br>          <span class="hljs-keyword">if</span> (end == -<span class="hljs-number">1</span>) &#123;<br>            builder.append(src, offset, src.length - offset);<br>            offset = src.length;<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>            builder.append(src, offset, start - offset);<br>            offset = start + openToken.length();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(src, offset, end - offset);<br>            <span class="hljs-comment">// 得到一对大括号里的字符串后，调用handler.handleToken,比如替换变量这种功能</span><br>            builder.append(handler.handleToken(content));<br>            offset = end + closeToken.length();<br>          &#125;<br>        &#125;<br>        <span class="hljs-comment">// 获取下一个openToken的下标</span><br>        start = text.indexOf(openToken, offset);<br>      &#125;<br>      <span class="hljs-comment">// 处理剩下的字符</span><br>      <span class="hljs-keyword">if</span> (offset &lt; src.length) &#123;<br>        builder.append(src, offset, src.length - offset);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> builder.toString();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="PropertyParser"><a href="#PropertyParser" class="headerlink" title="PropertyParser"></a>PropertyParser</h4><p>     实现了一个根据Properties中的key和value替换 ${}$ ${}$包裹的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PropertyParser</span> &#123; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">PropertyParser</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// Prevent Instantiation</span><br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">parse</span><span class="hljs-params">(String string, Properties variables)</span> &#123;<br>    <span class="hljs-type">VariableTokenHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableTokenHandler</span>(variables);<br>    <span class="hljs-type">GenericTokenParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericTokenParser</span>(<span class="hljs-string">&quot;$&#123;&quot;</span>, <span class="hljs-string">&quot;&#125;&quot;</span>, handler);<br>    <span class="hljs-keyword">return</span> parser.parse(string);<br>  &#125; <br><br>  <span class="hljs-comment">// 用相应的value替换key</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableTokenHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TokenHandler</span> &#123;<br>    <span class="hljs-keyword">private</span> Properties variables;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">VariableTokenHandler</span><span class="hljs-params">(Properties variables)</span> &#123;<br>      <span class="hljs-built_in">this</span>.variables = variables;<br>    &#125; <br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">handleToken</span><span class="hljs-params">(String content)</span> &#123;<br>      <span class="hljs-keyword">if</span> (variables != <span class="hljs-literal">null</span> &amp;&amp; variables.containsKey(content)) &#123;<br>        <span class="hljs-keyword">return</span> variables.getProperty(content);<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;$&#123;&quot;</span> + content + <span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="XPathParser"><a href="#XPathParser" class="headerlink" title="XPathParser"></a>XPathParser</h4><p>      XPath解析器，用的都是JDK的类包,封装了一下，使得使用起来更方便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XPathParser</span> &#123; <br>  <span class="hljs-keyword">private</span> Document document;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> validation;<br>  <span class="hljs-keyword">private</span> EntityResolver entityResolver;<br>  <span class="hljs-keyword">private</span> Properties variables;<br>  <span class="hljs-keyword">private</span> XPath xpath; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commonConstructor</span><span class="hljs-params">(<span class="hljs-type">boolean</span> validation, Properties variables, EntityResolver entityResolver)</span> &#123;<br>    <span class="hljs-built_in">this</span>.validation = validation;<br>    <span class="hljs-built_in">this</span>.entityResolver = entityResolver;<br>    <span class="hljs-built_in">this</span>.variables = variables;<br><span class="hljs-comment">// 共通构造函数，除了把参数都设置到实例变量里面去以外，还初始化了XPath</span><br>    <span class="hljs-type">XPathFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> XPathFactory.newInstance();<br>    <span class="hljs-built_in">this</span>.xpath = factory.newXPath();<br>  &#125; <br><br>  <span class="hljs-comment">// 一些构造函数,全部调用commonConstructor以及createDocument</span><br>  <span class="hljs-comment">// 1~4,默认不需要验证</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(String xml)</span> &#123;<br>    commonConstructor(<span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">this</span>.document = createDocument(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(xml)));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(Reader reader)</span> &#123;<br>    commonConstructor(<span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">this</span>.document = createDocument(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(reader));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(InputStream inputStream)</span> &#123;<br>    commonConstructor(<span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">this</span>.document = createDocument(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(inputStream));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(Document document)</span> &#123;<br>    commonConstructor(<span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">this</span>.document = document;<br>  &#125; <br><br>  <span class="hljs-comment">// 5~8,传入是否需要验证参数</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(String xml, <span class="hljs-type">boolean</span> validation)</span> &#123;<br>    commonConstructor(validation, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">this</span>.document = createDocument(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(xml)));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(Reader reader, <span class="hljs-type">boolean</span> validation)</span> &#123;<br>    commonConstructor(validation, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">this</span>.document = createDocument(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(reader));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(InputStream inputStream, <span class="hljs-type">boolean</span> validation)</span> &#123;<br>    commonConstructor(validation, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">this</span>.document = createDocument(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(inputStream));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(Document document, <span class="hljs-type">boolean</span> validation)</span> &#123;<br>    commonConstructor(validation, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">this</span>.document = document;<br>  &#125; <br><br>  <span class="hljs-comment">// 9~12,传入是否需要验证参数,Properties</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(String xml, <span class="hljs-type">boolean</span> validation, Properties variables)</span> &#123;<br>    commonConstructor(validation, variables, <span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">this</span>.document = createDocument(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(xml)));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(Reader reader, <span class="hljs-type">boolean</span> validation, Properties variables)</span> &#123;<br>    commonConstructor(validation, variables, <span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">this</span>.document = createDocument(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(reader));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(InputStream inputStream, <span class="hljs-type">boolean</span> validation, Properties variables)</span> &#123;<br>    commonConstructor(validation, variables, <span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">this</span>.document = createDocument(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(inputStream));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(Document document, <span class="hljs-type">boolean</span> validation, Properties variables)</span> &#123;<br>    commonConstructor(validation, variables, <span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">this</span>.document = document;<br>  &#125; <br><br>  <span class="hljs-comment">// 13~16,传入是否需要验证参数,Properties,EntityResolver</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(String xml, <span class="hljs-type">boolean</span> validation, Properties variables, EntityResolver entityResolver)</span> &#123;<br>    commonConstructor(validation, variables, entityResolver);<br>    <span class="hljs-built_in">this</span>.document = createDocument(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(xml)));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(Reader reader, <span class="hljs-type">boolean</span> validation, Properties variables, EntityResolver entityResolver)</span> &#123;<br>    commonConstructor(validation, variables, entityResolver);<br>    <span class="hljs-built_in">this</span>.document = createDocument(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(reader));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(InputStream inputStream, <span class="hljs-type">boolean</span> validation, Properties variables, EntityResolver entityResolver)</span> &#123;<br>    commonConstructor(validation, variables, entityResolver);<br>    <span class="hljs-built_in">this</span>.document = createDocument(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(inputStream));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XPathParser</span><span class="hljs-params">(Document document, <span class="hljs-type">boolean</span> validation, Properties variables, EntityResolver entityResolver)</span> &#123;<br>    commonConstructor(validation, variables, entityResolver);<br>    <span class="hljs-built_in">this</span>.document = document;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setVariables</span><span class="hljs-params">(Properties variables)</span> &#123;<br>    <span class="hljs-built_in">this</span>.variables = variables;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">evalString</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> evalString(document, expression);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">evalString</span><span class="hljs-params">(Object root, String expression)</span> &#123;<br><span class="hljs-comment">// 1.先用xpath解析</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (String) evaluate(expression, root, XPathConstants.STRING);<br><span class="hljs-comment">// 2.再调用PropertyParser去解析,也就是替换 $&#123;&#125; 这种格式的字符串</span><br>    result = PropertyParser.parse(result, variables);<br>    <span class="hljs-keyword">return</span> result;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">evalBoolean</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> evalBoolean(document, expression);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">evalBoolean</span><span class="hljs-params">(Object root, String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> (Boolean) evaluate(expression, root, XPathConstants.BOOLEAN);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Short <span class="hljs-title function_">evalShort</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> evalShort(document, expression);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Short <span class="hljs-title function_">evalShort</span><span class="hljs-params">(Object root, String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> Short.valueOf(evalString(root, expression));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">evalInteger</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> evalInteger(document, expression);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">evalInteger</span><span class="hljs-params">(Object root, String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> Integer.valueOf(evalString(root, expression));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">evalLong</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> evalLong(document, expression);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">evalLong</span><span class="hljs-params">(Object root, String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> Long.valueOf(evalString(root, expression));<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Float <span class="hljs-title function_">evalFloat</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> evalFloat(document, expression);<br>  &#125;<br><br>  <span class="hljs-comment">// ??这里有点疑问，为何Float用evalString,Double用evaluate XPathConstants.NUMBER</span><br>  <span class="hljs-keyword">public</span> Float <span class="hljs-title function_">evalFloat</span><span class="hljs-params">(Object root, String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> Float.valueOf(evalString(root, expression));<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">evalDouble</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> evalDouble(document, expression);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">evalDouble</span><span class="hljs-params">(Object root, String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> (Double) evaluate(expression, root, XPathConstants.NUMBER);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> List&lt;XNode&gt; <span class="hljs-title function_">evalNodes</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> evalNodes(document, expression);<br>  &#125; <br><br>  <span class="hljs-comment">// 返回节点List</span><br>  <span class="hljs-keyword">public</span> List&lt;XNode&gt; <span class="hljs-title function_">evalNodes</span><span class="hljs-params">(Object root, String expression)</span> &#123;<br>    List&lt;XNode&gt; xnodes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;XNode&gt;();<br>    <span class="hljs-type">NodeList</span> <span class="hljs-variable">nodes</span> <span class="hljs-operator">=</span> (NodeList) evaluate(expression, root, XPathConstants.NODESET);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nodes.getLength(); i++) &#123;<br>      xnodes.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">XNode</span>(<span class="hljs-built_in">this</span>, nodes.item(i), variables));<br>    &#125;<br>    <span class="hljs-keyword">return</span> xnodes;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> XNode <span class="hljs-title function_">evalNode</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> evalNode(document, expression);<br>  &#125; <br><br>  <span class="hljs-comment">// 返回节点</span><br>  <span class="hljs-keyword">public</span> XNode <span class="hljs-title function_">evalNode</span><span class="hljs-params">(Object root, String expression)</span> &#123;<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> (Node) evaluate(expression, root, XPathConstants.NODE);<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XNode</span>(<span class="hljs-built_in">this</span>, node, variables);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">evaluate</span><span class="hljs-params">(String expression, Object root, QName returnType)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 最终合流到这儿，直接调用XPath.evaluate</span><br>      <span class="hljs-keyword">return</span> xpath.evaluate(expression, root, returnType);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Error evaluating XPath.  Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Document <span class="hljs-title function_">createDocument</span><span class="hljs-params">(InputSource inputSource)</span> &#123;<br>    <span class="hljs-comment">// important: this must only be called AFTER common constructor</span><br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 这个是DOM解析方式</span><br>      <span class="hljs-type">DocumentBuilderFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> DocumentBuilderFactory.newInstance();<br>      factory.setValidating(validation);<br><br>      <span class="hljs-comment">// 名称空间</span><br>      factory.setNamespaceAware(<span class="hljs-literal">false</span>);<br>      <span class="hljs-comment">// 忽略注释</span><br>      factory.setIgnoringComments(<span class="hljs-literal">true</span>);<br>      <span class="hljs-comment">// 忽略空白</span><br>      factory.setIgnoringElementContentWhitespace(<span class="hljs-literal">false</span>);<br>      <span class="hljs-comment">// 把 CDATA 节点转换为 Text 节点</span><br>      factory.setCoalescing(<span class="hljs-literal">false</span>);<br>      <span class="hljs-comment">// 扩展实体引用</span><br>      factory.setExpandEntityReferences(<span class="hljs-literal">true</span>);<br><br>      <span class="hljs-type">DocumentBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> factory.newDocumentBuilder();<br>      <span class="hljs-comment">// 需要注意的就是定义了EntityResolver(XMLMapperEntityResolver)，这样不用联网去获取DTD，</span><br>      <span class="hljs-comment">// 将DTD放在org\apache\ibatis\builder\xml\mybatis-3-config.dtd,来达到验证xml合法性的目的</span><br>      builder.setEntityResolver(entityResolver);<br>      builder.setErrorHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorHandler</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">(SAXParseException exception)</span> <span class="hljs-keyword">throws</span> SAXException &#123;<br>          <span class="hljs-keyword">throw</span> exception;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fatalError</span><span class="hljs-params">(SAXParseException exception)</span> <span class="hljs-keyword">throws</span> SAXException &#123;<br>          <span class="hljs-keyword">throw</span> exception;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">warning</span><span class="hljs-params">(SAXParseException exception)</span> <span class="hljs-keyword">throws</span> SAXException &#123;<br>        &#125;<br>      &#125;);<br>      <span class="hljs-keyword">return</span> builder.parse(inputSource);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BuilderException</span>(<span class="hljs-string">&quot;Error creating document instance.  Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="XNode"><a href="#XNode" class="headerlink" title="XNode"></a>XNode</h4><p>    对<code>org.w3c.dom.Node</code>的包装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XNode</span> &#123; <br>  <span class="hljs-comment">// org.w3c.dom.Node</span><br>  <span class="hljs-keyword">private</span> Node node; <br><br>  <span class="hljs-comment">// 以下都是预先把信息都解析好，放到map等数据结构中（内存中）</span><br>  <span class="hljs-keyword">private</span> String name;<br>  <span class="hljs-keyword">private</span> String body;<br>  <span class="hljs-keyword">private</span> Properties attributes;<br>  <span class="hljs-keyword">private</span> Properties variables;<br>  <span class="hljs-comment">// XPathParser方便xpath解析</span><br>  <span class="hljs-keyword">private</span> XPathParser xpathParser; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">XNode</span><span class="hljs-params">(XPathParser xpathParser, Node node, Properties variables)</span> &#123;<br>    <span class="hljs-built_in">this</span>.xpathParser = xpathParser;<br>    <span class="hljs-built_in">this</span>.node = node;<br>    <span class="hljs-built_in">this</span>.name = node.getNodeName();<br>    <span class="hljs-built_in">this</span>.variables = variables;<br>    <span class="hljs-built_in">this</span>.attributes = parseAttributes(node);<br>    <span class="hljs-built_in">this</span>.body = parseBody(node);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> XNode <span class="hljs-title function_">newXNode</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XNode</span>(xpathParser, node, variables);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> XNode <span class="hljs-title function_">getParent</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 调用Node.getParentNode,如果取到，包装一下，返回XNode</span><br>    <span class="hljs-type">Node</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> node.getParentNode();<br>    <span class="hljs-keyword">if</span> (parent == <span class="hljs-literal">null</span> || !(parent <span class="hljs-keyword">instanceof</span> Element)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">XNode</span>(xpathParser, parent, variables);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 取得完全的path (a/b/c)</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPath</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 循环依次取得节点的父节点，然后倒序打印,也可以用一个堆栈实现</span><br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-type">Node</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> node;<br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">null</span> &amp;&amp; current <span class="hljs-keyword">instanceof</span> Element) &#123;<br>      <span class="hljs-keyword">if</span> (current != node) &#123;<br>        builder.insert(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;/&quot;</span>);<br>      &#125;<br>      builder.insert(<span class="hljs-number">0</span>, current.getNodeName());<br>      current = current.getParentNode();<br>    &#125;<br>    <span class="hljs-keyword">return</span> builder.toString();<br>  &#125; <br><br>  <span class="hljs-comment">// 取得标示符   (&quot;resultMap[authorResult]&quot;)</span><br>  <span class="hljs-comment">// XMLMapperBuilder.resultMapElement调用</span><br>  <span class="hljs-comment">//&lt;resultMap id=&quot;authorResult&quot; type=&quot;Author&quot;&gt;</span><br>  <span class="hljs-comment">//  &lt;id property=&quot;id&quot; column=&quot;author_id&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;result property=&quot;username&quot; column=&quot;author_username&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;result property=&quot;password&quot; column=&quot;author_password&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;result property=&quot;email&quot; column=&quot;author_email&quot;/&gt;</span><br>  <span class="hljs-comment">//  &lt;result property=&quot;bio&quot; column=&quot;author_bio&quot;/&gt;</span><br>  <span class="hljs-comment">//&lt;/resultMap&gt;</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getValueBasedIdentifier</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-type">XNode</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>;<br>    <span class="hljs-keyword">while</span> (current != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">if</span> (current != <span class="hljs-built_in">this</span>) &#123;<br>        builder.insert(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;_&quot;</span>);<br>      &#125;<br>      <span class="hljs-comment">// 先拿id，拿不到再拿value,再拿不到拿property</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> current.getStringAttribute(<span class="hljs-string">&quot;id&quot;</span>,<br>          current.getStringAttribute(<span class="hljs-string">&quot;value&quot;</span>,<br>              current.getStringAttribute(<span class="hljs-string">&quot;property&quot;</span>, <span class="hljs-literal">null</span>)));<br>      <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>) &#123;<br>        value = value.replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>);<br>        builder.insert(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;]&quot;</span>);<br>        builder.insert(<span class="hljs-number">0</span>,<br>            value);<br>        builder.insert(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;[&quot;</span>);<br>      &#125;<br>      builder.insert(<span class="hljs-number">0</span>, current.getName());<br>      current = current.getParent();<br>    &#125;<br>    <span class="hljs-keyword">return</span> builder.toString();<br>  &#125; <br><br>  <span class="hljs-comment">// 以下方法都是委托给XPathParser实现</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">evalString</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> xpathParser.evalString(node, expression);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">evalBoolean</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> xpathParser.evalBoolean(node, expression);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">evalDouble</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> xpathParser.evalDouble(node, expression);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> List&lt;XNode&gt; <span class="hljs-title function_">evalNodes</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> xpathParser.evalNodes(node, expression);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> XNode <span class="hljs-title function_">evalNode</span><span class="hljs-params">(String expression)</span> &#123;<br>    <span class="hljs-keyword">return</span> xpathParser.evalNode(node, expression);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">getNode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> node;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> name;<br>  &#125; <br><br>  <span class="hljs-comment">// 以下是一些getBody的方法</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStringBody</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> getStringBody(<span class="hljs-literal">null</span>);<br>  &#125; <br><br>  <span class="hljs-comment">// body为空返回def，下面类似</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStringBody</span><span class="hljs-params">(String def)</span> &#123;<br>    <span class="hljs-keyword">if</span> (body == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> body;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">getBooleanBody</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> getBooleanBody(<span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">getBooleanBody</span><span class="hljs-params">(Boolean def)</span> &#123;<br>    <span class="hljs-keyword">if</span> (body == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> Boolean.valueOf(body);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getIntBody</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> getIntBody(<span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getIntBody</span><span class="hljs-params">(Integer def)</span> &#123;<br>    <span class="hljs-keyword">if</span> (body == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> Integer.parseInt(body);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getLongBody</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> getLongBody(<span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getLongBody</span><span class="hljs-params">(Long def)</span> &#123;<br>    <span class="hljs-keyword">if</span> (body == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> Long.parseLong(body);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">getDoubleBody</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> getDoubleBody(<span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">getDoubleBody</span><span class="hljs-params">(Double def)</span> &#123;<br>    <span class="hljs-keyword">if</span> (body == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> Double.parseDouble(body);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Float <span class="hljs-title function_">getFloatBody</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> getFloatBody(<span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Float <span class="hljs-title function_">getFloatBody</span><span class="hljs-params">(Float def)</span> &#123;<br>    <span class="hljs-keyword">if</span> (body == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> Float.parseFloat(body);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 以下是一些getAttribute的方法</span><br>  <span class="hljs-keyword">public</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Enum</span>&lt;T&gt;&gt; T <span class="hljs-title function_">getEnumAttribute</span><span class="hljs-params">(Class&lt;T&gt; enumType, String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> getEnumAttribute(enumType, name, <span class="hljs-literal">null</span>);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Enum</span>&lt;T&gt;&gt; T <span class="hljs-title function_">getEnumAttribute</span><span class="hljs-params">(Class&lt;T&gt; enumType, String name, T def)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> getStringAttribute(name);<br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> Enum.valueOf(enumType, value);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStringAttribute</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> getStringAttribute(name, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStringAttribute</span><span class="hljs-params">(String name, String def)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> attributes.getProperty(name);<br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> value;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">getBooleanAttribute</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> getBooleanAttribute(name, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">getBooleanAttribute</span><span class="hljs-params">(String name, Boolean def)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> attributes.getProperty(name);<br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> Boolean.valueOf(value);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getIntAttribute</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> getIntAttribute(name, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getIntAttribute</span><span class="hljs-params">(String name, Integer def)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> attributes.getProperty(name);<br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> Integer.parseInt(value);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getLongAttribute</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> getLongAttribute(name, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getLongAttribute</span><span class="hljs-params">(String name, Long def)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> attributes.getProperty(name);<br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> Long.parseLong(value);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">getDoubleAttribute</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> getDoubleAttribute(name, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Double <span class="hljs-title function_">getDoubleAttribute</span><span class="hljs-params">(String name, Double def)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> attributes.getProperty(name);<br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> Double.parseDouble(value);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> Float <span class="hljs-title function_">getFloatAttribute</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-keyword">return</span> getFloatAttribute(name, <span class="hljs-literal">null</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> Float <span class="hljs-title function_">getFloatAttribute</span><span class="hljs-params">(String name, Float def)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> attributes.getProperty(name);<br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> def;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> Float.parseFloat(value);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 得到孩子，原理是调用Node.getChildNodes</span><br>  <span class="hljs-keyword">public</span> List&lt;XNode&gt; <span class="hljs-title function_">getChildren</span><span class="hljs-params">()</span> &#123;<br>    List&lt;XNode&gt; children = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;XNode&gt;();<br>    <span class="hljs-type">NodeList</span> <span class="hljs-variable">nodeList</span> <span class="hljs-operator">=</span> node.getChildNodes();<br>    <span class="hljs-keyword">if</span> (nodeList != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, n = nodeList.getLength(); i &lt; n; i++) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> nodeList.item(i);<br>        <span class="hljs-keyword">if</span> (node.getNodeType() == Node.ELEMENT_NODE) &#123;<br>          children.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">XNode</span>(xpathParser, node, variables));<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> children;<br>  &#125; <br><br>  <span class="hljs-comment">// 得到孩子，返回Properties，从子节点中提取name和value作为属性</span><br>  <span class="hljs-keyword">public</span> Properties <span class="hljs-title function_">getChildrenAsProperties</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    <span class="hljs-keyword">for</span> (XNode child : getChildren()) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> child.getStringAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br>      <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> child.getStringAttribute(<span class="hljs-string">&quot;value&quot;</span>);<br>      <span class="hljs-keyword">if</span> (name != <span class="hljs-literal">null</span> &amp;&amp; value != <span class="hljs-literal">null</span>) &#123;<br>        properties.setProperty(name, value);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> properties;<br>  &#125; <br><br>  <span class="hljs-comment">// 打印信息，为了调试用</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    builder.append(<span class="hljs-string">&quot;&lt;&quot;</span>);<br>    builder.append(name);<br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;Object, Object&gt; entry : attributes.entrySet()) &#123;<br>      builder.append(<span class="hljs-string">&quot; &quot;</span>);<br>      builder.append(entry.getKey());<br>      builder.append(<span class="hljs-string">&quot;=\&quot;&quot;</span>);<br>      builder.append(entry.getValue());<br>      builder.append(<span class="hljs-string">&quot;\&quot;&quot;</span>);<br>    &#125;<br>    List&lt;XNode&gt; children = getChildren();<br>    <span class="hljs-keyword">if</span> (!children.isEmpty()) &#123;<br>      builder.append(<span class="hljs-string">&quot;&gt;\n&quot;</span>);<br>      <span class="hljs-keyword">for</span> (XNode node : children) &#123;<br>        <span class="hljs-comment">//递归取得孩子的toString</span><br>        builder.append(node.toString());<br>      &#125;<br>      builder.append(<span class="hljs-string">&quot;&lt;/&quot;</span>);<br>      builder.append(name);<br>      builder.append(<span class="hljs-string">&quot;&gt;&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (body != <span class="hljs-literal">null</span>) &#123;<br>      builder.append(<span class="hljs-string">&quot;&gt;&quot;</span>);<br>      builder.append(body);<br>      builder.append(<span class="hljs-string">&quot;&lt;/&quot;</span>);<br>      builder.append(name);<br>      builder.append(<span class="hljs-string">&quot;&gt;&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      builder.append(<span class="hljs-string">&quot;/&gt;&quot;</span>);<br>    &#125;<br>    builder.append(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> builder.toString();<br>  &#125; <br><br>  <span class="hljs-comment">// 以下2个方法在构造时就解析</span><br>  <span class="hljs-keyword">private</span> Properties <span class="hljs-title function_">parseAttributes</span><span class="hljs-params">(Node n)</span> &#123;<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">attributes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    <span class="hljs-type">NamedNodeMap</span> <span class="hljs-variable">attributeNodes</span> <span class="hljs-operator">=</span> n.getAttributes();<br>    <span class="hljs-keyword">if</span> (attributeNodes != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; attributeNodes.getLength(); i++) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">attribute</span> <span class="hljs-operator">=</span> attributeNodes.item(i);<br>        <span class="hljs-comment">// 解析属性节点value中的 $&#123;content&#125; 内容</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> PropertyParser.parse(attribute.getNodeValue(), variables);<br>        attributes.put(attribute.getNodeName(), value);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> attributes;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> String <span class="hljs-title function_">parseBody</span><span class="hljs-params">(Node node)</span> &#123;<br>    <span class="hljs-comment">// 取不到body，循环取孩子的body，只要取到第一个，立即返回</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> getBodyData(node);<br>    <span class="hljs-keyword">if</span> (data == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-type">NodeList</span> <span class="hljs-variable">children</span> <span class="hljs-operator">=</span> node.getChildNodes();<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; children.getLength(); i++) &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">child</span> <span class="hljs-operator">=</span> children.item(i);<br>        data = getBodyData(child);<br>        <span class="hljs-keyword">if</span> (data != <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> data;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> String <span class="hljs-title function_">getBodyData</span><span class="hljs-params">(Node child)</span> &#123;<br>    <span class="hljs-keyword">if</span> (child.getNodeType() == Node.CDATA_SECTION_NODE<br>        || child.getNodeType() == Node.TEXT_NODE) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> ((CharacterData) child).getData();<br>      data = PropertyParser.parse(data, variables);<br>      <span class="hljs-keyword">return</span> data;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ReentrantReadWriteLock源码解析</title>
    <link href="/2023/06/03/ReentrantReadWriteLock%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/06/03/ReentrantReadWriteLock%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h4 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h4><p>    这篇博客我们来阅读 ReentrantReadWriteLock 的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReentrantReadWriteLock</span><br>        <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ReadWriteLock</span>, java.io.Serializable &#123; <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">6992448646407690164L</span>;<br>   <br>     <span class="hljs-comment">/** Inner class providing readlock */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReentrantReadWriteLock.ReadLock readerLock;<br>    <span class="hljs-comment">/** Inner class providing writelock */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReentrantReadWriteLock.WriteLock writerLock;<br><br>    <span class="hljs-comment">/** Performs all synchronization mechanics */</span><br>    <span class="hljs-keyword">final</span> Sync sync; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a new code ReentrantReadWriteLock with</span><br><span class="hljs-comment">     * default (nonfair) ordering properties.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantReadWriteLock</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 默认是非公平的</span><br>        <span class="hljs-built_in">this</span>(<span class="hljs-literal">false</span>);<br>    &#125; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates a new ReentrantReadWriteLock with</span><br><span class="hljs-comment">     * the given fairness policy.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fair &#123;<span class="hljs-doctag">@code</span> true&#125; if this lock should use a fair ordering policy</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantReadWriteLock</span><span class="hljs-params">(<span class="hljs-type">boolean</span> fair)</span> &#123;<br>        sync = fair ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">FairSync</span>() : <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>();<br>        readerLock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReadLock</span>(<span class="hljs-built_in">this</span>);<br>        writerLock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WriteLock</span>(<span class="hljs-built_in">this</span>);<br>    &#125; <br><br>    <span class="hljs-comment">// 实现 ReadWriteLock 接口的方法 ，提供接口获取读锁的写锁</span><br>    <span class="hljs-keyword">public</span> ReentrantReadWriteLock.WriteLock <span class="hljs-title function_">writeLock</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> writerLock; &#125;<br>    <span class="hljs-keyword">public</span> ReentrantReadWriteLock.ReadLock  <span class="hljs-title function_">readLock</span><span class="hljs-params">()</span>  &#123; <span class="hljs-keyword">return</span> readerLock; &#125;<br><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123; <br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">6317671515068378041L</span>;<br>                <br>        <span class="hljs-comment">// 对读取和写入计数进行抽取的常量和函数</span><br>        <span class="hljs-comment">// 锁定state在逻辑上分为两个无符号short:</span><br>        <span class="hljs-comment">// state低16位表示独占（写）锁持有计数</span><br>        <span class="hljs-comment">// state高16位标识共享（读）锁持有计数</span><br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SHARED_SHIFT</span>   <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SHARED_UNIT</span>    <span class="hljs-operator">=</span> (<span class="hljs-number">1</span> &lt;&lt; SHARED_SHIFT);<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_COUNT</span>      <span class="hljs-operator">=</span> (<span class="hljs-number">1</span> &lt;&lt; SHARED_SHIFT) - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">EXCLUSIVE_MASK</span> <span class="hljs-operator">=</span> (<span class="hljs-number">1</span> &lt;&lt; SHARED_SHIFT) - <span class="hljs-number">1</span>; <br><br>        <span class="hljs-comment">/** Returns the number of shared holds represented in count. */</span><br>        <span class="hljs-comment">// c右移16位，获取高16位</span><br>        <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sharedCount</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span>    &#123; <span class="hljs-keyword">return</span> c &gt;&gt;&gt; SHARED_SHIFT; &#125;<br><br>        <span class="hljs-comment">/** Returns the number of exclusive holds represented in count. */</span><br>        <span class="hljs-comment">// 获取c的低16位</span><br>        <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">exclusiveCount</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span> &#123; <span class="hljs-keyword">return</span> c &amp; EXCLUSIVE_MASK; &#125; <br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * A counter for per-thread read hold counts.</span><br><span class="hljs-comment">         * Maintained as a ThreadLocal; cached in cachedHoldCounter.</span><br><span class="hljs-comment">         * 每个线程共享锁计数</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HoldCounter</span> &#123;<br>            <span class="hljs-type">int</span> count;          <span class="hljs-comment">// initially 0</span><br>            <span class="hljs-comment">// Use id, not reference, to avoid garbage retention </span><br>            <span class="hljs-comment">// 不持有线程引用，便于垃圾回收</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">tid</span> <span class="hljs-operator">=</span> LockSupport.getThreadId(Thread.currentThread());<br>        &#125; <br><br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadLocalHoldCounter</span><br>            <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ThreadLocal</span>&lt;HoldCounter&gt; &#123;<br>            <span class="hljs-keyword">public</span> HoldCounter <span class="hljs-title function_">initialValue</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HoldCounter</span>();<br>            &#125;<br>        &#125; <br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * The number of reentrant read locks held by current thread.</span><br><span class="hljs-comment">         * Initialized only in constructor and readObject.</span><br><span class="hljs-comment">         * Removed whenever a thread&#x27;s read hold count drops to 0. </span><br><span class="hljs-comment">         * 当前线程持有的可重入读锁的数量。</span><br><span class="hljs-comment">         * 仅在构造函数和readObject中初始化。每当线程的读保持计数下降到0时移除。</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> ThreadLocalHoldCounter readHolds; <br><br>        <span class="hljs-comment">// 成功获取readLock的最后一个线程的保持计数。</span><br>        <span class="hljs-comment">// 在下一个要释放的线程是最后一个获取的线程的常见情况下，</span><br>        <span class="hljs-comment">// 可以节省ThreadLocal查找</span><br>        <span class="hljs-comment">// 这是非volatile的，因为它只是用作一种启发式步骤，对于要缓存的线程很好</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> HoldCounter cachedHoldCounter;<br><br>        <span class="hljs-comment">// firstReader是第一个获得读锁的线程</span><br>        <span class="hljs-comment">// 更准确地说，firstReader是上一次将共享计数从0更改为1的惟一线程，</span><br>        <span class="hljs-comment">// 并且从那时起就没有释放过读锁；如果没有这样的线程，则为null。</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> Thread firstReader;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> firstReaderHoldCount;<br><br>        Sync() &#123;<br>            readHolds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocalHoldCounter</span>(); <br>            <span class="hljs-comment">// state 是 volatile 变量，保证readHolds的可见性</span><br>            setState(getState()); <span class="hljs-comment">// ensures visibility of readHolds</span><br>        &#125; <br><br>        <span class="hljs-comment">// 获取和释放对公平锁和非公平锁使用相同的代码，</span><br>        <span class="hljs-comment">// 但是在队列非空时，它们 是否/如何 允许入队方面有所不同。</span><br><br><br>        <span class="hljs-comment">// 如果当前线程在尝试获取读锁或者在其他有资格获取读锁的情况下</span><br>        <span class="hljs-comment">// 由于超越其他等待线程而应该被阻塞，则返回true</span><br>        <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">readerShouldBlock</span><span class="hljs-params">()</span>;<br><br>        <span class="hljs-comment">// 和上面方法相似</span><br>        <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">writerShouldBlock</span><span class="hljs-params">()</span>; <br><br>        <span class="hljs-comment">// 注意tryRelease和tryAcquire可以被条件调用。</span><br>        <span class="hljs-comment">// 因此，它们的参数可能包含读取和写入持有量，</span><br>        <span class="hljs-comment">// 这些持有量都是在条件等待期间释放的，并在tryAcquire中重新建立。</span><br>        <span class="hljs-meta">@ReservedStackAccess</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;<br>            <span class="hljs-keyword">if</span> (!isHeldExclusively())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> getState() - releases;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">free</span> <span class="hljs-operator">=</span> exclusiveCount(nextc) == <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (free)<br>                setExclusiveOwnerThread(<span class="hljs-literal">null</span>);<br>            setState(nextc);<br>            <span class="hljs-keyword">return</span> free;<br>        &#125; <br><br>        <span class="hljs-meta">@ReservedStackAccess</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123; <br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> exclusiveCount(c);<br>            <span class="hljs-keyword">if</span> (c != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// (Note: if c != 0 and w == 0 then shared count != 0) </span><br>                <span class="hljs-comment">// 读持有非0（正在读的时候其他线程不能获取锁来写？） </span><br>                <span class="hljs-comment">// 或者 锁被其他线程持有</span><br>                <span class="hljs-keyword">if</span> (w == <span class="hljs-number">0</span> || current != getExclusiveOwnerThread())<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-comment">// 当前线程持有锁，但是锁重入超过上限</span><br>                <span class="hljs-keyword">if</span> (w + exclusiveCount(acquires) &gt; MAX_COUNT)<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>                <span class="hljs-comment">// Reentrant acquire</span><br>                setState(c + acquires);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <br>            <span class="hljs-comment">// 非公平获取写锁应该被阻塞 或者 获取写锁失败</span><br>            <span class="hljs-keyword">if</span> (writerShouldBlock() ||<br>                !compareAndSetState(c, c + acquires))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            setExclusiveOwnerThread(current);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <br><br>        <span class="hljs-meta">@ReservedStackAccess</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> unused)</span> &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread(); <br>            <span class="hljs-comment">// 释放读锁的线程是第一个获取读锁的线程</span><br>            <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>                <span class="hljs-comment">// assert firstReaderHoldCount &gt; 0;</span><br>                <span class="hljs-keyword">if</span> (firstReaderHoldCount == <span class="hljs-number">1</span>)<br>                    firstReader = <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">else</span><br>                    firstReaderHoldCount--;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 其他线程来获取读锁</span><br>                <span class="hljs-type">HoldCounter</span> <span class="hljs-variable">rh</span> <span class="hljs-operator">=</span> cachedHoldCounter;<br>                <span class="hljs-comment">// 判断缓存的 HoldCounter 是否是当前线程的 HoldCounter </span><br>                <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span> ||<br>                    rh.tid != LockSupport.getThreadId(current))<br>                    rh = readHolds.get();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> rh.count;<br>                <span class="hljs-keyword">if</span> (count &lt;= <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-comment">// 线程取消持有读锁</span><br>                    readHolds.remove();<br>                    <span class="hljs-keyword">if</span> (count &lt;= <span class="hljs-number">0</span>)<br>                        <span class="hljs-keyword">throw</span> unmatchedUnlockException();<br>                &#125;<br>                --rh.count;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-comment">// 读锁持有量减1</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c - SHARED_UNIT;<br>                <span class="hljs-keyword">if</span> (compareAndSetState(c, nextc))<br>                    <span class="hljs-comment">// 释放读锁对读取者没有影响，</span><br>                    <span class="hljs-comment">// 但是如果读锁和写锁现在都是可获取的，</span><br>                    <span class="hljs-comment">// 它可能使得等待的写入者竞争写锁。</span><br>                    <span class="hljs-keyword">return</span> nextc == <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125; <br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> IllegalMonitorStateException <span class="hljs-title function_">unmatchedUnlockException</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>(<br>                <span class="hljs-string">&quot;attempt to unlock read lock, not locked by current thread&quot;</span>);<br>        &#125; <br><br>        <span class="hljs-meta">@ReservedStackAccess</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> unused)</span> &#123; <br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState(); <br>            <span class="hljs-comment">// 写锁被其他线程持有，获取读锁失败</span><br>            <span class="hljs-keyword">if</span> (exclusiveCount(c) != <span class="hljs-number">0</span> &amp;&amp;<br>                getExclusiveOwnerThread() != current)<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> sharedCount(c);<br>            <span class="hljs-keyword">if</span> (!readerShouldBlock() &amp;&amp;<br>                r &lt; MAX_COUNT &amp;&amp;<br>                compareAndSetState(c, c + SHARED_UNIT)) &#123; <br>                <span class="hljs-comment">// 读持有计数为0即还没有线程持有读锁</span><br>                <span class="hljs-keyword">if</span> (r == <span class="hljs-number">0</span>) &#123;<br>                    firstReader = current;<br>                    firstReaderHoldCount = <span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>                    firstReaderHoldCount++;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-type">HoldCounter</span> <span class="hljs-variable">rh</span> <span class="hljs-operator">=</span> cachedHoldCounter;<br>                    <span class="hljs-comment">// 如果缓存的 HoldCounter 不是当前线程持有的 HoldCounter </span><br>                    <span class="hljs-comment">// 从 readHolds 取 并设置 缓存的HoldCounter（cachedHoldCounter）</span><br>                    <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span> ||<br>                        rh.tid != LockSupport.getThreadId(current))<br>                        cachedHoldCounter = rh = readHolds.get();<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>) <span class="hljs-comment">// cachedHoldCounter是当前线程持有的HoldCounter</span><br>                        readHolds.set(rh);<br>                    rh.count++;<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> fullTryAcquireShared(current);<br>        &#125; <br><br>        <span class="hljs-comment">// 获取读锁的完整版本，处理CAS未命中和再次读取的情况，</span><br>        <span class="hljs-comment">// 而tryAcquireShared中没有处理。</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fullTryAcquireShared</span><span class="hljs-params">(Thread current)</span> &#123;<br>            <span class="hljs-type">HoldCounter</span> <span class="hljs-variable">rh</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-comment">// 这里的检查是考虑到并发情况下其他线程持有了写锁</span><br>                <span class="hljs-keyword">if</span> (exclusiveCount(c) != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (getExclusiveOwnerThread() != current)<br>                        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                    <span class="hljs-comment">// else we hold the exclusive lock; blocking here</span><br>                    <span class="hljs-comment">// would cause deadlock.</span><br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (readerShouldBlock()) &#123;<br>                    <span class="hljs-comment">// Make sure we&#x27;re not acquiring read lock reentrantly </span><br>                    <span class="hljs-comment">// 确保我们不是在再次获取读锁 </span><br>                    <span class="hljs-comment">// 即让其他线程先获取读锁</span><br>                    <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>                        <span class="hljs-comment">// assert firstReaderHoldCount &gt; 0;</span><br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span>) &#123;<br>                            rh = cachedHoldCounter;<br>                            <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span> ||<br>                                rh.tid != LockSupport.getThreadId(current)) &#123;<br>                                rh = readHolds.get();<br>                                <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)<br>                                    readHolds.remove();<br>                            &#125;<br>                        &#125; <br>                        <span class="hljs-comment">// 如果线程是第一次获取读锁，直接返回</span><br>                        <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)<br>                            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (sharedCount(c) == MAX_COUNT)<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>                <span class="hljs-keyword">if</span> (compareAndSetState(c, c + SHARED_UNIT)) &#123;<br>                    <span class="hljs-keyword">if</span> (sharedCount(c) == <span class="hljs-number">0</span>) &#123;<br>                        firstReader = current;<br>                        firstReaderHoldCount = <span class="hljs-number">1</span>;<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>                        firstReaderHoldCount++;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span>)<br>                            rh = cachedHoldCounter;<br>                        <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span> ||<br>                            rh.tid != LockSupport.getThreadId(current))<br>                            rh = readHolds.get();<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)<br>                            readHolds.set(rh);<br>                        rh.count++;<br>                        cachedHoldCounter = rh; <span class="hljs-comment">// cache for release</span><br>                    &#125;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125; <br><br>        <span class="hljs-comment">// 对写操作执行tryLock，在两种模式下都允许。</span><br>        <span class="hljs-comment">// 这实际上与tryAcquire相同，只是缺少对writerShouldBlock的调用。</span><br>        <span class="hljs-meta">@ReservedStackAccess</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryWriteLock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>            <span class="hljs-keyword">if</span> (c != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> exclusiveCount(c);<br>                <span class="hljs-keyword">if</span> (w == <span class="hljs-number">0</span> || current != getExclusiveOwnerThread())<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">if</span> (w == MAX_COUNT)<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!compareAndSetState(c, c + <span class="hljs-number">1</span>))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            setExclusiveOwnerThread(current);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <br><br>        <span class="hljs-comment">// 和tryWriteLock类似</span><br>        <span class="hljs-meta">@ReservedStackAccess</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReadLock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-keyword">if</span> (exclusiveCount(c) != <span class="hljs-number">0</span> &amp;&amp;<br>                    getExclusiveOwnerThread() != current)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> sharedCount(c);<br>                <span class="hljs-keyword">if</span> (r == MAX_COUNT)<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>                <span class="hljs-keyword">if</span> (compareAndSetState(c, c + SHARED_UNIT)) &#123;<br>                    <span class="hljs-keyword">if</span> (r == <span class="hljs-number">0</span>) &#123;<br>                        firstReader = current;<br>                        firstReaderHoldCount = <span class="hljs-number">1</span>;<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>                        firstReaderHoldCount++;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-type">HoldCounter</span> <span class="hljs-variable">rh</span> <span class="hljs-operator">=</span> cachedHoldCounter;<br>                        <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span> ||<br>                            rh.tid != LockSupport.getThreadId(current))<br>                            cachedHoldCounter = rh = readHolds.get();<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)<br>                            readHolds.set(rh);<br>                        rh.count++;<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125; <br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHeldExclusively</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">// While we must in general read state before owner,</span><br>            <span class="hljs-comment">// we don&#x27;t need to do so to check if current thread is owner</span><br>            <span class="hljs-keyword">return</span> getExclusiveOwnerThread() == Thread.currentThread();<br>        &#125; <br><br>        <span class="hljs-comment">// 下面是与外部类相关的方法</span><br><br>        <span class="hljs-keyword">final</span> ConditionObject <span class="hljs-title function_">newCondition</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionObject</span>();<br>        &#125; <br><br>        <span class="hljs-keyword">final</span> Thread <span class="hljs-title function_">getOwner</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">// Must read state before owner to ensure memory consistency</span><br>            <span class="hljs-keyword">return</span> ((exclusiveCount(getState()) == <span class="hljs-number">0</span>) ?<br>                    <span class="hljs-literal">null</span> :<br>                    getExclusiveOwnerThread());<br>        &#125; <br><br>        <span class="hljs-comment">// 获取读锁数量</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getReadLockCount</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> sharedCount(getState());<br>        &#125; <br><br>        <span class="hljs-comment">// 是否有线程持有写锁</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isWriteLocked</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> exclusiveCount(getState()) != <span class="hljs-number">0</span>;<br>        &#125; <br><br>        <span class="hljs-comment">// 获取当前线程的写锁持有量</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getWriteHoldCount</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> isHeldExclusively() ? exclusiveCount(getState()) : <span class="hljs-number">0</span>;<br>        &#125; <br><br>        <span class="hljs-comment">// 获取当前线程的读锁持有量</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getReadHoldCount</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (getReadLockCount() == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-keyword">if</span> (firstReader == current)<br>                <span class="hljs-keyword">return</span> firstReaderHoldCount;<br><br>            <span class="hljs-type">HoldCounter</span> <span class="hljs-variable">rh</span> <span class="hljs-operator">=</span> cachedHoldCounter;<br>            <span class="hljs-keyword">if</span> (rh != <span class="hljs-literal">null</span> &amp;&amp; rh.tid == LockSupport.getThreadId(current))<br>                <span class="hljs-keyword">return</span> rh.count;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> readHolds.get().count;<br>            <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>) readHolds.remove();<br>            <span class="hljs-keyword">return</span> count;<br>        &#125; <br><br>        <span class="hljs-comment">// 从流中重新构造实例(即反序列化)。</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>            <span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;<br>            s.defaultReadObject();<br>            readHolds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocalHoldCounter</span>();<br>            setState(<span class="hljs-number">0</span>); <span class="hljs-comment">// reset to unlocked state</span><br>        &#125;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123; <span class="hljs-keyword">return</span> getState(); &#125;<br>    &#125; <br><br>    <span class="hljs-comment">// 同步器的非公平版本</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NonfairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">8159625535654395037L</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">writerShouldBlock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">// 竞争写锁总是能插队</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// writers can always barge</span><br>        &#125;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">readerShouldBlock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">/* As a heuristic to avoid indefinite writer starvation,</span><br><span class="hljs-comment">             * block if the thread that momentarily appears to be head</span><br><span class="hljs-comment">             * of queue, if one exists, is a waiting writer.  This is</span><br><span class="hljs-comment">             * only a probabilistic effect since a new reader will not</span><br><span class="hljs-comment">             * block if there is a waiting writer behind other enabled</span><br><span class="hljs-comment">             * readers that have not yet drained from the queue.</span><br><span class="hljs-comment">             */</span><br>            <span class="hljs-comment">// 如果CLH等待队列中的第一个节点是ExclusiveNode（即一个写入者）</span><br>            <span class="hljs-comment">// 则阻塞，避免写线程匮乏（效果不大）</span><br>            <span class="hljs-keyword">return</span> apparentlyFirstQueuedIsExclusive();<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-comment">// 同步器的公平版本</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">2274990926593161451L</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">writerShouldBlock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> hasQueuedPredecessors();<br>        &#125;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">readerShouldBlock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> hasQueuedPredecessors();<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Lock</span>, java.io.Serializable &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">5992448646407690164L</span>;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Sync sync; <br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-title function_">ReadLock</span><span class="hljs-params">(ReentrantReadWriteLock lock)</span> &#123;<br>            sync = lock.sync;<br>        &#125; <br><br>        <span class="hljs-comment">// 获取读锁</span><br>        <span class="hljs-comment">// 如果写锁没有被另一个线程持有，则获取读锁并立即返回。</span><br>        <span class="hljs-comment">// 如果写锁被另一个线程持有，则当前线程出于线程调度的目的被禁用，</span><br>        <span class="hljs-comment">// 并处于休眠状态，直到获得读锁。</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>            sync.acquireShared(<span class="hljs-number">1</span>);<br>        &#125; <br><br>        <span class="hljs-comment">// 在这个实现中，因为这个方法是一个显式的中断点，</span><br>        <span class="hljs-comment">// 所以优先响应中断，而不是正常的或可重入的锁获取。</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lockInterruptibly</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            sync.acquireSharedInterruptibly(<span class="hljs-number">1</span>);<br>        &#125; <br><br>        <span class="hljs-comment">// 仅当调用时另一个线程没有持有写锁时，才获取读锁</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> sync.tryReadLock();<br>        &#125; <br><br>        <span class="hljs-comment">// 带超时的lock</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, TimeUnit unit)</span><br>                <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            <span class="hljs-keyword">return</span> sync.tryAcquireSharedNanos(<span class="hljs-number">1</span>, unit.toNanos(timeout));<br>        &#125; <br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>            sync.releaseShared(<span class="hljs-number">1</span>);<br>        &#125; <br><br>        <span class="hljs-comment">// 抛出UnsupportedOperationException，因为读锁不支持条件。</span><br>        <span class="hljs-keyword">public</span> Condition <span class="hljs-title function_">newCondition</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>        &#125; <br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> sync.getReadLockCount();<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.toString() +<br>                <span class="hljs-string">&quot;[Read locks = &quot;</span> + r + <span class="hljs-string">&quot;]&quot;</span>;<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WriteLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Lock</span>, java.io.Serializable &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">4992448646407690164L</span>;<br>       <br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Sync sync;<br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-title function_">WriteLock</span><span class="hljs-params">(ReentrantReadWriteLock lock)</span> &#123;<br>            sync = lock.sync;<br>        &#125; <br><br>        <span class="hljs-comment">// 获取写锁</span><br>        <span class="hljs-comment">// 如果另一个线程既没有持有读锁也没有持有写锁，则获取写锁，并立即返回，</span><br>        <span class="hljs-comment">// 将写锁持有计数设置为1。</span><br>        <span class="hljs-comment">// 如果当前线程已经持有写锁，则持有计数递增1，并且该方法立即返回。</span><br>        <span class="hljs-comment">// 如果该锁被另一个线程持有，则当前线程出于线程调度的目的而被禁用，</span><br>        <span class="hljs-comment">// 并处于休眠状态，直到获得写锁，此时写锁持有计数被设置为1。</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>            sync.acquire(<span class="hljs-number">1</span>);<br>        &#125; <br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lockInterruptibly</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            sync.acquireInterruptibly(<span class="hljs-number">1</span>);<br>        &#125; <br><br>        <span class="hljs-comment">// 只有读锁和写锁在调用时没有被其他线程持有时，才获取写锁。</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> sync.tryWriteLock();<br>        &#125; <br><br>        <span class="hljs-comment">// 带超时的 lock </span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, TimeUnit unit)</span><br>                <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            <span class="hljs-keyword">return</span> sync.tryAcquireNanos(<span class="hljs-number">1</span>, unit.toNanos(timeout));<br>        &#125; <br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>            sync.release(<span class="hljs-number">1</span>);<br>        &#125; <br><br>        <span class="hljs-keyword">public</span> Condition <span class="hljs-title function_">newCondition</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> sync.newCondition();<br>        &#125; <br><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> sync.getOwner();<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.toString() + ((o == <span class="hljs-literal">null</span>) ?<br>                                       <span class="hljs-string">&quot;[Unlocked]&quot;</span> :<br>                                       <span class="hljs-string">&quot;[Locked by thread &quot;</span> + o.getName() + <span class="hljs-string">&quot;]&quot;</span>);<br>        &#125; <br><br>        <span class="hljs-comment">// 判断写锁是否由当前线程持有</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHeldByCurrentThread</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> sync.isHeldExclusively();<br>        &#125; <br>    <br>        <span class="hljs-comment">// 获取当前线程的写锁持有量</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHoldCount</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> sync.getWriteHoldCount();<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-comment">// 是否公平</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFair</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync <span class="hljs-keyword">instanceof</span> FairSync;<br>    &#125; <br><br>    <span class="hljs-comment">// 获取当前持有写锁的线程（没有则返回null）</span><br>    <span class="hljs-keyword">protected</span> Thread <span class="hljs-title function_">getOwner</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.getOwner();<br>    &#125; <br><br>    <span class="hljs-comment">// 获取读锁数量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getReadLockCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.getReadLockCount();<br>    &#125; <br><br>    <span class="hljs-comment">// 返回是否有线程持有写锁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isWriteLocked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.isWriteLocked();<br>    &#125; <br><br>    <span class="hljs-comment">// 当前线程是否持有写锁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isWriteLockedByCurrentThread</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.isHeldExclusively();<br>    &#125;<br><br>    <span class="hljs-comment">// 获取当前线程的写锁持有量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getWriteHoldCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.getWriteHoldCount();<br>    &#125; <br><br>    <span class="hljs-comment">// 获取当前线程的读锁持有量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getReadHoldCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.getReadHoldCount();<br>    &#125;<br><br>    <span class="hljs-comment">// 其他方法是一些提供可观测性的方法，略过</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>    ReentrantReadWriteLock 通过提供读锁和写锁，规定读操作和写操作分别是共享和独占的，降低了锁的粒度，增加了并发度</p>]]></content>
    
    
    <categories>
      
      <category>源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CountDownLatch源码解析</title>
    <link href="/2023/06/03/CountDownLatch%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/06/03/CountDownLatch%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h4 id="CountDownLatch源码解析"><a href="#CountDownLatch源码解析" class="headerlink" title="CountDownLatch源码解析"></a>CountDownLatch源码解析</h4><p>    这篇博客我们来阅读  CountDownLatch 的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CountDownLatch</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Synchronization control For CountDownLatch.</span><br><span class="hljs-comment">     * Uses AQS state to represent count.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123; <br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">4982264981922014374L</span>;<br>        <br>        <span class="hljs-comment">// 初始化</span><br>        Sync(<span class="hljs-type">int</span> count) &#123;<br>            setState(count);<br>        &#125;<br><br>        <span class="hljs-comment">// count 和 state的值对应</span><br>        <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> getState();<br>        &#125; <br><br>        <span class="hljs-comment">// 只有当state为0（即count为0时），acquire才成功</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>            <span class="hljs-keyword">return</span> (getState() == <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br>        &#125; <br><br>        <span class="hljs-comment">// 将count 减去 releases</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;<br>            <span class="hljs-comment">// Decrement count; signal when transition to zero</span><br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (compareAndSetState(c, nextc))<br>                    <span class="hljs-keyword">return</span> nextc == <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Sync sync; <br><br>    <span class="hljs-comment">// 初始化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CountDownLatch</span><span class="hljs-params">(<span class="hljs-type">int</span> count)</span> &#123;<br>        <span class="hljs-keyword">if</span> (count &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;count &lt; 0&quot;</span>);<br>        <span class="hljs-built_in">this</span>.sync = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sync</span>(count);<br>    &#125; <br><br>    <span class="hljs-comment">// 除非线程被中断，否则使当前线程一直等待，直到闩锁倒计时到零。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">await</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        sync.acquireSharedInterruptibly(<span class="hljs-number">1</span>);<br>    &#125; <br><br>    <span class="hljs-comment">// 带超时时间的await</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">await</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, TimeUnit unit)</span><br>        <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">return</span> sync.tryAcquireSharedNanos(<span class="hljs-number">1</span>, unit.toNanos(timeout));<br>    &#125;<br><br>    <span class="hljs-comment">// count 减1</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">countDown</span><span class="hljs-params">()</span> &#123;<br>        sync.releaseShared(<span class="hljs-number">1</span>);<br>    &#125; <br><br>    <span class="hljs-comment">// 获取当前count值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.getCount();<br>    &#125; <br><br>    <span class="hljs-comment">// toString</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.toString() + <span class="hljs-string">&quot;[Count = &quot;</span> + sync.getCount() + <span class="hljs-string">&quot;]&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>    CountDownLatch 在初始化后 所有调用其await的线程都会被阻塞，直到count为0，之后所有阻塞的线程会按顺序全部被唤醒（一种同步辅助手段，允许一个或多个线程等待其他线程中正在执行的一组操作完成。）</p><p>    更多信息和例子可参照代码前的注释</p>]]></content>
    
    
    <categories>
      
      <category>源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Semaphore源码解析</title>
    <link href="/2023/06/03/Semaphore%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/06/03/Semaphore%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h4 id="Semaphore源码解析"><a href="#Semaphore源码解析" class="headerlink" title="Semaphore源码解析"></a>Semaphore源码解析</h4><p>    这篇博客我们来阅读  Semaphore的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Semaphore</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable &#123; <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3222578661600680210L</span>;<br>   <br>    <span class="hljs-comment">/** All mechanics via AbstractQueuedSynchronizer subclass */</span><br>    <span class="hljs-comment">// 通过AQS的子类实现所有机制</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Sync sync;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Synchronization implementation for semaphore.  Uses AQS state</span><br><span class="hljs-comment">     * to represent permits. Subclassed into fair and nonfair</span><br><span class="hljs-comment">     * versions.</span><br><span class="hljs-comment">     * semaphore 的同步器实现，使用AQS state来表示 permits（许可）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1192457210091910933L</span>;<br>   <br>        <span class="hljs-comment">// 初始化许可数量</span><br>        Sync(<span class="hljs-type">int</span> permits) &#123;<br>            setState(permits);<br>        &#125;  <br><br>        <span class="hljs-comment">// 许可数量和state值对应</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getPermits</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> getState();<br>        &#125; <br><br>        <span class="hljs-comment">// tryAcquireShared 非公平实现</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nonfairTryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">available</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">remaining</span> <span class="hljs-operator">=</span> available - acquires;<br>                <span class="hljs-comment">// 没有许可（发完了） 或 一直重试直到获取许可</span><br>                <span class="hljs-keyword">if</span> (remaining &lt; <span class="hljs-number">0</span> ||<br>                    compareAndSetState(available, remaining))<br>                    <span class="hljs-keyword">return</span> remaining;<br>            &#125;<br>        &#125;  <br><br>        <span class="hljs-comment">// 释放（归还）许可</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123;<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> current + releases;<br>                <span class="hljs-keyword">if</span> (next &lt; current) <span class="hljs-comment">// overflow</span><br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum permit count exceeded&quot;</span>);<br>                <span class="hljs-keyword">if</span> (compareAndSetState(current, next))<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125; <br><br>        <span class="hljs-comment">// 减少总的许可数量</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reducePermits</span><span class="hljs-params">(<span class="hljs-type">int</span> reductions)</span> &#123;<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> current - reductions;<br>                <span class="hljs-keyword">if</span> (next &gt; current) <span class="hljs-comment">// underflow</span><br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Permit count underflow&quot;</span>);<br>                <span class="hljs-keyword">if</span> (compareAndSetState(current, next))<br>                    <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125; <br><br>        <span class="hljs-comment">// 将许可数量置为0</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">drainPermits</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-keyword">if</span> (current == <span class="hljs-number">0</span> || compareAndSetState(current, <span class="hljs-number">0</span>))<br>                    <span class="hljs-keyword">return</span> current;<br>            &#125;<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * NonFair version</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NonfairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123; <br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">2694183684443567898L</span>;<br><br>        NonfairSync(<span class="hljs-type">int</span> permits) &#123;<br>            <span class="hljs-built_in">super</span>(permits);<br>        &#125;  <br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>            <span class="hljs-keyword">return</span> nonfairTryAcquireShared(acquires);<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Fair version</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br>    <br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">2014338818796000944L</span>;<br>       <br>        FairSync(<span class="hljs-type">int</span> permits) &#123;<br>            <span class="hljs-built_in">super</span>(permits);<br>        &#125;<br><br>        <span class="hljs-comment">// 公平版 tryAcquireShared 也是先判断当前线程是否插队</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-keyword">if</span> (hasQueuedPredecessors())<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">available</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">remaining</span> <span class="hljs-operator">=</span> available - acquires;<br>                <span class="hljs-keyword">if</span> (remaining &lt; <span class="hljs-number">0</span> ||<br>                    compareAndSetState(available, remaining))<br>                    <span class="hljs-keyword">return</span> remaining;<br>            &#125;<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-comment">// 用给定的许可数创建一个信号量。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Semaphore</span><span class="hljs-params">(<span class="hljs-type">int</span> permits)</span> &#123;<br>        <span class="hljs-comment">// 默认非公平</span><br>        sync = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>(permits);<br>    &#125; <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Semaphore</span><span class="hljs-params">(<span class="hljs-type">int</span> permits, <span class="hljs-type">boolean</span> fair)</span> &#123;<br>        sync = fair ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">FairSync</span>(permits) : <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>(permits);<br>    &#125; <br><br>    <span class="hljs-comment">// 获取许可（可打断）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquire</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        sync.acquireSharedInterruptibly(<span class="hljs-number">1</span>);<br>    &#125; <br><br>    <span class="hljs-comment">// 获取许可（不可打断）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquireUninterruptibly</span><span class="hljs-params">()</span> &#123;<br>        sync.acquireShared(<span class="hljs-number">1</span>);<br>    &#125; <br><br>    <span class="hljs-comment">// 尝试获取许可（G，有挂，怎么玩），直到拿到许可或者没有许可</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.nonfairTryAcquireShared(<span class="hljs-number">1</span>) &gt;= <span class="hljs-number">0</span>;<br>    &#125; <br><br>    <span class="hljs-comment">// 尝试获取许可，带超时时间</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, TimeUnit unit)</span><br>        <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">return</span> sync.tryAcquireSharedNanos(<span class="hljs-number">1</span>, unit.toNanos(timeout));<br>    &#125; <br><br>    <span class="hljs-comment">// 当前线程释放持有的许可</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">release</span><span class="hljs-params">()</span> &#123;<br>        sync.releaseShared(<span class="hljs-number">1</span>);<br>    &#125; <br><br>    <span class="hljs-comment">// 获取指定数量的许可（可恶，一个人占多个名额）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquire</span><span class="hljs-params">(<span class="hljs-type">int</span> permits)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">if</span> (permits &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>        sync.acquireSharedInterruptibly(permits);<br>    &#125; <br><br>    <span class="hljs-comment">// 获取指定数量的许可（不可打断）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquireUninterruptibly</span><span class="hljs-params">(<span class="hljs-type">int</span> permits)</span> &#123;<br>        <span class="hljs-keyword">if</span> (permits &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>        sync.acquireShared(permits);<br>    &#125; <br><br>    <span class="hljs-comment">// 尝试获取指定数量的许可（G，有挂，还特么一个人占多个名额）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> permits)</span> &#123;<br>        <span class="hljs-keyword">if</span> (permits &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>        <span class="hljs-keyword">return</span> sync.nonfairTryAcquireShared(permits) &gt;= <span class="hljs-number">0</span>;<br>    &#125; <br><br>    <span class="hljs-comment">// 尝试获取指定数量的许可，带超时时间</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> permits, <span class="hljs-type">long</span> timeout, TimeUnit unit)</span><br>        <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">if</span> (permits &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>        <span class="hljs-keyword">return</span> sync.tryAcquireSharedNanos(permits, unit.toNanos(timeout));<br>    &#125; <br><br>    <span class="hljs-comment">// 释放指定数量的许可</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">release</span><span class="hljs-params">(<span class="hljs-type">int</span> permits)</span> &#123;<br>        <span class="hljs-keyword">if</span> (permits &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>        sync.releaseShared(permits);<br>    &#125; <br><br>    <span class="hljs-comment">// 返回是否还要许可可以发放</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">availablePermits</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.getPermits();<br>    &#125; <br><br>    <span class="hljs-comment">// 将许可置为0</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">drainPermits</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.drainPermits();<br>    &#125; <br><br>    <span class="hljs-comment">// 减少指定数量的许可</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reducePermits</span><span class="hljs-params">(<span class="hljs-type">int</span> reduction)</span> &#123;<br>        <span class="hljs-keyword">if</span> (reduction &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>        sync.reducePermits(reduction);<br>    &#125; <br><br>    <span class="hljs-comment">// 判断是否公平</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFair</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync <span class="hljs-keyword">instanceof</span> FairSync;<br>    &#125; <br><br>    <span class="hljs-comment">// 还剩下的方法是一些重复的方法，这里略过</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>    Semaphore 维护了指定数量的许可，可以允许多个线程同时持有锁，其他线程则会被阻塞；还实现了公平和非公平两个版本（实现原理和 <code>ReentrantLock </code>一样）</p>]]></content>
    
    
    <categories>
      
      <category>源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ReentrantLock源码解析</title>
    <link href="/2023/06/03/ReentrantLock%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/06/03/ReentrantLock%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h4 id="ReentrantLock源码解析"><a href="#ReentrantLock源码解析" class="headerlink" title="ReentrantLock源码解析"></a>ReentrantLock源码解析</h4><p>    前面我们分析了AQS的源码，下面我们开始逐个分析AQS的派生类的源码，了解其机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReentrantLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Lock</span>, java.io.Serializable &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">7373984872572414699L</span>;<br><br>    <span class="hljs-comment">/** Synchronizer providing all implementation mechanics */</span><br>    <span class="hljs-comment">// 将所有方法委托给同步器实现</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Sync sync;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Base of synchronization control for this lock. Subclassed</span><br><span class="hljs-comment">     * into fair and nonfair versions below. Uses AQS state to</span><br><span class="hljs-comment">     * represent the number of holds on the lock.</span><br><span class="hljs-comment">     * 此锁的同步控制的基类。子类分为公平和非公平版本。使用AQS状态来表示持有锁的次数。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">5179523762034025860L</span>;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Performs non-fair tryLock.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-meta">@ReservedStackAccess</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 状态为0表示锁未被任何线程持有</span><br>                <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)) &#123;<br>                    setExclusiveOwnerThread(current);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (getExclusiveOwnerThread() == current) &#123;<br>                <span class="hljs-comment">// 锁重入</span><br>                <span class="hljs-comment">// 可重入的最大次数为 Integer.MAX_VALUE</span><br>                <span class="hljs-keyword">if</span> (++c &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>                setState(c);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Checks for reentrancy and acquires if lock immediately</span><br><span class="hljs-comment">         * available under fair vs nonfair rules. Locking methods</span><br><span class="hljs-comment">         * perform initialTryLock check before relaying to</span><br><span class="hljs-comment">         * corresponding AQS acquire methods. </span><br><span class="hljs-comment">         * 检查可重入性。并且根据公平与非公平规则判断锁立即可用的话，acquire</span><br><span class="hljs-comment">         * 锁方法在中继到相应的AQS acquire方法之前执行 initialTryLock 检查</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">initialTryLock</span><span class="hljs-params">()</span>; <br><br>        <span class="hljs-meta">@ReservedStackAccess</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (!initialTryLock())<br>                acquire(<span class="hljs-number">1</span>);<br>        &#125; <br><br>        <span class="hljs-meta">@ReservedStackAccess</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lockInterruptibly</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            <span class="hljs-keyword">if</span> (Thread.interrupted())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>            <span class="hljs-keyword">if</span> (!initialTryLock())<br>                acquireInterruptibly(<span class="hljs-number">1</span>);<br>        &#125; <br><br>        <span class="hljs-meta">@ReservedStackAccess</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLockNanos</span><span class="hljs-params">(<span class="hljs-type">long</span> nanos)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            <span class="hljs-keyword">if</span> (Thread.interrupted())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>            <span class="hljs-keyword">return</span> initialTryLock() || tryAcquireNanos(<span class="hljs-number">1</span>, nanos);<br>        &#125; <br><br>        <span class="hljs-meta">@ReservedStackAccess</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> &#123; <br>            <span class="hljs-comment">// 当前状态减去releases</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState() - releases;<br>            <span class="hljs-keyword">if</span> (getExclusiveOwnerThread() != Thread.currentThread())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">free</span> <span class="hljs-operator">=</span> (c == <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (free)<br>                setExclusiveOwnerThread(<span class="hljs-literal">null</span>);<br>            setState(c);<br>            <span class="hljs-keyword">return</span> free;<br>        &#125; <br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHeldExclusively</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-comment">// While we must in general read state before owner,</span><br>            <span class="hljs-comment">// we don&#x27;t need to do so to check if current thread is owner</span><br>            <span class="hljs-keyword">return</span> getExclusiveOwnerThread() == Thread.currentThread();<br>        &#125; <br><br>        <span class="hljs-keyword">final</span> ConditionObject <span class="hljs-title function_">newCondition</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionObject</span>();<br>        &#125; <br><br>        <span class="hljs-comment">// 获取锁的持有者</span><br>        <span class="hljs-keyword">final</span> Thread <span class="hljs-title function_">getOwner</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> getState() == <span class="hljs-number">0</span> ? <span class="hljs-literal">null</span> : getExclusiveOwnerThread();<br>        &#125; <br><br>        <span class="hljs-comment">// 获取锁的持有次数（即状态state）</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHoldCount</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> isHeldExclusively() ? getState() : <span class="hljs-number">0</span>;<br>        &#125; <br><br>        <span class="hljs-comment">// 锁是否可用</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLocked</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> getState() != <span class="hljs-number">0</span>;<br>        &#125; <br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Reconstitutes the instance from a stream (that is, deserializes it).</span><br><span class="hljs-comment">         * 从流中重新构造实例（反序列化）</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(java.io.ObjectInputStream s)</span><br>            <span class="hljs-keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;<br>            s.defaultReadObject();<br>            setState(<span class="hljs-number">0</span>); <span class="hljs-comment">// reset to unlocked state</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Sync object for non-fair locks</span><br><span class="hljs-comment">     * 非公平锁的同步器对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NonfairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123; <br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">7316153563782823691L</span>;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">initialTryLock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)) &#123; <span class="hljs-comment">// first attempt is unguarded</span><br>                <span class="hljs-comment">// 第一次尝试没有仔细考虑（没有先检查state，随缘）</span><br>                setExclusiveOwnerThread(current);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (getExclusiveOwnerThread() == current) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState() + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (c &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>                setState(c);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Acquire for non-reentrant cases after initialTryLock prescreen </span><br><span class="hljs-comment">         * initialTryLock 预筛选后 acquire（针对不可重入的情况）</span><br><span class="hljs-comment">         * 专门加一个方法 initialTryLock 就是为了将处理可重入的代码拎出来</span><br><span class="hljs-comment">         * emmm</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123;<br>            <span class="hljs-keyword">if</span> (getState() == <span class="hljs-number">0</span> &amp;&amp; compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;<br>                setExclusiveOwnerThread(Thread.currentThread());<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Sync object for fair locks</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> &#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3000897897090466540L</span>;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Acquires only if reentrant or queue is empty.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">initialTryLock</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 公平锁主要依赖 hasQueuedThreads()方法</span><br>                <span class="hljs-comment">// 即当前是否有线程在CLH队列中等待持有锁</span><br>                <span class="hljs-comment">// 没有等待线程才能去竞争锁</span><br>                <span class="hljs-keyword">if</span> (!hasQueuedThreads() &amp;&amp; compareAndSetState(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)) &#123;<br>                    setExclusiveOwnerThread(current);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (getExclusiveOwnerThread() == current) &#123;<br>                <span class="hljs-comment">// 当前线程已经持有锁了（可重入），第二次来就可以插队了</span><br>                <span class="hljs-keyword">if</span> (++c &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>                setState(c);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Acquires only if thread is first waiter or empty</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> &#123; <br>            <span class="hljs-comment">// 不可重入的情况下，只有当前线程是CLH队列中的第一个线程或者</span><br>            <span class="hljs-comment">// 队列为空，才能去竞争锁</span><br>            <span class="hljs-keyword">if</span> (getState() == <span class="hljs-number">0</span> &amp;&amp; !hasQueuedPredecessors() &amp;&amp;<br>                compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;<br>                setExclusiveOwnerThread(Thread.currentThread());<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates an instance of &#123;<span class="hljs-doctag">@code</span> ReentrantLock&#125;.</span><br><span class="hljs-comment">     * This is equivalent to using &#123;<span class="hljs-doctag">@code</span> ReentrantLock(false)&#125;.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantLock</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 默认是非公平版本</span><br>        sync = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>();<br>    &#125; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Creates an instance of &#123;<span class="hljs-doctag">@code</span> ReentrantLock&#125; with the</span><br><span class="hljs-comment">     * given fairness policy.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fair &#123;<span class="hljs-doctag">@code</span> true&#125; if this lock should use a fair ordering policy</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantLock</span><span class="hljs-params">(<span class="hljs-type">boolean</span> fair)</span> &#123;<br>        sync = fair ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">FairSync</span>() : <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>();<br>    &#125; <br><br>    <span class="hljs-comment">// 获取锁（不可打断）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>        sync.lock();<br>    &#125; <br><br>    <span class="hljs-comment">// 获取锁（可打断）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lockInterruptibly</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        sync.lockInterruptibly();<br>    &#125; <br><br>    <span class="hljs-comment">// 尝试获取锁（只尝试一次）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.tryLock();<br>    &#125; <br><br>    <span class="hljs-comment">// 尝试获取锁（带超时时间）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeout, TimeUnit unit)</span><br>            <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">return</span> sync.tryLockNanos(unit.toNanos(timeout));<br>    &#125; <br><br>    <span class="hljs-comment">// 解锁（将state状态量减1）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>        sync.release(<span class="hljs-number">1</span>);<br>    &#125; <br><br>    <span class="hljs-keyword">public</span> Condition <span class="hljs-title function_">newCondition</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.newCondition();<br>    &#125; <br><br>    <span class="hljs-comment">// 获取当前线程持有锁的次数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHoldCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.getHoldCount();<br>    &#125; <br><br>    <span class="hljs-comment">// 判断当前线程是否持有锁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHeldByCurrentThread</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.isHeldExclusively();<br>    &#125; <br><br>    <span class="hljs-comment">// 判断是否有线程已经持有锁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLocked</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.isLocked();<br>    &#125; <br><br>    <span class="hljs-comment">// 判断是否是公平锁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFair</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync <span class="hljs-keyword">instanceof</span> FairSync;<br>    &#125; <br><br>    <span class="hljs-comment">// 获取锁的持有者</span><br>    <span class="hljs-keyword">protected</span> Thread <span class="hljs-title function_">getOwner</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.getOwner();<br>    &#125; <br><br>    <span class="hljs-comment">// 判断是否有线程正在等待持有锁（只能作为参考，原因参照AQS中代码注释）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasQueuedThreads</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.hasQueuedThreads();<br>    &#125; <br><br>    <span class="hljs-comment">// 判断某个线程是否正在等待持有这个锁（只能作为参考）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasQueuedThread</span><span class="hljs-params">(Thread thread)</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.isQueued(thread);<br>    &#125;<br><br>    <span class="hljs-comment">// 返回等待锁的线程数量（只能作为参考）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getQueueLength</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.getQueueLength();<br>    &#125; <br><br>    <span class="hljs-comment">// 返回所有正在等待获取此锁的线程（只能作为参考）</span><br>    <span class="hljs-keyword">protected</span> Collection&lt;Thread&gt; <span class="hljs-title function_">getQueuedThreads</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sync.getQueuedThreads();<br>    &#125; <br><br>    <span class="hljs-comment">// 判断是否有线程正在等待 condition</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasWaiters</span><span class="hljs-params">(Condition condition)</span> &#123;<br>        <span class="hljs-keyword">if</span> (condition == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>        <span class="hljs-keyword">if</span> (!(condition <span class="hljs-keyword">instanceof</span> AbstractQueuedSynchronizer.ConditionObject))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;not owner&quot;</span>);<br>        <span class="hljs-keyword">return</span> sync.hasWaiters((AbstractQueuedSynchronizer.ConditionObject)condition);<br>    &#125; <br><br>    <span class="hljs-comment">// 返回condition 等待队列的长度</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getWaitQueueLength</span><span class="hljs-params">(Condition condition)</span> &#123;<br>        <span class="hljs-keyword">if</span> (condition == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>        <span class="hljs-keyword">if</span> (!(condition <span class="hljs-keyword">instanceof</span> AbstractQueuedSynchronizer.ConditionObject))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;not owner&quot;</span>);<br>        <span class="hljs-keyword">return</span> sync.getWaitQueueLength((AbstractQueuedSynchronizer.ConditionObject)condition);<br>    &#125; <br><br>    <span class="hljs-comment">// 返回condition 中正在等待的所有线程</span><br>    <span class="hljs-keyword">protected</span> Collection&lt;Thread&gt; <span class="hljs-title function_">getWaitingThreads</span><span class="hljs-params">(Condition condition)</span> &#123;<br>        <span class="hljs-keyword">if</span> (condition == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>        <span class="hljs-keyword">if</span> (!(condition <span class="hljs-keyword">instanceof</span> AbstractQueuedSynchronizer.ConditionObject))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;not owner&quot;</span>);<br>        <span class="hljs-keyword">return</span> sync.getWaitingThreads((AbstractQueuedSynchronizer.ConditionObject)condition);<br>    &#125; <br><br>    <span class="hljs-comment">// 重写toString方法，打印此锁是否被线程持有，若此锁已经被某线程持有</span><br>    <span class="hljs-comment">// 打印持有锁的线程名称</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> sync.getOwner();<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.toString() + ((o == <span class="hljs-literal">null</span>) ?<br>                                   <span class="hljs-string">&quot;[Unlocked]&quot;</span> :<br>                                   <span class="hljs-string">&quot;[Locked by thread &quot;</span> + o.getName() + <span class="hljs-string">&quot;]&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>    ReentrantLock 在 AQS 的基础上实现了可重入机制，并提供了公平与非公平两个版本</p><p>    其中可重入是通过重入的线程，对state加1实现的，相应的，线程重入多少次，就要多unlock多少次</p><p>    而公平与非公平锁的实现并没有修改AQS的acquire逻辑，而是在获取锁前判断当前线程是否已经在CLH等待队列中并且是队列中的第一个节点</p>]]></content>
    
    
    <categories>
      
      <category>源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AQS源码解析.md</title>
    <link href="/2023/05/30/AQS%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/05/30/AQS%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h3 id="AQS源码解析"><a href="#AQS源码解析" class="headerlink" title="AQS源码解析"></a>AQS源码解析</h3><p>    本文基于JDK19的源码</p><p>    下面是源码里面注释的翻译，可以作为参考（代码头的注释实在翻译不过来了）</p><blockquote><p>等待队列是“CLH”(Craig、Landin和Hagersten)锁队列的变体。<br>CLH锁通常用于旋转锁。相反，我们通过包含显式(“prev”和“next”)链接和一个“status”字段来使用它们阻塞同步器，该字段允许节点在释放锁时通知后继者，并处理由于中断和超时而导致的取消。<br>状态字段包括跟踪线程是否需要唤醒(使用LockSupport.unpark)的位。<br>尽管增加了这些，我们仍然保留了大部分CLH自己的属性。</p><p>要排队进入CLH锁的话，您需要使用原子操作将新节点拼接成新的队尾（tail），</p><p>要出队的话，您需要设置队头（head）字段，这样下一个符合条件的等待着就会变成第一个</p><p>+——–+  prev +———+         +——–+  </p><p>| head | &lt;—-  | first | &lt;—-   | tail |  </p><p>+——–+           +———+         +——–+</p><p>插入到CLH队列只需要在“tail”上执行一个原子操作，所以从非排队到排队有一个简单的分界点。前置节点的“nexi”链接由成功CAS后的排队线程设置。尽管是非原子的，这也足以保证任何阻塞的线程会在符合条件时由前驱节点唤醒。唤醒部分基于类似Dekker的方案，在该方案中要等待的线程指明等待状态（WAITIING status），然后重试获取，然后在阻塞之前重新检查状态。signaller在unpark时会自动清除WAITING状态</p><p>acquire时出队包含分离（清空）一个节点的“prev”节点然后更新“head”。其他线程通过检查“prev”而不是“head”来判断节点正在或者已经出队。如果有必要的话，我们通过旋转等待来强制取消然后设置顺序。因此，锁算法本身并不是严格意义上的“无锁”,因为获取线程可能需要等待前一次获取才能取得进展。当使用排他锁时，无论如何都需要这样的progess。然而，共享模式可能（罕见地）需要在设置head字段之前进行旋转等待，以确保正确传播。（与历史有关地注释：与该类之前的版本相比，这给到了简化和效率的提升）</p><p>节点的前驱能在等待时因为取消等待而改变，直到该节点称为队列中的第一个节点，这时节点就不能改变了。acquire method通过在等待前重新检查“prev”来处理这个问题。prev和next字段只能由方法 cleanQueue 中已取消的节点通过CAS进行修改。unsplice策略让人想起Michael-Scott队列，其在成功对prev字段成功进行CAS操作后，其他线程帮组修复next字段。因为取消经常成批发生，这使得关于必要唤醒的决策更加复杂，每次调用cleanQueue方法都会遍历队列直到彻底清除队列。首先被重新链接的节点会被无条件unpark（有时不是必要的，但是那些情况不值得避免）</p><p>如果线程是队列中的第一个(最前面的),有时是在前面，那么它可能会尝试acquire。成为第一个并不保证成功，它只是赋予了争取成功的权力。我们通过允许传入线程在入队过程中“闯入”并获取同步器来平衡吞吐量、开销和公平性，在这种情况下，被唤醒的第一个线程可能需要重新等待。为了抵消可能重复的不幸的重新等待，我们指数级地增加重试次数(高达256次),以在每次线程被解除锁定时获取。除了在这种情况下，AQS锁才&#x3D;不会旋转；相反，他们尝试去acquire与登记步骤交错进行（需要自旋锁的用户可以使用tryAcquire）</p><p>为了提高垃圾可回收性，还不在列表上的节点的字段为null（创建一个节点，不适用就扔掉它，这种情况并不罕见）。脱离list的节点字段会尽快清空。这突出了从外部确定第一个等待线程的挑战（就像在方法 getFirstQueuedThread 中一样）。当字段显示为null时，有时需要从原子更新的“tail”向后遍历的回退（这在唤醒过程（signalling）中是不需要的）</p><p>CLH队列需要一个伪头节点来开始。但是我们不会在构建的时候创建它们，因为如果没有contention，这将是白费力气。相反，在第一次contention的时候，我们才构建节点并设置头指针和尾指针。</p><p>共享模式操作不同于独占模式操作，因为如果它也是共享的，则获取操作会向下一个等待者发出尝试获取的信号。tryAcquireShared API允许用户指出传播的程度，但在大多数应用程序中，忽略这一点更有效，允许后继者在任何情况下尝试获取。</p><p>在Conditions中等待的线程使用带有附加链接的节点来维护condition的(FIFO)列表。Conditions只需要链接简单(非并发)链式队列中的节点，因为它们只在独占时被访问。在await时，一个节点被插入到条件队列中。一旦收到信号，该节点就在主队列中排队。一个特殊的状态字段值被用来跟踪和自动触发这种情况。</p><p>对字段head、tail和state的访问使用完全volatile模式以及CAS。节点字段status、prev和next也这样做，而线程可能是可发信号的，但除此之外有时使用较弱的模式。对字段“waiter”(要被唤醒的线程)的访问总是夹在其他原子访问之间，因此在普通模式下使用。我们使用jdk.internal不安全版本的原子访问方法而不是VarHandles来避免潜在的虚拟机引导问题。</p><p>以上大部分是由主要的内部方法acquire执行的，所有暴露的acquire方法都会以某种方式调用它（当大量使用时，编译器通常很容易专门为调用点优化。）在阻塞前和&#x2F;或阻塞后的获取和等待中，有几个关于何时以及如何检查中断的随意的决定。在实现的更新中，决策更加不随意因为一些用户似乎以一种racy的方式依赖于原始行为，一般来说，这很少是错误的，但是很难证明改变是合理的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span><br>    <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractOwnableSynchronizer</span><br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">7373984972572414691L</span>;<br><br>    <span class="hljs-comment">// Creates a new AbstractQueuedSynchronizer instance with initial synchronization state of zero.</span><br>    <span class="hljs-comment">// 创建一个初始同步状态为0的 AbstractQueuedSynchronizer 实例</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">AbstractQueuedSynchronizer</span><span class="hljs-params">()</span> &#123; &#125;<br><br>    <span class="hljs-comment">// Node status bits, also used as argument and return values</span><br>    <span class="hljs-comment">// 节点状态位，也用来作为argument和返回值</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">WAITING</span>   <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;          <span class="hljs-comment">// must be 1</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CANCELLED</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x80000000</span>; <span class="hljs-comment">// must be negative</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">COND</span>      <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;          <span class="hljs-comment">// in a condition wait</span><br><br>    <span class="hljs-comment">// Unsafe</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Unsafe</span> <span class="hljs-variable">U</span> <span class="hljs-operator">=</span> Unsafe.getUnsafe();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">STATE</span><br>        <span class="hljs-operator">=</span> U.objectFieldOffset(AbstractQueuedSynchronizer.class, <span class="hljs-string">&quot;state&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">HEAD</span><br>        <span class="hljs-operator">=</span> U.objectFieldOffset(AbstractQueuedSynchronizer.class, <span class="hljs-string">&quot;head&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">TAIL</span><br>        <span class="hljs-operator">=</span> U.objectFieldOffset(AbstractQueuedSynchronizer.class, <span class="hljs-string">&quot;tail&quot;</span>);<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        Class&lt;?&gt; ensureLoaded = LockSupport.class;<br>    &#125; <br><br>    <span class="hljs-comment">// CLH 节点</span><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        <span class="hljs-comment">// initially attached via casTail</span><br>        <span class="hljs-keyword">volatile</span> Node prev;  <br>        <span class="hljs-comment">// visibly（明显地） nonnull when signallable</span><br>        <span class="hljs-keyword">volatile</span> Node next;  <br>        <span class="hljs-comment">// visibly nonnull when enqueued     </span><br>        Thread waiter;   <br>        <span class="hljs-comment">// written by owner, atomic bit ops by others         </span><br>        <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> status;   <br><br>        <span class="hljs-comment">// 获取类中属性的偏移量，用于后续cas操作</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">STATUS</span><br>            <span class="hljs-operator">=</span> U.objectFieldOffset(Node.class, <span class="hljs-string">&quot;status&quot;</span>);<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">NEXT</span><br>            <span class="hljs-operator">=</span> U.objectFieldOffset(Node.class, <span class="hljs-string">&quot;next&quot;</span>);<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">PREV</span><br>            <span class="hljs-operator">=</span> U.objectFieldOffset(Node.class, <span class="hljs-string">&quot;prev&quot;</span>);   <br><br>        <span class="hljs-comment">// methods for atomic operations</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">casPrev</span><span class="hljs-params">(Node c, Node v)</span> &#123;  <span class="hljs-comment">// for cleanQueue</span><br>            <span class="hljs-keyword">return</span> U.weakCompareAndSetReference(<span class="hljs-built_in">this</span>, PREV, c, v);<br>        &#125;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">casNext</span><span class="hljs-params">(Node c, Node v)</span> &#123;  <span class="hljs-comment">// for cleanQueue</span><br>            <span class="hljs-keyword">return</span> U.weakCompareAndSetReference(<span class="hljs-built_in">this</span>, NEXT, c, v);<br>        &#125;<br>        <span class="hljs-comment">// 将状态置为0，并返回操作之前的值</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAndUnsetStatus</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span> &#123;     <span class="hljs-comment">// for signalling</span><br>            <span class="hljs-comment">// 用当前值和掩码之间按位AND的结果自动替换</span><br>            <span class="hljs-comment">// 给定对象中字段或数组元素的当前值，返回之前的值</span><br>            <span class="hljs-keyword">return</span> U.getAndBitwiseAndInt(<span class="hljs-built_in">this</span>, STATUS, ~v);<br>        &#125;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrevRelaxed</span><span class="hljs-params">(Node p)</span> &#123;      <span class="hljs-comment">// for off-queue assignment</span><br>            <span class="hljs-comment">// 将引用值存储到对应的java变量中</span><br>            U.putReference(<span class="hljs-built_in">this</span>, PREV, p);<br>        &#125;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStatusRelaxed</span><span class="hljs-params">(<span class="hljs-type">int</span> s)</span> &#123;     <span class="hljs-comment">// for off-queue assignment</span><br>            U.putInt(<span class="hljs-built_in">this</span>, STATUS, s);<br>        &#125;<br>        <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearStatus</span><span class="hljs-params">()</span> &#123;               <span class="hljs-comment">// for reducing unneeded signals</span><br>            <span class="hljs-comment">// putIntVolatile(Object, long, int)的不透明版本</span><br>            U.putIntOpaque(<span class="hljs-built_in">this</span>, STATUS, <span class="hljs-number">0</span>);<br>        &#125;<br><br>    &#125; <br><br>    <span class="hljs-comment">// Concrete classes tagged by type</span><br>    <span class="hljs-comment">// 按类型标记的具体类</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExclusiveNode</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Node</span> &#123; &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SharedNode</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Node</span> &#123; &#125; <br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConditionNode</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Node</span><br>        <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ForkJoinPool</span>.ManagedBlocker &#123; <br>        <span class="hljs-comment">// link to next waiting node</span><br>        ConditionNode nextWaiter;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Allows Conditions to be used in ForkJoinPools without</span><br><span class="hljs-comment">         * risking fixed pool exhaustion. This is usable only for</span><br><span class="hljs-comment">         * untimed Condition waits, not timed versions.</span><br><span class="hljs-comment">         * 允许在ForkJoinPools中使用条件，而不会有固定池耗尽的风险。</span><br><span class="hljs-comment">         * 这仅适用于无计时条件等待，不适用于计时版本。</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isReleasable</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> status &lt;= <span class="hljs-number">1</span> || Thread.currentThread().isInterrupted();<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">block</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">while</span> (!isReleasable()) LockSupport.park();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Head of the wait queue, lazily initialized. 懒惰初始化</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node head;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Tail of the wait queue. After initialization, modified only via casTail. </span><br><span class="hljs-comment">     * 初始化过后，仅通过casTail修改</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-keyword">volatile</span> Node tail;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * The synchronization state. 同步状态</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> state; <br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(<span class="hljs-type">int</span> newState)</span> &#123;<br>        state = newState;<br>    &#125;<br><br>    <span class="hljs-comment">// 设置状态cas操作</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compareAndSetState</span><span class="hljs-params">(<span class="hljs-type">int</span> expect, <span class="hljs-type">int</span> update)</span> &#123;<br>        <span class="hljs-keyword">return</span> U.compareAndSetInt(<span class="hljs-built_in">this</span>, STATE, expect, update);<br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">casTail</span><span class="hljs-params">(Node c, Node v)</span> &#123;<br>        <span class="hljs-keyword">return</span> U.compareAndSetReference(<span class="hljs-built_in">this</span>, TAIL, c, v);<br>    &#125;<br><br>    <span class="hljs-comment">/** tries once to CAS a new dummy node for head </span><br><span class="hljs-comment">     *  将head设置为一个新的dummy节点，使用cas操作，只尝试一次</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tryInitializeHead</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExclusiveNode</span>();<br>        <span class="hljs-keyword">if</span> (U.compareAndSetReference(<span class="hljs-built_in">this</span>, HEAD, <span class="hljs-literal">null</span>, h))<br>            tail = h;<br>    &#125; <br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Enqueues the node unless null. (Currently used only for</span><br><span class="hljs-comment">     * ConditionNodes; other cases are interleaved with acquires.) </span><br><span class="hljs-comment">     * 当前仅用于ConditionNodes；其他情况与acquire交错进行。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">enqueue</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail;<br>                <span class="hljs-comment">// avoid unnecessary fence（避免不必要的围栏？）</span><br>                <span class="hljs-comment">// 这里没有使用volatile变量对应的方法</span><br>                node.setPrevRelaxed(t);        <br>                <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>)                 <span class="hljs-comment">// initialize</span><br>                    tryInitializeHead();<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (casTail(t, node)) &#123;<br>                    t.next = node;<br>                    <span class="hljs-keyword">if</span> (t.status &lt; <span class="hljs-number">0</span>)          <span class="hljs-comment">// wake up to clean link</span><br>                        LockSupport.unpark(node.waiter);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-comment">/** Returns true if node is found in traversal from tail </span><br><span class="hljs-comment">     *  节点已在队列中（从后向前找）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnqueued</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail; t != <span class="hljs-literal">null</span>; t = t.prev)<br>            <span class="hljs-keyword">if</span> (t == node)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <br><br>    <span class="hljs-comment">// 唤醒给定节点的后继节点(如果存在),并取消其等待状态以避免park竞争。</span><br>    <span class="hljs-comment">// 当一个或多个线程被取消时，这可能无法唤醒符合条件的线程，</span><br>    <span class="hljs-comment">// 但cancelAcquire确保了（线程？）存活。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">signalNext</span><span class="hljs-params">(Node h)</span> &#123;<br>        Node s;<br>        <span class="hljs-keyword">if</span> (h != <span class="hljs-literal">null</span> &amp;&amp; (s = h.next) != <span class="hljs-literal">null</span> &amp;&amp; s.status != <span class="hljs-number">0</span>) &#123;<br>            s.getAndUnsetStatus(WAITING);<br>            LockSupport.unpark(s.waiter);<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-comment">/** Wakes up the given node if in shared mode （共享模式）*/</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">signalNextIfShared</span><span class="hljs-params">(Node h)</span> &#123;<br>        Node s;<br>        <span class="hljs-keyword">if</span> (h != <span class="hljs-literal">null</span> &amp;&amp; (s = h.next) != <span class="hljs-literal">null</span> &amp;&amp;<br>            (s <span class="hljs-keyword">instanceof</span> SharedNode) &amp;&amp; s.status != <span class="hljs-number">0</span>) &#123;<br>            s.getAndUnsetStatus(WAITING);<br>            LockSupport.unpark(s.waiter);<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-comment">// Main acquire method, invoked by all exported acquire methods.</span><br>    <span class="hljs-comment">// 主要的acquire方法，被所有暴露的acquire方法调用</span><br>    <span class="hljs-comment">// 返回值：positive if acquired, 0 if timed out, negative if interrupted</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">acquire</span><span class="hljs-params">(Node node, <span class="hljs-type">int</span> arg, <span class="hljs-type">boolean</span> shared,</span><br><span class="hljs-params">                      <span class="hljs-type">boolean</span> interruptible, <span class="hljs-type">boolean</span> timed, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        <span class="hljs-comment">// unpark 第一个线程后第一个线程的重试次数</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">spins</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, postSpins = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">interrupted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>, first = <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">// node入队时的前驱节点</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">pred</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-comment">// 检查节点node现在是否是第一个节点，如果是的话，确保head稳定，否则保证有效的前驱</span><br>        <span class="hljs-comment">// 如果节点是第一个或尚未入队，尝试acquire</span><br>        <span class="hljs-comment">// 否则如果节点还没有创建，创建它</span><br>        <span class="hljs-comment">// 否则如果节点还没有入队，尝试入队一次</span><br>        <span class="hljs-comment">// 否则如果节点被park唤醒，重试（一直到 postSpins 次）</span><br>        <span class="hljs-comment">// 否则如果WAITING状态还没有被设置，设置并重试</span><br>        <span class="hljs-comment">// 否则，park并且清除WAITING状态，并且检查取消</span><br>        <span class="hljs-comment">// 翻译的注释，可以参考</span><br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-comment">// first表示node的前驱节点是否为head，即node是否是第一个节点</span><br>            <span class="hljs-keyword">if</span> (!first &amp;&amp; (pred = (node == <span class="hljs-literal">null</span>) ? <span class="hljs-literal">null</span> : node.prev) != <span class="hljs-literal">null</span> &amp;&amp;<br>                !(first = (head == pred))) &#123;<br>                <span class="hljs-keyword">if</span> (pred.status &lt; <span class="hljs-number">0</span>) &#123;<br>                    cleanQueue();           <span class="hljs-comment">// predecessor cancelled</span><br>                    <span class="hljs-keyword">continue</span>;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pred.prev == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// 队列断了（pred不是head，但是其前驱为null），确保队列连续</span><br>                    <span class="hljs-comment">// 为什么会出现这种情况？</span><br>                    Thread.onSpinWait();    <span class="hljs-comment">// ensure serialization</span><br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>            &#125; <br>            <span class="hljs-comment">// node是第一个节点或者node还没有入队（非公平竞争）</span><br>            <span class="hljs-comment">// 有竞争的资格</span><br>            <span class="hljs-keyword">if</span> (first || pred == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">boolean</span> acquired;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">if</span> (shared)<br>                        acquired = (tryAcquireShared(arg) &gt;= <span class="hljs-number">0</span>);<br>                    <span class="hljs-keyword">else</span><br>                        acquired = tryAcquire(arg);<br>                &#125; <span class="hljs-keyword">catch</span> (Throwable ex) &#123; <br>                    <span class="hljs-comment">// 出现异常、取消正在进行的acquire尝试</span><br>                    cancelAcquire(node, interrupted, <span class="hljs-literal">false</span>);<br>                    <span class="hljs-keyword">throw</span> ex;<br>                &#125;   <br>                <span class="hljs-keyword">if</span> (acquired) &#123;<br>                    <span class="hljs-keyword">if</span> (first) &#123;<br>                        <span class="hljs-comment">// 竞争成功后将node（第一个节点）设为head</span><br>                        node.prev = <span class="hljs-literal">null</span>;<br>                        head = node;<br>                        <span class="hljs-comment">// 将之前的head属性置空，方便GC</span><br>                        pred.next = <span class="hljs-literal">null</span>;<br>                        node.waiter = <span class="hljs-literal">null</span>;<br>                        <span class="hljs-keyword">if</span> (shared) &#123;<br>                            <span class="hljs-comment">// 如果下个节点（第一个节点）是SharedNode，将其唤醒</span><br>                            <span class="hljs-comment">// 配合能重复成功的 tryAcquireShared 能实现一次</span><br>                            <span class="hljs-comment">// 出队多个节点的效果</span><br>                            signalNextIfShared(node);<br>                        &#125;  <br>                        <span class="hljs-keyword">if</span> (interrupted)<br>                            current.interrupt(); <span class="hljs-comment">// 清空线程的打断状态</span><br>                    &#125;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>                &#125;             <br>            &#125; <br>            <span class="hljs-comment">// allocate; retry before enqueue</span><br>            <span class="hljs-comment">// 新建node，在入队时再次尝试，这里对应上段代码pred == null条件</span><br>            <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;                 <br>                <span class="hljs-keyword">if</span> (shared)<br>                    node = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SharedNode</span>();<br>                <span class="hljs-keyword">else</span><br>                    node = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExclusiveNode</span>();<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pred == <span class="hljs-literal">null</span>) &#123;  <br>                <span class="hljs-comment">// try to enqueue</span><br>                <span class="hljs-comment">// 新建的node竞争失败，入队</span><br>                node.waiter = current;<br>                <span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail;<br>                node.setPrevRelaxed(t);         <span class="hljs-comment">// avoid unnecessary fence</span><br>                <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>)<br>                    tryInitializeHead();<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!casTail(t, node))<br>                    node.setPrevRelaxed(<span class="hljs-literal">null</span>);  <span class="hljs-comment">// back out</span><br>                <span class="hljs-keyword">else</span><br>                    t.next = node;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (first &amp;&amp; spins != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// reduce unfairness on rewaits</span><br>                <span class="hljs-comment">// 队列中第一个节点第二次开始竞争的时候有自旋次数</span><br>                --spins;              <br>                Thread.onSpinWait();<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (node.status == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// enable signal and recheck</span><br>                <span class="hljs-comment">// 自旋竞争失败后重新等待</span><br>                node.status = WAITING;          <br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">long</span> nanos;<br>                <span class="hljs-comment">// 自旋次数</span><br>                spins = postSpins = (<span class="hljs-type">byte</span>)((postSpins &lt;&lt; <span class="hljs-number">1</span>) | <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span> (!timed)<br>                    LockSupport.park(<span class="hljs-built_in">this</span>);<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((nanos = time - System.nanoTime()) &gt; <span class="hljs-number">0L</span>)<br>                    LockSupport.parkNanos(<span class="hljs-built_in">this</span>, nanos);<br>                <span class="hljs-keyword">else</span><br>                    <span class="hljs-keyword">break</span>;<br>                node.clearStatus();<br>                <span class="hljs-comment">/// 可打断并已经打断，放弃acquire</span><br>                <span class="hljs-keyword">if</span> ((interrupted |= Thread.interrupted()) &amp;&amp; interruptible)<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cancelAcquire(node, interrupted, interruptible);<br>    &#125; <br><br>    <span class="hljs-comment">// 可能从尾部开始重复遍历</span><br>    <span class="hljs-comment">// 将已取消的节点从队列中剔除，直到找不到已取消节点</span><br>    <span class="hljs-comment">// unpark可能已被重新链接为下一个合格的acquirer的节点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cleanQueue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (;;) &#123;                               <span class="hljs-comment">// restart point </span><br>            <span class="hljs-comment">// q为要检查的node，p为q的前驱节点，s为q的后继节点</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> tail, s = <span class="hljs-literal">null</span>, p, n;;) &#123; <span class="hljs-comment">// (p, q, s) triples</span><br>                <span class="hljs-keyword">if</span> (q == <span class="hljs-literal">null</span> || (p = q.prev) == <span class="hljs-literal">null</span>)<br>                    <span class="hljs-keyword">return</span>;                      <span class="hljs-comment">// end of list</span><br>                <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span> ? tail != q : (s.prev != q || s.status &lt; <span class="hljs-number">0</span>))<br>                    <span class="hljs-keyword">break</span>;                       <span class="hljs-comment">// inconsistent</span><br>                <span class="hljs-keyword">if</span> (q.status &lt; <span class="hljs-number">0</span>) &#123;              <span class="hljs-comment">// cancelled</span><br>                    <span class="hljs-keyword">if</span> ((s == <span class="hljs-literal">null</span> ? casTail(q, p) : s.casPrev(q, p)) &amp;&amp;<br>                        q.prev == p) &#123;<br>                        p.casNext(q, s);         <span class="hljs-comment">// OK if fails</span><br>                        <span class="hljs-keyword">if</span> (p.prev == <span class="hljs-literal">null</span>)<br>                            signalNext(p);<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-comment">// 下面的代码应该是考虑到了并发，对应上面的</span><br>                <span class="hljs-comment">// p.casNext(q, s); 还未开始</span><br>                <span class="hljs-keyword">if</span> ((n = p.next) != q) &#123;         <span class="hljs-comment">// help finish</span><br>                    <span class="hljs-keyword">if</span> (n != <span class="hljs-literal">null</span> &amp;&amp; q.prev == p) &#123;<br>                        p.casNext(n, q);<br>                        <span class="hljs-keyword">if</span> (p.prev == <span class="hljs-literal">null</span>)<br>                            signalNext(p);<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                s = q;<br>                q = q.prev;<br>            &#125;<br>        &#125;<br>    &#125; <br><br>    <span class="hljs-comment">// interrupted：如果线程中断，则为true</span><br>    <span class="hljs-comment">// interruptible：是否应该报告中断和复位</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">cancelAcquire</span><span class="hljs-params">(Node node, <span class="hljs-type">boolean</span> interrupted,</span><br><span class="hljs-params">                              <span class="hljs-type">boolean</span> interruptible)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node != <span class="hljs-literal">null</span>) &#123;<br>            node.waiter = <span class="hljs-literal">null</span>;<br>            node.status = CANCELLED;<br>            <span class="hljs-keyword">if</span> (node.prev != <span class="hljs-literal">null</span>)<br>                cleanQueue();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (interrupted) &#123;<br>            <span class="hljs-keyword">if</span> (interruptible)<br>                <span class="hljs-keyword">return</span> CANCELLED;<br>            <span class="hljs-keyword">else</span><br>                Thread.currentThread().interrupt();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125; <br><br>    <span class="hljs-comment">// 试图以独占模式获取。此方法应该查询对象的状态是否允许以独占模式获取它，如果允许，就获取它。</span><br>    <span class="hljs-comment">// 该方法总是由执行acquire的线程调用。</span><br>    <span class="hljs-comment">// 如果这个方法报错，如果线程还没有排队，那么acquire方法可以将线程排队</span><br>    <span class="hljs-comment">// 直到它被某个其他线程的释放唤醒</span><br>    <span class="hljs-comment">// 这可用于实现方法Lock.tryLock()。</span><br>    <span class="hljs-comment">// arg：获取参数。该值始终是传递给acquire方法的值，</span><br>    <span class="hljs-comment">// 或者是在进入条件等待时保存的值。该值不需要解释，可以表示您喜欢的任何内容。</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>    &#125; <br><br>    <span class="hljs-comment">// 尝试设置状态以反映独占模式下的释放。</span><br>    <span class="hljs-comment">// 该方法总是由执行释放的线程调用</span><br>    <span class="hljs-comment">// 返回值：如果此对象现在处于完全释放状态，则为true，以便任何等待的线程都可以尝试获取；否则为false。</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>    &#125; <br><br>    <span class="hljs-comment">// 尝试在共享模式下获取。此方法应该查询对象的状态是否允许在共享模式下获取它，如果允许，就获取它。</span><br>    <span class="hljs-comment">// 该方法总是由执行acquire的线程调用。</span><br>    <span class="hljs-comment">// 如果这个方法报告失败，如果线程还没有排队，那么acquire方法可以将线程排队，</span><br>    <span class="hljs-comment">// 直到它被某个其他线程的释放唤醒。</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>    &#125; <br><br>    <span class="hljs-comment">// 返回值：如果共享模式的这一释放可以允许等待的获取(共享或独占)成功，则为true否则为false</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>    &#125; <br><br>    <span class="hljs-comment">// 如果同步是相对于当前(调用)线程独占保持的，则返回true。</span><br>    <span class="hljs-comment">// 每次调用AbstractQueuedSynchronizer时都会调用此方法。条件对象方法。</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHeldExclusively</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>();<br>    &#125; <br><br>    <span class="hljs-comment">// 在独占模式下acquire，忽略中断。</span><br>    <span class="hljs-comment">// 通过至少调用一次tryAcquire来实现，成功时返回。</span><br>    <span class="hljs-comment">// 否则线程被排队，可能重复阻塞和解除阻塞，调用tryAcquire直到成功。</span><br>    <span class="hljs-comment">// 此方法可用于实现方法Lock.lock。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquire</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!tryAcquire(arg))<br>            acquire(<span class="hljs-literal">null</span>, arg, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">0L</span>);<br>    &#125; <br><br>    <span class="hljs-comment">// 在独占模式下acquire，如果被中断则中止。</span><br>    <span class="hljs-comment">// 首先检查中断状态，然后至少调用一次tryAcquire，成功后返回。</span><br>    <span class="hljs-comment">// 否则线程被排队，可能重复阻塞和解除阻塞，调用tryAcquire直到成功或线程被中断。</span><br>    <span class="hljs-comment">// 此方法可用于实现方法 Lock.lockInterruptibly。 </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquireInterruptibly</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span><br>        <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">if</span> (Thread.interrupted() ||<br>            (!tryAcquire(arg) &amp;&amp; acquire(<span class="hljs-literal">null</span>, arg, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">0L</span>) &lt; <span class="hljs-number">0</span>))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>    &#125; <br><br>    <span class="hljs-comment">// 尝试以独占模式acquire，如果被中断则中止，如果超时则失败。</span><br>    <span class="hljs-comment">// 首先检查中断状态，然后至少调用一次tryAcquire，成功后返回。</span><br>    <span class="hljs-comment">// 否则，线程被排队，可能重复阻塞和解除阻塞，调用tryAcquire，直到成功或线程被中断或超时。</span><br>    <span class="hljs-comment">// 此方法可用于实现方法Lock.tryLock(long，TimeUnit)。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquireNanos</span><span class="hljs-params">(<span class="hljs-type">int</span> arg, <span class="hljs-type">long</span> nanosTimeout)</span><br>        <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">if</span> (!Thread.interrupted()) &#123;<br>            <span class="hljs-keyword">if</span> (tryAcquire(arg))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (nanosTimeout &lt;= <span class="hljs-number">0L</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">stat</span> <span class="hljs-operator">=</span> acquire(<span class="hljs-literal">null</span>, arg, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>,<br>                               System.nanoTime() + nanosTimeout);<br>            <span class="hljs-keyword">if</span> (stat &gt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (stat == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>    &#125; <br><br>    <span class="hljs-comment">// 以独占模式释放。</span><br>    <span class="hljs-comment">// 如果tryRelease返回true，则通过解除一个或多个线程的阻塞来实现。</span><br>    <span class="hljs-comment">// 此方法可用于实现方法Lock.unlock。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">release</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>        <span class="hljs-keyword">if</span> (tryRelease(arg)) &#123;<br>            signalNext(head);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <br><br>    <span class="hljs-comment">// 在share mode时acquire</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>        <span class="hljs-keyword">if</span> (tryAcquireShared(arg) &lt; <span class="hljs-number">0</span>)<br>            acquire(<span class="hljs-literal">null</span>, arg, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">0L</span>);<br>    &#125; <br><br>    <span class="hljs-comment">// 在share mode时 acquireInterruptibly</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquireSharedInterruptibly</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span><br>        <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">if</span> (Thread.interrupted() ||<br>            (tryAcquireShared(arg) &lt; <span class="hljs-number">0</span> &amp;&amp;<br>             acquire(<span class="hljs-literal">null</span>, arg, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">0L</span>) &lt; <span class="hljs-number">0</span>))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>    &#125; <br><br>    <span class="hljs-comment">// 在share mode时 tryAcquireNanos</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquireSharedNanos</span><span class="hljs-params">(<span class="hljs-type">int</span> arg, <span class="hljs-type">long</span> nanosTimeout)</span><br>            <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">if</span> (!Thread.interrupted()) &#123;<br>            <span class="hljs-keyword">if</span> (tryAcquireShared(arg) &gt;= <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (nanosTimeout &lt;= <span class="hljs-number">0L</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">stat</span> <span class="hljs-operator">=</span> acquire(<span class="hljs-literal">null</span>, arg, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>,<br>                               System.nanoTime() + nanosTimeout);<br>            <span class="hljs-keyword">if</span> (stat &gt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (stat == <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>    &#125; <br><br>    <span class="hljs-comment">// 在share mode时 release</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">releaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> &#123;<br>        <span class="hljs-keyword">if</span> (tryReleaseShared(arg)) &#123;<br>            signalNext(head);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <br><br>    <span class="hljs-comment">// 队列检查方法</span><br><br>    <span class="hljs-comment">// 查询是否有任何线程正在等待获取。</span><br>    <span class="hljs-comment">// 请注意，由于中断和超时导致的取消可能随时发生，所以返回true并不保证任何其他线程acquire成功。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasQueuedThreads</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> tail, h = head; p != h &amp;&amp; p != <span class="hljs-literal">null</span>; p = p.prev)<br>            <span class="hljs-keyword">if</span> (p.status &gt;= <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 查询是否有任何线程曾经竞争获取此同步器；</span><br>    <span class="hljs-comment">// 也就是说，是否有一个acquire方法曾经被阻塞。</span><br>    <span class="hljs-comment">// 在这个实现中，这个操作在常数时间内返回。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasContended</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> head != <span class="hljs-literal">null</span>;<br>    &#125; <br><br>    <span class="hljs-comment">// 返回队列中第一个(等待时间最长的)线程，如果当前没有线程排队，则返回null。</span><br>    <span class="hljs-comment">// 在该实现中，该操作通常在恒定时间内返回，但是如果其他线程同时修改队列，则可能在竞争时重复。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Thread <span class="hljs-title function_">getFirstQueuedThread</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>, w; Node h, s;<br>        <span class="hljs-keyword">if</span> ((h = head) != <span class="hljs-literal">null</span> &amp;&amp; ((s = h.next) == <span class="hljs-literal">null</span> ||<br>                                   (first = s.waiter) == <span class="hljs-literal">null</span> ||<br>                                   s.prev == <span class="hljs-literal">null</span>)) &#123;<br>            <span class="hljs-comment">// traverse from tail on stale reads </span><br>            <span class="hljs-comment">// q存储p的前驱节点</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> tail, q; p != <span class="hljs-literal">null</span> &amp;&amp; (q = p.prev) != <span class="hljs-literal">null</span>; p = q)<br>                <span class="hljs-keyword">if</span> ((w = p.waiter) != <span class="hljs-literal">null</span>)<br>                    first = w;<br>        &#125;<br>        <span class="hljs-keyword">return</span> first;<br>    &#125; <br><br>    <span class="hljs-comment">// 如果给定线程当前正在排队，则返回true。</span><br>    <span class="hljs-comment">// 该实现遍历队列以确定给定线程的存在。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isQueued</span><span class="hljs-params">(Thread thread)</span> &#123;<br>        <span class="hljs-keyword">if</span> (thread == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> tail; p != <span class="hljs-literal">null</span>; p = p.prev)<br>            <span class="hljs-keyword">if</span> (p.waiter == thread)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <br><br>    <span class="hljs-comment">// 如果明面上的第一个排队线程(如果存在)正在以独占模式等待，则返回true。</span><br>    <span class="hljs-comment">// 如果此方法返回true，并且当前线程正在尝试以共享模式获取(即，此方法是从tryAcquireShared调用的)，</span><br>    <span class="hljs-comment">// 则可以保证当前线程不是第一个排队的线程。在ReentrantReadWriteLock中仅用作启发式方法。</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">apparentlyFirstQueuedIsExclusive</span><span class="hljs-params">()</span> &#123;<br>        Node h, s;<br>        <span class="hljs-keyword">return</span> (h = head) != <span class="hljs-literal">null</span> &amp;&amp; (s = h.next)  != <span class="hljs-literal">null</span> &amp;&amp;<br>            !(s <span class="hljs-keyword">instanceof</span> SharedNode) &amp;&amp; s.waiter != <span class="hljs-literal">null</span>;<br>    &#125; <br><br>    <span class="hljs-comment">// 查询是否有任何线程等待获取的时间比当前线程长。</span><br>    <span class="hljs-comment">// 此方法的调用等效于(但可能更有效):</span><br>    <span class="hljs-comment">// getFirstQueuedThread() != Thread.currentThread() &amp;&amp; hasQueuedThreads()</span><br>    <span class="hljs-comment">// 请注意，由于中断和超时导致的取消可能会在任何时候发生，</span><br>    <span class="hljs-comment">// 所以真正的返回并不保证其他线程会在当前线程之前获取。</span><br>    <span class="hljs-comment">// 同样，由于队列为空，在此方法返回false后，另一个赢得竞争的线程也可能排队。</span><br>    <span class="hljs-comment">// 该方法被设计为由公平同步器使用以避免冲突。</span><br>    <span class="hljs-comment">// 这样一个同步器的tryAcquire方法应该返回false，</span><br>    <span class="hljs-comment">// 它的tryAcquireShared方法应该返回负值，如果这个方法返回true的话(除非这是一个可重入的Acquire)。</span><br>    <span class="hljs-comment">// 例如，公平、可重入、独占模式同步器的tryAcquire方法可能如下所示</span><br>    <span class="hljs-comment">// protected boolean tryAcquire(int arg) &#123;</span><br>    <span class="hljs-comment">//   if (isHeldExclusively()) &#123;</span><br>    <span class="hljs-comment">//     // A reentrant acquire; increment hold count</span><br>    <span class="hljs-comment">//     return true;</span><br>    <span class="hljs-comment">//   &#125; else if (hasQueuedPredecessors()) &#123;</span><br>    <span class="hljs-comment">//     return false;</span><br>    <span class="hljs-comment">//   &#125; else &#123;</span><br>    <span class="hljs-comment">//     // try to acquire normally</span><br>    <span class="hljs-comment">//   &#125;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasQueuedPredecessors</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>; Node h, s;<br>        <span class="hljs-keyword">if</span> ((h = head) != <span class="hljs-literal">null</span> &amp;&amp; ((s = h.next) == <span class="hljs-literal">null</span> ||<br>                                   (first = s.waiter) == <span class="hljs-literal">null</span> ||<br>                                   s.prev == <span class="hljs-literal">null</span>)) <br>            <span class="hljs-comment">// 这里的判断在 getFirstQueuedThread 已经有了，我觉得可以去掉</span><br>            first = getFirstQueuedThread(); <span class="hljs-comment">// retry via getFirstQueuedThread</span><br>        <span class="hljs-keyword">return</span> first != <span class="hljs-literal">null</span> &amp;&amp; first != Thread.currentThread();<br>    &#125; <br><br>    <span class="hljs-comment">// 检测和监控方法</span><br><br>    <span class="hljs-comment">// 返回等待获取的线程数的估计值。</span><br>    <span class="hljs-comment">// 该值只是一个估计值，因为在此方法遍历内部数据结构时，线程的数量可能会动态变化。</span><br>    <span class="hljs-comment">// 此方法设计用于监视系统状态，而不是用于同步控制。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getQueueLength</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> tail; p != <span class="hljs-literal">null</span>; p = p.prev) &#123;<br>            <span class="hljs-keyword">if</span> (p.waiter != <span class="hljs-literal">null</span>)<br>                ++n;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125; <br><br>    <span class="hljs-comment">// 返回包含可能正在等待获取的线程的集合。</span><br>    <span class="hljs-comment">// 因为实际的线程集在构造这个结果时可能会动态变化，</span><br>    <span class="hljs-comment">// 所以返回的集合只是一个最佳估计。</span><br>    <span class="hljs-comment">// 返回集合的元素没有特定的顺序。</span><br>    <span class="hljs-comment">// 该方法旨在促进子类的构建，从而提供更广泛的监控功能。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Collection&lt;Thread&gt; <span class="hljs-title function_">getQueuedThreads</span><span class="hljs-params">()</span> &#123;<br>        ArrayList&lt;Thread&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> tail; p != <span class="hljs-literal">null</span>; p = p.prev) &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> p.waiter;<br>            <span class="hljs-keyword">if</span> (t != <span class="hljs-literal">null</span>)<br>                list.add(t);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125; <br><br>    <span class="hljs-comment">// 返回包含可能正在等待以独占模式acquire的线程的集合。</span><br>    <span class="hljs-comment">// 这与getQueuedThreads具有相同的属性，</span><br>    <span class="hljs-comment">// 只是它只返回那些由于独占获取而等待的线程。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Collection&lt;Thread&gt; <span class="hljs-title function_">getExclusiveQueuedThreads</span><span class="hljs-params">()</span> &#123;<br>        ArrayList&lt;Thread&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> tail; p != <span class="hljs-literal">null</span>; p = p.prev) &#123;<br>            <span class="hljs-keyword">if</span> (!(p <span class="hljs-keyword">instanceof</span> SharedNode)) &#123;<br>                <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> p.waiter;<br>                <span class="hljs-keyword">if</span> (t != <span class="hljs-literal">null</span>)<br>                    list.add(t);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125; <br><br>    <span class="hljs-comment">// 返回包含可能正在等待以共享模式acquire的线程的集合。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Collection&lt;Thread&gt; <span class="hljs-title function_">getSharedQueuedThreads</span><span class="hljs-params">()</span> &#123;<br>        ArrayList&lt;Thread&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> tail; p != <span class="hljs-literal">null</span>; p = p.prev) &#123;<br>            <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> SharedNode) &#123;<br>                <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> p.waiter;<br>                <span class="hljs-keyword">if</span> (t != <span class="hljs-literal">null</span>)<br>                    list.add(t);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125; <br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.toString()<br>            + <span class="hljs-string">&quot;[State = &quot;</span> + getState() + <span class="hljs-string">&quot;, &quot;</span><br>            + (hasQueuedThreads() ? <span class="hljs-string">&quot;non&quot;</span> : <span class="hljs-string">&quot;&quot;</span>) + <span class="hljs-string">&quot;empty queue]&quot;</span>;<br>    &#125; <br><br>    <span class="hljs-comment">// conditions的检测方法</span><br><br>    <span class="hljs-comment">// 查询给定的ConditionObject是否使用此同步器作为其锁。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">owns</span><span class="hljs-params">(ConditionObject condition)</span> &#123;<br>        <span class="hljs-keyword">return</span> condition.isOwnedBy(<span class="hljs-built_in">this</span>);<br>    &#125; <br><br>    <span class="hljs-comment">// 查询是否有任何线程正在等待与此同步器关联的给定条件。</span><br>    <span class="hljs-comment">// 请注意，因为超时和中断可能随时发生，所以真正的返回并不保证将来的信号会唤醒任何线程。</span><br>    <span class="hljs-comment">// 这方法主要用于监控系统状态。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasWaiters</span><span class="hljs-params">(ConditionObject condition)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!owns(condition))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Not owner&quot;</span>);<br>        <span class="hljs-keyword">return</span> condition.hasWaiters();<br>    &#125;  <br><br>    <span class="hljs-comment">// 返回在与此同步器相关的给定条件下等待的线程数的估计值。</span><br>    <span class="hljs-comment">// 请注意，因为超时和中断可能随时发生，所以估计值只是实际等待者数量的上限。</span><br>    <span class="hljs-comment">// 此方法被设计用于监视系统状态，而不是用于同步控制。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getWaitQueueLength</span><span class="hljs-params">(ConditionObject condition)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!owns(condition))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Not owner&quot;</span>);<br>        <span class="hljs-keyword">return</span> condition.getWaitQueueLength();<br>    &#125;<br><br>    <span class="hljs-comment">// 返回一个集合，该集合包含可能正在等待与此同步器关联的给定条件的那些线程。</span><br>    <span class="hljs-comment">// 因为实际的线程集在构造这个结果时可能会动态变化，</span><br>    <span class="hljs-comment">// 所以返回的集合只是一个最佳估计。返回集合的元素没有特定的顺序。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Collection&lt;Thread&gt; <span class="hljs-title function_">getWaitingThreads</span><span class="hljs-params">(ConditionObject condition)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!owns(condition))<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Not owner&quot;</span>);<br>        <span class="hljs-keyword">return</span> condition.getWaitingThreads();<br>    &#125; <br><br>    <span class="hljs-comment">// AbstractQueuedSynchronizer的条件实现，作为锁实现的基础。</span><br>    <span class="hljs-comment">// 这个类的方法文档描述的是机制，而不是从锁和条件用户的角度来看的行为规范。</span><br>    <span class="hljs-comment">// 该类的导出版本通常需要附带描述依赖于相关AbstractQueuedSynchronizer的条件语义的文档。</span><br>    <span class="hljs-comment">// 该类是可序列化的，但所有字段都是transient 的，因此反序列化的condition没有等待者。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConditionObject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Condition</span>, java.io.Serializable &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1173984872572414699L</span>;<br>         <span class="hljs-comment">/** First node of condition queue. */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> ConditionNode firstWaiter;<br>        <span class="hljs-comment">/** Last node of condition queue. */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> ConditionNode lastWaiter; <br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Creates a new &#123;<span class="hljs-doctag">@code</span> ConditionObject&#125; instance.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConditionObject</span><span class="hljs-params">()</span> &#123; &#125; <br><br>        <span class="hljs-comment">// Signalling methods </span><br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * Removes and transfers one or all waiters to sync queue. </span><br><span class="hljs-comment">         * 移除一个或所有等待者并将其转移到同步队列</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSignal</span><span class="hljs-params">(ConditionNode first, <span class="hljs-type">boolean</span> all)</span> &#123;<br>            <span class="hljs-keyword">while</span> (first != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">ConditionNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> first.nextWaiter;<br>                <span class="hljs-keyword">if</span> ((firstWaiter = next) == <span class="hljs-literal">null</span>)<br>                    lastWaiter = <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">if</span> ((first.getAndUnsetStatus(COND) &amp; COND) != <span class="hljs-number">0</span>) &#123;<br>                    enqueue(first);<br>                    <span class="hljs-keyword">if</span> (!all)<br>                        <span class="hljs-keyword">break</span>;<br>                &#125;<br>                first = next;<br>            &#125;<br>        &#125; <br><br>        <span class="hljs-comment">// 将等待时间最长的线程(如果存在)从该条件的等待队列移至拥有锁的等待队列</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">signal</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">ConditionNode</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> firstWaiter;<br>            <span class="hljs-keyword">if</span> (!isHeldExclusively())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>            <span class="hljs-keyword">if</span> (first != <span class="hljs-literal">null</span>)<br>                doSignal(first, <span class="hljs-literal">false</span>);<br>        &#125; <br><br>        <span class="hljs-comment">// 将所有线程从该条件的等待队列移至所属锁的等待队列。</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">signalAll</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">ConditionNode</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> firstWaiter;<br>            <span class="hljs-keyword">if</span> (!isHeldExclusively())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>            <span class="hljs-keyword">if</span> (first != <span class="hljs-literal">null</span>)<br>                doSignal(first, <span class="hljs-literal">true</span>);<br>        &#125; <br><br>        <span class="hljs-comment">// 等待 方法</span><br><br>        <span class="hljs-comment">// 添加一个节点到条件列表并释放锁</span><br>        <span class="hljs-comment">// 持有锁才能await（在等待之后重新acquire savedState）</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">enableWait</span><span class="hljs-params">(ConditionNode node)</span> &#123;<br>            <span class="hljs-keyword">if</span> (isHeldExclusively()) &#123;<br>                node.waiter = Thread.currentThread();<br>                node.setStatusRelaxed(COND | WAITING);<br>                <span class="hljs-type">ConditionNode</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> lastWaiter;<br>                <span class="hljs-keyword">if</span> (last == <span class="hljs-literal">null</span>)<br>                    firstWaiter = node;<br>                <span class="hljs-keyword">else</span><br>                    last.nextWaiter = node;<br>                lastWaiter = node;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">savedState</span> <span class="hljs-operator">=</span> getState();<br>                <span class="hljs-keyword">if</span> (release(savedState))<br>                    <span class="hljs-keyword">return</span> savedState;<br>            &#125;<br>            node.status = CANCELLED; <span class="hljs-comment">// lock not held or inconsistent</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>        &#125; <br><br>        <span class="hljs-comment">// 如果最初放在条件队列中的节点现在准备好重新获取同步队列，则返回true。</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canReacquire</span><span class="hljs-params">(ConditionNode node)</span> &#123;<br>            <span class="hljs-comment">// check links, not status to avoid enqueue race</span><br>            Node p; <span class="hljs-comment">// traverse unless known to be bidirectionally linked</span><br>            <span class="hljs-keyword">return</span> node != <span class="hljs-literal">null</span> &amp;&amp; (p = node.prev) != <span class="hljs-literal">null</span> &amp;&amp;<br>                (p.next == node || isEnqueued(node));<br>        &#125; <br><br>        <span class="hljs-comment">// 从条件队列中取消给定节点和其他非等待节点的链接，除非已经取消链接。</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlinkCancelledWaiters</span><span class="hljs-params">(ConditionNode node)</span> &#123;<br>            <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span> || node.nextWaiter != <span class="hljs-literal">null</span> || node == lastWaiter) &#123;<br>                <span class="hljs-comment">// trail 保存w的前驱</span><br>                <span class="hljs-type">ConditionNode</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> firstWaiter, trail = <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">while</span> (w != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-type">ConditionNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> w.nextWaiter;<br>                    <span class="hljs-keyword">if</span> ((w.status &amp; COND) == <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-comment">// 将w从队列中清除</span><br>                        w.nextWaiter = <span class="hljs-literal">null</span>;<br>                        <span class="hljs-keyword">if</span> (trail == <span class="hljs-literal">null</span>)<br>                            firstWaiter = next;<br>                        <span class="hljs-keyword">else</span><br>                            trail.nextWaiter = next;<br>                        <span class="hljs-comment">// w未队列中最后一个节点</span><br>                        <span class="hljs-keyword">if</span> (next == <span class="hljs-literal">null</span>)<br>                            lastWaiter = trail;<br>                    &#125; <span class="hljs-keyword">else</span><br>                        trail = w;<br>                    w = next;<br>                &#125;<br>            &#125;<br>        &#125; <br><br>        <span class="hljs-comment">// 实现非打断条件等待</span><br>        <span class="hljs-comment">// 1.保存getState返回的锁定状态。</span><br>        <span class="hljs-comment">// 2.以保存的状态作为参数调用release，如果失败则抛出 IllegalMonitorStateException</span><br>        <span class="hljs-comment">// 3.阻塞，直到被唤醒</span><br>        <span class="hljs-comment">// 4.通过调用acquire的专用版本重新获取，并将保存的状态作为参数。</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">awaitUninterruptibly</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-type">ConditionNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionNode</span>();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">savedState</span> <span class="hljs-operator">=</span> enableWait(node);<br>            LockSupport.setCurrentBlocker(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// for back-compatibility</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">interrupted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>, rejected = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">while</span> (!canReacquire(node)) &#123;<br>                <span class="hljs-keyword">if</span> (Thread.interrupted())<br>                    interrupted = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((node.status &amp; COND) != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">if</span> (rejected)<br>                            node.block();<br>                        <span class="hljs-keyword">else</span><br>                            ForkJoinPool.managedBlock(node);<br>                    &#125; <span class="hljs-keyword">catch</span> (RejectedExecutionException ex) &#123;<br>                        rejected = <span class="hljs-literal">true</span>;<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException ie) &#123;<br>                        interrupted = <span class="hljs-literal">true</span>;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span><br>                    Thread.onSpinWait();    <span class="hljs-comment">// awoke while enqueuing</span><br>            &#125;<br>            LockSupport.setCurrentBlocker(<span class="hljs-literal">null</span>);<br>            node.clearStatus();<br>            acquire(node, savedState, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">0L</span>);<br>            <span class="hljs-keyword">if</span> (interrupted)<br>                Thread.currentThread().interrupt();<br>        &#125; <br><br>        <span class="hljs-comment">// 实现可中断条件等待。</span><br>        <span class="hljs-comment">// 1.如果当前线程被中断，抛出InterruptedException。</span><br>        <span class="hljs-comment">// 2.保存getState返回的锁定状态。</span><br>        <span class="hljs-comment">// 3.以保存的状态作为参数调用release，如果失败则抛出IllegalMonitorStateException。</span><br>        <span class="hljs-comment">// 4.阻塞，直到被唤醒或被中断。</span><br>        <span class="hljs-comment">// 5.通过调用acquire的专用版本重新获取，并将保存的状态作为参数。</span><br>        <span class="hljs-comment">// 6.如果在步骤4中被阻塞而中断，抛出InterruptedException</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">await</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            <span class="hljs-keyword">if</span> (Thread.interrupted())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>            <span class="hljs-type">ConditionNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionNode</span>();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">savedState</span> <span class="hljs-operator">=</span> enableWait(node);<br>            LockSupport.setCurrentBlocker(<span class="hljs-built_in">this</span>); <span class="hljs-comment">// for back-compatibility</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">interrupted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>, cancelled = <span class="hljs-literal">false</span>, rejected = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">while</span> (!canReacquire(node)) &#123;<br>                <span class="hljs-keyword">if</span> (interrupted |= Thread.interrupted()) &#123;<br>                    <span class="hljs-keyword">if</span> (cancelled = (node.getAndUnsetStatus(COND) &amp; COND) != <span class="hljs-number">0</span>)<br>                        <span class="hljs-keyword">break</span>;              <span class="hljs-comment">// else interrupted after signal</span><br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((node.status &amp; COND) != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">if</span> (rejected)<br>                            node.block();<br>                        <span class="hljs-keyword">else</span><br>                            ForkJoinPool.managedBlock(node);<br>                    &#125; <span class="hljs-keyword">catch</span> (RejectedExecutionException ex) &#123;<br>                        rejected = <span class="hljs-literal">true</span>;<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException ie) &#123;<br>                        interrupted = <span class="hljs-literal">true</span>;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span><br>                    Thread.onSpinWait();    <span class="hljs-comment">// awoke while enqueuing</span><br>            &#125;<br>            LockSupport.setCurrentBlocker(<span class="hljs-literal">null</span>);<br>            node.clearStatus();<br>            acquire(node, savedState, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">0L</span>);<br>            <span class="hljs-keyword">if</span> (interrupted) &#123;<br>                <span class="hljs-keyword">if</span> (cancelled) &#123;<br>                    unlinkCancelledWaiters(node);<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>                &#125;<br>                Thread.currentThread().interrupt();<br>            &#125;<br>        &#125; <br><br>        <span class="hljs-comment">// 带超时的await</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-title function_">awaitNanos</span><span class="hljs-params">(<span class="hljs-type">long</span> nanosTimeout)</span><br>                <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            <span class="hljs-keyword">if</span> (Thread.interrupted())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>            <span class="hljs-type">ConditionNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionNode</span>();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">savedState</span> <span class="hljs-operator">=</span> enableWait(node);<br>            <span class="hljs-type">long</span> <span class="hljs-variable">nanos</span> <span class="hljs-operator">=</span> (nanosTimeout &lt; <span class="hljs-number">0L</span>) ? <span class="hljs-number">0L</span> : nanosTimeout;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">deadline</span> <span class="hljs-operator">=</span> System.nanoTime() + nanos;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">cancelled</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>, interrupted = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">while</span> (!canReacquire(node)) &#123;<br>                <span class="hljs-keyword">if</span> ((interrupted |= Thread.interrupted()) ||<br>                    (nanos = deadline - System.nanoTime()) &lt;= <span class="hljs-number">0L</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (cancelled = (node.getAndUnsetStatus(COND) &amp; COND) != <span class="hljs-number">0</span>)<br>                        <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span><br>                    LockSupport.parkNanos(<span class="hljs-built_in">this</span>, nanos);<br>            &#125;<br>            node.clearStatus();<br>            acquire(node, savedState, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">0L</span>);<br>            <span class="hljs-keyword">if</span> (cancelled) &#123;<br>                unlinkCancelledWaiters(node);<br>                <span class="hljs-keyword">if</span> (interrupted)<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (interrupted)<br>                Thread.currentThread().interrupt();<br>            <span class="hljs-type">long</span> <span class="hljs-variable">remaining</span> <span class="hljs-operator">=</span> deadline - System.nanoTime(); <span class="hljs-comment">// avoid overflow</span><br>            <span class="hljs-keyword">return</span> (remaining &lt;= nanosTimeout) ? remaining : Long.MIN_VALUE;<br>        &#125; <br><br>        <span class="hljs-comment">// 绝对定时的条件等待</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">awaitUntil</span><span class="hljs-params">(Date deadline)</span><br>                <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">abstime</span> <span class="hljs-operator">=</span> deadline.getTime();<br>            <span class="hljs-keyword">if</span> (Thread.interrupted())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>            <span class="hljs-type">ConditionNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionNode</span>();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">savedState</span> <span class="hljs-operator">=</span> enableWait(node);<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">cancelled</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>, interrupted = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">while</span> (!canReacquire(node)) &#123;<br>                <span class="hljs-keyword">if</span> ((interrupted |= Thread.interrupted()) ||<br>                    System.currentTimeMillis() &gt;= abstime) &#123;<br>                    <span class="hljs-keyword">if</span> (cancelled = (node.getAndUnsetStatus(COND) &amp; COND) != <span class="hljs-number">0</span>)<br>                        <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span><br>                    LockSupport.parkUntil(<span class="hljs-built_in">this</span>, abstime);<br>            &#125;<br>            node.clearStatus();<br>            acquire(node, savedState, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">0L</span>);<br>            <span class="hljs-keyword">if</span> (cancelled) &#123;<br>                unlinkCancelledWaiters(node);<br>                <span class="hljs-keyword">if</span> (interrupted)<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (interrupted)<br>                Thread.currentThread().interrupt();<br>            <span class="hljs-keyword">return</span> !cancelled;<br>        &#125; <br><br>        <span class="hljs-comment">// 自定义时间格式的await</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">await</span><span class="hljs-params">(<span class="hljs-type">long</span> time, TimeUnit unit)</span><br>                <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">nanosTimeout</span> <span class="hljs-operator">=</span> unit.toNanos(time);<br>            <span class="hljs-keyword">if</span> (Thread.interrupted())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>            <span class="hljs-type">ConditionNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConditionNode</span>();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">savedState</span> <span class="hljs-operator">=</span> enableWait(node);<br>            <span class="hljs-type">long</span> <span class="hljs-variable">nanos</span> <span class="hljs-operator">=</span> (nanosTimeout &lt; <span class="hljs-number">0L</span>) ? <span class="hljs-number">0L</span> : nanosTimeout;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">deadline</span> <span class="hljs-operator">=</span> System.nanoTime() + nanos;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">cancelled</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>, interrupted = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">while</span> (!canReacquire(node)) &#123;<br>                <span class="hljs-keyword">if</span> ((interrupted |= Thread.interrupted()) ||<br>                    (nanos = deadline - System.nanoTime()) &lt;= <span class="hljs-number">0L</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (cancelled = (node.getAndUnsetStatus(COND) &amp; COND) != <span class="hljs-number">0</span>)<br>                        <span class="hljs-keyword">break</span>;<br>                &#125; <span class="hljs-keyword">else</span><br>                    LockSupport.parkNanos(<span class="hljs-built_in">this</span>, nanos);<br>            &#125;<br>            node.clearStatus();<br>            acquire(node, savedState, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">0L</span>);<br>            <span class="hljs-keyword">if</span> (cancelled) &#123;<br>                unlinkCancelledWaiters(node);<br>                <span class="hljs-keyword">if</span> (interrupted)<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterruptedException</span>();<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (interrupted)<br>                Thread.currentThread().interrupt();<br>            <span class="hljs-keyword">return</span> !cancelled;<br>        &#125; <br><br>        <span class="hljs-comment">// 可观察性支持</span><br><br>        <span class="hljs-comment">// 如果此条件是由给定的同步对象创建的，则返回true。</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isOwnedBy</span><span class="hljs-params">(AbstractQueuedSynchronizer sync)</span> &#123;<br>            <span class="hljs-keyword">return</span> sync == AbstractQueuedSynchronizer.<span class="hljs-built_in">this</span>;<br>        &#125; <br><br>        <span class="hljs-comment">// 查询是否有任何线程正在等待该条件</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasWaiters</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (!isHeldExclusively())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">ConditionNode</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> firstWaiter; w != <span class="hljs-literal">null</span>; w = w.nextWaiter) &#123;<br>                <span class="hljs-keyword">if</span> ((w.status &amp; COND) != <span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <br><br>        <span class="hljs-comment">// 返回在这个condition下等待的线程数的估计值</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getWaitQueueLength</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (!isHeldExclusively())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">ConditionNode</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> firstWaiter; w != <span class="hljs-literal">null</span>; w = w.nextWaiter) &#123;<br>                <span class="hljs-keyword">if</span> ((w.status &amp; COND) != <span class="hljs-number">0</span>)<br>                    ++n;<br>            &#125;<br>            <span class="hljs-keyword">return</span> n;<br>        &#125; <br><br>        <span class="hljs-comment">// 返回一个集合，其中包含可能正在等待此条件的那些线程。</span><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Collection&lt;Thread&gt; <span class="hljs-title function_">getWaitingThreads</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">if</span> (!isHeldExclusively())<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();<br>            ArrayList&lt;Thread&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">ConditionNode</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> firstWaiter; w != <span class="hljs-literal">null</span>; w = w.nextWaiter) &#123;<br>                <span class="hljs-keyword">if</span> ((w.status &amp; COND) != <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> w.waiter;<br>                    <span class="hljs-keyword">if</span> (t != <span class="hljs-literal">null</span>)<br>                        list.add(t);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> list;<br>        &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><code>acquire(Node node, int arg, boolean shared, boolean interruptible, boolean timed, long time)</code>：node对应的线程获取锁，即排他地修改AbstractQueuedSynchronizer 的状态（state）。只有CLH队列中的第一个节点或者还未入队的节点有竞争锁的资格，否则在队列中阻塞</p><p><code>tryAcquire(int arg) 和 tryRelease(int arg)</code> 本质上都是修改AbstractQueuedSynchronizer 的状态</p><p><code>acquire(int arg)</code>：在上面的acquire之前先 tryAcquire 一次</p><p><code>release(int arg)</code>：tryRelease 成功后唤醒队列中阻塞的节点</p><p><code>await()</code>：一直阻塞，直到其他线程调用signal或signalAll后对应的节点进入CLH队列，最后执行acquire逻辑获取锁（还要和其他节点竞争，哭）。</p><blockquote><p>注意：</p><ol><li><p>await时会先判断当前线程是否持有锁，emmm，这很符合逻辑</p></li><li><p>其他await方法逻辑类似</p></li></ol></blockquote><p><code>signal() 和 signalAll()</code>：将第一个（所有）符合条件的ConditionNode插入到CLH队列尾部</p><p>根据上面的分析知继承了AbstractQueuedSynchronizer的类通过不同的修改state的策略来达到不同的效果</p>]]></content>
    
    
    <categories>
      
      <category>源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3-cache.md</title>
    <link href="/2023/05/20/3-cache/"/>
    <url>/2023/05/20/3-cache/</url>
    
    <content type="html"><![CDATA[<p>    这个模块主要自定义了缓存接口和提供了框架自带的缓存实现</p><h4 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h4><p>首先是缓存接口</p><p>将官方注释翻译一下：</p><p>    这个接口是缓存提供者的SPI（了解java SPI机制可以参考这篇文章–<a href="https://cloud.tencent.com/developer/article/1785056">Java SPI (Service Provider Interface) 机制详解-腾讯云开发者社区-腾讯云 (tencent.com)</a>）。</p><p>    每个命名空间都会创建一个缓存实例。</p><p>    缓存的实现必须有一个接收一个String型缓存id的构造函数，Mybatis将把名称空间作为id传给构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> The identifier of this cache</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 取得ID</span><br>  String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> key Can be any object but usually it is a &#123;<span class="hljs-doctag">@link</span> CacheKey&#125;</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> value The result of a select.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 存入值</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object value)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> key The key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> The object stored in the cache.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 获取值</span><br>  Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Optional. It is not called by the core.</span><br><span class="hljs-comment">   * </span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> key The key</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> The object that was removed</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 删除值</span><br>  Object <span class="hljs-title function_">removeObject</span><span class="hljs-params">(Object key)</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Clears this cache instance</span><br><span class="hljs-comment">   */</span>  <br>  <span class="hljs-comment">// 清空</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Optional. This method is not called by the core.</span><br><span class="hljs-comment">   * </span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> The number of elements stored in the cache (not its capacity).</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 取得大小</span><br>  <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-comment">/** </span><br><span class="hljs-comment">   * Optional. As of 3.2.6 this method is no longer called by the core.</span><br><span class="hljs-comment">   *  </span><br><span class="hljs-comment">   * Any locking needed by the cache must be provided internally by the cache provider.</span><br><span class="hljs-comment">   * </span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span> A ReadWriteLock </span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 取得读写锁, 从3.2.6开始没用了，要SPI自己实现锁</span><br>  ReadWriteLock <span class="hljs-title function_">getReadWriteLock</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="CacheKey"><a href="#CacheKey" class="headerlink" title="CacheKey"></a>CacheKey</h4><p>    缓存key。一般缓存框架基本上都是以key-value的结构进行存储，Mybatis 对于其Key的生成采取的规则为：[mappedStementId + offset + limit + SQL + queryParams + environment]生成一个哈希码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheKey</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>, Serializable &#123;<br>  <span class="hljs-comment">// update 和 updateAll方法无效的 CacheKey（这个属性没有用到）</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">CacheKey</span> <span class="hljs-variable">NULL_CACHE_KEY</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullCacheKey</span>();<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_MULTIPLYER</span> <span class="hljs-operator">=</span> <span class="hljs-number">37</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_HASHCODE</span> <span class="hljs-operator">=</span> <span class="hljs-number">17</span>;<br><br>  <span class="hljs-comment">// 固定的乘数</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> multiplier;<br>  <span class="hljs-comment">// hash码</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> hashcode;<br>  <span class="hljs-comment">// 校验和 -- 计算方式为所有缓存对象的hash码相加</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> checksum;<br>  <span class="hljs-comment">// 缓存对象计数</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count;<br>  <span class="hljs-comment">// 存储所有缓存对象用于equals判断</span><br>  <span class="hljs-keyword">private</span> List&lt;Object&gt; updateList;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">CacheKey</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.hashcode = DEFAULT_HASHCODE;<br>    <span class="hljs-built_in">this</span>.multiplier = DEFAULT_MULTIPLYER;<br>    <span class="hljs-built_in">this</span>.count = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">this</span>.updateList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;();<br>  &#125;<br><br>  <span class="hljs-comment">// 传入一个Object数组，更新hashcode和效验码</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">CacheKey</span><span class="hljs-params">(Object[] objects)</span> &#123;<br>    <span class="hljs-built_in">this</span>();<br>    updateAll(objects);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getUpdateCount</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> updateList.size();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Object object)</span> &#123;<br>    <span class="hljs-keyword">if</span> (object != <span class="hljs-literal">null</span> &amp;&amp; object.getClass().isArray()) &#123;<br>      <span class="hljs-comment">// 如果是数组，则循环调用doUpdate</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> Array.getLength(object);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> Array.get(object, i);<br>        doUpdate(element);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 否则，doUpdate</span><br>      doUpdate(object);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doUpdate</span><span class="hljs-params">(Object object)</span> &#123;<br>    <span class="hljs-comment">// 计算hash值，校验码</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">baseHashCode</span> <span class="hljs-operator">=</span> object == <span class="hljs-literal">null</span> ? <span class="hljs-number">1</span> : object.hashCode();<br><br>    count++;<br>    checksum += baseHashCode;<br>    baseHashCode *= count;<br><br>    hashcode = multiplier * hashcode + baseHashCode;<br><br>    <span class="hljs-comment">// 同时将对象加入列表，这样万一两个CacheKey的hash码碰巧一样，再根据对象严格equals来区分</span><br>    updateList.add(object);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateAll</span><span class="hljs-params">(Object[] objects)</span> &#123;<br>    <span class="hljs-keyword">for</span> (Object o : objects) &#123;<br>      update(o);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object object)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == object) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!(object <span class="hljs-keyword">instanceof</span> CacheKey)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">CacheKey</span> <span class="hljs-variable">cacheKey</span> <span class="hljs-operator">=</span> (CacheKey) object;<br><br>    <span class="hljs-comment">// 先比hashcode，checksum，count，理论上可以快速比出来</span><br>    <span class="hljs-keyword">if</span> (hashcode != cacheKey.hashcode) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (checksum != cacheKey.checksum) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (count != cacheKey.count) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 万一两个CacheKey的hash码碰巧一样，再根据对象严格equals来区分</span><br>    <span class="hljs-comment">// 这里两个list的size没比是否相等，其实前面count相等就已经保证了</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; updateList.size(); i++) &#123;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">thisObject</span> <span class="hljs-operator">=</span> updateList.get(i);<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">thatObject</span> <span class="hljs-operator">=</span> cacheKey.updateList.get(i);<br>      <span class="hljs-keyword">if</span> (thisObject == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (thatObject != <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (!thisObject.equals(thatObject)) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125; <br><br>  <span class="hljs-comment">// 格式为：hashcode:checkSum:[object.toString]</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>().append(hashcode).append(<span class="hljs-string">&#x27;:&#x27;</span>).append(checksum);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; updateList.size(); i++) &#123;<br>      returnValue.append(<span class="hljs-string">&#x27;:&#x27;</span>).append(updateList.get(i));<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> returnValue.toString();<br>  &#125; <br><br>  <span class="hljs-comment">// 深拷贝CacheKey</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> CacheKey <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>    <span class="hljs-type">CacheKey</span> <span class="hljs-variable">clonedCacheKey</span> <span class="hljs-operator">=</span> (CacheKey) <span class="hljs-built_in">super</span>.clone();<br>    clonedCacheKey.updateList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;(updateList);<br>    <span class="hljs-keyword">return</span> clonedCacheKey;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="NullCacheKey"><a href="#NullCacheKey" class="headerlink" title="NullCacheKey"></a>NullCacheKey</h4><p>不能添加缓存，因此叫NullCacheKey</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NullCacheKey</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CacheKey</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">3704229911977019465L</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">NullCacheKey</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 只有hash值和校验码为key?</span><br>    <span class="hljs-built_in">super</span>();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Object object)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Not allowed to update a NullCacheKey instance.&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateAll</span><span class="hljs-params">(Object[] objects)</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Not allowed to update a NullCacheKey instance.&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="PerpetualCache"><a href="#PerpetualCache" class="headerlink" title="PerpetualCache"></a>PerpetualCache</h4><p>    永久缓存，没有缓存过期和清除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PerpetualCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br>  <span class="hljs-comment">// 每个永久缓存有一个ID来识别</span><br>  <span class="hljs-keyword">private</span> String id; <br><br>  <span class="hljs-comment">// 内部就是一个HashMap,所有方法基本就是直接调用HashMap的方法,不支持多线程？</span><br>  <span class="hljs-keyword">private</span> Map&lt;Object, Object&gt; cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Object, Object&gt;();<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">PerpetualCache</span><span class="hljs-params">(String id)</span> &#123;<br>    <span class="hljs-built_in">this</span>.id = id;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-comment">// 只有id相等才认为两个cache相同</span><br>    <span class="hljs-keyword">if</span> (getId() == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Cache instances require an ID.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> Cache)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-type">Cache</span> <span class="hljs-variable">otherCache</span> <span class="hljs-operator">=</span> (Cache) o;<br>    <span class="hljs-keyword">return</span> getId().equals(otherCache.getId());<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (getId() == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Cache instances require an ID.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> getId().hashCode();<br>  &#125; <br><br>  <span class="hljs-comment">// 其他要实现的都依赖于hashmap</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BlockingCache"><a href="#BlockingCache" class="headerlink" title="BlockingCache"></a>BlockingCache</h4><p>    简单的阻塞装饰器</p><p>    EhCache’s BlockingCache decorator的简单低效版本</p><p>    当在缓存中找不到这个元素时，给cache key上个锁。这样，其他获取该cache key的线程将会一直等待直到这个元素被填充而不是命中数据库</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlockingCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-comment">// 获取锁的超时时间</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> timeout;<br>  <span class="hljs-comment">// 委托的Cache对象</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Cache delegate;<br>  <span class="hljs-comment">// 可重入锁map（并发可用）</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ConcurrentHashMap&lt;Object, ReentrantLock&gt; locks;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">BlockingCache</span><span class="hljs-params">(Cache delegate)</span> &#123;<br>    <span class="hljs-built_in">this</span>.delegate = delegate;<br>    <span class="hljs-built_in">this</span>.locks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;Object, ReentrantLock&gt;();<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object value)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      delegate.putObject(key, value);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      <span class="hljs-comment">// 释放锁（只有当前线程持有锁时才能释放）</span><br>      releaseLock(key);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">releaseLock</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> locks.get(key);<br>    <span class="hljs-comment">// 防止破坏 getObject时加的锁 ？</span><br>    <span class="hljs-keyword">if</span> (lock.isHeldByCurrentThread()) &#123;<br>      lock.unlock();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    acquireLock(key);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> delegate.getObject(key);<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这里value 为 null 的话锁会一直不释放</span><br><span class="hljs-comment">     * 那么当前线程 putObject 或者 销毁时释放锁？</span><br><span class="hljs-comment">     * 开发者关于这个问题的疑问见 issue #1410</span><br><span class="hljs-comment">     * 有人发现这样实现可能会导致死锁，详见 issue #1261,#1357</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 我去看了下最新的代码，官方已经将 ReentrantLock 换为了 </span><br><span class="hljs-comment">     * CountDownLatch,issue上说的是为了避免oom（https://stackoverflow.com/questions/41898355/lock-handler-for-arbitrary-keys/41912651#41912651）</span><br><span class="hljs-comment">     * 还有官方加了一行新的注释 </span><br><span class="hljs-comment">     * By its nature, this implementation can cause deadlock when used incorrectly.</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>) &#123;<br>      releaseLock(key);<br>    &#125;        <br>    <span class="hljs-keyword">return</span> value;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquireLock</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> getLockForKey(key);<br>    <span class="hljs-keyword">if</span> (timeout &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">acquired</span> <span class="hljs-operator">=</span> lock.tryLock(timeout, TimeUnit.MILLISECONDS);<br>        <span class="hljs-keyword">if</span> (!acquired) &#123;<br>          <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Couldn&#x27;t get a lock in &quot;</span> + timeout + <span class="hljs-string">&quot; for the key &quot;</span> +  key + <span class="hljs-string">&quot; at the cache &quot;</span> + delegate.getId());  <br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Got interrupted while trying to acquire lock for key &quot;</span> + key, e);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      lock.lock();<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> ReentrantLock <span class="hljs-title function_">getLockForKey</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">previous</span> <span class="hljs-operator">=</span> locks.putIfAbsent(key, lock);<br>    <span class="hljs-keyword">return</span> previous == <span class="hljs-literal">null</span> ? lock : previous;<br>  &#125; <br><br>  <span class="hljs-comment">// 其他方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><p>下面附上会导致死锁的测试代码（Mybatis版本为本博文涉及的版本）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BolckingCacheTest</span> &#123;<br><br>    <span class="hljs-meta">@Test(timeout = 3000L)</span><br>    <span class="hljs-comment">// 使用 CountDownLatch 的最新代码也会发生死锁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">BlockingCache</span> <span class="hljs-variable">cache</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockingCache</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PerpetualCache</span>(<span class="hljs-string">&quot;default&quot;</span>));<br><br>        <span class="hljs-comment">// lock twice</span><br>        cache.getObject(<span class="hljs-number">1</span>);<br>        cache.getObject(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; Assert.assertEquals(cache.getObject(<span class="hljs-number">1</span>), <span class="hljs-number">1</span>));<br>        thread.setDaemon(<span class="hljs-literal">false</span>);<br>        thread.start();<br><br>        <span class="hljs-comment">// but release once</span><br>        cache.putObject(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><br>        thread.join();<br>    &#125;<br><br>    <span class="hljs-meta">@Test(timeout = 3000L)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getObject2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">BlockingCache</span> <span class="hljs-variable">cache</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockingCache</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PerpetualCache</span>(<span class="hljs-string">&quot;default&quot;</span>));<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; Assert.assertEquals(cache.getObject(<span class="hljs-number">1</span>), <span class="hljs-number">1</span>));<br>        thread.setDaemon(<span class="hljs-literal">false</span>);<br>        thread.start();<br><br>        Thread.sleep(<span class="hljs-number">1000</span>);<br><br>        <span class="hljs-comment">// but release once</span><br>        cache.putObject(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">// lock twice</span><br>        cache.getObject(<span class="hljs-number">1</span>);<br>        cache.getObject(<span class="hljs-number">1</span>);<br><br>        thread.join();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="FifoCache"><a href="#FifoCache" class="headerlink" title="FifoCache"></a>FifoCache</h4><p>FIFO缓存，这个类就是维护了一个FIFI链表，其他接口都委托给包装的cache去做。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FifoCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Cache delegate;<br>  <span class="hljs-comment">// FIFI 链表</span><br>  <span class="hljs-keyword">private</span> Deque&lt;Object&gt; keyList;<br>  <span class="hljs-comment">// 链表长度(默认为1024)</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">FifoCache</span><span class="hljs-params">(Cache delegate)</span> &#123;<br>    <span class="hljs-built_in">this</span>.delegate = delegate;<br>    <span class="hljs-built_in">this</span>.keyList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Object&gt;();<br>    <span class="hljs-built_in">this</span>.size = <span class="hljs-number">1024</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object value)</span> &#123;<br>    cycleKeyList(key);<br>    delegate.putObject(key, value);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cycleKeyList</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// 增加记录时判断如果记录已超过1024条，会移除链表的第一个元素，从而达到FIFO缓存效果</span><br>    keyList.addLast(key);<br>    <span class="hljs-keyword">if</span> (keyList.size() &gt; size) &#123;<br>      <span class="hljs-type">Object</span> <span class="hljs-variable">oldestKey</span> <span class="hljs-operator">=</span> keyList.removeFirst();<br>      delegate.removeObject(oldestKey);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 其他方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="LoggingCache"><a href="#LoggingCache" class="headerlink" title="LoggingCache"></a>LoggingCache</h4><p>    加了日志的缓存，日志主要是取缓存是打印命中率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoggingCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-comment">// 用的mybatis自己的抽象Log</span><br>  <span class="hljs-keyword">private</span> Log log;  <br>  <span class="hljs-keyword">private</span> Cache delegate;<br>  <span class="hljs-comment">// 请求次数</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-variable">requests</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">// 命中缓存次数</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-variable">hits</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoggingCache</span><span class="hljs-params">(Cache delegate)</span> &#123;<br>    <span class="hljs-built_in">this</span>.delegate = delegate;<br>    <span class="hljs-built_in">this</span>.log = LogFactory.getLog(getId());<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// 访问一次requests加一</span><br>    requests++;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> delegate.getObject(key);<br>    <span class="hljs-comment">//命中了则hits加一</span><br>    <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>) &#123;<br>      hits++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (log.isDebugEnabled()) &#123;<br>      <span class="hljs-comment">// 就是打印命中率 hits/requests</span><br>      log.debug(<span class="hljs-string">&quot;Cache Hit Ratio [&quot;</span> + getId() + <span class="hljs-string">&quot;]: &quot;</span> + getHitRatio());<br>    &#125;<br>    <span class="hljs-keyword">return</span> value;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getHitRatio</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">double</span>) hits / (<span class="hljs-type">double</span>) requests;<br>  &#125; <br><br>  <span class="hljs-comment">// 其他方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="LruCache"><a href="#LruCache" class="headerlink" title="LruCache"></a>LruCache</h4><p>    最近最少使用缓存。基于 LinkedHashMap，覆盖其removeEldestEntry方法实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LruCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Cache delegate;<br>  <span class="hljs-comment">// 额外用了一个map才做lru，但是委托的Cache里面其实也是一个map，这样等于用2倍的内存实现lru功能</span><br>  <span class="hljs-keyword">private</span> Map&lt;Object, Object&gt; keyMap;<br>  <span class="hljs-keyword">private</span> Object eldestKey; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">LruCache</span><span class="hljs-params">(Cache delegate)</span> &#123;<br>    <span class="hljs-built_in">this</span>.delegate = delegate;<br>    setSize(<span class="hljs-number">1024</span>);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSize</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> size)</span> &#123;<br>    keyMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;Object, Object&gt;(size, <span class="hljs-number">.75F</span>, <span class="hljs-literal">true</span>) &#123;<br>      <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">4267176411845948333L</span>;<br><br>      <span class="hljs-comment">// 核心就是覆盖 LinkedHashMap.removeEldestEntry方法,</span><br>      <span class="hljs-comment">// 返回true或false告诉 LinkedHashMap要不要删除此最老键值</span><br>      <span class="hljs-comment">// LinkedHashMap内部其实就是每次访问或者插入一个元素都会把元素放到链表末尾，</span><br>      <span class="hljs-comment">// 这样不经常访问的键值肯定就在链表开头啦</span><br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">removeEldestEntry</span><span class="hljs-params">(Map.Entry&lt;Object, Object&gt; eldest)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">tooBig</span> <span class="hljs-operator">=</span> size() &gt; size;<br>        <span class="hljs-keyword">if</span> (tooBig) &#123;<br>          <span class="hljs-comment">// 这里没辙了，把eldestKey存入实例变量</span><br>          eldestKey = eldest.getKey();<br>        &#125;<br>        <span class="hljs-keyword">return</span> tooBig;<br>      &#125;<br>    &#125;;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object value)</span> &#123;<br>    delegate.putObject(key, value);<br>    <span class="hljs-comment">// 增加新纪录后，判断是否要将最老元素移除</span><br>    cycleKeyList(key);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// get的时候调用一下LinkedHashMap.get，让最近访问的值移动到链表末尾</span><br>    keyMap.get(key); <span class="hljs-comment">//touch</span><br>    <span class="hljs-keyword">return</span> delegate.getObject(key);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">removeObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// 为啥不 remove</span><br>    <span class="hljs-comment">// keyMap.remove(key);</span><br>    <span class="hljs-comment">// key 不会再被访问，下次清除缓存之前如果key未被放入缓存就会被删除</span><br>    <span class="hljs-keyword">return</span> delegate.removeObject(key);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">cycleKeyList</span><span class="hljs-params">(Object key)</span> &#123;<br>    keyMap.put(key, key);<br>    <span class="hljs-comment">// keyMap是linkedhashmap，最老的记录已经被移除了，然后这里我们还需要移除被委托的那个cache的记录</span><br>    <span class="hljs-keyword">if</span> (eldestKey != <span class="hljs-literal">null</span>) &#123;<br>      delegate.removeObject(eldestKey);<br>      eldestKey = <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 其他方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ScheduledCache"><a href="#ScheduledCache" class="headerlink" title="ScheduledCache"></a>ScheduledCache</h4><p>    定时调度缓存。目的是定时清空一下缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduledCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-keyword">private</span> Cache delegate;<br>  <span class="hljs-comment">// 清理间隔</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> clearInterval;<br>  <span class="hljs-comment">// 上次清理时间</span><br>  <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> lastClear;    <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">ScheduledCache</span><span class="hljs-params">(Cache delegate)</span> &#123;<br>    <span class="hljs-built_in">this</span>.delegate = delegate;<br>    <span class="hljs-comment">// 默认 1小时清空一次缓存</span><br>    <span class="hljs-built_in">this</span>.clearInterval = <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>; <span class="hljs-comment">// 1 hour</span><br>    <span class="hljs-built_in">this</span>.lastClear = System.currentTimeMillis();<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>    clearWhenStale();<br>    <span class="hljs-keyword">return</span> delegate.getSize();<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object object)</span> &#123;<br>    clearWhenStale();<br>    delegate.putObject(key, object);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-keyword">return</span> clearWhenStale() ? <span class="hljs-literal">null</span> : delegate.getObject(key);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">clearWhenStale</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 如果到时间了，清空一下缓存</span><br>    <span class="hljs-keyword">if</span> (System.currentTimeMillis() - lastClear &gt; clearInterval) &#123;<br>      clear();<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>    lastClear = System.currentTimeMillis();<br>    delegate.clear();<br>  &#125; <br><br>  <span class="hljs-comment">// 其他方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SerializedCache"><a href="#SerializedCache" class="headerlink" title="SerializedCache"></a>SerializedCache</h4><p>    序列化缓存。原理是先将对象序列化成2进制，再缓存。好处是将对象压缩了，省内存、坏处是速度慢了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializedCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br>  <span class="hljs-keyword">private</span> Cache delegate; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object object)</span> &#123;<br>    <span class="hljs-keyword">if</span> (object == <span class="hljs-literal">null</span> || object <span class="hljs-keyword">instanceof</span> Serializable) &#123;<br>      <span class="hljs-comment">// 先序列化，再委托被包装者putObject</span><br>      delegate.putObject(key, serialize((Serializable) object));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;SharedCache failed to make a copy of a non-serializable object: &quot;</span> + object);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// 先委托被包装者getObject,再反序列化</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> delegate.getObject(key);<br>    <span class="hljs-keyword">return</span> object == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : deserialize((<span class="hljs-type">byte</span>[]) object);<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] serialize(Serializable value) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 序列化核心就是ByteArrayOutputStream</span><br>      <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>      <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bos);<br>      oos.writeObject(value);<br>      oos.flush();<br>      oos.close();<br>      <span class="hljs-keyword">return</span> bos.toByteArray();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Error serializing object.  Cause: &quot;</span> + e, e);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> Serializable <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] value)</span> &#123;<br>    Serializable result;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 反序列化核心就是ByteArrayInputStream</span><br>      <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(value);<br>      <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomObjectInputStream</span>(bis);<br>      result = (Serializable) ois.readObject();<br>      ois.close();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheException</span>(<span class="hljs-string">&quot;Error deserializing object.  Cause: &quot;</span> + e, e);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomObjectInputStream</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ObjectInputStream</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomObjectInputStream</span><span class="hljs-params">(InputStream in)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>      <span class="hljs-built_in">super</span>(in);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">// 使用自定义的资源加载方法 ？</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc) <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>      <span class="hljs-keyword">return</span> Resources.classForName(desc.getName());<br>    &#125;<br>    <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SoftCache"><a href="#SoftCache" class="headerlink" title="SoftCache"></a>SoftCache</h4><p>    软引用缓存,核心是SoftReference</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SoftCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-comment">// 链表用来引用元素，防垃圾回收</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Deque&lt;Object&gt; hardLinksToAvoidGarbageCollection;<br><br>  <span class="hljs-comment">// 被垃圾回收的引用队列</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReferenceQueue&lt;Object&gt; queueOfGarbageCollectedEntries;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Cache delegate;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> numberOfHardLinks; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">SoftCache</span><span class="hljs-params">(Cache delegate)</span> &#123;<br>    <span class="hljs-built_in">this</span>.delegate = delegate;<br>    <span class="hljs-comment">// 默认链表可以存256元素</span><br>    <span class="hljs-built_in">this</span>.numberOfHardLinks = <span class="hljs-number">256</span>;<br>    <span class="hljs-built_in">this</span>.hardLinksToAvoidGarbageCollection = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Object&gt;();<br>    <span class="hljs-built_in">this</span>.queueOfGarbageCollectedEntries = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceQueue</span>&lt;Object&gt;();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>    removeGarbageCollectedItems();<br>    <span class="hljs-keyword">return</span> delegate.getSize();<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeGarbageCollectedItems</span><span class="hljs-params">()</span> &#123;<br>    SoftEntry sv;<br>    <span class="hljs-comment">// 查看被垃圾回收的元素组成的引用队列,然后调用removeObject移除他们</span><br>    <span class="hljs-keyword">while</span> ((sv = (SoftEntry) queueOfGarbageCollectedEntries.poll()) != <span class="hljs-literal">null</span>) &#123;<br>      delegate.removeObject(sv.key);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object value)</span> &#123;<br>    removeGarbageCollectedItems();<br>    <span class="hljs-comment">// putObject存了一个SoftReference，这样value没用时会自动垃圾回收</span><br>    delegate.putObject(key, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoftEntry</span>(key, value, queueOfGarbageCollectedEntries));<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span>  <br>    <span class="hljs-comment">// assumed delegate cache is totally managed by this cache</span><br>    SoftReference&lt;Object&gt; softReference = (SoftReference&lt;Object&gt;) delegate.getObject(key);<br>    <span class="hljs-keyword">if</span> (softReference != <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-comment">// 核心调用SoftReference.get取得元素</span><br>      result = softReference.get();<br>      <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br>        delegate.removeObject(key);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// See #586 (and #335) modifications need more than a read lock </span><br>        <span class="hljs-keyword">synchronized</span> (hardLinksToAvoidGarbageCollection) &#123;<br>          <span class="hljs-comment">// 将value存入经常访问的键值到链表(最多256元素),防止垃圾回收</span><br>          hardLinksToAvoidGarbageCollection.addFirst(result);<br>          <span class="hljs-keyword">if</span> (hardLinksToAvoidGarbageCollection.size() &gt; numberOfHardLinks) &#123;<br>            hardLinksToAvoidGarbageCollection.removeLast();<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">removeObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    removeGarbageCollectedItems();<br>    <span class="hljs-keyword">return</span> delegate.removeObject(key);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (hardLinksToAvoidGarbageCollection) &#123;<br>      hardLinksToAvoidGarbageCollection.clear();<br>    &#125;<br>    removeGarbageCollectedItems();<br>    delegate.clear();<br>  &#125; <br><br>  <span class="hljs-comment">// 这里设为static，前面又有new，不太懂</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SoftEntry</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SoftReference</span>&lt;Object&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object key;<br><br>    SoftEntry(Object key, Object value, ReferenceQueue&lt;Object&gt; garbageCollectionQueue) &#123;<br>      <span class="hljs-built_in">super</span>(value, garbageCollectionQueue);<br>      <span class="hljs-built_in">this</span>.key = key;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 其他方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SynchronizedCache"><a href="#SynchronizedCache" class="headerlink" title="SynchronizedCache"></a>SynchronizedCache</h4><p>    同步缓存。防止多线程问题</p><p>    核心: 加锁。</p><p>    ReadWriteLock.readLock().lock()&#x2F;unlock()</p><p>    ReadWriteLock.writeLock().lock()&#x2F;unlock()</p><p>    3.2.6以后这个类已经没用了，考虑到Hazelcast, EhCache已经有锁机制了，所以这个锁就画蛇添足了。</p><p>    bug见<a href="https://github.com/mybatis/mybatis-3/issues/159">https://github.com/mybatis/mybatis-3/issues/159</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SynchronizedCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-comment">// 就是在一些可能会出现并发异常的接口上加了个 synchronized</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> delegate.getSize();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object object)</span> &#123;<br>    delegate.putObject(key, object);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-keyword">return</span> delegate.getObject(key);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Object <span class="hljs-title function_">removeObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-keyword">return</span> delegate.removeObject(key);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>    delegate.clear();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="TransactionalCache"><a href="#TransactionalCache" class="headerlink" title="TransactionalCache"></a>TransactionalCache</h4><p>    二级缓存事务缓冲区</p><p>    此类保存会话期间要添加到二级缓存的所有缓存条目</p><p>    当调用commit时，条目被发送到缓存，如果会话回滚，则条目被丢弃</p><p>    添加了阻塞缓存支持。因此，任何返回缓存未命中的get()后面都会跟一个put()，这样就可以释放任何与该键相关联的锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransactionalCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cache</span> &#123;<br><br>  <span class="hljs-keyword">private</span> Cache delegate;<br>  <span class="hljs-comment">// commit前是否执行过 clear</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> clearOnCommit;<br>  <span class="hljs-comment">// commit时要添加的元素</span><br>  <span class="hljs-keyword">private</span> Map&lt;Object, Object&gt; entriesToAddOnCommit;<br>  <span class="hljs-keyword">private</span> Set&lt;Object&gt; entriesMissedInCache; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">TransactionalCache</span><span class="hljs-params">(Cache delegate)</span> &#123;<br>    <span class="hljs-built_in">this</span>.delegate = delegate;<br>    <span class="hljs-built_in">this</span>.clearOnCommit = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">this</span>.entriesToAddOnCommit = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Object, Object&gt;();<br>    <span class="hljs-built_in">this</span>.entriesMissedInCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Object&gt;();<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-comment">// issue #116</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> delegate.getObject(key);<br>    <span class="hljs-keyword">if</span> (object == <span class="hljs-literal">null</span>) &#123;<br>      entriesMissedInCache.add(key);<br>    &#125;<br>    <span class="hljs-comment">// issue #146</span><br>    <span class="hljs-keyword">if</span> (clearOnCommit) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> object;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Object key, Object object)</span> &#123;<br>    entriesToAddOnCommit.put(key, object);<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">removeObject</span><span class="hljs-params">(Object key)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125; <br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>    clearOnCommit = <span class="hljs-literal">true</span>;<br>    entriesToAddOnCommit.clear();<br>  &#125; <br><br>  <span class="hljs-comment">// 多了commit方法，提供事务功能</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (clearOnCommit) &#123;<br>      delegate.clear();<br>    &#125;<br>    flushPendingEntries();<br>    reset();<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">()</span> &#123;<br>    unlockMissedEntries();<br>    reset();<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reset</span><span class="hljs-params">()</span> &#123;<br>    clearOnCommit = <span class="hljs-literal">false</span>;<br>    entriesToAddOnCommit.clear();<br>    entriesMissedInCache.clear();<br>  &#125; <br><br>  <span class="hljs-comment">// 将 entriesToAddOnCommit 和 entriesMissedInCache中的元素全部放进cache</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">flushPendingEntries</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;Object, Object&gt; entry : entriesToAddOnCommit.entrySet()) &#123;<br>      delegate.putObject(entry.getKey(), entry.getValue());<br>    &#125;<br>    <span class="hljs-keyword">for</span> (Object entry : entriesMissedInCache) &#123;<br>      <span class="hljs-keyword">if</span> (!entriesToAddOnCommit.containsKey(entry)) &#123;<br>        delegate.putObject(entry, <span class="hljs-literal">null</span>);<br>      &#125;<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 解锁给空值缓存上的锁</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlockMissedEntries</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (Object entry : entriesMissedInCache) &#123;<br>      delegate.putObject(entry, <span class="hljs-literal">null</span>);<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 其他方法略</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="WeakCache"><a href="#WeakCache" class="headerlink" title="WeakCache"></a>WeakCache</h4><p>    和软引用缓存类似 。区别是操作要保存的元素集合 <code>hardLinksToAvoidGarbageCollection</code> 没有上锁（尝试找issue失败）</p><p>淦 (<a href="http://code.google.com/p/mybatis/issues/detail?id=335%7C586">http://code.google.com/p/mybatis/issues/detail?id=335|586</a>) issue似乎没了</p><h4 id="TransactionalCacheManager"><a href="#TransactionalCacheManager" class="headerlink" title="TransactionalCacheManager"></a>TransactionalCacheManager</h4><p>    事务缓存管理器，被CachingExecutor使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransactionalCacheManager</span> &#123;<br><br>  <span class="hljs-comment">// 管理了许多TransactionalCache</span><br>  <span class="hljs-keyword">private</span> Map&lt;Cache, TransactionalCache&gt; transactionalCaches = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Cache, TransactionalCache&gt;();<br> <br>  <span class="hljs-comment">// 清理缓存</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">(Cache cache)</span> &#123;<br>    getTransactionalCache(cache).clear();<br>  &#125;<br><br>  <span class="hljs-comment">// 得到某个TransactionalCache的缓存值</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(Cache cache, CacheKey key)</span> &#123;<br>    <span class="hljs-keyword">return</span> getTransactionalCache(cache).getObject(key);<br>  &#125; <br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putObject</span><span class="hljs-params">(Cache cache, CacheKey key, Object value)</span> &#123;<br>    getTransactionalCache(cache).putObject(key, value);<br>  &#125; <br><br>  <span class="hljs-comment">// 提交时全部提交</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">commit</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (TransactionalCache txCache : transactionalCaches.values()) &#123;<br>      txCache.commit();<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-comment">// 回滚时全部回滚</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rollback</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (TransactionalCache txCache : transactionalCaches.values()) &#123;<br>      txCache.rollback();<br>    &#125;<br>  &#125; <br><br>  <span class="hljs-keyword">private</span> TransactionalCache <span class="hljs-title function_">getTransactionalCache</span><span class="hljs-params">(Cache cache)</span> &#123;<br>    <span class="hljs-type">TransactionalCache</span> <span class="hljs-variable">txCache</span> <span class="hljs-operator">=</span> transactionalCaches.get(cache);<br>    <span class="hljs-keyword">if</span> (txCache == <span class="hljs-literal">null</span>) &#123;<br>      txCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransactionalCache</span>(cache);<br>      transactionalCaches.put(cache, txCache);<br>    &#125;<br>    <span class="hljs-keyword">return</span> txCache;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>缓存模块的内容就这些</p>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2-exceptions.md</title>
    <link href="/2023/05/20/2-exceptions/"/>
    <url>/2023/05/20/2-exceptions/</url>
    
    <content type="html"><![CDATA[<p>这个模块只有一个地方需要注意</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 异常工厂</span><br><span class="hljs-comment"> */</span> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionFactory</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">ExceptionFactory</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// Prevent Instantiation</span><br>  &#125;<br><br>  <span class="hljs-comment">// 把普通异常包装成mybatis自己的PersistenceException</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RuntimeException <span class="hljs-title function_">wrapException</span><span class="hljs-params">(String message, Exception e)</span> &#123;<br>    <span class="hljs-comment">// 查找错误上下文，得到错误原因，传给PersistenceException</span><br>    <span class="hljs-comment">// 每个线程都会有一个ErrorContext，所以可以得到，  .message(message).cause是典型的构建器模式</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PersistenceException</span>(ErrorContext.instance().message(message).cause(e).toString(), e);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1-logging</title>
    <link href="/2023/05/14/1-logging/"/>
    <url>/2023/05/14/1-logging/</url>
    
    <content type="html"><![CDATA[<h3 id="logging（日志模块）"><a href="#logging（日志模块）" class="headerlink" title="logging（日志模块）"></a>logging（日志模块）</h3><h4 id="LogException"><a href="#LogException" class="headerlink" title="LogException"></a>LogException</h4><p>首先看 LogException 类（其中 PersistenceException 为自定义异常，封装方法完全一致）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PersistenceException</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1022924004852350942L</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">LogException</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">LogException</span><span class="hljs-params">(String message)</span> &#123;<br>    <span class="hljs-built_in">super</span>(message);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">LogException</span><span class="hljs-params">(String message, Throwable cause)</span> &#123;<br>    <span class="hljs-built_in">super</span>(message, cause);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">LogException</span><span class="hljs-params">(Throwable cause)</span> &#123;<br>    <span class="hljs-built_in">super</span>(cause);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h4><p>然后是自定义日志接口 Log</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Log</span> &#123;<br><br>  <span class="hljs-comment">// 和一般的log4j很像，提供日志接口的一些方法,error, debug, warn。</span><br>  <span class="hljs-comment">// 用自己的日志类恐怕是为了通用，不绑死在某个特定的日志框架中</span><br>  <span class="hljs-comment">// 但不是也有类似的slf4j吗？为何还要自己写？</span><br>  <span class="hljs-comment">// 可能是不想引入额外的jar包（我觉得是为了适配各种日志框架）</span><br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">isDebugEnabled</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">isTraceEnabled</span><span class="hljs-params">()</span>;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">(String s, Throwable e)</span>;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">(String s)</span>;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">debug</span><span class="hljs-params">(String s)</span>;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">trace</span><span class="hljs-params">(String s)</span>;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">warn</span><span class="hljs-params">(String s)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="LogFactory-日志工厂"><a href="#LogFactory-日志工厂" class="headerlink" title="LogFactory 日志工厂"></a>LogFactory 日志工厂</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Marker to be used by logging implementations that support markers</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// 给支持marker功能的logger使用(目前有slf4j, log4j2)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MARKER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MYBATIS&quot;</span>;<br><br><span class="hljs-comment">// 具体究竟用哪个日志框架，那个框架所对应logger的构造函数</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Constructor&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Log</span>&gt; logConstructor;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-comment">// 这里单纯用的lambda表达式，没有多线程</span><br>    <span class="hljs-comment">// 这段代码是一直找可用的日志实现直到找到一个可用的</span><br>    <span class="hljs-comment">// 日志实现，找到后跳过后面的查找</span><br>    <span class="hljs-comment">// slf4j</span><br>    tryImplementation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        useSlf4jLogging();<br>      &#125;<br>    &#125;);<br>    <span class="hljs-comment">// common logging</span><br>    tryImplementation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        useCommonsLogging();<br>      &#125;<br>    &#125;);<br>    <span class="hljs-comment">// log4j2</span><br>    tryImplementation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        useLog4J2Logging();<br>      &#125;<br>    &#125;);<br>    <span class="hljs-comment">// log4j</span><br>    tryImplementation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        useLog4JLogging();<br>      &#125;<br>    &#125;);<br>    <span class="hljs-comment">// jdk logging</span><br>    tryImplementation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        useJdkLogging();<br>      &#125;<br>    &#125;);<br>    <span class="hljs-comment">// 没有日志</span><br>    tryImplementation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        useNoLogging();<br>      &#125;<br>    &#125;);<br>  &#125;<br></code></pre></td></tr></table></figure><p>看一下 <code>tryImplementation </code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tryImplementation</span><span class="hljs-params">(Runnable runnable)</span> &#123;<br>    <span class="hljs-comment">// 先判断是否找到可用的日志实现</span><br>    <span class="hljs-keyword">if</span> (logConstructor == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        runnable.run();<br>      &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>        <span class="hljs-comment">// ignore</span><br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>下面以 <code>useSlf4jLogging()</code> 为例讲解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useSlf4jLogging</span><span class="hljs-params">()</span> &#123;<br>    setImplementation(org.apache.ibatis.logging.slf4j.Slf4jImpl.class);<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setImplementation</span><span class="hljs-params">(Class&lt;? extends Log&gt; implClass)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      Constructor&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Log</span>&gt; candidate = implClass.getConstructor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; String.class &#125;);<br>      <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> candidate.newInstance(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; LogFactory.class.getName() &#125;);<br>      log.debug(<span class="hljs-string">&quot;Logging initialized using &#x27;&quot;</span> + implClass + <span class="hljs-string">&quot;&#x27; adapter.&quot;</span>);<br>      <span class="hljs-comment">// 设置logConstructor,一旦设上，表明找到相应的log的jar包了，那后面别的log就不找了。</span><br>      logConstructor = candidate;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LogException</span>(<span class="hljs-string">&quot;Error setting Log implementation.  Cause: &quot;</span> + t, t);<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>后面 <code>useCommonsLogging()、useLog4J2Logging()、useLog4JLogging()、useJdkLogging()、useNoLogging()</code> 类似</p><p>最后是剩下的一些方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 单例模式，不得自己new实例</span><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">LogFactory</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">// disable construction</span><br>&#125;<br><br><span class="hljs-comment">// 根据传入的类来构建Log</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Log <span class="hljs-title function_">getLog</span><span class="hljs-params">(Class&lt;?&gt; aClass)</span> &#123;<br>  <span class="hljs-keyword">return</span> getLog(aClass.getName());<br>&#125;<br><br><span class="hljs-comment">// 根据传入的类名来构建Log</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Log <span class="hljs-title function_">getLog</span><span class="hljs-params">(String logger)</span> &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">//构造函数，参数必须是一个，为String型，指明logger的名称</span><br>    <span class="hljs-keyword">return</span> logConstructor.newInstance(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; logger &#125;);<br>  &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LogException</span>(<span class="hljs-string">&quot;Error creating logger for logger &quot;</span> + logger + <span class="hljs-string">&quot;.  Cause: &quot;</span> + t, t);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 提供一个扩展功能，如果以上log都不满意，可以使用自定义的log</span><br><span class="hljs-comment">// 这个方法在 Configuration 类的 setLogImpl(Class&lt;?&gt; logImpl) 方法使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useCustomLogging</span><span class="hljs-params">(Class&lt;? extends Log&gt; clazz)</span> &#123;<br>  setImplementation(clazz);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="JakartaCommonsLoggingImpl"><a href="#JakartaCommonsLoggingImpl" class="headerlink" title="JakartaCommonsLoggingImpl"></a>JakartaCommonsLoggingImpl</h4><p>适配 <code>commons logging</code> 里的 Log 和 LogFactory</p><p>可以看到全是委托给特定的 log 和 LogFactory来实现</p><p>这里使用了适配器模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JakartaCommonsLoggingImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">org</span>.apache.ibatis.logging.Log &#123;<br><br>  <span class="hljs-keyword">private</span> Log log;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">JakartaCommonsLoggingImpl</span><span class="hljs-params">(String clazz)</span> &#123;<br>    log = LogFactory.getLog(clazz);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isDebugEnabled</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> log.isDebugEnabled();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isTraceEnabled</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> log.isTraceEnabled();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">(String s, Throwable e)</span> &#123;<br>    log.error(s, e);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">(String s)</span> &#123;<br>    log.error(s);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">debug</span><span class="hljs-params">(String s)</span> &#123;<br>    log.debug(s);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">trace</span><span class="hljs-params">(String s)</span> &#123;<br>    log.trace(s);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">warn</span><span class="hljs-params">(String s)</span> &#123;<br>    log.warn(s);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p> <code>Jdk14LoggingImpl、Log4jImpl、NoLoggingImpl、StdOutImpl</code> 大同小异</p><h4 id="Log4j2Impl"><a href="#Log4j2Impl" class="headerlink" title="Log4j2Impl"></a>Log4j2Impl</h4><p>Log4j2Impl 根据从 LogManager获取的Logger的类型，分别委托给 Log4j2AbstractLoggerImpl 和 Log4j2LoggerImpl 实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Log4j2Impl</span><span class="hljs-params">(String clazz)</span> &#123;<br>  <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogManager.getLogger(clazz);<br><br>  <span class="hljs-keyword">if</span> (logger <span class="hljs-keyword">instanceof</span> AbstractLogger) &#123;<br>    log = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Log4j2AbstractLoggerImpl</span>((AbstractLogger) logger);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    log = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Log4j2LoggerImpl</span>(logger);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Slf4jImpl"><a href="#Slf4jImpl" class="headerlink" title="Slf4jImpl"></a>Slf4jImpl</h4><p>Slf4jImpl 类似</p><p>Slf4jImpl 和 上面的 Log4j2Impl都使用了代理模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Slf4jImpl</span><span class="hljs-params">(String clazz)</span> &#123;<br>  <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(clazz);<br><br>  <span class="hljs-keyword">if</span> (logger <span class="hljs-keyword">instanceof</span> LocationAwareLogger) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// check for slf4j &gt;= 1.6 method signature</span><br>      logger.getClass().getMethod(<span class="hljs-string">&quot;log&quot;</span>, Marker.class, String.class, <span class="hljs-type">int</span>.class, String.class, Object[].class, Throwable.class);<br>      log = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Slf4jLocationAwareLoggerImpl</span>((LocationAwareLogger) logger);<br>      <span class="hljs-keyword">return</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (SecurityException e) &#123;<br>      <span class="hljs-comment">// fail-back to Slf4jLoggerImpl</span><br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>      <span class="hljs-comment">// fail-back to Slf4jLoggerImpl</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// Logger is not LocationAwareLogger or slf4j version &lt; 1.6</span><br>  log = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Slf4jLoggerImpl</span>(logger);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="BaseJdbcLogger"><a href="#BaseJdbcLogger" class="headerlink" title="BaseJdbcLogger"></a>BaseJdbcLogger</h4><p>用于代理（做日志）的基类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// SET_METHODS 包含java类型转jdbc类型的方法</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Set&lt;String&gt; SET_METHODS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;String&gt;();<br><span class="hljs-comment">// EXECUTE_METHODS 包含 execute、executeUpdate、</span><br><span class="hljs-comment">// executeQuery、addBatch方法</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Set&lt;String&gt; EXECUTE_METHODS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;String&gt;();<br><br><span class="hljs-comment">// 自用的列的相关属性</span><br><span class="hljs-keyword">private</span> Map&lt;Object, Object&gt; columnMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Object, Object&gt;();<br><br><span class="hljs-keyword">private</span> List&lt;Object&gt; columnNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;();<br><span class="hljs-keyword">private</span> List&lt;Object&gt; columnValues = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;();<br><br><span class="hljs-comment">// 打日志</span><br><span class="hljs-keyword">protected</span> Log statementLog;<br><span class="hljs-comment">// 查询栈（输出时用）</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> queryStack;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Default constructor</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseJdbcLogger</span><span class="hljs-params">(Log log, <span class="hljs-type">int</span> queryStack)</span> &#123;<br>  <span class="hljs-built_in">this</span>.statementLog = log;<br>  <span class="hljs-keyword">if</span> (queryStack == <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-built_in">this</span>.queryStack = <span class="hljs-number">1</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">this</span>.queryStack = queryStack;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 类初始化时为SET_METHODS和EXECUTE_METHODS赋值</span><br><span class="hljs-keyword">static</span> &#123;<br>  SET_METHODS.add(<span class="hljs-string">&quot;seString&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setInt&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setByte&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setShort&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setLong&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setDouble&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setFloat&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setTimestamp&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setDate&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setTime&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setArray&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setBigDecimal&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setAsciiStream&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setBinaryStream&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setBlob&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setBoolean&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setBytes&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setCharacterStream&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setClob&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setObject&quot;</span>);<br>  SET_METHODS.add(<span class="hljs-string">&quot;setNull&quot;</span>);<br><br>  EXECUTE_METHODS.add(<span class="hljs-string">&quot;execute&quot;</span>);<br>  EXECUTE_METHODS.add(<span class="hljs-string">&quot;executeUpdate&quot;</span>);<br>  EXECUTE_METHODS.add(<span class="hljs-string">&quot;executeQuery&quot;</span>);<br>  EXECUTE_METHODS.add(<span class="hljs-string">&quot;addBatch&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 获取参数值 这里好像是调用的Object的toString方法?</span><br><span class="hljs-keyword">protected</span> String <span class="hljs-title function_">getParameterValueString</span><span class="hljs-params">()</span> &#123;<br>  List&lt;Object&gt; typeList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Object&gt;(columnValues.size());<br>  <span class="hljs-keyword">for</span> (Object value : columnValues) &#123;<br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>      typeList.add(<span class="hljs-string">&quot;null&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      typeList.add(value + <span class="hljs-string">&quot;(&quot;</span> + value.getClass().getSimpleName() + <span class="hljs-string">&quot;)&quot;</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">parameters</span> <span class="hljs-operator">=</span> typeList.toString();<br>  <span class="hljs-keyword">return</span> parameters.substring(<span class="hljs-number">1</span>, parameters.length() - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 移除 original 里的&quot; \t\n\r\f&quot;字符，统一用&quot; &quot;替代</span><br><span class="hljs-keyword">protected</span> String <span class="hljs-title function_">removeBreakingWhitespace</span><span class="hljs-params">(String original)</span> &#123;<br>  <span class="hljs-type">StringTokenizer</span> <span class="hljs-variable">whitespaceStripper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTokenizer</span>(original);<br>  <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>  <span class="hljs-keyword">while</span> (whitespaceStripper.hasMoreTokens()) &#123;<br>    builder.append(whitespaceStripper.nextToken());<br>    builder.append(<span class="hljs-string">&quot; &quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> builder.toString();<br>&#125;<br><br><span class="hljs-comment">// 根据queryStack 返回 ===&gt; 或 &lt;===</span><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">prefix</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isInput)</span> &#123;<br>  <span class="hljs-type">char</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[queryStack * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>];<br>  Arrays.fill(buffer, <span class="hljs-string">&#x27;=&#x27;</span>);<br>  buffer[queryStack * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>  <span class="hljs-keyword">if</span> (isInput) &#123;<br>    buffer[queryStack * <span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;&gt;&#x27;</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    buffer[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;&lt;&#x27;</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buffer);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ResultSetLogger"><a href="#ResultSetLogger" class="headerlink" title="ResultSetLogger"></a>ResultSetLogger</h4><p>添加了日志的ResultSet代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultSetLogger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseJdbcLogger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>  <span class="hljs-comment">// BLOB type 类型为BLOB的值打印时做特殊处理</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Set&lt;Integer&gt; BLOB_TYPES = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Integer&gt;();<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">private</span> ResultSet rs;<br>  <span class="hljs-keyword">private</span> Set&lt;Integer&gt; blobColumns = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Integer&gt;();<br><br>  <span class="hljs-keyword">static</span> &#123;<br>    BLOB_TYPES.add(Types.BINARY);<br>    BLOB_TYPES.add(Types.BLOB);<br>    BLOB_TYPES.add(Types.CLOB);<br>    BLOB_TYPES.add(Types.LONGNVARCHAR);<br>    BLOB_TYPES.add(Types.LONGVARBINARY);<br>    BLOB_TYPES.add(Types.LONGVARCHAR);<br>    BLOB_TYPES.add(Types.NCLOB);<br>    BLOB_TYPES.add(Types.VARBINARY);<br>  &#125;<br><br>  <span class="hljs-comment">// 不向外提供构造函数</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">ResultSetLogger</span><span class="hljs-params">(ResultSet rs, Log statementLog, <span class="hljs-type">int</span> queryStack)</span> &#123;<br>    <span class="hljs-built_in">super</span>(statementLog, queryStack);<br>    <span class="hljs-built_in">this</span>.rs = rs;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] params)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-comment">// 不代理Object类的方法</span><br>      <span class="hljs-keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;<br>        <span class="hljs-keyword">return</span> method.invoke(<span class="hljs-built_in">this</span>, params);<br>      &#125;<br>      <span class="hljs-comment">// 先执行代理方法</span><br>      <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> method.invoke(rs, params);<br>      <span class="hljs-comment">// 如果要代理的方法是 next</span><br>      <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;next&quot;</span>.equals(method.getName())) &#123;<br>        <span class="hljs-keyword">if</span> (((Boolean) o)) &#123;<br>          rows++;<br>          <span class="hljs-comment">// 打印获取到的结果数据</span><br>          <span class="hljs-keyword">if</span> (isTraceEnabled()) &#123;<br>            <span class="hljs-type">ResultSetMetaData</span> <span class="hljs-variable">rsmd</span> <span class="hljs-operator">=</span> rs.getMetaData();<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">columnCount</span> <span class="hljs-operator">=</span> rsmd.getColumnCount();<br>            <span class="hljs-keyword">if</span> (first) &#123;<br>              first = <span class="hljs-literal">false</span>;<br>              printColumnHeaders(rsmd, columnCount);<br>            &#125;<br>            printColumnValues(columnCount);<br>          &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// 没有下一行了</span><br>          debug(<span class="hljs-string">&quot;     Total: &quot;</span> + rows, <span class="hljs-literal">false</span>);<br>        &#125;<br>      &#125;<br>      clearColumnInfo();<br>      <span class="hljs-keyword">return</span> o;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>      <span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(t);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 打印列名</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printColumnHeaders</span><span class="hljs-params">(ResultSetMetaData rsmd, <span class="hljs-type">int</span> columnCount)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    row.append(<span class="hljs-string">&quot;   Columns: &quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= columnCount; i++) &#123;<br>      <span class="hljs-keyword">if</span> (BLOB_TYPES.contains(rsmd.getColumnType(i))) &#123;<br>        blobColumns.add(i);<br>      &#125;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">colname</span> <span class="hljs-operator">=</span> rsmd.getColumnLabel(i);<br>      row.append(colname);<br>      <span class="hljs-keyword">if</span> (i != columnCount) &#123;<br>        row.append(<span class="hljs-string">&quot;, &quot;</span>);<br>      &#125;<br>    &#125;<br>    trace(row.toString(), <span class="hljs-literal">false</span>);<br>  &#125;<br><br>  <span class="hljs-comment">// 打印每一行对应列的值</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printColumnValues</span><span class="hljs-params">(<span class="hljs-type">int</span> columnCount)</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    row.append(<span class="hljs-string">&quot;       Row: &quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= columnCount; i++) &#123;<br>      String colname;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 类型为BLOB的值统一返回 &lt;&lt;BLOB&gt;&gt;</span><br>        <span class="hljs-keyword">if</span> (blobColumns.contains(i)) &#123;<br>          colname = <span class="hljs-string">&quot;&lt;&lt;BLOB&gt;&gt;&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          colname = rs.getString(i);<br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<br>        <span class="hljs-comment">// generally can&#x27;t call getString() on a BLOB column</span><br>        colname = <span class="hljs-string">&quot;&lt;&lt;Cannot Display&gt;&gt;&quot;</span>;<br>      &#125;<br>      row.append(colname);<br>      <span class="hljs-keyword">if</span> (i != columnCount) &#123;<br>        row.append(<span class="hljs-string">&quot;, &quot;</span>);<br>      &#125;<br>    &#125;<br>    trace(row.toString(), <span class="hljs-literal">false</span>);<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">   * Creates a logging version of a ResultSet</span><br><span class="hljs-comment">   * 提供静态方法用于创建代理类</span><br><span class="hljs-comment">   * @param rs - the ResultSet to proxy</span><br><span class="hljs-comment">   * @return - the ResultSet with logging</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ResultSet <span class="hljs-title function_">newInstance</span><span class="hljs-params">(ResultSet rs, Log statementLog, <span class="hljs-type">int</span> queryStack)</span> &#123;<br>    <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResultSetLogger</span>(rs, statementLog, queryStack);<br>    <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> ResultSet.class.getClassLoader();<br>    <span class="hljs-keyword">return</span> (ResultSet) Proxy.newProxyInstance(cl, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;ResultSet.class&#125;, handler);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="StatementLogger"><a href="#StatementLogger" class="headerlink" title="StatementLogger"></a>StatementLogger</h4><p>添加了日志的 Statement代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StatementLogger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseJdbcLogger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>  <br>  <span class="hljs-keyword">private</span> Statement statement;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">StatementLogger</span><span class="hljs-params">(Statement stmt, Log statementLog, <span class="hljs-type">int</span> queryStack)</span> &#123;<br>    <span class="hljs-built_in">super</span>(statementLog, queryStack);<br>    <span class="hljs-built_in">this</span>.statement = stmt;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] params)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-keyword">try</span> &#123; <br>      <span class="hljs-comment">// 同上</span><br>      <span class="hljs-keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;<br>        <span class="hljs-keyword">return</span> method.invoke(<span class="hljs-built_in">this</span>, params);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (EXECUTE_METHODS.contains(method.getName())) &#123;<br>        <span class="hljs-comment">// 如果是 execute、executeUpdate、executeQuery、addBatch等方法</span><br>        <span class="hljs-keyword">if</span> (isDebugEnabled()) &#123;<br>          debug(<span class="hljs-string">&quot; Executing: &quot;</span> + removeBreakingWhitespace((String) params[<span class="hljs-number">0</span>]), <span class="hljs-literal">true</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;executeQuery&quot;</span>.equals(method.getName())) &#123;<br>          <span class="hljs-comment">// 如果是查询方法返回 ResultSet 代理</span><br>          <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> (ResultSet) method.invoke(statement, params);<br>          <span class="hljs-keyword">return</span> rs == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : ResultSetLogger.newInstance(rs, statementLog, queryStack);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">// 其他方法直接执行</span><br>          <span class="hljs-keyword">return</span> method.invoke(statement, params);<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;getResultSet&quot;</span>.equals(method.getName())) &#123;<br>        <span class="hljs-comment">// getResultSet 也是返回 ResultSet 代理</span><br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> (ResultSet) method.invoke(statement, params);<br>        <span class="hljs-keyword">return</span> rs == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : ResultSetLogger.newInstance(rs, statementLog, queryStack);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;equals&quot;</span>.equals(method.getName())) &#123;<br>        <span class="hljs-comment">// equals 要判断代理类是否相同</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> params[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">return</span> ps <span class="hljs-keyword">instanceof</span> Proxy &amp;&amp; proxy == ps;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;hashCode&quot;</span>.equals(method.getName())) &#123;<br>        <span class="hljs-comment">// 返回代理类的hashCode</span><br>        <span class="hljs-keyword">return</span> proxy.hashCode();<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 执行原方法</span><br>        <span class="hljs-keyword">return</span> method.invoke(statement, params);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>      <span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(t);<br>    &#125;<br>  &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="PreparedStatementLogger"><a href="#PreparedStatementLogger" class="headerlink" title="PreparedStatementLogger"></a>PreparedStatementLogger</h4><p>添加了日志的 PreparedStatement 代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PreparedStatementLogger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseJdbcLogger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>  <span class="hljs-keyword">private</span> PreparedStatement statement;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">PreparedStatementLogger</span><span class="hljs-params">(PreparedStatement stmt, Log statementLog, <span class="hljs-type">int</span> queryStack)</span> &#123;<br>    <span class="hljs-built_in">super</span>(statementLog, queryStack);<br>    <span class="hljs-built_in">this</span>.statement = stmt;<br>  &#125;<br> <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] params)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;<br>        <span class="hljs-keyword">return</span> method.invoke(<span class="hljs-built_in">this</span>, params);<br>      &#125;          <br>      <span class="hljs-keyword">if</span> (EXECUTE_METHODS.contains(method.getName())) &#123;<br>        <span class="hljs-keyword">if</span> (isDebugEnabled()) &#123;<br>          <span class="hljs-comment">// 这里的信息似乎可读性不高</span><br>          debug(<span class="hljs-string">&quot;Parameters: &quot;</span> + getParameterValueString(), <span class="hljs-literal">true</span>);<br>        &#125; <br>        <span class="hljs-comment">// 清除之前存储的列信息</span><br>        clearColumnInfo();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;executeQuery&quot;</span>.equals(method.getName())) &#123;<br>          <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> (ResultSet) method.invoke(statement, params);<br>          <span class="hljs-keyword">return</span> rs == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : ResultSetLogger.newInstance(rs, statementLog, queryStack);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> method.invoke(statement, params);<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (SET_METHODS.contains(method.getName())) &#123;<br>        <span class="hljs-comment">// 调用SET_METHODS 包含的方法时先将保存列信息再调用原方法</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;setNull&quot;</span>.equals(method.getName())) &#123;<br>          setColumn(params[<span class="hljs-number">0</span>], <span class="hljs-literal">null</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          setColumn(params[<span class="hljs-number">0</span>], params[<span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> method.invoke(statement, params);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;getResultSet&quot;</span>.equals(method.getName())) &#123;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> (ResultSet) method.invoke(statement, params);<br>        <span class="hljs-keyword">return</span> rs == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : ResultSetLogger.newInstance(rs, statementLog, queryStack);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;getUpdateCount&quot;</span>.equals(method.getName())) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">updateCount</span> <span class="hljs-operator">=</span> (Integer) method.invoke(statement, params);<br>        <span class="hljs-keyword">if</span> (updateCount != -<span class="hljs-number">1</span>) &#123;<br>          <span class="hljs-comment">// 调用 getUpdateCount 方法时打印 更新数量 信息</span><br>          debug(<span class="hljs-string">&quot;   Updates: &quot;</span> + updateCount, <span class="hljs-literal">false</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> updateCount;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> method.invoke(statement, params);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>      <span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(t);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ConnectionLogger"><a href="#ConnectionLogger" class="headerlink" title="ConnectionLogger"></a>ConnectionLogger</h4><p>添加了日志的 Connection 代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConnectionLogger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseJdbcLogger</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>  <span class="hljs-keyword">private</span> Connection connection;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-title function_">ConnectionLogger</span><span class="hljs-params">(Connection conn, Log statementLog, <span class="hljs-type">int</span> queryStack)</span> &#123;<br>    <span class="hljs-built_in">super</span>(statementLog, queryStack);<br>    <span class="hljs-built_in">this</span>.connection = conn;<br>  &#125;<br> <br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] params)</span><br>      <span class="hljs-keyword">throws</span> Throwable &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;<br>        <span class="hljs-keyword">return</span> method.invoke(<span class="hljs-built_in">this</span>, params);<br>      &#125;    <br>      <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;prepareStatement&quot;</span>.equals(method.getName())) &#123; <br>        <span class="hljs-comment">// 调用 prepareStatement 或者 prepareCall 方法时</span><br>        <span class="hljs-comment">// 返回 PreparedStatement的代理</span><br>        <span class="hljs-keyword">if</span> (isDebugEnabled()) &#123;<br>          debug(<span class="hljs-string">&quot; Preparing: &quot;</span> + removeBreakingWhitespace((String) params[<span class="hljs-number">0</span>]), <span class="hljs-literal">true</span>);<br>        &#125;        <br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> (PreparedStatement) method.invoke(connection, params);<br>        stmt = PreparedStatementLogger.newInstance(stmt, statementLog, queryStack);<br>        <span class="hljs-keyword">return</span> stmt;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;prepareCall&quot;</span>.equals(method.getName())) &#123;<br>        <span class="hljs-keyword">if</span> (isDebugEnabled()) &#123;<br>          debug(<span class="hljs-string">&quot; Preparing: &quot;</span> + removeBreakingWhitespace((String) params[<span class="hljs-number">0</span>]), <span class="hljs-literal">true</span>);<br>        &#125;        <br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> (PreparedStatement) method.invoke(connection, params);<br>        stmt = PreparedStatementLogger.newInstance(stmt, statementLog, queryStack);<br>        <span class="hljs-keyword">return</span> stmt;<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;createStatement&quot;</span>.equals(method.getName())) &#123;<br>        <span class="hljs-comment">// 调用 createStatement 时返回 Statement的代理</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> (Statement) method.invoke(connection, params);<br>        stmt = StatementLogger.newInstance(stmt, statementLog, queryStack);<br>        <span class="hljs-keyword">return</span> stmt;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> method.invoke(connection, params);<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>      <span class="hljs-keyword">throw</span> ExceptionUtil.unwrapThrowable(t);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>日志模块的代码就讲解完了</p>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0-前言</title>
    <link href="/2023/05/02/0-%E5%89%8D%E8%A8%80/"/>
    <url>/2023/05/02/0-%E5%89%8D%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h3 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h3><p>    前段时间粗略地过了一遍mybatis源码。有些地方懂了、有些地方没懂。想着复习一下，加深一下理解、加上自己也想多写写博客，所以有了这个Mybatis源码解析系列</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><ol><li><p>我是跟着github上一个仓库（<a href="https://github.com/tuguangquan/mybatis">tuguangquan&#x2F;mybatis: mybatis源码中文注释 (github.com)</a>）进行得源码阅读，因此mybatis源码版本不是最新的（3.3.0-SNAPSHOT）</p></li><li><p>上面仓库里说的导入mybatis-parent模块只需要在pom文件中配置一下<parent>标签即可</parent></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- groupId、artifactId、version均可在</span><br><span class="hljs-comment">parentPom.xml中找到--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>38-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- parentPom文件的相对路径--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>parentPom.xml<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>要是对某个模块有不太懂的地方，可以结合官方提供的测试用例加深理解</p></li><li><p>要仔细了解代码中提到的相关issue，建议查看文件的git提交历史</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Mybatis源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>寻找重复数</title>
    <link href="/2022/10/15/%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0/"/>
    <url>/2022/10/15/%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="方法一：二分查找"><a href="#方法一：二分查找" class="headerlink" title="方法一：二分查找"></a>方法一：二分查找</h4><blockquote><p>定义 cnt[i] 表示nums数组中小于等于i的数有多少个</p></blockquote><p>cnt数组随数字i逐渐增大具有单调性。假设重复的数是target，如果cnt数组满足在target前有cnt[i]&lt;&#x3D;i,target后有cnt[i]&gt;i，那么我们可以就利用二分查找来找到target</p><p>下面证明上述假设：考虑<strong>nums</strong>数组一共有n+1个位置，我们填入的数字都在[1,n]间，有且只有一个数重复放了两次以上。对于所有测试用例，考虑一下两种情况：</p><ul><li>如果测试用例的数组中target出现了两次，其余的数各出现了一次。这个时候小于target的数i满足cnt[i]&#x3D;i&lt;&#x3D;i，大于等于target的数j满足cnt[j]&#x3D;j+1&gt;j</li><li>如果测试用例的数组中target出现了三次及以上，那么必然有一些数不在数组中了，这个时候我们可以用target去替换这些数，考虑替换的时候对target只出现两次的cnt数组的影响。如果替换的数i小于target，那么[i,target-1]的cnt值均减一，其他不变，满足条件。如果替换的数j大于target，那么[target,j-1]的cnt值均加一，其他不变，亦满足条件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findDuplicate</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, r = n - <span class="hljs-number">1</span>, ans = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>                <span class="hljs-keyword">if</span> (nums[i] &lt;= mid) &#123;<br>                    cnt++;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (cnt &lt;= mid) &#123;<br>                l = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                r = mid - <span class="hljs-number">1</span>;<br>                ans = mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(nlogn)，其中n为nums数组的长度。二分查找最多需要二分O(nlogn)次，每次判断的时候需要O(n)遍历nums数组求解小于等于mid的数的个数，因此总时间复杂度为O(nlogn)</li><li>空间复杂度：O(1)。我们只需要常数空间存放若干变量。</li></ul><h4 id="方法二：二进制"><a href="#方法二：二进制" class="headerlink" title="方法二：二进制"></a>方法二：二进制</h4><blockquote><p>将所有数按二进制位展开考虑如何找出重复的数，如果我们能确定重复数的每一位是1还是0就可以按位还原出重复的数是什么。</p></blockquote><p>考虑到第i位，我们记nums数组中二进制展开后第i位为1的数有x个，数字[1,n]这n个数二进制展开后第i位为1的数有y个。我们可以假设重复数的第i位为1当且仅当 x &gt; y</p><p>证明如下：</p><ul><li><p>如果测试用例的数组中target出现了两次，其余的数各出现了一次。</p><ul><li>如果target的第i位为1，那么nums数组中第i位为1的个数x恰好比y大1，即x&gt;y</li><li>如果target的第i位为0，那么nums数组中第i位为1的个数x和y相同，即x&lt;&#x3D;y</li></ul></li><li><p>如果测试用例的数组中target出现了三次及以上，那么必然有一些数不在nums数组中了，这个时候可以考虑用target去替换这些数，考虑替换的时候对target出现两次情况下的x的影响:</p><ul><li>如果被替换的数的第i位为1，并且target的第i位为1，那么x不变。满足x&gt;y</li><li>如果被替换的数的第i位为0，并且target的第i位为1，那么x+1。满足x&gt;y</li><li>如果被替换的数的第i位为1，并且target的第i位为0，那么x-1，满足x&lt;&#x3D;y</li><li>如果被替换的数的第i位为0，并且target的第i位为0，那么x不变，满足x&lt;&#x3D;y</li></ul><p>也就是说如果target的第i位为1，那么每次替换后只会使x不变或增大;如果为0，替换后只会使x不变或减小。始终满足x&gt;y时target第i位为1，否则为0，因此我们可以据此按位还原这个重复的数。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findDuplicate</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length, ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 确定二进制下最高位是多少</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">bit_max</span> <span class="hljs-operator">=</span> <span class="hljs-number">31</span>;<br>        <span class="hljs-keyword">while</span> (((n - <span class="hljs-number">1</span>) &gt;&gt; bit_max) == <span class="hljs-number">0</span>) &#123;<br>            bit_max -= <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">bit</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; bit &lt;= bit_max; ++bit) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>                <span class="hljs-keyword">if</span> ((nums[i] &amp; (<span class="hljs-number">1</span> &lt;&lt; bit)) != <span class="hljs-number">0</span>) &#123;<br>                    x += <span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">1</span> &amp;&amp; ((i &amp; (<span class="hljs-number">1</span> &lt;&lt; bit)) != <span class="hljs-number">0</span>)) &#123;<br>                    y += <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (x &gt; y) &#123;<br>                ans |= <span class="hljs-number">1</span> &lt;&lt; bit;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(nlogn)，其中n为nums数组的长度。O(logn)代表了我们枚举二进制数的位数个数，枚举第i位的时候需要遍历数组统计x和y的答案，因此总时间复杂度为O(nlogn)。</li><li>空间复杂度：O(1)。我们只需要常数空间存放若干变量。</li></ul><h4 id="方法三：快慢指针"><a href="#方法三：快慢指针" class="headerlink" title="方法三：快慢指针"></a>方法三：快慢指针</h4><p>对 nums 数组建图，每个位置 i 连一条 i→nums[i] 的边，就可以将问题转换成<a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/solution/huan-xing-lian-biao-ii-by-leetcode/">142. 环形链表 II</a></p><p>根据 Floyd判圈算法 （又称龟兔赛跑算法）来检测链表是否有环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findDuplicate</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, fast = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            slow = nums[slow];<br>            fast = nums[nums[fast]];<br>        &#125; <span class="hljs-keyword">while</span> (slow != fast);<br>        slow = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (slow != fast) &#123;<br>            slow = nums[slow];<br>            fast = nums[fast];<br>        &#125;<br>        <span class="hljs-keyword">return</span> slow;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>会议室II</title>
    <link href="/2022/09/25/%E4%BC%9A%E8%AE%AE%E5%AE%A4II/"/>
    <url>/2022/09/25/%E4%BC%9A%E8%AE%AE%E5%AE%A4II/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>丑数II</title>
    <link href="/2022/09/25/%E4%B8%91%E6%95%B0II/"/>
    <url>/2022/09/25/%E4%B8%91%E6%95%B0II/</url>
    
    <content type="html"><![CDATA[<p>给你一个正整数n，请你找出并返回第n个丑数</p><p>丑数就是只包含质因数2、3和5的正整数</p><h4 id="方法一：最小堆"><a href="#方法一：最小堆" class="headerlink" title="方法一：最小堆"></a>方法一：最小堆</h4><p>初始时堆为空。首先将最小的丑数1加入堆中。</p><p>每次取出堆顶元素x，则x是堆中最小的丑数，由于2x、3x、5x也是丑数，因此将2x、3x、5x加入堆。</p><p>在这个过程中可能会有重复的元素，需要用一个set进行去重，避免某个丑数多次加入堆</p><p>第n次从堆顶取出来的元素就是第n个丑数</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nthUglyNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        Set&lt;Long&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        PriorityQueue&lt;Long&gt; minHeap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;();<br>        set.add(<span class="hljs-number">1L</span>);<br>        minHeap.add(<span class="hljs-number">1L</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> minHeap.poll();<br>            <span class="hljs-keyword">if</span> (!set.contains(<span class="hljs-number">2</span>*t)) &#123;<br>                set.add(<span class="hljs-number">2</span>*t);<br>                minHeap.add(<span class="hljs-number">2</span>*t);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!set.contains(<span class="hljs-number">3</span>*t)) &#123;<br>                set.add(<span class="hljs-number">3</span>*t);<br>                minHeap.add(<span class="hljs-number">3</span>*t);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!set.contains(<span class="hljs-number">5</span>*t)) &#123;<br>                set.add(<span class="hljs-number">5</span>*t);<br>                minHeap.add(<span class="hljs-number">5</span>*t);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> minHeap.peek().intValue();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方法二：动态规划"><a href="#方法二：动态规划" class="headerlink" title="方法二：动态规划"></a>方法二：动态规划</h4><p>定义数组dp，其中dp[i]表示第i个丑数，第n个丑数即为dp[n]。</p><p>由于最小的丑数是1，因此dp[1]&#x3D;1。</p><p>定义三个指针p2、p3、p5，表示下一个丑数是当前指针指向的丑数乘以对应的质因数。初始时，三个指针的值都是1。</p><p>当2&lt;&#x3D;i&lt;&#x3D;n时，令dp[i]&#x3D;min(dp[p2]x2,dp[p3]x3,dp[p5]x5)，然后分别比较dp[i]和dp[p2]x2,dp[p3]x3,dp[p5]x5是否相等，如果相等则将相应的指针加1。</p><p>正确性证明：</p><blockquote><p>对于i&gt;1，在计算dp[i]时，指针px(x∈{2,3,5})的含义是使得dp[j] × x &gt; dp[i-1]的最小的下标j.即当j&gt;&#x3D;px时dp[j] × x &gt; dp[i-1],当j&lt;px时dp[j] × x &lt;&#x3D; dp[i-1]。</p><p>因此，对于i&gt;1，在计算dp[i]时，dp[p2]×2,dp[p3]×3,dp[p5]×5都大于dp[i-1],dp[p2-1]×2,dp[p3-1]×3,dp[p5-1]×5都小于或等于dp[i-1]。令dp[i] &#x3D; min(dp[p2]×2,dp[p3]×3,dp[p5]×5),则dp[i]是大于dp[i-1]的最小的丑数，即dp[i]是第i个丑数</p><p>在计算dp[i]之后，会更新三个指针p2、p3、p5，更新之后的指针将用于计算dp[i+1]，同样满足dp[i+1]是大于dp[i]的最小的丑数，即dp[i+1]是第i+1个丑数</p></blockquote><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nthUglyNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">long</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[n];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,p3 = <span class="hljs-number">0</span>,p5 = <span class="hljs-number">0</span>;<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;i++) &#123;<br>            dp[i] = Math.min(dp[p2]*<span class="hljs-number">2</span>,Math.min(dp[p3]*<span class="hljs-number">3</span>,dp[p5]*<span class="hljs-number">5</span>));<br>            <span class="hljs-keyword">if</span> (dp[i] == dp[p2]*<span class="hljs-number">2</span>) &#123;<br>                p2++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (dp[i] == dp[p3]*<span class="hljs-number">3</span>) &#123;<br>                p3++;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (dp[i] == dp[p5]*<span class="hljs-number">5</span>) &#123;<br>                p5++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)dp[n-<span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>优雅的解题思路(持续更新)</title>
    <link href="/2022/09/17/%E4%BC%98%E9%9B%85%E7%9A%84%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/"/>
    <url>/2022/09/17/%E4%BC%98%E9%9B%85%E7%9A%84%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<hr><h5 id="215-数组中的第K个最大元素-力扣（LeetCode）"><a href="#215-数组中的第K个最大元素-力扣（LeetCode）" class="headerlink" title="215. 数组中的第K个最大元素 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/">215. 数组中的第K个最大元素 - 力扣（LeetCode）</a></h5><p>假设数组的左边界为left、右边界为right</p><p>改造快速排序求解。当通过partition确定选择的元素的位置i之后，判断i和right-k+1的大小</p><ul><li>如果 i &lt; right-k+1，在数组左边进行同样的操作（操作之前先更新left、right、k的值）</li><li>i &gt; right-k+1，在数组右边进行同样的操作（操作之前先更新left、right、k的值）</li><li>直到i &#x3D; right-k+1。</li></ul><hr><h5 id="220-存在重复元素-III-力扣（LeetCode）"><a href="#220-存在重复元素-III-力扣（LeetCode）" class="headerlink" title="220. 存在重复元素 III - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/contains-duplicate-iii/">220. 存在重复元素 III - 力扣（LeetCode）</a></h5><p>给你一个整数数组 nums 和两个整数 k 和 t 。请你判断是否存在 两个不同下标 i 和 j，使得 abs(nums[i] - nums[j]) &lt;&#x3D; t ，同时又满足 abs(i - j) &lt;&#x3D; k 。</p><p>思路：</p><ul><li>滑动窗口+有序集合<br>维护一个TreeSet（称为set）,set中最多有k个元素，当超过k个元素时，移除set中存在时间最长的元素。<br>对nums中的每个元素nums[i]，判断set中是否有元素在[nums[i]-t,nums[i]+t]范围内。<ul><li>如果存在这样一个元素，直接返回</li><li>如果不存在这样一个元素，将nums[i]加入set后继续检测nums[i+1]</li></ul></li><li>桶<br>对于元素x，其影响的区间为[x-t,x+t]。于是我们可以设定一个大小为t+1的桶。<ul><li>如果两个元素同属一个桶，那么这两个元素必然满足条件</li><li>如果两个元素属于相邻桶，那么我们需要校验这两个元素差值的绝对值是否不超过t</li><li>如果两个元素既不属于同一个桶，也不属于相邻桶，那么这两个元素必然不满足条件</li></ul></li></ul><hr><h5 id="222-完全二叉树的节点个数-力扣（LeetCode）"><a href="#222-完全二叉树的节点个数-力扣（LeetCode）" class="headerlink" title="222. 完全二叉树的节点个数 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/count-complete-tree-nodes/">222. 完全二叉树的节点个数 - 力扣（LeetCode）</a></h5><p>二分查找 + 位运算</p><p>假设完全二叉树的层数为h，则完全二叉树的节点数量在[2^h,2^(h+1)-1]之间</p><ul><li>在区间内使用二分查找算法，得到需要判断的数k</li><li>判断第k个节点是否存在：<ul><li>第k个节点位于第h层，则k有h+1位。</li><li>除掉最高位的1之后，从根节点开始，按照从高到低遍历k的二进制位。</li><li>如果二进制位为0，表示移动到左子节点；如果二进制位为1，表示移动到右子节点。</li><li>当移动到倒数第二位时，其下一个要移动到的子节点就是第k个节点。由此可以知道第k个节点是否存在</li></ul></li><li>如果第k个节点存在，则节点个数一定大于或等于k。如果第k个节点不存在，则节点个数一定小于k</li><li>得到新的节点个数区间后回到第一步继续进行二分查找直到得到节点个数</li></ul><hr><h5 id="235-二叉搜索树的最近公共祖先-力扣（LeetCode）"><a href="#235-二叉搜索树的最近公共祖先-力扣（LeetCode）" class="headerlink" title="235. 二叉搜索树的最近公共祖先 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/">235. 二叉搜索树的最近公共祖先 - 力扣（LeetCode）</a></h5><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><p>思路：</p><ul><li>找二叉树的最近公共祖先<ul><li>定义fx表示x节点的子树中是否包含p节点或q节点，如果包含则为true，否则为false。 那么p和q的最近公共祖先一定满足条件<br><img src="/2022/09/17/%E4%BC%98%E9%9B%85%E7%9A%84%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF/1663503015805.png" class><br>当x的左子树和右子树分别包含p和q、x就是p或q并且x的左子树或右子树包含另一个节点时，x为二叉树的最近公共祖先。这两个条件分别对应上面的两个表达式。<br>找到最近公共祖先后，由fx的定义可以保证不会误找出新的最近公共祖先</li><li>记录每个节点的父节点，可以得到p和q到达根节点的路径，两条路径从下往上第一个交点就是p和q的最近公共祖先</li></ul></li><li>找二叉搜索树的最近公共祖先<ul><li>根据二叉搜索树的性质可以直接得到p和q到达根节点的路径，然后算出最近公共祖先</li><li>如果p和q分别在x的两边（包括x就是p或q），那么x就是p和q的最近公共祖先。根据二叉搜索树的性质可以通过p、q和节点root的值进行比较快速找到x</li></ul></li></ul><h5 id="240-搜索二维矩阵-II-力扣（LeetCode）"><a href="#240-搜索二维矩阵-II-力扣（LeetCode）" class="headerlink" title="240. 搜索二维矩阵 II - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/search-a-2d-matrix-ii/">240. 搜索二维矩阵 II - 力扣（LeetCode）</a></h5><p>编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target 。该矩阵具有以下特性：</p><ul><li>每行的元素从左到右升序排列。</li><li>每列的元素从上到下升序排列。</li></ul><p>思路:</p><p>从矩阵的右上方(0,n-1)开始搜索。在每一步的搜索过程中，如果我们位于位置 (x,y)，那么我们希望在以<em>matrix</em>的左下角为左下角、以(x,y)为右上角的矩阵中进行搜索，即行的范围为 [x,m-1]，列的范围为[0,y]：</p><p>对于位于位置（x,y）的数matrix[x,y],我们将其和target比较</p><ul><li>matrix[x,y] &lt; target 可以推断出target一定不在第x行（第x行的元素都严格小于target），将x+1，然后重新进行比较</li><li>matrix[x,y] &gt; target 同理将y-1后重新进行比较</li><li>matrix[x,y] &#x3D; target 找到target，返回结果</li></ul><p>最后如果x&gt;&#x3D;m 或 y&lt;0，表示矩阵matrix中没有值为target的数</p><hr><h5 id="254-因子的组合-力扣（LeetCode）"><a href="#254-因子的组合-力扣（LeetCode）" class="headerlink" title="254. 因子的组合 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/factor-combinations/">254. 因子的组合 - 力扣（LeetCode）</a></h5><p>请实现一个函数，该函数接收一个整数 <em>n</em> 并返回该整数所有的因子组合。</p><p>思路:</p><ul><li><p>dfs递归：遍历范围为i&#x3D;2~√n的因子</p></li><li><p>单层递归：如果i是n的因子，该层结果中添加一个[i，n&#x2F;&#x2F;i]组合</p></li><li><p>递归处理：</p><ul><li>查看n&#x2F;&#x2F;i能否从因子i开始被拆分成多因子组合sub序列</li><li>如果sub存在，则在该层结果中继续添加sub+[i]为一个新的组合</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>只出现一次的数字III</title>
    <link href="/2022/09/17/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97III/"/>
    <url>/2022/09/17/%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97III/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/single-number-iii/">LeetCode链接</a></p><p>题目描述如下：</p><blockquote><p>给你一个整数数组 <code>nums</code>，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按 <strong>任意顺序</strong> 返回答案。</p></blockquote><p><strong>思路一</strong>：</p><blockquote><p>Map统计整数数组中元素出现的次数</p></blockquote><p><strong>代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] singleNumber(<span class="hljs-type">int</span>[] nums) &#123;<br>        Map&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++) &#123;<br>            map.computeIfPresent(nums[i],(key,value) -&gt; value+<span class="hljs-number">1</span>);<br>            map.putIfAbsent(nums[i],<span class="hljs-number">1</span>);<br>        &#125;<br>        List&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Integer,Integer&gt; entry:map.entrySet()) &#123;<br>            <span class="hljs-keyword">if</span> (entry.getValue() == <span class="hljs-number">1</span>) &#123;<br>                ans.add(entry.getKey());<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;ans.get(<span class="hljs-number">0</span>),ans.get(<span class="hljs-number">1</span>)&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>复杂度：</strong></p><ul><li>时间复杂度：O(n),其中n为数组长度</li><li>空间复杂度：O(n),n为哈希表使用的空间</li></ul><hr><p><strong>思路二</strong>：</p><blockquote><p>根据异或运算等位运算知识</p></blockquote><p>假设整数数组nums中只出现一次的数字分别为x1和x2、将nums中所有元素异或得到x，那么根据异或运算的性质</p><p>a ^ a &#x3D; 0 可知x1 ^ x2 &#x3D; x并且x1和x2不等(x1和x2都只出现了一次)。</p><p>根据x &amp; (-x)算出x的二进制表示中最低位的1，记为第i位。易知x1和x2的二进制表示的第i位一定不同，即一个数的第i位是0，另一个数的第i位是1</p><p>同时我们可以将nums中的数分为两类，一类数的二进制表示的第i位是0、一类数的二进制表示的第i位是0。</p><p>分别将这两类数的所有元素异或得到y1和y2，由于除了x1和x2其他的数都出现了两次，可以知道y1&#x3D;x1、y2&#x3D;x2</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] singleNumber(<span class="hljs-type">int</span>[] nums) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++) &#123;<br>            x = x ^ nums[i];<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> x &amp; (-x);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,x2 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++) &#123;<br>            <span class="hljs-comment">// 第i位为1</span><br>            <span class="hljs-keyword">if</span> ((nums[i] &amp; t) == t) &#123;<br>                x1 = x1 ^ nums[i];<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                x2 = x2 ^ nums[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;x1,x2&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>复杂度：</strong></p><ul><li>时间复杂度：O(n),其中n位数组长度</li><li>空间复杂度：O(1),算法用到了常数级别的空间</li></ul>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>N皇后问题</title>
    <link href="/2022/08/29/N%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/"/>
    <url>/2022/08/29/N%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="基于集合的回溯"><a href="#基于集合的回溯" class="headerlink" title="基于集合的回溯"></a>基于集合的回溯</h3><p>思路：按行遍历。维护三个集合<em>columns</em>、<em>diagonals1</em>和<em>diagonals2</em>分别表示每一列以及两个方向的每条斜线是否有皇后</p><p>代码如下:0-</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;List&lt;String&gt;&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">solveNQueens</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">int</span>[] column = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-type">int</span>[] slashL = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span>[] slashR = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>];<br>        <span class="hljs-type">boolean</span>[][] board = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n][n];<br>        dfs(board,column,slashL,slashR,n,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">boolean</span>[][] board,<span class="hljs-type">int</span>[] column,<span class="hljs-type">int</span>[] slashL,<span class="hljs-type">int</span>[] slashR,<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> rowIndex)</span> &#123;<br>        <span class="hljs-keyword">if</span> (rowIndex == n) &#123;<br>            List&lt;String&gt; t = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) &#123;<br>                <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;j++) &#123;<br>                    <span class="hljs-keyword">if</span> (board[i][j]) &#123;<br>                        sb.append(<span class="hljs-string">&#x27;Q&#x27;</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        sb.append(<span class="hljs-string">&#x27;.&#x27;</span>);<br>                    &#125;<br>                &#125;<br>                t.add(sb.toString());<br>            &#125;<br>            ans.add(t);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) &#123;<br>            <span class="hljs-keyword">if</span> (column[i] == <span class="hljs-number">0</span> &amp;&amp; slashL[i+rowIndex] == <span class="hljs-number">0</span> &amp;&amp; slashR[rowIndex-i+n-<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>) &#123;<br>                column[i] = <span class="hljs-number">1</span>;<br>                slashL[i+rowIndex] = <span class="hljs-number">1</span>;<br>                slashR[rowIndex-i+n-<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>                board[rowIndex][i] = <span class="hljs-literal">true</span>;<br>                dfs(board,column,slashL,slashR,n,rowIndex+<span class="hljs-number">1</span>);<br>                column[i] = <span class="hljs-number">0</span>;<br>                slashL[i+rowIndex] = <span class="hljs-number">0</span>;<br>                slashR[rowIndex-i+n-<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>                board[rowIndex][i] = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基于位运算的回溯"><a href="#基于位运算的回溯" class="headerlink" title="基于位运算的回溯"></a>基于位运算的回溯</h3><p>思路：使用三个整数<em>columns</em>、<em>diagonals1</em>和<em>diagonals2</em>分别记录每一列和两个方向的每条斜线上是否有皇后</p><blockquote><p>此方法的空间复杂度可由基于集合回溯的O(N)降为O(1)</p></blockquote><p><em>columns</em>、<em>diagonals1</em>和<em>diagonals2</em>三个整数的低N位分别对应于棋盘中的N列，其中棋盘的最左列对应整数的最低二进制位、最右列对应整数的第N-1个二进制位</p><p>约定用0表示可以放置皇后的位置、用1表示不能放置皇后的位置。如n&#x3D;4 columns&#x3D;0101(2)表示第0、2列不能放置皇后；第1、3列可以放置皇后</p><p>下面说明每次放置皇后后如何更新三个整数的值</p><img src="/2022/08/29/N%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/1661847071002.png" class><br><br><p>如上图所示，在第1行第4列放置皇后后，考虑第2行能在哪些列放置皇后</p><blockquote><p>首先显然可以得到第2、4列不能放置皇后</p><p>然后根据从左上到右下的斜线可知第4、5列不能放置皇后。第4列为其前2行的第2列向右下方移动两步的位置、第5列为其前1行的第4列向右下方移动一步的位置</p><p>根据从右上到左下的斜线可知第0、3列不能放置皇后。第0列为其前2行的第2列向右下方移动两步的位置、第3列为其前1行的第4列向右下方移动一步的位置</p></blockquote><p>简单归纳可以得到三个整数的更新计算方法：</p><ul><li>初始时三个整数都置为0，表示没有放置任何皇后</li><li>在放置当前皇后时，如果皇后放置在第i列，则将三个整数的第i（从低到高）位置为1</li><li>进入下一行时，columns值保持不变，diagonals1左移1位（当前行不能放置皇后位置的右下方距离一步的位置也不能放置皇后），diagonals2右移1位（当前行不能放置皇后位置的左下方距离一步的位置也不能放置皇后）</li></ul><p>每次放置皇后时，通过三个整数的按位或运算的结果可以得到可以和不可以放置皇后的位置</p><p>可以通过（2^n-1）&amp; (~(columns | diagonals1 | diagonals2))得到所有可以放置皇后的位置（第i位为1表示第i位可以放置皇后），然后遍历这些位置，得到所有可能的解</p><p>遍历可以放置皇后的位置时，可以利用以下两个按位与运算的性质：</p><ul><li>x <strong>&amp;</strong> (−x) 可以获得 x 的二进制表示中的最低位的 1 的位置</li><li>x <strong>&amp;</strong> (x−1) 可以将 x 的二进制表示中的最低位的 1 置成 0</li></ul><p>具体做法是，每次获得可以放置皇后的位置中的最低位，并将该位的值置成 0，尝试在该位置放置皇后。这样即可遍历每个可以放置皇后的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">solveNQueens</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">int</span>[] queens = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        Arrays.fill(queens, -<span class="hljs-number">1</span>);<br>        List&lt;List&lt;String&gt;&gt; solutions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;List&lt;String&gt;&gt;();<br>        solve(solutions, queens, n, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> solutions;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(List&lt;List&lt;String&gt;&gt; solutions, <span class="hljs-type">int</span>[] queens, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> row, <span class="hljs-type">int</span> columns, <span class="hljs-type">int</span> diagonals1, <span class="hljs-type">int</span> diagonals2)</span> &#123;<br>        <span class="hljs-keyword">if</span> (row == n) &#123;<br>            List&lt;String&gt; board = generateBoard(queens, n);<br>            solutions.add(board);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">availablePositions</span> <span class="hljs-operator">=</span> ((<span class="hljs-number">1</span> &lt;&lt; n) - <span class="hljs-number">1</span>) &amp; (~(columns | diagonals1 | diagonals2));<br>            <span class="hljs-keyword">while</span> (availablePositions != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">position</span> <span class="hljs-operator">=</span> availablePositions &amp; (-availablePositions);<br>                availablePositions = availablePositions &amp; (availablePositions - <span class="hljs-number">1</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">column</span> <span class="hljs-operator">=</span> Integer.bitCount(position - <span class="hljs-number">1</span>);<br>                queens[row] = column;<br>                solve(solutions, queens, n, row + <span class="hljs-number">1</span>, columns | position, (diagonals1 | position) &lt;&lt; <span class="hljs-number">1</span>, (diagonals2 | position) &gt;&gt; <span class="hljs-number">1</span>);<br>                queens[row] = -<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">generateBoard</span><span class="hljs-params">(<span class="hljs-type">int</span>[] queens, <span class="hljs-type">int</span> n)</span> &#123;<br>        List&lt;String&gt; board = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">char</span>[] row = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[n];<br>            Arrays.fill(row, <span class="hljs-string">&#x27;.&#x27;</span>);<br>            row[queens[i]] = <span class="hljs-string">&#x27;Q&#x27;</span>;<br>            board.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(row));<br>        &#125;<br>        <span class="hljs-keyword">return</span> board;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>据Leetcode评论区：当数据量达到15时，基于集合的回溯会超时，基于位运算的回溯刚好能过</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
